id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3018,Modifiability,config,configuration,3018,"o your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3058,Modifiability,config,config,3058," hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `gi",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1211,Safety,avoid,avoid,1211,"rom other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. Ho",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1392,Availability,down,downloads,1392,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1538,Availability,avail,available,1538,"tributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software st",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1642,Availability,avail,available,1642,"blic License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-on",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2803,Availability,avail,available,2803,"alytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (gre",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3140,Availability,down,downloads,3140,"tml>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfou",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3443,Availability,down,download,3443,"t with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for altern",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3590,Availability,down,downloads,3590," * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-l",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4531,Availability,down,download,4531,"wnload one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4747,Availability,echo,echo,4747,"ATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: ba",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4837,Availability,echo,echo,4837,"plicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5114,Availability,down,download,5114,"s (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5236,Availability,down,download,5236,"into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That la",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5455,Availability,echo,echo,5455,"; # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a pe",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5551,Availability,echo,echo,5551,"38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5765,Availability,down,download,5765,"si4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is sum",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5933,Availability,down,downloaded,5933,"/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should ch",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6555,Availability,echo,echo,6555,"conda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PA",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14482,Availability,robust,robust,14482,"nimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-envi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:15519,Availability,avail,available,15519,"n ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; .. >>> conda activate p4env; ..; .. .. code-block:: bash; ..; .. # Mac; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; .. >>> conda activate p4env. .. _`sec:quickconda`:. Quick Installation; ^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour|. Installs; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-lat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:15533,Availability,down,download,15533,"n ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; .. >>> conda activate p4env; ..; .. .. code-block:: bash; ..; .. # Mac; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; .. >>> conda activate p4env. .. _`sec:quickconda`:. Quick Installation; ^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour|. Installs; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-lat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17045,Availability,echo,echo,17045," conda activate p4env. .. _`sec:quickconda`:. Quick Installation; ^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour|. Installs; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17678,Availability,echo,echo,17678,"onda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18452,Availability,avail,availability,18452,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18567,Availability,down,downloading,18567,":`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19071,Availability,down,download,19071,"sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19760,Availability,down,downloaded,19760,"with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21145,Availability,avail,available,21145,"TH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21173,Availability,avail,available,21173,"TH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21801,Availability,avail,availability,21801,"/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud a",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22590,Availability,down,downloading,22590,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:23068,Availability,down,downloaded,23068,"d adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https://github.com/psi4/psi4/wiki; .. Binary: https://anaconda.org/psi4; .. You",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:28103,Availability,avail,available,28103,"ild. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, and gcc libraries are absent because statically linked; ..; .. .. code-block:: console; ..; .. >>> conda install co",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1255,Deployability,install,install,1255,"; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/c",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1321,Deployability,update,updated,1321,"; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/c",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1409,Deployability,install,installs,1409,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1499,Deployability,update,updated,1499,"tributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software st",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1583,Deployability,install,installers,1583,"without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * upda",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2596,Deployability,update,updated,2596,"er platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/M",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2694,Deployability,install,install,2694," Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3073,Deployability,install,installation,3073,"tml>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfou",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3156,Deployability,install,installs,3156,"tml>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfou",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3391,Deployability,install,install,3391,"t with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for altern",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3432,Deployability,install,installer,3432,"t with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for altern",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3558,Deployability,install,installers,3558,"cluding |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3918,Deployability,install,install,3918,"`Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --t",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3959,Deployability,install,installer,3959,"`Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --t",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4176,Deployability,install,installers,4176,"`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5816,Deployability,install,installs,5816,"/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should ch",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5898,Deployability,install,install,5898,"/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should ch",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6022,Deployability,install,install,6022,"# Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6055,Deployability,install,install,6055,"O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6821,Deployability,install,installs,6821,">> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other prog",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6887,Deployability,install,installer,6887,">> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other prog",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7011,Deployability,install,install,7011,"ollowing line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substitut",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7151,Deployability,install,install,7151,"conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsm",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7448,Deployability,release,releases,7448,"directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environme",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8857,Deployability,update,update,8857,"with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad6",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8928,Deployability,update,update,8928,"reation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8963,Deployability,install,installation,8963,"reation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8998,Deployability,release,release,8998,"reation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9165,Deployability,update,update,9165,"f ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> cond",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9211,Deployability,update,update,9211,"f ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> cond",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9297,Deployability,install,installers,9297," package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9320,Deployability,update,update,9320," package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9353,Deployability,update,update,9353,"tions; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--di",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9388,Deployability,install,installation,9388,"tions; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--di",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9503,Deployability,update,update,9503,"ow, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help sho",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9559,Deployability,update,update,9559,"ow, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help sho",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9625,Deployability,install,install,9625,"""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 aga",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9846,Deployability,install,install,9846,". How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11123,Deployability,install,install,11123,".7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; bui",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11603,Deployability,deploy,deployments,11603," -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11970,Deployability,install,install,11970,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12190,Deployability,release,release,12190,"ons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12984,Deployability,install,install,12984,"r Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured `",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13069,Deployability,install,install,13069,"se your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc run",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13162,Deployability,install,installer,13162,"release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13761,Deployability,install,install,13761,"le-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13956,Deployability,install,installer,13956,"-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14119,Deployability,install,install,14119,"e conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from th",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14665,Deployability,install,installation,14665,"++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.con",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:15327,Deployability,install,installer,15327,"ge, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; .. >>> conda activate p4env; ..; .. .. code-block:: bash; ..; .. # Mac; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; .. >>> conda activate p4env. .. _`sec:quickconda`:. Quick Installation; ^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour|. Installs; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/min",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17183,Deployability,update,update,17183,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17277,Deployability,install,install,17277,"OME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole ins",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17376,Deployability,install,installation,17376,"n environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17889,Deployability,install,installation,17889,"st-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O """,MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18024,Deployability,install,installation,18024," # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. G",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18293,Deployability,install,installation,18293,"(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in you",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18470,Deployability,install,install,18470,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19019,Deployability,install,installer,19019,"the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient t",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19271,Deployability,install,install,19271,"on takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19632,Deployability,install,installation,19632,"l or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19746,Deployability,install,installer,19746,"with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20438,Deployability,update,updates,20438,"ux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20521,Deployability,update,update,20521,"_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any oth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21033,Deployability,install,install,21033,"TH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21221,Deployability,install,install,21221,"urn correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works fo",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21301,Deployability,install,install,21301,"-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bas",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21534,Deployability,install,installed,21534,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21735,Deployability,install,installing,21735,"/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud a",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21900,Deployability,install,installation,21900,"/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud a",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21934,Deployability,install,installed,21934,"hannels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22477,Deployability,install,installation,22477,"to a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |########################################",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22620,Deployability,install,installs,22620,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22775,Deployability,install,install,22775,"you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22956,Deployability,install,installation,22956,"en the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:23765,Deployability,install,installing,23765,">>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https://github.com/psi4/psi4/wiki; .. Binary: https://anaconda.org/psi4; .. Youtube: https://www.youtube.com/user/psitutorials; ..; .. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; .. unsetenv PSIDATADIR; .. setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. For sh/bash command-line use, add to shell or ~/.bashrc file:; .. unset PSIDATADIR; .. export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy...................",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:24682,Deployability,update,update-,24682,"###################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https://github.com/psi4/psi4/wiki; .. Binary: https://anaconda.org/psi4; .. Youtube: https://www.youtube.com/user/psitutorials; ..; .. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; .. unsetenv PSIDATADIR; .. setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. For sh/bash command-line use, add to shell or ~/.bashrc file:; .. unset PSIDATADIR; .. export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy..........................................PASSED; .. SAPT0 Eelst.......................................................PASSED; .. SAPT0 Eexch.......................................................PASSED; .. SAPT0 Eind........................................................PASSED; .. SAPT0 Edisp.......................................................PASSED; .. SAPT0 Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26128,Deployability,install,installation,26128,"Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| n",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26223,Deployability,install,install,26223,"##########################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26248,Deployability,release,release,26248,"##########################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26306,Deployability,install,install,26306,"re environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26338,Deployability,install,install,26338,"re environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26383,Deployability,install,install,26383,"ar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26408,Deployability,release,release,26408,"ar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26476,Deployability,install,install,26476," session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26549,Deployability,release,release,26549,"eneral psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Init",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26593,Deployability,update,update,26593,"und through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" inst",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26630,Deployability,install,install,26630,", ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and pyth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26645,Deployability,release,release,26645,", ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and pyth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26953,Deployability,install,install,26953,"h:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. *",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27095,Deployability,install,install,27095," printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27177,Deployability,install,install,27177,"^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # un",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27219,Deployability,install,install,27219,"^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # un",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27274,Deployability,install,install,27274,"t; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27366,Deployability,install,install,27366,") Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest import",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27492,Deployability,update,update,27492,"c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27539,Deployability,install,install,27539,"lock:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (than",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27871,Deployability,install,install,27871," (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:28005,Deployability,release,released,28005," current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:29114,Deployability,install,install,29114,". .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, and gcc libraries are absent because statically linked; ..; .. .. code-block:: console; ..; .. >>> conda install conda-build # needed for next command; .. >>> conda inspect linkages psi4; .. python-2.7.9-2:; .. libpython2.7.so.1.0 (lib/libpython2.7.so.1.0); .. system-5.8-1:; .. libm.so.6 (lib/libm.so.6); .. system:; .. libc.so.6 (/lib64/libc.so.6); .. libdl.so.2 (/lib64/libdl.so.2); .. libpthread.so.0 (/lib64/libpthread.so.0); .. librt.so.1 (/lib64/librt.so.1); .. libutil.so.1 (/lib64/libutil.so.1); .. linux-vdso.so.1 (); .. not found:. .. comment find out about the current environment.; .. comment pythonhome should be empty; .. comment pythonpath should be empty or set to non-interfering packages (*e.g.*, qcdb); .. comment ld_library_path shouldn't contain anything with a libpython; .. comment >>> conda info -a. ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3807,Energy Efficiency,green,green,3807,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:10913,Energy Efficiency,adapt,adapt,10913,"q:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11698,Energy Efficiency,adapt,adapt,11698,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; enco",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8344,Integrability,depend,dependencies,8344,"c or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda updat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8403,Integrability,depend,dependencies,8403,"get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (rou",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9800,Integrability,depend,dependencies,9800,".anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-lev",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:10551,Integrability,message,message,10551,"cOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12130,Integrability,depend,dependencies,12130,"ons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14342,Integrability,depend,dependencies,14342,"l the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda inst",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:15098,Integrability,depend,dependencies,15098,"ld additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; .. >>> conda activate p4env; ..; .. .. code-block:: bash; ..; .. # Mac; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; .. >>> conda activate p4env. .. _`sec:quickconda`:. Quick Installation;",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20757,Integrability,depend,dependency,20757,"sion of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, inst",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21454,Integrability,depend,dependencies,21454,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26765,Integrability,depend,dependency,26765,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27673,Integrability,depend,dependency,27673,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:28595,Integrability,rout,routine,28595,"all nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, and gcc libraries are absent because statically linked; ..; .. .. code-block:: console; ..; .. >>> conda install conda-build # needed for next command; .. >>> conda inspect linkages psi4; .. python-2.7.9-2:; .. libpython2.7.so.1.0 (lib/libpython2.7.so.1.0); .. system-5.8-1:; .. libm.so.6 (lib/libm.so.6); .. system:; .. libc.so.6 (/lib64/libc.so.6); .. libdl.so.2 (/lib64/libdl.so.2); .. libpthread.so.0 (/lib64/libpthread.so.0); .. librt.so.1 (/lib64/librt.so.1); .. libutil.so.1 (/lib64/libutil.so.1); .. linux-vdso.so.1 (); .. not ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2733,Modifiability,plugin,plugins,2733,"architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2860,Modifiability,plugin,plugins,2860,"roduces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`.",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6694,Modifiability,variab,variable,6694," psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --tes",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:10913,Modifiability,adapt,adapt,10913,"q:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11698,Modifiability,adapt,adapt,11698,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; enco",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12506,Modifiability,config,configure,12506,"ers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12880,Modifiability,plugin,plugins,12880,"h-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and pyth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12922,Modifiability,variab,variables,12922,"h-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and pyth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17213,Modifiability,config,config,17213,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17817,Modifiability,variab,variable,17817,".sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. ..",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20863,Modifiability,config,config,20863,"to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21493,Modifiability,sandbox,sandbox,21493,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26083,Modifiability,variab,variables,26083,"Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| n",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26720,Modifiability,sandbox,sandbox,26720,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27628,Modifiability,sandbox,sandbox,27628,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2469,Performance,perform,performance,2469,"2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12856,Performance,cache,cache,12856,"h-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and pyth",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26755,Performance,load,loaded,26755,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27663,Performance,load,loaded,27663,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21600,Safety,avoid,avoid,21600,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2434,Security,access,access,2434,"/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2628,Security,access,accessible,2628,"er platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/M",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18599,Security,firewall,firewall,18599,":`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3799,Testability,test,test,3799,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4923,Testability,log,log,4923,"si4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe`",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4932,Testability,log,log,4932,"si4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe`",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4982,Testability,test,test,4982,"si4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe`",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5637,Testability,log,log,5637,"t-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bash",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5646,Testability,log,log,5646,"t-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bash",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5696,Testability,test,test,5696,"t-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bash",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6228,Testability,test,test,6228," curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6252,Testability,test,tested,6252," -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribut",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6670,Testability,log,log,6670," psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --tes",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6679,Testability,log,log,6679," psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --tes",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7685,Testability,test,test,7685," log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anacond",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17134,Testability,log,log,17134,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17143,Testability,log,log,17143,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17361,Testability,test,test,17361," or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far lon",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17371,Testability,test,test,17371,"n environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17448,Testability,test,tested,17448,"t either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install fr",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17793,Testability,log,log,17793,".sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. ..",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17802,Testability,log,log,17802,".sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. ..",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18443,Testability,test,test,18443,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18627,Testability,log,login,18627,":`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20199,Testability,log,log,20199," have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too.",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20211,Testability,log,log,20211," have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too.",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21493,Testability,sandbox,sandbox,21493,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21685,Testability,test,test,21685,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22692,Testability,test,test,22692,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26720,Testability,sandbox,sandbox,26720,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27628,Testability,sandbox,sandbox,27628,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1443,Usability,guid,guides,1443,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2086,Usability,guid,guide,2086,"onda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installa",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2322,Usability,guid,guide,2322,"been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`s",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6016,Usability,guid,guide,6016,"# Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21383,Usability,guid,guide,21383,"th/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # c",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:25507,Usability,undo,undo,25507,"tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy..........................................PASSED; .. SAPT0 Eelst.......................................................PASSED; .. SAPT0 Eexch.......................................................PASSED; .. SAPT0 Eind........................................................PASSED; .. SAPT0 Edisp.......................................................PASSED; .. SAPT0 Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4.",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1736,Availability,down,downloads,1736,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2232,Availability,avail,available,2232,"ords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:3913,Availability,avail,available,3913,"inking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 1",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:4065,Availability,avail,available,4065,"rget: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.110",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:5369,Availability,down,downloaded,5369,"itional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabil",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1751,Deployability,configurat,configuration,1751,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2377,Deployability,install,installed,2377,"o/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the p",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2482,Deployability,install,installed,2482,"tps://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2571,Deployability,install,install,2571,"tps://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2905,Deployability,install,installation,2905,"3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:6729,Deployability,install,installation,6729,"1800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CPPE. * Upstream Dependencies |w---w| CPPE. **CMake Variables**. * :makevar:`ENABLE_cppe` |w---w| CMake variable toggling whether Psi4 builds with CPPE; * :makevar:`cppe_DIR` |w---w| CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing ``share/cmake/cppe/cppeConfig.cmake``. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_cppe=ON. B. Build *without* CPPE. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:3610,Energy Efficiency,energy,energy,3610,"LE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the follo",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:5284,Energy Efficiency,energy,energy,5284,"cified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1629,Integrability,interface,interface,1629,". # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2749,Integrability,depend,dependent,2749,"eurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in t",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:3287,Integrability,depend,dependent,3287,"://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1751,Modifiability,config,configuration,1751,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:6180,Modifiability,config,configure,6180,"1800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CPPE. * Upstream Dependencies |w---w| CPPE. **CMake Variables**. * :makevar:`ENABLE_cppe` |w---w| CMake variable toggling whether Psi4 builds with CPPE; * :makevar:`cppe_DIR` |w---w| CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing ``share/cmake/cppe/cppeConfig.cmake``. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_cppe=ON. B. Build *without* CPPE. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:6582,Modifiability,variab,variable,6582,"1800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CPPE. * Upstream Dependencies |w---w| CPPE. **CMake Variables**. * :makevar:`ENABLE_cppe` |w---w| CMake variable toggling whether Psi4 builds with CPPE; * :makevar:`cppe_DIR` |w---w| CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing ``share/cmake/cppe/cppeConfig.cmake``. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_cppe=ON. B. Build *without* CPPE. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:6667,Modifiability,variab,variable,6667,"1800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CPPE. * Upstream Dependencies |w---w| CPPE. **CMake Variables**. * :makevar:`ENABLE_cppe` |w---w| CMake variable toggling whether Psi4 builds with CPPE; * :makevar:`cppe_DIR` |w---w| CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing ``share/cmake/cppe/cppeConfig.cmake``. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_cppe=ON. B. Build *without* CPPE. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1961,Performance,perform,perform,1961,"-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:4166,Performance,optimiz,optimize,4166,"from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. se",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2724,Safety,detect,detect,2724,"eurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in t",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:5446,Testability,test,tests,5446,"rom that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:4070,Availability,avail,available,4070," irrep.; The file ``Psi_a_5_1-B1.cube`` begins with two comment lines::. Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option |globals__cubeprop_isocontour_threshold|. .. note:: If your cube plots are too coarse, try to decrease the grid spacing via; the option |globals__cubic_grid_spacing|. If the edges of your plot are cut then; increase the size of the grid via the option |globals__cubic_grid_overage|. Cubeprop Tasks; --------------. The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the |globals__cubeprop_tasks| option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if |globals__cubeprop_tasks| is not specified]; Produces cube representations of the molecular orbitals; :math:`\psi_q(\mathbf{r})`. Orbitals are sorted according to increasing; orbital energy ignoring symmetry.; FRONTIER_ORBITALS; Produces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie. ; :math:`\psi_{\alpha}(\mathbf{r})`) are printed, while for open shell species a total ; of :math:`(4 + M_s)` orbitals are printed (:math:`\alpha` and :math:`\beta` ; spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all :math:`\alpha` singly occupied (SOMO) orbitals).; DENSITY; This task can be used to obtain the alpha and beta electron densities,; :math:`\rho_\alpha(\mathbf{r})` and :math:`\rho_\beta(\mathbf{r})`, together; with the total density; :math:`\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7418,Availability,down,downloaded,7418,"200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7393,Deployability,install,installed,7393,"200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7721,Deployability,install,installed,7721,"op_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cu",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7776,Deployability,install,installed,7776," .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for h",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7854,Deployability,release,releases,7854,"ude:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files gener",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7889,Deployability,install,installed,7889,"=============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molec",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:8091,Deployability,install,installed,8091,"ncluding molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with::. python vmd_cube.py /path/to/cube/files/ --opacity=0.5",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:2091,Energy Efficiency,energy,energy,2091,"sec:cubeprop`:. Generation of Cube Files |w---w| :py:func:`~psi4.driver.cubeprop`; =================================================================. .. codeauthor:: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; .. sectionauthor:: Francesco A. Evangelista and Peter Kraus. .. autofunction:: psi4.cubeprop(wfn); :noindex:. Introduction; ------------. |PSIfour| has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/). An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the :py:func:`~psi4.driver.cubeprop`; call after the ``energy('scf')`` command; executes the cubeprop code. The array |globals__cubeprop_tasks| specifies which; tasks should be executed. In this case the task ``'orbitals'`` generates cube; files for orbitals. The |globals__cubeprop_orbitals| option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option |globals__cubeprop_orbitals| is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: ``Psi_a_5_1-B1.cube``,; ``Psi_a_6_4-A1.cube``, ``Psi_a_5_1-B1.cube``, and ``Psi_a_6_4-A1.cube``. The subscript ``a`` in; ``Psi_a_5_1-B1.cube`` indicates an alpha orbital. The first number (``5``) is the index of the; orbital while ``1-B1`` indicates that this is the first orbital that belongs to the B1 irrep.; The file ``Psi_a_5_1-B1.cube`` begi",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:2210,Energy Efficiency,energy,energy,2210,"===================================. .. codeauthor:: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; .. sectionauthor:: Francesco A. Evangelista and Peter Kraus. .. autofunction:: psi4.cubeprop(wfn); :noindex:. Introduction; ------------. |PSIfour| has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/). An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the :py:func:`~psi4.driver.cubeprop`; call after the ``energy('scf')`` command; executes the cubeprop code. The array |globals__cubeprop_tasks| specifies which; tasks should be executed. In this case the task ``'orbitals'`` generates cube; files for orbitals. The |globals__cubeprop_orbitals| option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option |globals__cubeprop_orbitals| is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: ``Psi_a_5_1-B1.cube``,; ``Psi_a_6_4-A1.cube``, ``Psi_a_5_1-B1.cube``, and ``Psi_a_6_4-A1.cube``. The subscript ``a`` in; ``Psi_a_5_1-B1.cube`` indicates an alpha orbital. The first number (``5``) is the index of the; orbital while ``1-B1`` indicates that this is the first orbital that belongs to the B1 irrep.; The file ``Psi_a_5_1-B1.cube`` begins with two comment lines::. Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the de",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:4301,Energy Efficiency,energy,energy,4301,"ntour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option |globals__cubeprop_isocontour_threshold|. .. note:: If your cube plots are too coarse, try to decrease the grid spacing via; the option |globals__cubic_grid_spacing|. If the edges of your plot are cut then; increase the size of the grid via the option |globals__cubic_grid_overage|. Cubeprop Tasks; --------------. The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the |globals__cubeprop_tasks| option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if |globals__cubeprop_tasks| is not specified]; Produces cube representations of the molecular orbitals; :math:`\psi_q(\mathbf{r})`. Orbitals are sorted according to increasing; orbital energy ignoring symmetry.; FRONTIER_ORBITALS; Produces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie. ; :math:`\psi_{\alpha}(\mathbf{r})`) are printed, while for open shell species a total ; of :math:`(4 + M_s)` orbitals are printed (:math:`\alpha` and :math:`\beta` ; spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all :math:`\alpha` singly occupied (SOMO) orbitals).; DENSITY; This task can be used to obtain the alpha and beta electron densities,; :math:`\rho_\alpha(\mathbf{r})` and :math:`\rho_\beta(\mathbf{r})`, together; with the total density; :math:`\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) + \rho_\beta(\mathbf{r})`,; and the spin density; :math:`\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) - \rho_\beta(\mathbf{r})`.; BASIS_FUNCTIONS; This task is useful to produce cube files of the atomic orbital basis; fun",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:11635,Energy Efficiency,green,green,11635," [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). ",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:10114,Integrability,message,message,10114,": 100%; :alt: Alpha MOs	. Script Options; --------------. The help for ``vmd_cube.py`` can be obtained from the console::. >>> ./vmd_cube.py --help; usage: vmd_cube.py [-h] [--color1 [<integer>]] [--color2 [<integer>]]; [--iso [<isovalue>]] [--rx [<angle>]] [--ry [<angle>]]; [--rz [<angle>]] [--tx [<length>]] [--ty [<length>]]; [--tz [<length>]] [--opacity [<opacity>]]; [--scale [<factor>]] [--no-montage] [--no-labels]; [--imagesize [<integer>]] [--imagew [<integer>]]; [--imageh [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, defau",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7640,Modifiability,variab,variable,7640,"cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is ca",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7915,Modifiability,variab,variable,7915,"=============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molec",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:3928,Performance,perform,perform,3928,"` indicates an alpha orbital. The first number (``5``) is the index of the; orbital while ``1-B1`` indicates that this is the first orbital that belongs to the B1 irrep.; The file ``Psi_a_5_1-B1.cube`` begins with two comment lines::. Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option |globals__cubeprop_isocontour_threshold|. .. note:: If your cube plots are too coarse, try to decrease the grid spacing via; the option |globals__cubic_grid_spacing|. If the edges of your plot are cut then; increase the size of the grid via the option |globals__cubic_grid_overage|. Cubeprop Tasks; --------------. The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the |globals__cubeprop_tasks| option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if |globals__cubeprop_tasks| is not specified]; Produces cube representations of the molecular orbitals; :math:`\psi_q(\mathbf{r})`. Orbitals are sorted according to increasing; orbital energy ignoring symmetry.; FRONTIER_ORBITALS; Produces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie. ; :math:`\psi_{\alpha}(\mathbf{r})`) are printed, while for open shell species a total ; of :math:`(4 + M_s)` orbitals are printed (:math:`\alpha` and :math:`\beta` ; spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all :math:`\alpha` singly occupied (SOMO) orbitals).; DENSITY; This task can be used to obtain the alpha and beta electron ",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:6213,Safety,avoid,avoid,6213,"rho_\beta(\mathbf{r})`.; BASIS_FUNCTIONS; This task is useful to produce cube files of the atomic orbital basis; functions :math:`\chi_\mu(\mathbf{r})`.; ESP; Calculates the total (nuclear + electronic) electrostatic potential; :math:`V(\mathbf{r})`.; DUAL_DESCRIPTOR; Calculates the dual descriptor from frontier orbitals:; :math:`f^2(\mathbf{r})=\rho_{\mathrm{LUMO}}(\mathbf{r})-\rho_{\mathrm{HOMO}}(\mathbf{r})`.; The dual descriptor is a good measure of nucleophilicity and electrophilicity,; containing information essentially equivalent to both Fukui functions combined. ; More details on the dual descriptor itself can be found in [Morell:2005:205]_, ; while the current implementation is described in [Martinez-Araya:2015:451]_. ; This feature is currently only supported for closed shell systems. .. note:: The ``ESP`` task requires the user to specify a density-fitting basis; via the |scf__df_basis_scf| keyword. .. warning:: It is important to specify the |globals__cubeprop_orbitals| option when; dealing with large molecules to avoid running out of disk space.; For example, using the default grid spacing of; 0.2 |Angstrom|, the size of a single cube file for a molecule like water; is of the order of 1.4 MB. For a molecule with 200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst:1254,Security,access,accessible,1254,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:customizing`:. =======================================; Customization: Adding Simple Extensions; =======================================. |PSIfour| has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. * :ref:`sec:basisUserDefined`. .. toctree::; :maxdepth: 2. quickaddalias; quickadddatabase. * https://github.com/dgasmith/psi4numpy. ",MatchSource.DOCS,doc/sphinxman/source/customizing.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2848,Availability,error,error,2848,"ed.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; -----------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:4476,Availability,avail,available,4476,"-------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; ``tabulate`` option are available in the input file as ordinary Python; dictionaries ``DB_RGT`` and ``DB_RXN``, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of :ref:`sec:createDatabase` for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through ``tabulate`` and then makes use of the; resulting data structures, here, only to print. ::; ; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows. ::. DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6750,Availability,avail,available,6750,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6770,Availability,avail,availableDatabases,6770,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6884,Availability,avail,availability,6884,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1955,Energy Efficiency,energy,energy,1955,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; thr",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2365,Energy Efficiency,energy,energy,2365,"se`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ----------------",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2454,Energy Efficiency,energy,energy,2454,"de, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; -------------------",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2778,Energy Efficiency,energy,energy,2778,"reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2972,Energy Efficiency,energy,energy,2972,"the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:5188,Energy Efficiency,energy,energy,5188,"0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; ``tabulate`` option are available in the input file as ordinary Python; dictionaries ``DB_RGT`` and ``DB_RXN``, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of :ref:`sec:createDatabase` for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through ``tabulate`` and then makes use of the; resulting data structures, here, only to print. ::; ; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows. ::. DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; '",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6678,Energy Efficiency,energy,energy,6678,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1891,Integrability,wrap,wrapper,1891,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; thr",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2695,Integrability,wrap,wrapper,2695,"ed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reac",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2725,Modifiability,variab,variable,2725,"ed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reac",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:2894,Modifiability,variab,variables,2894,"the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:4643,Modifiability,variab,variable,4643,"-------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; ``tabulate`` option are available in the input file as ordinary Python; dictionaries ``DB_RGT`` and ``DB_RXN``, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of :ref:`sec:createDatabase` for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through ``tabulate`` and then makes use of the; resulting data structures, here, only to print. ::; ; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows. ::. DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:4830,Modifiability,variab,variables,4830,"-----------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; ``tabulate`` option are available in the input file as ordinary Python; dictionaries ``DB_RGT`` and ``DB_RXN``, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of :ref:`sec:createDatabase` for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through ``tabulate`` and then makes use of the; resulting data structures, here, only to print. ::; ; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows. ::. DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERG",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1675,Performance,perform,performed,1675,"warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the data",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1479,Testability,benchmark,benchmark,1479,"ee Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is c",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6959,Testability,benchmark,benchmark,6959,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:5715,Availability,avail,available,5715," construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:6001,Availability,avail,available,6001,"can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 an",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9080,Availability,avail,available,9080,"; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algo",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9466,Availability,avail,available,9466,"h the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; ma",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10634,Availability,avail,available,10634," macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix element",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13141,Availability,avail,available,13141,"putation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The ta",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13332,Availability,avail,available,13332,"th:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13749,Availability,avail,available,13749,"ath:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:14017,Availability,avail,available,14017,"trecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | ODC-12 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | ODC-13 | SIMULTANEOUS, QC | Y ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16119,Availability,avail,available,16119,"-------------------------------------------+---------+----------+------------------------+; | :math:`\mbox{ODC-12$(\lambda_3)$}` | SIMULTANEOUS, QC | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | :math:`\mbox{ODC-13$(\lambda_3)$}` | SIMULTANEOUS, QC | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-06 | SIMULTANEOUS, QC, TWOSTEP | Y | Y | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17507,Availability,avail,available,17507,"odule, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadrat",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7127,Deployability,update,update,7127,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9726,Deployability,update,update,9726," used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumu",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9780,Deployability,update,update,9780," used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumu",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10363,Deployability,update,update,10363,"quations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously.",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10750,Deployability,update,update,10750,"by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increa",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10911,Deployability,update,update,10911,"vergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note tha",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11279,Deployability,update,updates,11279," cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` int",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11296,Deployability,update,updates,11296," cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` int",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11416,Deployability,update,update,11416,"teration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11523,Deployability,update,update,11523,"teration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:12393,Deployability,update,updates,12393,"es and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13495,Deployability,update,updates,13495,"stems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+=============",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17990,Deployability,update,update,17990,"ollowing example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; s",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:18974,Deployability,update,update,18974,"y. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; |dct__guess_r_convergence| option. ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:1631,Energy Efficiency,energy,energy,1631,"ULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DCT; pair: DCT; theory. .. _`sec:dct`:. DCT: Density Cumulant Theory; =============================. .. codeauthor:: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; .. sectionauthor:: Alexander Yu. Sokolov. *Module:* :ref:`Keywords <apdx:dct>`, :ref:`PSI Variables <apdx:dct_psivar>`, :source:`DCT <psi4/src/psi4/dct>`. .. _`sec:dcttheory`:. Theory; ~~~~~~. Density cumulant theory (DCT) is a density-based *ab initio* theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2233,Energy Efficiency,energy,energy,2233,"onett, and Xiao Wang; .. sectionauthor:: Alexander Yu. Sokolov. *Module:* :ref:`Keywords <apdx:dct>`, :ref:`PSI Variables <apdx:dct_psivar>`, :source:`DCT <psi4/src/psi4/dct>`. .. _`sec:dcttheory`:. Theory; ~~~~~~. Density cumulant theory (DCT) is a density-based *ab initio* theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :ma",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2294,Energy Efficiency,energy,energy,2294,"onett, and Xiao Wang; .. sectionauthor:: Alexander Yu. Sokolov. *Module:* :ref:`Keywords <apdx:dct>`, :ref:`PSI Variables <apdx:dct_psivar>`, :source:`DCT <psi4/src/psi4/dct>`. .. _`sec:dcttheory`:. Theory; ~~~~~~. Density cumulant theory (DCT) is a density-based *ab initio* theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :ma",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:3605,Energy Efficiency,energy,energy,3605,"ction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now gr",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4088,Energy Efficiency,energy,energy,4088,"; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the or",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4313,Energy Efficiency,energy,energy,4313,"mma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density;",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4888,Energy Efficiency,energy,energy,4888,": . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <in",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4938,Energy Efficiency,energy,energy,4938,"= h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currentl",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:5218,Energy Efficiency,energy,energy,5218,"ent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:5283,Energy Efficiency,energy,energy,5283,"ortant for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:5453,Energy Efficiency,energy,energy,5453,"nd size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contrib",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7061,Energy Efficiency,efficient,efficient,7061,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7713,Energy Efficiency,energy,energy,7713,"h:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8106,Energy Efficiency,energy,energy,8106," for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgor",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8761,Energy Efficiency,energy,energy,8761,"tion; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant u",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8956,Energy Efficiency,energy,energy,8956,"CT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbit",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9285,Energy Efficiency,energy,energy,9285,"a_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converge",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:12149,Energy Efficiency,energy,energy,12149,"oduct of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13979,Energy Efficiency,efficient,efficient,13979,"to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | ODC-12 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+----------------",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:14050,Energy Efficiency,energy,energy,14050,"trecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | ODC-12 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | ODC-13 | SIMULTANEOUS, QC | Y ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16452,Energy Efficiency,energy,energy,16452,"\lambda_3)$}` | SIMULTANEOUS, QC | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-06 | SIMULTANEOUS, QC, TWOSTEP | Y | Y | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16473,Energy Efficiency,energy,energy,16473,"| UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-06 | SIMULTANEOUS, QC, TWOSTEP | Y | Y | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default).",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16520,Energy Efficiency,energy,energy,16520,"--------+----------+------------------------+; | DC-06 | SIMULTANEOUS, QC, TWOSTEP | Y | Y | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommend",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16737,Energy Efficiency,energy,energy,16737,"--------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option c",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17122,Energy Efficiency,energy,energy,17122,"-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17629,Energy Efficiency,reduce,reduce,17629," reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17775,Energy Efficiency,energy,energy,17775,"rform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:18340,Energy Efficiency,reduce,reduce,18340,"y. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; |dct__guess_r_convergence| option. ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2920,Integrability,rout,route,2920,"`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:3481,Integrability,depend,depends,3481,"bitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separab",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11720,Modifiability,coupling,coupling,11720,"using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:6318,Performance,optimiz,optimization,6318,"and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7168,Performance,optimiz,optimization,7168,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7407,Performance,optimiz,optimized,7407,"matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correc",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8753,Performance,perform,perform,8753,"tion; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant u",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10328,Performance,perform,performed,10328,"quations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously.",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10456,Performance,perform,performing,10456," available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equation",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11024,Performance,perform,performed,11024,"oiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11308,Performance,perform,performed,11308," cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` int",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11389,Performance,perform,perform,11389,"teration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11952,Performance,optimiz,optimized,11952,"ntegrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommen",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13799,Performance,perform,perform,13799,"ath:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13820,Performance,optimiz,optimizations,13820,"ath:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+==============================================================+=========+==========+========================+; | ODC-06 | SIMULTANEOUS, QC | Y | Y | RHF/UHF |; +-------------------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16595,Performance,perform,perform,16595,"--------+----------+------------------------+; | DC-06 | SIMULTANEOUS, QC, TWOSTEP | Y | Y | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommend",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16725,Performance,perform,perform,16725,"--------+--------------------------------------------------------------+---------+----------+------------------------+; | DC-12 | SIMULTANEOUS, QC, TWOSTEP | Y | N | UHF |; +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option c",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16890,Performance,perform,perform,16890,"------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is re",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16908,Performance,optimiz,optimization,16908,"------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is re",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:16997,Performance,optimiz,optimize,16997,"-----------+---------+----------+------------------------+. Note that for ODC-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17020,Performance,optimiz,optimize,17020,"-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17054,Performance,perform,perform,17054,"-06 and ODC-12 |scf__reference| ``RHF`` is only available for; |dct__algorithm| ``SIMULTANEOUS``. To compute :math:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17208,Performance,optimiz,optimization,17208,"h:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17229,Performance,perform,performed,17229,"h:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:18767,Performance,perform,performing,18767,"y. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; |dct__guess_r_convergence| option. ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:12681,Safety,avoid,avoiding,12681," elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic g",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2623,Usability,simpl,simple,2623,"rticle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4604,Usability,simpl,simplified,4604,"btain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present momen",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2547,Availability,avail,available,2547,"dge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4567,Availability,avail,available,4567,"out PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Beyond setting |globals__ddx| to ``true`` and selecting; a solvent model using |ddx__ddx_model|,; the definitio",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4735,Availability,avail,available,4735," references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Beyond setting |globals__ddx| to ``true`` and selecting; a solvent model using |ddx__ddx_model|,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity as well. The **solvent** can be defined either by directly providing a dielectric; constant using |dd",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:7705,Availability,avail,available,7705,"s, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a ``+1``-charged ion; and 0.1 mol/l of a ``-1``-charged ion. The **cavity** in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the |ddx__ddx_radii_set| parameter.; Currently ``bondi`` [Bondi:1964:441]_ and ``uff`` [Rappe:1992:114]_; are supported for |ddx__ddx_radii_set| with ``uff`` selected by default.; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the elect",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2238,Deployability,configurat,configuration,2238,"================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation mode",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2644,Deployability,install,install,2644,"ntains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2675,Deployability,install,install,2675,"ntains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2727,Deployability,install,installation,2727,"by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature reference",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2966,Deployability,install,installed,2966,"1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_mo",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:3073,Deployability,install,install,3073,"1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_mo",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4168,Deployability,integrat,integration,4168,"inum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8381,Deployability,integrat,integration,8381,".; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8819,Deployability,integrat,integration,8819,"providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: aut",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8892,Deployability,integrat,integration,8892," autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebede",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9096,Deployability,integrat,integration,9096," autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvatio",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9563,Deployability,integrat,integration,9563,"~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:11552,Deployability,install,installs,11552,"e:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ddx is a library for providing fast continuum; solvation models. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) ddx. * Upstream Dependencies |w---w| ddx |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_ddx` |w---w| CMake variable toggling whether Psi4 automatically installs ddx. **Examples**. A. Build and install ddx if needed. .. code-block:: bash. >>> cmake -DENABLE_ddx=ON. B. Build *without* ddx. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:11593,Deployability,install,install,11593,"e:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ddx is a library for providing fast continuum; solvation models. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) ddx. * Upstream Dependencies |w---w| ddx |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_ddx` |w---w| CMake variable toggling whether Psi4 automatically installs ddx. **Examples**. A. Build and install ddx if needed. .. code-block:: bash. >>> cmake -DENABLE_ddx=ON. B. Build *without* ddx. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4285,Energy Efficiency,energy,energy,4285,"ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.en",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:5306,Energy Efficiency,energy,energy,5306,"; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Beyond setting |globals__ddx| to ``true`` and selecting; a solvent model using |ddx__ddx_model|,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity as well. The **solvent** can be defined either by directly providing a dielectric; constant using |ddx__ddx_solvent_epsilon| or by looking up the dielectric; constant in from a solvent trivial name provided by |ddx__ddx_solvent|; (e.g. ``water``, ``ethanol``, ``cis-1,2-dimethylcyclohexane``).; By convention solvent names are all lowercase and use dashes (``-``) to separate; quantifiers like ``o``, ``n`` etc.; The full list understood by ddx can be obtained using ::. import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (|ddx__ddx_model| is ``LPB``); additionally the **Debye-Hückel parameter** |ddx__ddx_solvent_kappa| needs to be provide",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:6990,Energy Efficiency,charge,charged,6990,"to separate; quantifiers like ``o``, ``n`` etc.; The full list understood by ddx can be obtained using ::. import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (|ddx__ddx_model| is ``LPB``); additionally the **Debye-Hückel parameter** |ddx__ddx_solvent_kappa| needs to be provided; (in units of inverse Bohr or inverse Angström, depending on the unit used to define; the molecular geometry). ``pyddx`` provides a handy utility function to compute; the Debye-Hückel parameter. For example ::. import pyddx; from qcelemental import constants. list_of_ions = [(+1, 0.1), (-1, 0.1)]; dielectric_constant = pyddx.data.solvent_epsilon[""water""]; temperature = 298.15 # Kelvin; kappa_invbohr = pyddx.solvent_kappa(list_of_ions, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a ``+1``-charged ion; and 0.1 mol/l of a ``-1``-charged ion. The **cavity** in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the |ddx__ddx_radii_set| parameter.; Currently ``bondi`` [Bondi:1964:441]_ and ``uff`` [Rappe:1992:114]_; are supported for |ddx__ddx_radii_set| with ``uff`` selected by default.; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. inclu",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:7029,Energy Efficiency,charge,charged,7029," ``n`` etc.; The full list understood by ddx can be obtained using ::. import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (|ddx__ddx_model| is ``LPB``); additionally the **Debye-Hückel parameter** |ddx__ddx_solvent_kappa| needs to be provided; (in units of inverse Bohr or inverse Angström, depending on the unit used to define; the molecular geometry). ``pyddx`` provides a handy utility function to compute; the Debye-Hückel parameter. For example ::. import pyddx; from qcelemental import constants. list_of_ions = [(+1, 0.1), (-1, 0.1)]; dielectric_constant = pyddx.data.solvent_epsilon[""water""]; temperature = 298.15 # Kelvin; kappa_invbohr = pyddx.solvent_kappa(list_of_ions, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a ``+1``-charged ion; and 0.1 mol/l of a ``-1``-charged ion. The **cavity** in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the |ddx__ddx_radii_set| parameter.; Currently ``bondi`` [Bondi:1964:441]_ and ``uff`` [Rappe:1992:114]_; are supported for |ddx__ddx_radii_set| with ``uff`` selected by default.; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_mod",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:10233,Energy Efficiency,adapt,adapted,10233,"ebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:1687,Integrability,interface,interface,1687,"the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ddx, COSMO, PCM, continuum solvation. .. _`sec:ddx`:. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; ====================================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-fo",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4168,Integrability,integrat,integration,4168,"inum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4609,Integrability,interface,interface,4609," `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Beyond setting |globals__ddx| to ``true`` and selecting; a solvent model using |ddx__ddx_model|,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity ",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:6363,Integrability,depend,depending,6363," }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Beyond setting |globals__ddx| to ``true`` and selecting; a solvent model using |ddx__ddx_model|,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity as well. The **solvent** can be defined either by directly providing a dielectric; constant using |ddx__ddx_solvent_epsilon| or by looking up the dielectric; constant in from a solvent trivial name provided by |ddx__ddx_solvent|; (e.g. ``water``, ``ethanol``, ``cis-1,2-dimethylcyclohexane``).; By convention solvent names are all lowercase and use dashes (``-``) to separate; quantifiers like ``o``, ``n`` etc.; The full list understood by ddx can be obtained using ::. import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (|ddx__ddx_model| is ``LPB``); additionally the **Debye-Hückel parameter** |ddx__ddx_solvent_kappa| needs to be provided; (in units of inverse Bohr or inverse Angström, depending on the unit used to define; the molecular geometry). ``pyddx`` provides a handy utility function to compute; the Debye-Hückel parameter. For example ::. import pyddx; from qcelemental import constants. list_of_ions = [(+1, 0.1), (-1, 0.1)]; dielectric_constant = pyddx.data.solvent_epsilon[""water""]; temperature = 298.15 # Kelvin; kappa_invbohr = pyddx.solvent_kappa(list_of_ions, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a ``+1``-charged ion; and 0.1 mol/l of a ``-1``-charged ion. The **cavity** in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the |ddx__ddx_radii_set| parameter.; Curre",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8381,Integrability,integrat,integration,8381,".; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8819,Integrability,integrat,integration,8819,"providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: aut",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8892,Integrability,integrat,integration,8892," autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebede",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9096,Integrability,integrat,integration,9096," autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvatio",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9563,Integrability,integrat,integration,9563,"~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2238,Modifiability,config,configuration,2238,"================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation mode",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:10233,Modifiability,adapt,adapted,10233,"ebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:11135,Modifiability,config,configure,11135,"e:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ddx is a library for providing fast continuum; solvation models. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) ddx. * Upstream Dependencies |w---w| ddx |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_ddx` |w---w| CMake variable toggling whether Psi4 automatically installs ddx. **Examples**. A. Build and install ddx if needed. .. code-block:: bash. >>> cmake -DENABLE_ddx=ON. B. Build *without* ddx. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:11507,Modifiability,variab,variable,11507,"e:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ddx is a library for providing fast continuum; solvation models. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) ddx. * Upstream Dependencies |w---w| ddx |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_ddx` |w---w| CMake variable toggling whether Psi4 automatically installs ddx. **Examples**. A. Build and install ddx if needed. .. code-block:: bash. >>> cmake -DENABLE_ddx=ON. B. Build *without* ddx. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9307,Performance,perform,performed,9307,"silon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. i",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5620,Availability,avail,available,5620,"form approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; modu",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:8448,Availability,avail,available,8448,"ozen_uocc| [#f1]_ |; +----------------------------+----------------------------+-------------------------------+; | (all orbitals not in | |globals__ras4| | |; + |globals__frozen_uocc| +----------------------------+ +; | or |globals__frozen_docc| | |globals__ras3| | |; + are included in CI) +----------------------------+ +; | | |globals__ras2| | |; + +----------------------------+ +; | | |globals__ras1| | |globals__active| |; +----------------------------+----------------------------+-------------------------------+; | |globals__frozen_docc| | |globals__frozen_docc| | |globals__frozen_docc| |; +----------------------------+----------------------------+-------------------------------+. .. [#f1] |globals__frozen_uocc| is not required and will be inferred if ; |globals__active| is provided. However, if it is easier to specify; |globals__frozen_uocc|, then this may be provided and |globals__active| can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous :ref:`table <table:mcscf_spaces>` for MCSCF is also available). ; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of ``active`` orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via ``energy('fci')``; with appropriate values selected for |globals__frozen_docc| and; |globals__active|. For CI computations, there is no difference between; |globals__frozen_docc| and |globals__restricted_docc|, or between; |globals__frozen_uocc| and |globals__restricted_uocc|. There are; differences between these keywords for :ref:`sec:mcscf`. .. index:: CI; basic-keywords. Basic DETCI Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/detci__reference.rst; .. include:: autodir_options_c/detci__r_convergence.rst; .. include:: autodir_options_c/detci__ex_level.rst; .. include:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodi",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:15045,Availability,avail,available,15045," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1708,Deployability,configurat,configuration,1708,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:3807,Deployability,configurat,configuration,3807,"olecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF a",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4496,Deployability,configurat,configuration,4496,"lated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4876,Deployability,configurat,configurational,4876,", and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:10293,Deployability,configurat,configuration,10293,"lude:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: autodir_options_c/detci__ci_maxiter.rst; .. include:: autodir_options_c/detci__num_roots.rst; .. include:: autodir_options_c/detci__icore.rst; .. include:: autodir_options_c/detci__diag_method.rst; .. include:: autodir_options_c/detci__opdm.rst; .. include:: autodir_options_c/detci__tdm.rst; .. include:: autodir_options_c/detci__dipmom.rst; .. include:: autodir_options_c/detci__mpn.rst. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix :ref:`apdx:detci`. .. index:: ; pair: CI; spin multiplicities of higher roots. Spin Multiplicities of Higher Roots; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of :math:`M_s` is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants ; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14148,Deployability,release,released,14148," computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1699,Energy Efficiency,adapt,adapted,1699,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:3497,Energy Efficiency,efficient,efficient,3497,"hi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this cap",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4468,Energy Efficiency,efficient,efficient,4468,"lated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5848,Energy Efficiency,energy,energy,5848," types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options;",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5954,Energy Efficiency,energy,energy,5954,"ef:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence C",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5997,Energy Efficiency,energy,energy,5997,"ef:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence C",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6142,Energy Efficiency,efficient,efficient,6142,"lex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-----------------",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6195,Energy Efficiency,energy,energy,6195,"lex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-----------------",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6246,Energy Efficiency,efficient,efficient,6246,"lex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-----------------",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6675,Energy Efficiency,energy,energy,6675,"tion is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-------------------------------+; | CI (e.g., CISD, FCI) | RASCI | CASCI |; +============================+============================+===============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| | |globals__frozen_uocc| [#f1]_ |; +----------------------------+----------------------------+-------------------------------+; | (all orbitals not in | |globals__ras4| | |; + |globals__frozen_uocc| +----------------------------+ +; | or |glo",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:8680,Energy Efficiency,energy,energy,8680,"obals__ras2| | |; + +----------------------------+ +; | | |globals__ras1| | |globals__active| |; +----------------------------+----------------------------+-------------------------------+; | |globals__frozen_docc| | |globals__frozen_docc| | |globals__frozen_docc| |; +----------------------------+----------------------------+-------------------------------+. .. [#f1] |globals__frozen_uocc| is not required and will be inferred if ; |globals__active| is provided. However, if it is easier to specify; |globals__frozen_uocc|, then this may be provided and |globals__active| can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous :ref:`table <table:mcscf_spaces>` for MCSCF is also available). ; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of ``active`` orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via ``energy('fci')``; with appropriate values selected for |globals__frozen_docc| and; |globals__active|. For CI computations, there is no difference between; |globals__frozen_docc| and |globals__restricted_docc|, or between; |globals__frozen_uocc| and |globals__restricted_uocc|. There are; differences between these keywords for :ref:`sec:mcscf`. .. index:: CI; basic-keywords. Basic DETCI Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/detci__reference.rst; .. include:: autodir_options_c/detci__r_convergence.rst; .. include:: autodir_options_c/detci__ex_level.rst; .. include:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: autodir_options_c/detci__ci_maxiter.rst; .. include:: autodir_options_c/detci__num_roots.rst; .. include:: autodir_options_c/detci__icore.rst; .. include:: autod",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13036,Energy Efficiency,energy,energy,13036,"cing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13088,Energy Efficiency,energy,energy,13088,"cing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13471,Energy Efficiency,energy,energy,13471,"f computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13689,Energy Efficiency,energy,energy,13689," reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for do",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13824,Energy Efficiency,energy,energy,13824,"esults, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is a",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13856,Energy Efficiency,energy,energy,13856,"esults, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is a",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14768,Energy Efficiency,efficient,efficient,14768," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14849,Energy Efficiency,efficient,efficient,14849," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:15427,Energy Efficiency,energy,energy,15427," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14216,Integrability,interface,interface,14216,"opriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14923,Integrability,interface,interface,14923," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1699,Modifiability,adapt,adapted,1699,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1708,Modifiability,config,configuration,1708,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:3807,Modifiability,config,configuration,3807,"olecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF a",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4496,Modifiability,config,configuration,4496,"lated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4876,Modifiability,config,configurational,4876,", and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:10293,Modifiability,config,configuration,10293,"lude:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: autodir_options_c/detci__ci_maxiter.rst; .. include:: autodir_options_c/detci__num_roots.rst; .. include:: autodir_options_c/detci__icore.rst; .. include:: autodir_options_c/detci__diag_method.rst; .. include:: autodir_options_c/detci__opdm.rst; .. include:: autodir_options_c/detci__tdm.rst; .. include:: autodir_options_c/detci__dipmom.rst; .. include:: autodir_options_c/detci__mpn.rst. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix :ref:`apdx:detci`. .. index:: ; pair: CI; spin multiplicities of higher roots. Spin Multiplicities of Higher Roots; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of :math:`M_s` is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants ; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:3250,Performance,optimiz,optimized,3250,"The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4650,Performance,perform,perform,4650,"based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5880,Performance,optimiz,optimize,5880,"nal; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_lev",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6586,Performance,perform,performed,6586,"tion is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-------------------------------+; | CI (e.g., CISD, FCI) | RASCI | CASCI |; +============================+============================+===============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| | |globals__frozen_uocc| [#f1]_ |; +----------------------------+----------------------------+-------------------------------+; | (all orbitals not in | |globals__ras4| | |; + |globals__frozen_uocc| +----------------------------+ +; | or |glo",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:8532,Performance,perform,performed,8532,"rozen_uocc| +----------------------------+ +; | or |globals__frozen_docc| | |globals__ras3| | |; + are included in CI) +----------------------------+ +; | | |globals__ras2| | |; + +----------------------------+ +; | | |globals__ras1| | |globals__active| |; +----------------------------+----------------------------+-------------------------------+; | |globals__frozen_docc| | |globals__frozen_docc| | |globals__frozen_docc| |; +----------------------------+----------------------------+-------------------------------+. .. [#f1] |globals__frozen_uocc| is not required and will be inferred if ; |globals__active| is provided. However, if it is easier to specify; |globals__frozen_uocc|, then this may be provided and |globals__active| can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous :ref:`table <table:mcscf_spaces>` for MCSCF is also available). ; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of ``active`` orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via ``energy('fci')``; with appropriate values selected for |globals__frozen_docc| and; |globals__active|. For CI computations, there is no difference between; |globals__frozen_docc| and |globals__restricted_docc|, or between; |globals__frozen_uocc| and |globals__restricted_uocc|. There are; differences between these keywords for :ref:`sec:mcscf`. .. index:: CI; basic-keywords. Basic DETCI Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/detci__reference.rst; .. include:: autodir_options_c/detci__r_convergence.rst; .. include:: autodir_options_c/detci__ex_level.rst; .. include:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:8642,Performance,optimiz,optimization,8642,"rozen_uocc| +----------------------------+ +; | or |globals__frozen_docc| | |globals__ras3| | |; + are included in CI) +----------------------------+ +; | | |globals__ras2| | |; + +----------------------------+ +; | | |globals__ras1| | |globals__active| |; +----------------------------+----------------------------+-------------------------------+; | |globals__frozen_docc| | |globals__frozen_docc| | |globals__frozen_docc| |; +----------------------------+----------------------------+-------------------------------+. .. [#f1] |globals__frozen_uocc| is not required and will be inferred if ; |globals__active| is provided. However, if it is easier to specify; |globals__frozen_uocc|, then this may be provided and |globals__active| can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous :ref:`table <table:mcscf_spaces>` for MCSCF is also available). ; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of ``active`` orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via ``energy('fci')``; with appropriate values selected for |globals__frozen_docc| and; |globals__active|. For CI computations, there is no difference between; |globals__frozen_docc| and |globals__restricted_docc|, or between; |globals__frozen_uocc| and |globals__restricted_uocc|. There are; differences between these keywords for :ref:`sec:mcscf`. .. index:: CI; basic-keywords. Basic DETCI Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/detci__reference.rst; .. include:: autodir_options_c/detci__r_convergence.rst; .. include:: autodir_options_c/detci__ex_level.rst; .. include:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14650,Performance,optimiz,optimized,14650," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:15218,Performance,perform,perform,15218," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:11457,Safety,avoid,avoided,11457,"nant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple roots (|detci__num_roots| = :math:`n`), the program; will typically return singlets and not triplets. However, if enough roots are sought,; higher-multiplicities may enter in. This can be avoided by ensuring that all the guess; vectors have the correct spin multiplicity, by setting |detci__calc_s_squared| to ``TRUE``).; It is also possible to ask DETCI to compute roots of higher multiplicities. The desired value of spin may be; provided by setting |detci__S| = :math:`S`. Typically, it would be a good idea in this context to also set; |detci__calc_s_squared| to ``TRUE`` to ensure the guess roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrar",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:15126,Testability,test,testing,15126," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:2327,Usability,simpl,simplest,2327,"iguration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5059,Usability,simpl,simple,5059,"lated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; re",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5810,Usability,simpl,simply,5810," in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunc",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:12949,Usability,simpl,simplest,12949,"oundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-or",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:2423,Availability,robust,robust,2423,"--------. Second-order |MollerPlesset| Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor :math:`{\cal O}(N^5)` treatment of; dynamic electron correlation. This unusually cheap; *ab initio* treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; en",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:2771,Availability,avail,available,2771,"ient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which for",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:2826,Availability,avail,available,2826,"ient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which for",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7226,Deployability,integrat,integration,7226,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:1781,Energy Efficiency,efficient,efficient,1781,"re Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DF-MP2; pair: MP2; density-fitting. .. _`sec:dfmp2`:. DF-MP2: Density-Fitted 2nd-Order |MollerPlesset| Perturbation Theory; ====================================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:dfmp2>`, :ref:`PSI Variables <apdx:dfmp2_psivar>`, :source:`DFMP2 <psi4/src/psi4/dfmp2>`. Introduction; ------------. Second-order |MollerPlesset| Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor :math:`{\cal O}(N^5)` treatment of; dynamic electron correlation. This unusually cheap; *ab initio* treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitte",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:2723,Energy Efficiency,efficient,efficient,2723,"ient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which for",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3485,Energy Efficiency,energy,energy,3485,"be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result looks something like::. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -76.0213974638823942 [Eh]; Singles Energy = -0",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3506,Energy Efficiency,energy,energy,3506,"asis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result looks something like::. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -76.0213974638823942 [Eh]; Singles Energy = -0.0000000000000001 [Eh]; Same-Spin Energy = -0.0512503270216563 [E",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3553,Energy Efficiency,energy,energy,3553,"fficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result looks something like::. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -76.0213974638823942 [Eh]; Singles Energy = -0.0000000000000001 [Eh]; Same-Spin Energy = -0.0512503270216563 [Eh]; Opposite-Spin Energy = -0.1534098175176923 [Eh]; Correlation Energy = -0.2046601445393486 [Eh]; Total Ener",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3934,Energy Efficiency,energy,energy,3934,"ble in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result looks something like::. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -76.0213974638823942 [Eh]; Singles Energy = -0.0000000000000001 [Eh]; Same-Spin Energy = -0.0512503270216563 [Eh]; Opposite-Spin Energy = -0.1534098175176923 [Eh]; Correlation Energy = -0.2046601445393486 [Eh]; Total Energy = -76.2260576084217405 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; ------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:6444,Energy Efficiency,energy,energy,6444,"nd order has the spin-orbital formula:. .. math:: E_{\mathrm{total}}^{(2)} = E_{\mathrm{Reference}} - ; \frac{f_{ia} f_{ia}}{\epsilon_a - \epsilon_i} - ; \frac{1}{4} \frac{\langle ij||ab\rangle^2}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; :label: MP2. Here :math:`i` and :math:`j` are occupied spin orbitals, :math:`a` and; :math:`b` are virtual spin orbitals, :math:`f_{ia}` are the :math:`ov`; Fock Matrix elements, :math:`\epsilon` are the orbital eigenvalues, and; :math:`\langle ij||ab\rangle` are the antisymmetrized physicist's ERIs.; For converged RHF and UHF references, the singles correction,. .. math:: E_{\mathrm{MBPT}}^{(1)} = - \frac{f_{ia} f_{ia}}{\epsilon_a - \epsilon_i},. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:6540,Energy Efficiency,energy,energy,6540,"} - ; \frac{f_{ia} f_{ia}}{\epsilon_a - \epsilon_i} - ; \frac{1}{4} \frac{\langle ij||ab\rangle^2}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; :label: MP2. Here :math:`i` and :math:`j` are occupied spin orbitals, :math:`a` and; :math:`b` are virtual spin orbitals, :math:`f_{ia}` are the :math:`ov`; Fock Matrix elements, :math:`\epsilon` are the orbital eigenvalues, and; :math:`\langle ij||ab\rangle` are the antisymmetrized physicist's ERIs.; For converged RHF and UHF references, the singles correction,. .. math:: E_{\mathrm{MBPT}}^{(1)} = - \frac{f_{ia} f_{ia}}{\epsilon_a - \epsilon_i},. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's ",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:6935,Energy Efficiency,energy,energy,6935,"RHF and UHF references, the singles correction,. .. math:: E_{\mathrm{MBPT}}^{(1)} = - \frac{f_{ia} f_{ia}}{\epsilon_a - \epsilon_i},. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ;",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7202,Energy Efficiency,energy,energy,7202,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:8576,Energy Efficiency,energy,energy,8576,"^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; - \frac{1}{2}\frac{[(ia^\beta|jb^\beta)-(ib^\beta|ja^\beta)](ia^\beta|jb^\beta)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek t",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:8638,Energy Efficiency,energy,energy,8638,"^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; - \frac{1}{2}\frac{[(ia^\beta|jb^\beta)-(ib^\beta|ja^\beta)](ia^\beta|jb^\beta)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek t",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:9575,Energy Efficiency,reduce,reduce,9575,"ns use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the |dfmp2__DF_ints_num_threads| to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code). * DFMP2 likes disk. At a minimum, :math:`2Qov` doubles are required for; RHF-MP2, and :math:`4Qov` doubles are required for UHF-MP2. * DFMP2 likes threads. Some of the formation of the :math:`(Q|ov)` tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; :math:`{\cal O}(N^5)` step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the :envvar:`OMP_NESTED` environment variable; to ``FALSE`` to prevent thread thrash (or just as well, do not define; :envvar:`OMP_NESTED` at all). * Freezing core is good for both efficiency and correctness purposes.; Freezing virtual",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7226,Integrability,integrat,integration,7226,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:10311,Modifiability,variab,variable,10311,"pe RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the |dfmp2__DF_ints_num_threads| to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code). * DFMP2 likes disk. At a minimum, :math:`2Qov` doubles are required for; RHF-MP2, and :math:`4Qov` doubles are required for UHF-MP2. * DFMP2 likes threads. Some of the formation of the :math:`(Q|ov)` tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; :math:`{\cal O}(N^5)` step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the :envvar:`OMP_NESTED` environment variable; to ``FALSE`` to prevent thread thrash (or just as well, do not define; :envvar:`OMP_NESTED` at all). * Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title. * ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases. * MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. . ",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3177,Performance,perform,performing,3177,"he MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correl",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7243,Usability,simpl,simplification,7243,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:8710,Usability,simpl,simple,8710,"b|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; - \frac{1}{2}\frac{[(ia^\beta|jb^\beta)-(ib^\beta|ja^\beta)](ia^\beta|jb^\beta)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:8466,Availability,failure,failures,8466,"nalized to form the Kohn--Sham orbitals in the same manner as in; Hartree--Fock. In practice the local functional kernel :math:`f_{\mathrm{xc}}` and its required; partial derivatives are exceedingly complex and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn--Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree--Fock; with potentially exact treatment of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9316,Availability,failure,failures,9316,"nt of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20244,Availability,avail,available,20244,"onals are all denoted by a lower-case ""w"" in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resoluti",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20413,Availability,avail,available,20413,"-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |sc",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20616,Availability,reliab,reliable,20616,"plementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +---------------------------",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20755,Availability,error,error,20755,"stigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +-----------------------------+-------+; | 14 | 5 |; +-----------------------------+-------+; | 26 | 7 |; +-----------------------------+-------+; | 38 | 9 |; +-----------------------------+-------+; | 50 | 11 |; +-----------------------------+-------+; | 74 | 13 |; +-------",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25036,Availability,error,error,25036,"anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; th",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:26354,Availability,toler,tolerance,26354," considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaults to 1E-12. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:26555,Availability,failure,failures,26555,"procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaults to 1E-12. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27159,Availability,error,error,27159,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27185,Availability,robust,robust,27185,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27616,Availability,error,errors,27616," setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; referen",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:30684,Availability,avail,available,30684," the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many optional arguments are available, see the python file; frac_traverse('wb97', molecule=h2o). The other macro is :py:func:`~psi4.driver.frac.frac_nuke`, which strips several electrons out of the; system to gather information on the MSIE over a range of orbitals. The input is; identical to the above, except that the :py:func:`~psi4.driver.frac.frac_traverse` call is substituted; for something like::. # Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code deve",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:31242,Availability,avail,available,31242,"e the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many optional arguments are available, see the python file; frac_traverse('wb97', molecule=h2o). The other macro is :py:func:`~psi4.driver.frac.frac_nuke`, which strips several electrons out of the; system to gather information on the MSIE over a range of orbitals. The input is; identical to the above, except that the :py:func:`~psi4.driver.frac.frac_traverse` call is substituted; for something like::. # Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm where",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:1886,Deployability,update,updated,1886,"ee Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DFT; pair: DFT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a un",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:2321,Deployability,release,release,2321,"s <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for t",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:19854,Deployability,integrat,integrated,19854,"; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead. :ref:`Hybrid Functionals <table:dft_hybrid>`; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems. :ref:`LRC Functionals <table:dft_lrc>`; LRC functionals are a particular area of interest of the |PSIfour| DFT team.; LRC functionals are all denoted by a lower-case ""w"" in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new fu",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20433,Deployability,install,installation,20433,"-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |sc",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:23971,Deployability,integrat,integration,23971,"------------+-------+; | 4334 | 113 |; +-----------------------------+-------+; | 4802 | 119 |; +-----------------------------+-------+; | 5294 | 125 |; +-----------------------------+-------+; | 5810 | 131 |; +-----------------------------+-------+. The spherical grids are rotated according to a common set of rules developed; during the implementation of SG1. At the moment, the rules for tetrahedral,; octohedral, and icosohedral systems are not complete, so there may be some; ambiguity in the grid orientation for these systems. Radial grid types are controlled by the |scf__dft_radial_scheme| option, which; at the moment may be either ``TREUTLER`` or ``BECKE``, while the number of radial; points are controlled by the |scf__dft_radial_points| option, which is any positive; integer (typically 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ;",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32134,Deployability,release,releases,32134,"Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and M",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35251,Deployability,update,update,35251,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:2878,Energy Efficiency,energy,energy,2878,"lute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operat",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:3400,Energy Efficiency,energy,energy,3400,"our|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:3548,Energy Efficiency,energy,energy,3548,"te, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:3981,Energy Efficiency,energy,energy,3981,"s determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4247,Energy Efficiency,energy,energy,4247,"s determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4287,Energy Efficiency,energy,energy,4287,"some kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \c",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4648,Energy Efficiency,energy,energy,4648,"sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:6064,Energy Efficiency,energy,energy,6064,"ost popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1). GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate. Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density :math:`\tau_\alpha`; and :math:`\tau_\beta`,. .. math:: \tau_\sigma(\vec r_1) = \sum_{i} \left | \nabla \psi_i^{\sigma} (\vec r_1) \right | ^2; = \sum_{i} \left | C_{\mu i}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \right |; ^2 = D_{\mu\nu}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \cdot \nabla; \phi_{\nu} (\vec r_1). A generic local meta-GGA functional may then be written as,. .. math:: E_{\mathrm{xc}}^{\mathrm{DFA}} = \int_{\mathbb{R}^3} f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); \right) \ \mathrm{d} ^3 r_1. The potential corresponding to this energy functional is,. .. math:: V_{\mu\nu}^{\mathrm{xc},\alpha} =. \int_{\mathbb{R}^3}; \left(\frac{\partial f}{\rho_\alpha}\right); \phi_{\mu}; \phi_{\nu}; \ \mathrm{d} ^3 r_1. .. math:: +; \int_{\mathbb{R}^3}; \left(2 \frac{\partial f}{\gamma",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:6812,Energy Efficiency,energy,energy,6812," has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density :math:`\tau_\alpha`; and :math:`\tau_\beta`,. .. math:: \tau_\sigma(\vec r_1) = \sum_{i} \left | \nabla \psi_i^{\sigma} (\vec r_1) \right | ^2; = \sum_{i} \left | C_{\mu i}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \right |; ^2 = D_{\mu\nu}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \cdot \nabla; \phi_{\nu} (\vec r_1). A generic local meta-GGA functional may then be written as,. .. math:: E_{\mathrm{xc}}^{\mathrm{DFA}} = \int_{\mathbb{R}^3} f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); \right) \ \mathrm{d} ^3 r_1. The potential corresponding to this energy functional is,. .. math:: V_{\mu\nu}^{\mathrm{xc},\alpha} =. \int_{\mathbb{R}^3}; \left(\frac{\partial f}{\rho_\alpha}\right); \phi_{\mu}; \phi_{\nu}; \ \mathrm{d} ^3 r_1. .. math:: +; \int_{\mathbb{R}^3}; \left(2 \frac{\partial f}{\gamma_{\alpha\alpha}} \nabla \rho_\alpha + \frac{\partial; f}{\gamma_{\alpha\beta}}\nabla \rho_\beta \right); \nabla\left(\phi_{\mu}; \phi_{\nu}\right); \ \mathrm{d} ^3 r_1. .. math:: +; \int_{\mathbb{R}^3}; \left(\frac{\partial f}{\tau_\alpha}\right); \nabla \phi_{\mu}; \nabla \phi_{\nu}; \ \mathrm{d} ^3 r_1. This potential is used to build the Kohn--Sham matrix,. .. math:: F_{\mu\mu}^{\alpha} = H_{\mu\nu} + J_{\mu\nu} +; V_{\mu\nu}^{\mathrm{xc},\alpha}. which is diagonalized to form the Kohn--Sham orbitals in the same manner as in; Hartree--Fock. In practice the local functional kernel :math:`f_{\mathrm{xc}}` and its required; partial derivatives are exceedingly complex and are not analytically; integrable. In this case, atom-centered numeri",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:8785,Energy Efficiency,charge,charge,8785,"luate the Kohn--Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree--Fock; with potentially exact treatment of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note tha",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9920,Energy Efficiency,energy,energy,9920,"stry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of exact exchange borrows another piece from an existing; Hartree--Fock code, with the caveat that Hartree--Fock exchange is often much more; costly to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results. A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is al",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:10859,Energy Efficiency,energy,energy,10859,"ct-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of exact exchange borrows another piece from an existing; Hartree--Fock code, with the caveat that Hartree--Fock exchange is often much more; costly to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results. A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function :math:`\mathrm{erf}(\omega r_{12})` as a; partition function. Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathr",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12558,Energy Efficiency,energy,energy,12558,"r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the i",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14409,Energy Efficiency,energy,energy,14409,"infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of KS-DFT, including:. Restricted Kohn--Sham (RKS) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Kohn--Sham (UKS); Appropriate for most open-shell systems and fairly easy to conv",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14500,Energy Efficiency,energy,energy,14500,":`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of KS-DFT, including:. Restricted Kohn--Sham (RKS) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Kohn--Sham (UKS); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerabl",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14669,Energy Efficiency,energy,energy,14669,"ap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of KS-DFT, including:. Restricted Kohn--Sham (RKS) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Kohn--Sham (UKS); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; the resultant; wavefunction may not be an eigenfunction of the :math:`\hat S^2` operator.; However, spin contamination is usu",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:15194,Energy Efficiency,efficient,efficient,15194," by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of KS-DFT, including:. Restricted Kohn--Sham (RKS) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Kohn--Sham (UKS); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; the resultant; wavefunction may not be an eigenfunction of the :math:`\hat S^2` operator.; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method;",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16722,Energy Efficiency,energy,energy,16722,".; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of th",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16747,Energy Efficiency,energy,energy,16747,"a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16887,Energy Efficiency,energy,energy,16887,"acting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listin",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16918,Energy Efficiency,energy,energy,16918,"ere overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listing of all functionals of each class are presented below:. :ref:`All Functionals <table",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16994,Energy Efficiency,energy,energy,16994,"n the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listing of all functionals of each class are presented below:. :ref:`All Functionals <table:dft_all>`; All functionals, including LSDA-only functionals. Note that here and; th",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:17067,Energy Efficiency,energy,energy,17067,".g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listing of all functionals of each class are presented below:. :ref:`All Functionals <table:dft_all>`; All functionals, including LSDA-only functionals. Note that here and; throughout, functionals which end in `_X` or `_C` are exchange or; correlation only, and ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:17269,Energy Efficiency,energy,energy,17269," is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listing of all functionals of each class are presented below:. :ref:`All Functionals <table:dft_all>`; All functionals, including LSDA-only functionals. Note that here and; throughout, functionals which end in `_X` or `_C` are exchange or; correlation only, and should not be used for most production-level; computations. Examples include `PBE_X` and `PBE_C`, which contain the; separate definitions of the PBE exchange and correlation holes. In most cases,; the unit",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:21208,Energy Efficiency,efficient,efficient,21208,"into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +-----------------------------+-------+; | 14 | 5 |; +-----------------------------+-------+; | 26 | 7 |; +-----------------------------+-------+; | 38 | 9 |; +-----------------------------+-------+; | 50 | 11 |; +-----------------------------+-------+; | 74 | 13 |; +-----------------------------+-------+; | 86 | 15 |; +-----------------------------+-------+; | 110 | 17 |; +-----------------------------+-------+; | 146 | 19 |; +-----------------------------+-------+; | 170 | 21 |; +-----------------------------+-------+; | 194 | 23 |; +-----------------------------+-------+; | 230 | 25 |; +-----------------------------+-------+; | 266 | 27 |; +--------------------",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25093,Energy Efficiency,reduce,reduce,25093,"pan a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaul",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27238,Energy Efficiency,energy,energy,27238,"e basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29604,Energy Efficiency,energy,energy,29604,"reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many opti",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29620,Energy Efficiency,energy,energy,29620,"reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many opti",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29780,Energy Efficiency,efficient,efficient,29780,"ule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many optional arguments are available, see the python file; frac_traverse('wb97', molecule=h2o). The other macro is :py:func:`~psi4.driver.frac.frac_nuke`",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32991,Energy Efficiency,energy,energy,32991,"interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33262,Energy Efficiency,energy,energy,33262,"s follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, param",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33599,Energy Efficiency,energy,energy,33599,"fault convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouti",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33731,Energy Efficiency,energy,energy,33731,"orld; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_funct",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33781,Energy Efficiency,energy,energy,33781,"orld; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_funct",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35187,Energy Efficiency,energy,energy,35187,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35875,Energy Efficiency,energy,energy,35875,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:2073,Integrability,depend,depending,2073,"FT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4703,Integrability,depend,depending,4703,"sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4873,Integrability,depend,depend,4873,") + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1). GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate. Another local variant which has gained some popularity (though perhaps not as; much as GGA functi",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9259,Integrability,depend,dependent,9259,"nt of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12997,Integrability,depend,dependence,12997,"d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:13156,Integrability,depend,dependence,13156,"of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:19854,Integrability,integrat,integrated,19854,"; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead. :ref:`Hybrid Functionals <table:dft_hybrid>`; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems. :ref:`LRC Functionals <table:dft_lrc>`; LRC functionals are a particular area of interest of the |PSIfour| DFT team.; LRC functionals are all denoted by a lower-case ""w"" in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new fu",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:23971,Integrability,integrat,integration,23971,"------------+-------+; | 4334 | 113 |; +-----------------------------+-------+; | 4802 | 119 |; +-----------------------------+-------+; | 5294 | 125 |; +-----------------------------+-------+; | 5810 | 131 |; +-----------------------------+-------+. The spherical grids are rotated according to a common set of rules developed; during the implementation of SG1. At the moment, the rules for tetrahedral,; octohedral, and icosohedral systems are not complete, so there may be some; ambiguity in the grid orientation for these systems. Radial grid types are controlled by the |scf__dft_radial_scheme| option, which; at the moment may be either ``TREUTLER`` or ``BECKE``, while the number of radial; points are controlled by the |scf__dft_radial_points| option, which is any positive; integer (typically 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ;",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:34555,Integrability,interface,interface,34555,"func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the frac",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:1898,Modifiability,extend,extended,1898,"ee Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DFT; pair: DFT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a un",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:8871,Modifiability,extend,extended,8871,"luate the Kohn--Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree--Fock; with potentially exact treatment of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note tha",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:19658,Modifiability,enhance,enhancement,19658,"itely NaN on you if you try to use it. :ref:`Meta Functionals <table:dft_meta>`; We have recently implemented the M05 classes of meta functionals in; |PSIfour|. Note that these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead. :ref:`Hybrid Functionals <table:dft_hybrid>`; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems. :ref:`LRC Functionals <table:dft_lrc>`; LRC functionals are a particular area of interest of the |PSIfour| DFT team.; LRC functionals are all denoted by a lower-case ""w"" in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D;",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32028,Modifiability,extend,extending,32028,"Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and M",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35274,Modifiability,variab,variables,35274,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35332,Modifiability,variab,variables,35332,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12227,Performance,optimiz,optimization,12227,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12435,Performance,tune,tuned-LRC,12435,"r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the i",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12832,Performance,tune,tuned-LRC,12832,"iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fittin",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:13438,Performance,tune,tuned,13438,"until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:26200,Performance,optimiz,optimizations,26200," considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaults to 1E-12. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28361,Performance,perform,perform,28361,"ck <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28878,Performance,perform,performs,28878,"stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of int",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29332,Performance,tune,tuned,29332,"fied Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. A",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29470,Performance,optimiz,optimized,29470,"cro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 sy",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29995,Performance,perform,perform,29995," computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do all kinds of weird stuff; basis aug-cc-pvdz # Augmented functions are very important on the anion side; scf_type df; }. # Argument is functional.; # Many optional arguments are available, see the python file; frac_traverse('wb97', molecule=h2o). The other macro is :py:func:`~psi4.driver.frac.frac_nuke`, which strips several electrons out of the; system to gather information on the MSIE over a range of orbitals. The input is; identical to the above, except that the :py:func:`~psi4",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32012,Performance,optimiz,optimizing,32012,"Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and M",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32058,Performance,perform,performance,32058,"Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and M",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25145,Safety,avoid,avoid,25145,"pan a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaul",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27204,Safety,safe,safe,27204,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33199,Security,access,accessed,33199,"s follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, param",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12247,Testability,test,test,12247,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20676,Testability,test,test,20676,"PBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +-----------------------------+-------+; | 14 | 5 |; +-----------------------------+-------+; | 26 | 7 |; +-----------------------------+-------+; | 38 ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:24865,Testability,benchmark,benchmark-level,24865,"cally 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densit",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25072,Testability,benchmark,benchmark,25072,"ft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the de",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27145,Testability,benchmark,benchmark,27145,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29316,Testability,test,test,29316,"fied Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. A",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4401,Usability,simpl,simply,4401,"some kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \c",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4802,Usability,simpl,simplest,4802,") + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1). GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate. Another local variant which has gained some popularity (though perhaps not as; much as GGA functi",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9550,Usability,simpl,simplest,9550,"the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of exact exchange borrows another piece from an existing; Hartree--Fock code, with the caveat that Hartree--Fock exchange is often much more; costly to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results. A more advanced GKS functional technology which has developed enormous; popularity in recent",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12401,Usability,simpl,simply,12401,"),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; as",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14012,Usability,simpl,simple,14012,"rm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16675,Usability,simpl,simplest,16675,".; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of th",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28385,Usability,simpl,simply,28385,"ck <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32155,Usability,guid,guidelines,32155,"t of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from with",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6256,Availability,avail,available,6256,"ken-center/software/gcp/gcp_v202.tar.gz | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-cente",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6390,Availability,avail,available,6390,"-+----------------------------------------------------------------------------------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided w",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7445,Availability,down,download,7445,"x and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dft",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7465,Availability,avail,available,7465,"x and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dft",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7656,Availability,avail,available,7656,"c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8011,Availability,error,error,8011,"da-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:11883,Availability,avail,available,11883,"-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n} f_{damp}(R_{ij}); :label: DFTD3ZERO. .. math:: f_{damp}(R_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}. A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12049,Availability,avail,available,12049,"c{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}. A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posterio",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13167,Availability,redundant,redundant,13167,"ent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13548,Availability,avail,available,13548,"un independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+======================================================================================+=================================+================",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13629,Availability,avail,available,13629," defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+======================================================================================+=================================+=============================================================================================+; | -D | alias to -D2 | | |; +-------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13851,Availability,avail,available,13851,"e same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+======================================================================================+=================================+=============================================================================================+; | -D | alias to -D2 | | |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:24115,Availability,avail,available,24115," DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. .. autofunction:: qcdb.Molecule.run_dftd3. .. autofunction",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6477,Deployability,install,installer,6477,"-------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6511,Deployability,install,installed,6511,"-------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6637,Deployability,install,install,6637,"e-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier vers",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6706,Deployability,install,install,6706,"e-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier vers",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6829,Deployability,install,installed,6829,"--+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONP",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6934,Deployability,install,install,6934,"--+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONP",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6970,Deployability,install,install,6970,"--+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONP",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7029,Deployability,install,installation,7029,"ations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7644,Deployability,patch,patches,7644,"c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8329,Deployability,patch,patch,8329," to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, disper",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8366,Deployability,patch,patching,8366,"lso,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12114,Deployability,install,installed,12114,"11:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant wor",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:9181,Energy Efficiency,energy,energy,9181,"ilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`, obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, :math:`R_{ij}`, modulated; by a damping function, :math:`f_{damp}(R_{ij})`, that gradually activates; the dispersion correction (at a rate characterized by :math:`\alpha_6`); over a distance characterized by the sum of the two atomic vdW radii,; :math:`R_{vdW}`, while an overall scaling term, :math:`s_6`, is optimized; to be unique to each :math:`E_{xc}` functional. (:math:`\alpha_6` is; sometimes allowed to vary as well.). .. math:: E_{disp}^{\text{D2}}=-s_6 \sum_{i,j>i}^{N_{at}} \frac{C_6^{ij}}{(R_{ij})^6} f_{damp}(R_{ij}); :label: DFTD2. .. math:: f_{damp}(R_{ij}) = \frac{1}{1 + e^{- \alpha",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13059,Energy Efficiency,energy,energy,13059,"3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13088,Energy Efficiency,energy,energy,13088,"4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+-------------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13281,Energy Efficiency,energy,energy,13281,"ent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13366,Energy Efficiency,energy,energy,13366,"program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+=====",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13383,Energy Efficiency,energy,energy,13383,"program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+=====",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13402,Energy Efficiency,energy,energy,13402,"program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+=====",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13422,Energy Efficiency,energy,energy,13422,"program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+=====",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:22247,Energy Efficiency,energy,energy,22247,"ed with the; Axilrod-Teller-Muto model:. .. math:: E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neq B\neq C}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC}); ; where :math:`\theta_a` is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and :math:`\bar{r}_{ABC}` is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. .. math:: C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}. See the `DFT-D3 documentation <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/man.pdf>`_ ; for more details. For now, the three-body correction can be called by using the :py:func:`~psi4.core.Molecule.run_dftd3`; function with `d3-atmgr` as the passed functional string. ; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with::. molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with defaul",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:22298,Energy Efficiency,energy,energy,22298,". .. math:: E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neq B\neq C}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC}); ; where :math:`\theta_a` is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and :math:`\bar{r}_{ABC}` is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. .. math:: C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}. See the `DFT-D3 documentation <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/man.pdf>`_ ; for more details. For now, the three-body correction can be called by using the :py:func:`~psi4.core.Molecule.run_dftd3`; function with `d3-atmgr` as the passed functional string. ; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with::. molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23190,Energy Efficiency,energy,energy,23190,".0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23535,Energy Efficiency,energy,energy,23535,"; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23626,Energy Efficiency,energy,energy,23626," [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the se",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:24088,Energy Efficiency,energy,energy,24088,"[Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. ..",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:24204,Energy Efficiency,energy,energy,24204,"::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. .. autofunction:: qcdb.Molecule.run_dftd3. .. autofunction:: qcdb.Molecule.run_dftd4. .. autoclass:: psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion. .. comment print_stdout(' -D ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:27624,Energy Efficiency,energy,energy,27624,"d3bj[1], E, 7, 'Ethene -D3 (bj)'); .. comment mB = eneyne.extract_subsets(2); .. comment E, G = mB.run_dftd3('b3lyp', 'd3bj'); .. comment compare_values(ref_d3bj[2], E, 7, 'Ethyne -D3 (bj)'); .. comment ; .. comment E, G = eneyne.run_dftd3('b3lyp', 'd3'); .. comment compare_values(ref_d3zero[0], E, 7, 'Ethene-Ethyne -D3 (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd2'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D2 (alias)'); .. comment ; .. comment set basis sto-3g; .. comment set scf_type df; .. comment set dft_radial_points 50 # use really bad grid for speed since all we want is the -D value; .. comment set dft_spherical_points 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERS",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:27784,Energy Efficiency,energy,energy,27784,"j[2], E, 7, 'Ethyne -D3 (bj)'); .. comment ; .. comment E, G = eneyne.run_dftd3('b3lyp', 'd3'); .. comment compare_values(ref_d3zero[0], E, 7, 'Ethene-Ethyne -D3 (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd2'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D2 (alias)'); .. comment ; .. comment set basis sto-3g; .. comment set scf_type df; .. comment set dft_radial_points 50 # use really bad grid for speed since all we want is the -D value; .. comment set dft_spherical_points 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION E",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:27939,Energy Efficiency,energy,energy,27939,"e -D3 (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D (alias)'); .. comment E, G = eneyne.run_dftd3('b3lyp', 'd2'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D2 (alias)'); .. comment ; .. comment set basis sto-3g; .. comment set scf_type df; .. comment set dft_radial_points 50 # use really bad grid for speed since all we want is the -D value; .. comment set dft_spherical_points 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28101,Energy Efficiency,energy,energy,28101,"ne.run_dftd3('b3lyp', 'd2'); .. comment compare_values(ref_d2[0], E, 7, 'Ethene-Ethyne -D2 (alias)'); .. comment ; .. comment set basis sto-3g; .. comment set scf_type df; .. comment set dft_radial_points 50 # use really bad grid for speed since all we want is the -D value; .. comment set dft_spherical_points 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Et",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28270,Energy Efficiency,energy,energy,28270,"df; .. comment set dft_radial_points 50 # use really bad grid for speed since all we want is the -D value; .. comment set dft_spherical_points 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], g",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28410,Energy Efficiency,energy,energy,28410,"ts 110; .. comment #set scf print 3 # will print dftd3 program output to psi4 output file; .. comment ; .. comment ; .. comment print_stdout(' -D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28554,Energy Efficiency,energy,energy,28554,"-D correction from C-side'); .. comment activate(mA); .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Et",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28692,Energy Efficiency,energy,energy,28692,"DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:28993,Energy Efficiency,energy,energy,28993,"1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_d3bj[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION EN",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:29212,Energy Efficiency,energy,energy,29212,"-D3 (calling dftd3 -bj)'); .. comment ; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment energy('b3lyp-d3'); .. comment compare_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERG",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:29439,Energy Efficiency,energy,energy,29439,"e_values(ref_d3zero[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment energy('b3lyp-d'); .. comment compare_values(ref_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. com",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:29679,Energy Efficiency,energy,energy,29679,"mment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from C-side'); .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment p",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:29901,Energy Efficiency,energy,energy,29901," .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from Py-side'); .. comment eneyne.update_geometry(); .. comment eneyne.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[0], get_variable('DISPERSION CO",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:30113,Energy Efficiency,energy,energy,30113,"alling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from Py-side'); .. comment eneyne.update_geometry(); .. comment eneyne.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[0], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene-Ethyne -D2'); .. comment mA = eneyne.extract_subsets(1); .. comment mA.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[1], get_variable('DISPERSION COR",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:30310,Energy Efficiency,energy,energy,30310,"GY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from Py-side'); .. comment eneyne.update_geometry(); .. comment eneyne.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[0], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene-Ethyne -D2'); .. comment mA = eneyne.extract_subsets(1); .. comment mA.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2'); .. comment mB = eneyne.extract_subsets(2); .. comment mB.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERS",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:30525,Energy Efficiency,energy,energy,30525,"ON CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from Py-side'); .. comment eneyne.update_geometry(); .. comment eneyne.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[0], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene-Ethyne -D2'); .. comment mA = eneyne.extract_subsets(1); .. comment mA.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[1], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2'); .. comment mB = eneyne.extract_subsets(2); .. comment mB.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethyne -D2'); .. comment ; .. comment eneyne.run_dftd3('b3lyp', 'd3zero', {'s6': 1.0, 's8': 0.722, 'sr6': 1.217, 'alpha6': 14.0}); .. comment compare_values(ref_pbe_d3zero[0], get_variab",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12174,Integrability,interface,interfaces,12174,"11:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant wor",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12227,Integrability,interface,interfaced,12227,"11:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant wor",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12262,Integrability,interface,interface,12262,". math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:21123,Integrability,interface,interface,21123,"--+---------------------------------------------------------------------------------------------+; | -DAS2010 | Podeszwa & Szalewicz dispersion formula [#f9]_ | |PSIfours| libdisp | [:math:`s_6`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D4BJEEQATM, -D4BJ, -D4 | -D4 [#f11]_ | ``dftd4`` | [:math:`a_1`, :math:`a_2`, :math:`alp`, :math:`s_6`, :math:`s_8`, :math:`s_9`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+. Three-Body Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the previously discussed two-body dispersion corrections, ; the ``dftd3``/|PSIfour| interface enables computations of three-body dispersion; corrections. In ``DFT-D3``, three-body dispersion is approximated with the; Axilrod-Teller-Muto model:. .. math:: E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neq B\neq C}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC}); ; where :math:`\theta_a` is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and :math:`\bar{r}_{ABC}` is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. .. math:: C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}. See the `DFT-D3 documentation <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/man.pdf>`_ ; for more details. For now, the three-body correction can be called by using the :py:func:`~psi4.core.Molecule.run_dftd3`; function with `d3-atmgr` as the passed functional string. ; For example, the three-body ATM dispersion correc",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23986,Integrability,interface,interface,23986,"ion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:24046,Integrability,rout,route,24046,"[Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. ..",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:24102,Integrability,rout,route,24102," DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the section above::. >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05; ; >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]; ; >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05; ; >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. .. autofunction:: qcdb.Molecule.run_dftd3. .. autofunction",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8142,Modifiability,variab,variables,8142,"hon``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13671,Modifiability,variab,variable,13671," defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | Extension [#f0]_ and Aliases | Variant | Computing Program (engine) | |scf__dft_dispersion_parameters| [#f10]_ |; +=====================================+======================================================================================+=================================+=============================================================================================+; | -D | alias to -D2 | | |; +-------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:17378,Modifiability,flexible,flexible,17378,"-------------------------------------------------------------+; | -D3BJ2B, -D3BJ, -D3(BJ) | -D3 [#f4]_ w/ newer Becke-Johnson rational damping w/o 3-body ATM | ``s-dftd3`` or ``dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`a_1`, :math:`a_2`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3BJATM | -D3 [#f4]_ w/ newer Becke-Johnson rational damping w/ 3-body ATM | ``s-dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`a_1`, :math:`a_2`, :math:`s_9`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MZERO2B, -D3MZERO, -D3M2B, -D3M | -D3 [#f5]_ w/ reparameterized and more flexible original zero-damping w/o 3-body ATM | ``s-dftd3`` OR ``dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`s_{r,6}`, :math:`\beta`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MZEROATM | -D3 [#f5]_ w/ reparameterized and more flexible original zero-damping w/ 3-body ATM | ``s-dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`s_{r,6}`, :math:`\beta`, :math:`s_9`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MBJ2B, -D3MBJ, -D3M(BJ) | -D3 [#f5]_ w/ reparameterized newer Becke-Johnson rational damping w/o 3-body ATM | ``s-dftd3`` OR ``dftd3`` | [:math:`s_6`, :math:`s_",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:17826,Modifiability,flexible,flexible,17826,"------------------------------------------------+; | -D3BJATM | -D3 [#f4]_ w/ newer Becke-Johnson rational damping w/ 3-body ATM | ``s-dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`a_1`, :math:`a_2`, :math:`s_9`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MZERO2B, -D3MZERO, -D3M2B, -D3M | -D3 [#f5]_ w/ reparameterized and more flexible original zero-damping w/o 3-body ATM | ``s-dftd3`` OR ``dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`s_{r,6}`, :math:`\beta`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MZEROATM | -D3 [#f5]_ w/ reparameterized and more flexible original zero-damping w/ 3-body ATM | ``s-dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`s_{r,6}`, :math:`\beta`, :math:`s_9`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MBJ2B, -D3MBJ, -D3M(BJ) | -D3 [#f5]_ w/ reparameterized newer Becke-Johnson rational damping w/o 3-body ATM | ``s-dftd3`` OR ``dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`a_1`, :math:`a_2`] |; +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------+; | -D3MBJATM | -D3 [#f5]_ w/ reparameterized newer Becke-Johnson rational damping w/ 3-body ATM | ``s-dftd3`` | [:math:`s_6`, :math:`s_8`, :math:`a_1`, :math:`a",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:9792,Performance,optimiz,optimized,9792," .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`, obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, :math:`R_{ij}`, modulated; by a damping function, :math:`f_{damp}(R_{ij})`, that gradually activates; the dispersion correction (at a rate characterized by :math:`\alpha_6`); over a distance characterized by the sum of the two atomic vdW radii,; :math:`R_{vdW}`, while an overall scaling term, :math:`s_6`, is optimized; to be unique to each :math:`E_{xc}` functional. (:math:`\alpha_6` is; sometimes allowed to vary as well.). .. math:: E_{disp}^{\text{D2}}=-s_6 \sum_{i,j>i}^{N_{at}} \frac{C_6^{ij}}{(R_{ij})^6} f_{damp}(R_{ij}); :label: DFTD2. .. math:: f_{damp}(R_{ij}) = \frac{1}{1 + e^{- \alpha_6 (R_{ij}/R_{vdW} - 1)}}. Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]_; which incorporates an additional :math:`R^{-8}` term in the dispersion; series and adjusts the :math:`C_{6}^{ij}` combination formula and damping; function. The individual atomic :math:`C_6^i` are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:22390,Performance,concurren,concurrent,22390,"}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC}); ; where :math:`\theta_a` is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and :math:`\bar{r}_{ABC}` is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. .. math:: C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}. See the `DFT-D3 documentation <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/man.pdf>`_ ; for more details. For now, the three-body correction can be called by using the :py:func:`~psi4.core.Molecule.run_dftd3`; function with `d3-atmgr` as the passed functional string. ; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with::. molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; opt",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23219,Performance,optimiz,optimization,23219,"e_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculatio",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23260,Performance,optimiz,optimize,23260,"3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion paramet",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23291,Performance,optimiz,optimization,23291," Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23371,Performance,optimiz,optimize,23371,"can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" cal",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7898,Safety,detect,detect,7898,"lready been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect o",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13167,Safety,redund,redundant,13167,"ent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12422,Testability,test,tested,12422,". .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3');",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3022,Usability,simpl,simple-,3022,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3295,Usability,simpl,simple-,3295,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3318,Usability,simpl,simple-,3318,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3366,Usability,simpl,simple-,3366,"/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd4-python`` | ``import dftd4`` | nyi | preferred | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::dftd4`` | ``bin/dftd4`` | | | | https://github.com/dftd4/dftd4 | |; +--------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8090,Usability,simpl,simply,8090,"hon``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12291,Usability,simpl,simple-,12291,". math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13046,Usability,simpl,simple,13046,"3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2311,Availability,avail,available,2311,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:1241,Energy Efficiency,energy,energy,1241,"les.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:1495,Energy Efficiency,energy,energy,1495,"; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To acti",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:1863,Energy Efficiency,energy,energy,1863,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2052,Energy Efficiency,energy,energy,2052,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2287,Energy Efficiency,energy,energy,2287,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2178,Testability,test,test,2178,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2184,Testability,test,tests,2184,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft_byfunctional.rst:1036,Availability,avail,available,1036,"4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: DFT; available functionals; .. _`apdx:dftFunctionals`:. DFT Functionals; ===============. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:; :glob:. autodoc_dft_*. .. _`table:dft_all`:. All Available; -------------. .. include:: autodoc_dft_all.rst. .. _`table:dft_gga`:. GGA; ---. .. include:: autodoc_dft_gga.rst. .. _`table:dft_meta`:. Meta; ----. .. include:: autodoc_dft_meta.rst. .. _`table:dft_lrc`:. Long-Range Corrected; --------------------. .. include:: autodoc_dft_lrc.rst. .. _`table:dft_hybrid`:. Hybrid; ------. .. include:: autodoc_dft_hybrid.rst. .. _`table:dft_dhybrid`:. Double-Hybrid; -------------. .. include:: autodoc_dft_dhybrid.rst. .. _`table:dft_scsdhybrid`:. SCS Double-Hybrid; -----------------. .. comment .. include:: autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx. .. _`table:dft_disp`:. Dispersion-Corrected; --------------------. .. include:: autodoc_df",MatchSource.DOCS,doc/sphinxman/source/dft_byfunctional.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft_byfunctional.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1774,Availability,avail,available,1774,"NU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate depend",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1918,Deployability,install,installed,1918,"are Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2023,Deployability,install,installed,2023,"todoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computat",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2111,Deployability,install,install,2111,"todoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computat",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2450,Deployability,install,installation,2450,". raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4410,Deployability,install,installation,4410,"obals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DC",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4570,Deployability,install,installation,4570,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:3126,Energy Efficiency,energy,energy,3126,".; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream D",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2295,Integrability,depend,dependent,2295,"Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2808,Integrability,depend,dependent,2808,"on.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4364,Integrability,depend,dependencies,4364,"in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detect",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:5409,Integrability,depend,dependencies,5409,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:3828,Modifiability,config,configure,3828,"or all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4230,Modifiability,variab,variable,4230,"in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detect",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4328,Modifiability,variab,variable,4328,"in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detect",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4509,Modifiability,variab,variable,4509,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4699,Modifiability,variab,variable,4699,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4828,Modifiability,variab,variable,4828,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:5233,Modifiability,config,configdir,5233,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:3183,Performance,perform,performed,3183,"h :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortr",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2271,Safety,detect,detect,2271,"Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4750,Safety,detect,detecting,4750,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4846,Safety,detect,detecting,4846,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:5285,Safety,detect,detectable,5285,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1341,Testability,test,testSuitedkh,1341,"s free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:2356,Availability,error,errors,2356,"onauthor:: Zach Glick. *Module:* :ref:`Keywords <apdx:dlpno>`, :ref:`PSI Variables <apdx:dlpno_psivar>`, :source:`DLPNOMP2 <psi4/src/psi4/dlpno>`. Introduction; ------------. The steep polynomial scaling (in both time and memory) of post-HF dynamic; correlation methods prohibits calculations on large systems, even for efficient; codes like |PSIfours| :ref:`DF-MP2 <sec:dfmp2>`. This poor scaling is in part; due to the use of canonical HF orbitals, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:2724,Availability,recover,recovered,2724,"als, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:5669,Availability,error,error,5669,"; :label: Residual. R_{ij}^{ab} = (ia|jb) + (\epsilon_a + \epsilon_b - f_{ii} - f_{jj})t_{ij}^{ab} - \sum_{k \ne j} f_{ik} \sum_{c,d} S_{ac}t_{kj}^{c,d}S_{db} - \sum_{k \ne i} f_{kj} \sum_{cd} S_{ac}t_{ik}^{cd}S_{db} . where ``i``, ``j``, and ``k`` are (not necessarily canonical) occupied orbitals, ``a``,; ``b``, ``c``, and ``d`` are virtual orbitals, :math:`f_{ij}` are fock matrix elements,; :math:`S_{ab}` are orbital overlaps, and finally :math:`t_{ij}^{ab}` are the MP2; amplitudes to be solved for. Virtual orbitals may be different for each pair; of occupied orbitals. For a given occupied orbital pair ``ij``, all virtuals are; orthogonal and canonical, but virtuals belonging to different pair domains; may not be orthogonal. The following expression is used to evaluate the energy of a given set of amplitudes:. .. math::; :label: Energy. E^{(2)} &= \sum_{i,j} e_{ij}, \\; e_{ij} &= \sum_{a, b}((ia|jb) + R_{ij}^{ab})(2t_{ij}^{ab} - t_{ij}^{ba}). The error in :math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \epsilon_{b_{j}} - f_{ii} - f_{jj}},. in which small domains of virtual orbitals are used for each local MO. As a; result, an asymptotically linear number of ``ij`` pairs enter the local MP2; equations, and the approximate ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:5724,Availability,error,error,5724,"; :label: Residual. R_{ij}^{ab} = (ia|jb) + (\epsilon_a + \epsilon_b - f_{ii} - f_{jj})t_{ij}^{ab} - \sum_{k \ne j} f_{ik} \sum_{c,d} S_{ac}t_{kj}^{c,d}S_{db} - \sum_{k \ne i} f_{kj} \sum_{cd} S_{ac}t_{ik}^{cd}S_{db} . where ``i``, ``j``, and ``k`` are (not necessarily canonical) occupied orbitals, ``a``,; ``b``, ``c``, and ``d`` are virtual orbitals, :math:`f_{ij}` are fock matrix elements,; :math:`S_{ab}` are orbital overlaps, and finally :math:`t_{ij}^{ab}` are the MP2; amplitudes to be solved for. Virtual orbitals may be different for each pair; of occupied orbitals. For a given occupied orbital pair ``ij``, all virtuals are; orthogonal and canonical, but virtuals belonging to different pair domains; may not be orthogonal. The following expression is used to evaluate the energy of a given set of amplitudes:. .. math::; :label: Energy. E^{(2)} &= \sum_{i,j} e_{ij}, \\; e_{ij} &= \sum_{a, b}((ia|jb) + R_{ij}^{ab})(2t_{ij}^{ab} - t_{ij}^{ba}). The error in :math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \epsilon_{b_{j}} - f_{ii} - f_{jj}},. in which small domains of virtual orbitals are used for each local MO. As a; result, an asymptotically linear number of ``ij`` pairs enter the local MP2; equations, and the approximate ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:9613,Availability,error,errors,9613,"des. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size. * DLPNO-MP2 is not symmetry aware. This should not be a concern for large systems in; which symmetry is seldom present. * As with DF-MP2, freezing core orbitals (by setting |globals__freeze_core|; to ``True``) is recommended for efficiency. In DLPNO methods, this is also; recommended for accuracy, since core excitations are known to exhibit; greater errors relative to valence excitations. * At the moment, the DLPNO-MP2 code is only compatible with with RHF references.; ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:1582,Energy Efficiency,efficient,efficient,1582,"hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DLPNO-MP2. .. _`sec:dlpnomp2`:. DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; ======================================================. .. codeauthor:: Zach Glick ; .. sectionauthor:: Zach Glick. *Module:* :ref:`Keywords <apdx:dlpno>`, :ref:`PSI Variables <apdx:dlpno_psivar>`, :source:`DLPNOMP2 <psi4/src/psi4/dlpno>`. Introduction; ------------. The steep polynomial scaling (in both time and memory) of post-HF dynamic; correlation methods prohibits calculations on large systems, even for efficient; codes like |PSIfours| :ref:`DF-MP2 <sec:dfmp2>`. This poor scaling is in part; due to the use of canonical HF orbitals, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; co",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:2714,Energy Efficiency,energy,energy,2714,"als, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:3389,Energy Efficiency,energy,energy,3389,"ontrollable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that the water molecule in this example is not large; enough for DLPNO-MP2 to be of any benefit relative to DF-MP2. The theory of the DLPNO-MP2 method and practical recommendations for using the; code are presented below. . .. index::; pair: DLPNO-MP2; theory. Theory; ------. See :ref:`DF-MP2 <sec:dfmp2>` for background on the theory of (non-local); density-fitted MP2. |PSIfours| DLPNO-MP2 implementation is based on the ; manuscript by Pinski et al. [Pinski:2015:034108]_. In DLPNO-MP2, as in all local MP2 methods, the second-order MBPT energy is determined ; variationally via the Hylleraas functional [Hylleraas:1930:209]_:. .. math::",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:3477,Energy Efficiency,energy,energy,3477,"code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that the water molecule in this example is not large; enough for DLPNO-MP2 to be of any benefit relative to DF-MP2. The theory of the DLPNO-MP2 method and practical recommendations for using the; code are presented below. . .. index::; pair: DLPNO-MP2; theory. Theory; ------. See :ref:`DF-MP2 <sec:dfmp2>` for background on the theory of (non-local); density-fitted MP2. |PSIfours| DLPNO-MP2 implementation is based on the ; manuscript by Pinski et al. [Pinski:2015:034108]_. In DLPNO-MP2, as in all local MP2 methods, the second-order MBPT energy is determined ; variationally via the Hylleraas functional [Hylleraas:1930:209]_:. .. math::; :label: Hylleraas. E^{(2)} = 2 \langle \Psi_{0}^{(0)} | \hat{H} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle - \langle \Psi_{0",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:3531,Energy Efficiency,energy,energy,3531,"; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that the water molecule in this example is not large; enough for DLPNO-MP2 to be of any benefit relative to DF-MP2. The theory of the DLPNO-MP2 method and practical recommendations for using the; code are presented below. . .. index::; pair: DLPNO-MP2; theory. Theory; ------. See :ref:`DF-MP2 <sec:dfmp2>` for background on the theory of (non-local); density-fitted MP2. |PSIfours| DLPNO-MP2 implementation is based on the ; manuscript by Pinski et al. [Pinski:2015:034108]_. In DLPNO-MP2, as in all local MP2 methods, the second-order MBPT energy is determined ; variationally via the Hylleraas functional [Hylleraas:1930:209]_:. .. math::; :label: Hylleraas. E^{(2)} = 2 \langle \Psi_{0}^{(0)} | \hat{H} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle - \langle \Psi_{0}^{(1)} | \hat{H}^{(0)} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle = \mi",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:4246,Energy Efficiency,energy,energy,4246,"H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that the water molecule in this example is not large; enough for DLPNO-MP2 to be of any benefit relative to DF-MP2. The theory of the DLPNO-MP2 method and practical recommendations for using the; code are presented below. . .. index::; pair: DLPNO-MP2; theory. Theory; ------. See :ref:`DF-MP2 <sec:dfmp2>` for background on the theory of (non-local); density-fitted MP2. |PSIfours| DLPNO-MP2 implementation is based on the ; manuscript by Pinski et al. [Pinski:2015:034108]_. In DLPNO-MP2, as in all local MP2 methods, the second-order MBPT energy is determined ; variationally via the Hylleraas functional [Hylleraas:1930:209]_:. .. math::; :label: Hylleraas. E^{(2)} = 2 \langle \Psi_{0}^{(0)} | \hat{H} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle - \langle \Psi_{0}^{(1)} | \hat{H}^{(0)} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle = \min_{| \Psi_{0}^{(1)} \rangle}. Determining the optimal :math:`| \Psi_{0}^{(1)} \rangle` entails iteratively; minimizing the following residual [Pulay:1986:357]_:. .. math::; :label: Residual. R_{ij}^{ab} = (ia|jb) + (\epsilon_a + \epsilon_b - f_{ii} - f_{jj})t_{ij}^{ab} - \sum_{k \ne j} f_{ik} \sum_{c,d} S_{ac}t_{kj}^{c,d}S_{db} - \sum_{k \ne i} f_{kj} \sum_{cd} S_{ac}t_{ik}^{cd}S_{db} . where ``i``, ``j``, and ``k`` are (not necessarily canonical) occupied orbitals, ``a``,; ``b``, ``c``, and ``d`` are virtual orbitals, :math:`f_{ij}` are fock matrix elements,; :math:`S_{ab}` are orbital overlaps, and finally :math:`t_{ij}^{ab}` are the MP2; amplitudes to be solved for. Virtual orbitals may be different for each pa",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:5492,Energy Efficiency,energy,energy,5492,"{(0)} - E_{0}^{(0)} | \Psi_{0}^{(1)} \rangle = \min_{| \Psi_{0}^{(1)} \rangle}. Determining the optimal :math:`| \Psi_{0}^{(1)} \rangle` entails iteratively; minimizing the following residual [Pulay:1986:357]_:. .. math::; :label: Residual. R_{ij}^{ab} = (ia|jb) + (\epsilon_a + \epsilon_b - f_{ii} - f_{jj})t_{ij}^{ab} - \sum_{k \ne j} f_{ik} \sum_{c,d} S_{ac}t_{kj}^{c,d}S_{db} - \sum_{k \ne i} f_{kj} \sum_{cd} S_{ac}t_{ik}^{cd}S_{db} . where ``i``, ``j``, and ``k`` are (not necessarily canonical) occupied orbitals, ``a``,; ``b``, ``c``, and ``d`` are virtual orbitals, :math:`f_{ij}` are fock matrix elements,; :math:`S_{ab}` are orbital overlaps, and finally :math:`t_{ij}^{ab}` are the MP2; amplitudes to be solved for. Virtual orbitals may be different for each pair; of occupied orbitals. For a given occupied orbital pair ``ij``, all virtuals are; orthogonal and canonical, but virtuals belonging to different pair domains; may not be orthogonal. The following expression is used to evaluate the energy of a given set of amplitudes:. .. math::; :label: Energy. E^{(2)} &= \sum_{i,j} e_{ij}, \\; e_{ij} &= \sum_{a, b}((ia|jb) + R_{ij}^{ab})(2t_{ij}^{ab} - t_{ij}^{ba}). The error in :math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \ep",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:6240,Energy Efficiency,energy,energy,6240,"ent for each pair; of occupied orbitals. For a given occupied orbital pair ``ij``, all virtuals are; orthogonal and canonical, but virtuals belonging to different pair domains; may not be orthogonal. The following expression is used to evaluate the energy of a given set of amplitudes:. .. math::; :label: Energy. E^{(2)} &= \sum_{i,j} e_{ij}, \\; e_{ij} &= \sum_{a, b}((ia|jb) + R_{ij}^{ab})(2t_{ij}^{ab} - t_{ij}^{ba}). The error in :math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \epsilon_{b_{j}} - f_{ii} - f_{jj}},. in which small domains of virtual orbitals are used for each local MO. As a; result, an asymptotically linear number of ``ij`` pairs enter the local MP2; equations, and the approximate pair energy of neglected pairs is added to; the final energy. The second major local approximation in DLPNO-MP2 is the truncation of the virtual; space. Initially, exchange integrals are calculated in the LMO/PAO basis using the; standard density fitting approach:. .. math::; :label: Exchange. (ia|jb) = \sum_{K,L \in [ij]} (ia|K)[\mathbf{J}^{-1}]_{KL}(L|jb). This is done with linear scaling effort by exploiting the locality of the LMOs, PAOs,; and auxiliary basis functions.; Solving the iterative local MP2 equations in the LMO/PAO ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:6711,Energy Efficiency,energy,energy,6711,"math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \epsilon_{b_{j}} - f_{ii} - f_{jj}},. in which small domains of virtual orbitals are used for each local MO. As a; result, an asymptotically linear number of ``ij`` pairs enter the local MP2; equations, and the approximate pair energy of neglected pairs is added to; the final energy. The second major local approximation in DLPNO-MP2 is the truncation of the virtual; space. Initially, exchange integrals are calculated in the LMO/PAO basis using the; standard density fitting approach:. .. math::; :label: Exchange. (ia|jb) = \sum_{K,L \in [ij]} (ia|K)[\mathbf{J}^{-1}]_{KL}(L|jb). This is done with linear scaling effort by exploiting the locality of the LMOs, PAOs,; and auxiliary basis functions.; Solving the iterative local MP2 equations in the LMO/PAO basis requires large PAO; domains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed fr",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:6760,Energy Efficiency,energy,energy,6760,"math:`E^{(2)}` scales quadratically with the error in the amplitudes. No local approximations have been made so far, and this iterative approach can; be used to exactly determine :math:`E^{(2)}` with :math:`{\cal O}(N^5)` cost.; In DLPNO-MP2, the first local approximation is to screen distant, non-interacting; orbital pairs ``ij``. Orbital pairs are screened if below both an overlap criteria:. .. math::; :label: Differential Overlap Integral. DOI_{ij} \equiv \sqrt{\int d\mathbf{r} | \chi_{i}(\mathbf{r}) | ^{2} | \chi_{j}(\mathbf{r}) | ^{2}}, . and a pair energy estimate: . .. math::; :label: Dipole Approximation. e_{ij}^{approx} = -\frac{4}{R^{6}} \sum_{a_{i} \in [i],b_{j} \in [j]} \frac{ (2 \langle i | \mathbf{r} | a_{i} \rangle \langle j | \mathbf{r} | b_{j} \rangle)^{2}}{\epsilon_{a_{i}} + \epsilon_{b_{j}} - f_{ii} - f_{jj}},. in which small domains of virtual orbitals are used for each local MO. As a; result, an asymptotically linear number of ``ij`` pairs enter the local MP2; equations, and the approximate pair energy of neglected pairs is added to; the final energy. The second major local approximation in DLPNO-MP2 is the truncation of the virtual; space. Initially, exchange integrals are calculated in the LMO/PAO basis using the; standard density fitting approach:. .. math::; :label: Exchange. (ia|jb) = \sum_{K,L \in [ij]} (ia|K)[\mathbf{J}^{-1}]_{KL}(L|jb). This is done with linear scaling effort by exploiting the locality of the LMOs, PAOs,; and auxiliary basis functions.; Solving the iterative local MP2 equations in the LMO/PAO basis requires large PAO; domains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed fr",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:8278,Integrability,depend,depends,8278,"cy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed from semicanonical amplitudes:. .. math::; :label: Amplitudes. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size. * DLPNO-MP2 is not symmetry aware. This shou",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:8205,Performance,perform,performed,8205,"ctions.; Solving the iterative local MP2 equations in the LMO/PAO basis requires large PAO; domains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed from semicanonical amplitudes:. .. math::; :label: Amplitudes. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefit",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:2724,Safety,recover,recovered,2724,"als, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1323,Availability,avail,available,1323,"n redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentatio",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1870,Availability,avail,available,1870,"General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the f",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:2242,Availability,avail,available,2242,".org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building the; documentation). Only GNU Makefiles, not Ninja, works for the docs:. .. code-block:: console. >>> make sphinxman; # -OR-; >>> cmake --build . --target sphinxman. This will build a full set of documentation in the ``html`` directory that can be viewed offline through any browser. ::. doc/sphinxman/html/index.html; ; Much of the documentat",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5480,Availability,avail,availability,5480,"n plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6674,Availability,avail,available,6674,"sislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case;",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:8708,Availability,error,errors,8708,"-*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even when the LaTeX; looked sound. The Map of the Sphinx; ^^^^^^^^^^^^^^^^^^^^^. * Adding a new Appendix or First-TOC-Level page. Create your reST file and fill it with information. Add the name of your; file to :source:`doc/sphinxman/source/appendices.rst` for an appendix or; to :source:`doc/sphinxman/source/index.rst` for a first-TOC-level.; Finally, add your file to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your; new page. * Adding a new module to ""Theoretical Methods"". Copy the file of a well-established module, like; :source:`doc/sphinxman/source/sapt.rst`. Change the title, author, sec; label, ref, and source labels at the top of the file to point instead to; your code. Edit :source:`doc/sphinxman/source/methods.rst` to add the; name of your file so that it will appear in the TOC tree. Add your file; to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your new;",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1643,Deployability,install,installed,1643,"out even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentat",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1668,Deployability,install,installation,1668,"R A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; document",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1899,Deployability,install,install,1899,"51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building th",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:2001,Deployability,install,install,2001,"E; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building the; documentation). Only GNU Makefiles, not Ninja, works for the docs:. .. code-blo",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5803,Integrability,depend,dependency,5803,"obal and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.ht",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6015,Integrability,depend,dependencies,6015,"abled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6071,Integrability,depend,depend,6071,"abled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1822,Modifiability,config,configure,1822,"General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the f",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:3738,Modifiability,variab,variables,3738,"ect directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building the; documentation). Only GNU Makefiles, not Ninja, works for the docs:. .. code-block:: console. >>> make sphinxman; # -OR-; >>> cmake --build . --target sphinxman. This will build a full set of documentation in the ``html`` directory that can be viewed offline through any browser. ::. doc/sphinxman/html/index.html; ; Much of the documentation is auto-generated from the source. At present,; this covers:. * Physical Constants: :source:`psi4/include/psi4/physconst.h`; * Python Driver: docstrings from \*.py files in :source:`psi4/driver`; * Databases: docstrings from \*.py files in :source:`psi4/share/psi4/databases`; * Basis Sets: \*.gbs files in :source:`psi4/share/psi4/basis`; * C++ Keywords: :source:`psi4/src/read_options.cc`; * Sample Inputs: input.dat files in :source:`samples`; * PSI Variables: variables and associated modules extracted from code and comments in the Python and C++ source; * Modules scraped are the sections of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; *",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:4222,Modifiability,variab,variable,4222,"c/sphinxman/html/index.html; ; Much of the documentation is auto-generated from the source. At present,; this covers:. * Physical Constants: :source:`psi4/include/psi4/physconst.h`; * Python Driver: docstrings from \*.py files in :source:`psi4/driver`; * Databases: docstrings from \*.py files in :source:`psi4/share/psi4/databases`; * Basis Sets: \*.gbs files in :source:`psi4/share/psi4/basis`; * C++ Keywords: :source:`psi4/src/read_options.cc`; * Sample Inputs: input.dat files in :source:`samples`; * PSI Variables: variables and associated modules extracted from code and comments in the Python and C++ source; * Modules scraped are the sections of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runt",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:4419,Modifiability,variab,variable,4419,"ython Driver: docstrings from \*.py files in :source:`psi4/driver`; * Databases: docstrings from \*.py files in :source:`psi4/share/psi4/databases`; * Basis Sets: \*.gbs files in :source:`psi4/share/psi4/basis`; * C++ Keywords: :source:`psi4/src/read_options.cc`; * Sample Inputs: input.dat files in :source:`samples`; * PSI Variables: variables and associated modules extracted from code and comments in the Python and C++ source; * Modules scraped are the sections of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`p",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:4480,Modifiability,variab,variable,4480,"ython Driver: docstrings from \*.py files in :source:`psi4/driver`; * Databases: docstrings from \*.py files in :source:`psi4/share/psi4/databases`; * Basis Sets: \*.gbs files in :source:`psi4/share/psi4/basis`; * C++ Keywords: :source:`psi4/src/read_options.cc`; * Sample Inputs: input.dat files in :source:`samples`; * PSI Variables: variables and associated modules extracted from code and comments in the Python and C++ source; * Modules scraped are the sections of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`p",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:4732,Modifiability,variab,variables,4732,"les and associated modules extracted from code and comments in the Python and C++ source; * Modules scraped are the sections of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building al",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:4841,Modifiability,variab,variables,4841,"of :source:`psi4/src/read_options.cc`; * Variables should be all-caps, except where representing substitutions, e.g., ``ROOT n -> ROOT m`` and double-quote ``""`` delimited, even in Python; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLi",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5019,Modifiability,plugin,plugin,5019,"n; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6046,Modifiability,variab,variables,6046,"abled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:9105,Modifiability,variab,variable,9105," in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even when the LaTeX; looked sound. The Map of the Sphinx; ^^^^^^^^^^^^^^^^^^^^^. * Adding a new Appendix or First-TOC-Level page. Create your reST file and fill it with information. Add the name of your; file to :source:`doc/sphinxman/source/appendices.rst` for an appendix or; to :source:`doc/sphinxman/source/index.rst` for a first-TOC-level.; Finally, add your file to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your; new page. * Adding a new module to ""Theoretical Methods"". Copy the file of a well-established module, like; :source:`doc/sphinxman/source/sapt.rst`. Change the title, author, sec; label, ref, and source labels at the top of the file to point instead to; your code. Edit :source:`doc/sphinxman/source/methods.rst` to add the; name of your file so that it will appear in the TOC tree. Add your file; to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your new; file. Follow the models in existing methods pages to write your; documentation. If you don't get all the keyword links, bibliography; links, sample inputs, math, tables, etc. working in Sphinx, don't worry; about it. A genie will probably come through and tidy up all your; source. ",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:9610,Modifiability,variab,variable,9610," in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even when the LaTeX; looked sound. The Map of the Sphinx; ^^^^^^^^^^^^^^^^^^^^^. * Adding a new Appendix or First-TOC-Level page. Create your reST file and fill it with information. Add the name of your; file to :source:`doc/sphinxman/source/appendices.rst` for an appendix or; to :source:`doc/sphinxman/source/index.rst` for a first-TOC-level.; Finally, add your file to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your; new page. * Adding a new module to ""Theoretical Methods"". Copy the file of a well-established module, like; :source:`doc/sphinxman/source/sapt.rst`. Change the title, author, sec; label, ref, and source labels at the top of the file to point instead to; your code. Edit :source:`doc/sphinxman/source/methods.rst` to add the; name of your file so that it will appear in the TOC tree. Add your file; to the ``STATICDOC`` variable in; :source:`doc/sphinxman/CMakeLists.txt`. Sphinx will now build with your new; file. Follow the models in existing methods pages to write your; documentation. If you don't get all the keyword links, bibliography; links, sample inputs, math, tables, etc. working in Sphinx, don't worry; about it. A genie will probably come through and tidy up all your; source. ",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5002,Testability,test,tests,5002,"n; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6307,Testability,test,testing,6307,"` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.e",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6941,Testability,test,test,6941,"t (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characte",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6988,Testability,test,test,6988,"all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special s",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7061,Testability,test,test,7061,", depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The auto",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7656,Testability,test,test,7656,"de is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online re",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7399,Usability,guid,guide,7399,"ly the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings a",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:1814,Availability,avail,available,1814," Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:1924,Deployability,install,installed,1924," Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Rol",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2029,Deployability,install,installed,2029,"br_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Depende",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2123,Deployability,install,install,2123,"br_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Depende",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2350,Deployability,install,installation,2350,"pint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependen",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3404,Deployability,install,installation,3404,"ttps://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3570,Deployability,install,installation,3570,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2314,Integrability,depend,dependent,2314,"Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whethe",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2743,Integrability,depend,dependent,2743,"da.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3352,Integrability,depend,dependencies,3352,"Ifour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpi",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:4459,Integrability,depend,dependencies,4459,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2787,Modifiability,config,configure,2787,"s a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpin",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3212,Modifiability,variab,variable,3212,"Ifour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpi",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3316,Modifiability,variab,variable,3316,"Ifour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpi",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3503,Modifiability,variab,variable,3503,"hub.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpi",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3630,Modifiability,config,config,3630,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3707,Modifiability,variab,variable,3707,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3842,Modifiability,variab,variable,3842,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:4277,Modifiability,config,configdir,4277,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2284,Safety,detect,detect,2284,"Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whethe",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3761,Safety,detect,detecting,3761,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3860,Safety,detect,detecting,3860,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:4329,Safety,detect,detectable,4329,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst:1086,Energy Efficiency,energy,energy,1086,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst:1123,Energy Efficiency,energy,energy,1123,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst:1142,Energy Efficiency,energy,energy,1142,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst:1205,Energy Efficiency,energy,energy,1205,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst:1537,Energy Efficiency,energy,energy,1537,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2181,Availability,fault,faulty,2181,"sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source a",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2280,Availability,error,error,2280,"sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source a",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2646,Availability,avail,available,2646,"als that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dep",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2793,Deployability,install,installed,2793,"egral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building P",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2898,Deployability,install,installed,2898,"n-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alt",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2986,Deployability,install,install,2986,"n-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alt",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3325,Deployability,install,installation,3325,"n. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``inclu",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4291,Deployability,install,installation,4291,"remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DC",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4451,Deployability,install,installation,4451,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:1715,Integrability,interface,interfaced,1715,"RPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:1951,Integrability,interface,interface,1951,"02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained thr",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3170,Integrability,depend,dependent,3170,"ations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3683,Integrability,depend,dependent,3683,"svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4245,Integrability,depend,dependencies,4245," dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being det",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:5290,Integrability,depend,dependencies,5290,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3748,Modifiability,config,configure,3748,"already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on inter",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4106,Modifiability,variab,variable,4106," dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being det",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4209,Modifiability,variab,variable,4209," dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being det",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4390,Modifiability,variab,variable,4390,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4580,Modifiability,variab,variable,4580,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4709,Modifiability,variab,variable,4709,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:5114,Modifiability,config,configdir,5114,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3146,Safety,detect,detect,3146,"ations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4631,Safety,detect,detecting,4631,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4727,Safety,detect,detecting,4727,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:5166,Safety,detect,detectable,5166,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:1343,Testability,test,testSuitedkh,1343," software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:1824,Availability,down,down,1824,"ser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash:",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3309,Availability,checkpoint,checkpoint,3309,"Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to spec",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3659,Availability,avail,available,3659,"k:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.se",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5972,Availability,avail,available,5972,"ll file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then tr",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:11762,Availability,avail,available,11762,"nt variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals inv",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13837,Availability,echo,echo,13837,"al; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14251,Availability,echo,echo,14251,"hod or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14624,Availability,error,error,14624,"ded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch d",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:15560,Availability,echo,echo,15560,"tructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is *very important* as it sets the environment variables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and t",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16913,Availability,echo,echo,16913,"}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line opti",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20062,Availability,avail,available,20062," ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Int",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20742,Availability,avail,available,20742,"<subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable,",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:22329,Availability,down,down,22329,"ers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in c",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:24922,Availability,avail,available,24922,"n interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable looks for its non-compiled; dependencies (*i.e.*, basis sets, databases, quadratures, *etc.*).; This path is always known by the |PSIfour| program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, *etc.* directories, generally; ending in ``share/psi4``.; ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:1408,Deployability,configurat,configuration,1408,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:1441,Deployability,install,installation,1441,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14152,Deployability,install,install,14152,"licitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization a",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16726,Deployability,install,install,16726,"ariables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19762,Deployability,install,installed,19762,"ocation of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are li",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20236,Deployability,release,release,20236,"ts to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms.",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5477,Energy Efficiency,energy,energy,5477,"s; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefu",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5853,Energy Efficiency,energy,energy,5853," jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5986,Energy Efficiency,energy,energy,5986,"ll file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then tr",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:6395,Energy Efficiency,energy,energy,6395,"file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then treat it as read-only.; The back conversion to a Wavefunction object uses the ``.from_file()`` functionality ::. # read wavefunction from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:6409,Energy Efficiency,energy,energy,6409,"file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then treat it as read-only.; The back conversion to a Wavefunction object uses the ``.from_file()`` functionality ::. # read wavefunction from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:9554,Energy Efficiency,efficient,efficiently,9554,"cific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL). Control of threading in |PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even di",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:12459,Energy Efficiency,energy,energy,12459," API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:2126,Integrability,depend,depending,2126,"n and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3647,Integrability,rout,routines,3647,"k:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.se",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:10187,Integrability,rout,routines,10187,"the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL). Control of threading in |PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:11417,Integrability,rout,routines,11417,"|PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; f",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14393,Integrability,depend,depend,14393,"queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14630,Integrability,message,message,14630,"ded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch d",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20752,Integrability,depend,dependencies,20752,"<subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable,",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20963,Integrability,depend,dependencies,20963,"ent specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dft",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21567,Integrability,interface,interfaced,21567,"Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-bl",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:23017,Integrability,interface,interfaced,23017,"td3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to s",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:25264,Integrability,depend,dependencies,25264,"n interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable looks for its non-compiled; dependencies (*i.e.*, basis sets, databases, quadratures, *etc.*).; This path is always known by the |PSIfour| program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, *etc.* directories, generally; ending in ``share/psi4``.; ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:1408,Modifiability,config,configuration,1408,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:2320,Modifiability,variab,variable,2320,"files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a ch",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3976,Modifiability,variab,variable,3976,"|PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; nam",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:6554,Modifiability,variab,variables,6554,"'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then treat it as read-only.; The back conversion to a Wavefunction object uses the ``.from_file()`` functionality ::. # read wavefunction from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It does nothing that can't be done in other more transparent ways.; It should be avoided.; It is very easy to forg",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:8011,Modifiability,variab,variable,8011,"from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It does nothing that can't be done in other more transparent ways.; It should be avoided.; It is very easy to forget about the |psirc| file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; |psirc| contents count as part of your input file (invoked after; e.g. ``from psi4 import *`` and before your Psithon-->Python parsed; input commands), so these settings take priority over command-line; arguments to the ``psi4`` executable.; Please use the |psirc| file sparingly. If using the environment variable :envvar:`PSI_SCRATCH` is inconvenient,; or if some ``psi4_io`` commands must be present in all input files,; the |psirc| resource file can be used (example :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |p",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:8408,Modifiability,variab,variable,8408,"ot PsiAPI.; It does nothing that can't be done in other more transparent ways.; It should be avoided.; It is very easy to forget about the |psirc| file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; |psirc| contents count as part of your input file (invoked after; e.g. ``from psi4 import *`` and before your Psithon-->Python parsed; input commands), so these settings take priority over command-line; arguments to the ``psi4`` executable.; Please use the |psirc| file sparingly. If using the environment variable :envvar:`PSI_SCRATCH` is inconvenient,; or if some ``psi4_io`` commands must be present in all input files,; the |psirc| resource file can be used (example :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfo",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:10492,Modifiability,variab,variables,10492,"ng; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL). Control of threading in |PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable cod",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:10774,Modifiability,variab,variables,10774,"and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL). Control of threading in |PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) S",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:10982,Modifiability,variab,variables,10982," are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL). Control of threading in |PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:11980,Modifiability,variab,variables,11980," |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13151,Modifiability,variab,variable,13151," |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13306,Modifiability,variab,variables,13306,"t the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directo",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13496,Modifiability,variab,variables,13496,"y(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:15242,Modifiability,variab,variable,15242,"sh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is *very important* as it sets the environment variables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; pre",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:15740,Modifiability,variab,variables,15740,"B of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization and in threaded BLAS (see section :ref:`sec:threading`). ::; .. ; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4. Then, we move to the working directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is *very important* as it sets the environment variables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /ps",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16217,Modifiability,plugin,plugins,16217,"g directory using PBS variable ``$PBS_O_WORKDIR`` and ; we create scratch directories on every node, using the ``$PBS_NODEFILE`` which ; points to a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is *very important* as it sets the environment variables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no comma",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16341,Modifiability,variab,variable,16341," a file containing a list of the nodes attributed to the job. .. code-block:: bash. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID; ; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is *very important* as it sets the environment variables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three command",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19822,Modifiability,plugin,plugin,19822,". option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19908,Modifiability,plugin,plugin,19908,"ar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when com",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19993,Modifiability,plugin,plugin,19993,"on:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20035,Modifiability,plugin,plugins,20035," ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Int",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20048,Modifiability,plugin,plugins,20048," ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Int",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20501,Modifiability,variab,variables,20501,"r MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:thr",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21352,Modifiability,variab,variable,21352,"ption:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the netw",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21612,Modifiability,config,configuring,21612,"EFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRAT",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21705,Modifiability,variab,variable,21705,"EFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRAT",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:22987,Modifiability,plugin,plugins,22987,"td3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to s",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:23000,Modifiability,plugin,plugins,23000,"td3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ; If it is not, it will significantly slow down the program and the network. . Modify :envvar:`PSI_SCRATCH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to s",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:23694,Modifiability,plugin,plugins,23694,"/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiaddi",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:23707,Modifiability,plugin,plugins,23707,"/scratch/user. .. envvar:: PSIPATH. Path in which |PSIfour| looks for user extensions to the built-in; libraries. Specifically, directories containing ; :ref:`user basis sets <sec:basisUserDefined>`,; :ref:`EFP fragments <sec:findingEFPFragments>`,; :ref:`databases <sec:createDatabase>`, ; :ref:`plugins <sec:plugins>`, and ; interfaced executables (; ``dmrcc`` for :ref:`MRCC <sec:mrcc>` and ; ``dftd3`` for :ref:`DFTD3 <sec:dftd3>`; ) should be placed in this colon-separated list. |PSIfour| is designed so that user extensions that are findable through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiaddi",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:24242,Modifiability,plugin,plugins,24242," through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable lo",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:24255,Modifiability,plugin,plugins,24255," through; :envvar:`PSIPATH` can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard. The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable lo",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:24300,Modifiability,config,configuring,24300,". The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable looks for its non-compiled; dependencies (*i.e.*, basis sets, databases, quadratures, *etc.*).; This path is always known by the |PSIfour| prog",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:24393,Modifiability,variab,variable,24393,". The typical search path is first the built-in libraries, next each; :envvar:`PSIPATH` directory in order, and finally the execution; directory (I won't swear everything tacks on the execution directory). Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable looks for its non-compiled; dependencies (*i.e.*, basis sets, databases, quadratures, *etc.*).; This path is always known by the |PSIfour| prog",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:25411,Modifiability,variab,variable,25411,"n interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. Modify :envvar:`PSIPATH` through normal Linux shell commands before invoking :command:`psi4`. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. .. envvar:: PYTHONPATH. Path in which the Python interpreter looks for modules to import. For ; |PSIfour|, these are generally :ref:`plugins <sec:plugins>` or databases. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PYTHONPATH` is preferred for; Python moduels to accommodate QCEngine. Modification of :envvar:`PYTHONPATH` can be done in three ways, equivalently. * Normal Linux shell commands. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. * Place the path in the |psirc| file so that it is available for ; every |PSIfour| instance. ::. sys.path.insert(0, '/home/user/psiadditions'). * Place the path in the input file, either absolute or relative. ::. sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). .. envvar:: PSIDATADIR. Path in which the |PSIfour| executable looks for its non-compiled; dependencies (*i.e.*, basis sets, databases, quadratures, *etc.*).; This path is always known by the |PSIfour| program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, *etc.* directories, generally; ending in ``share/psi4``.; ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3916,Performance,queue,queue,3916,"|PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; nam",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4337,Performance,optimiz,optimization,4337,"tten to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and fi",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4470,Performance,optimiz,optimization,4470,"apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the`",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:8972,Performance,perform,performing,8972,"4`` executable.; Please use the |psirc| file sparingly. If using the environment variable :envvar:`PSI_SCRATCH` is inconvenient,; or if some ``psi4_io`` commands must be present in all input files,; the |psirc| resource file can be used (example :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The de",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:9160,Performance,load,loaded,9160,"le :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13332,Performance,queue,queueing,13332," }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. T",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13436,Performance,queue,queueing,13436,"y(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20784,Performance,load,loaded,20784,"<subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable,",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5001,Safety,safe,safe,5001,"t to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:7496,Safety,avoid,avoided,7496,"ction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then treat it as read-only.; The back conversion to a Wavefunction object uses the ``.from_file()`` functionality ::. # read wavefunction from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It does nothing that can't be done in other more transparent ways.; It should be avoided.; It is very easy to forget about the |psirc| file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; |psirc| contents count as part of your input file (invoked after; e.g. ``from psi4 import *`` and before your Psithon-->Python parsed; input commands), so these settings take priority over command-line; arguments to the ``psi4`` executable.; Please use the |psirc| file sparingly. If using the environment variable :envvar:`PSI_SCRATCH` is inconvenient,; or if some ``psi4_io`` commands must be present in all input files,; the |psirc| resource file can be used (example :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if s",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:11385,Safety,detect,detects,11385,"|PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; f",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:9301,Security,access,accessible,9301,"::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:12014,Security,access,accessed,12014,"and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may speci",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:17742,Security,access,accessed,17742,"tory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assume",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21171,Security,access,access,21171,"on information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21271,Security,access,access,21271,"napshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ;",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18473,Testability,log,loglevel,18473,">> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18494,Testability,log,logging,18494,"> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18951,Testability,test,testing,18951,"tion. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a templa",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19708,Testability,test,test,19708,".g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path ha",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19735,Testability,test,tests,19735,"is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; progra",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4730,Usability,guid,guide,4730,"/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's docum",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1443,Availability,checkpoint,checkpoint,1443,"ic License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:2442,Deployability,update,updated,2442,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1885,Energy Efficiency,energy,energy,1885,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1949,Energy Efficiency,energy,energy,1949,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1963,Energy Efficiency,energy,energy,1963,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:2127,Energy Efficiency,energy,energy,2127,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:2215,Energy Efficiency,energy,energy,2215,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1512,Integrability,interoperab,interoperability,1512," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunct",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1737,Performance,optimiz,optimization,1737,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1846,Usability,simpl,simply,1846,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:2995,Availability,avail,available,2995,"e; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbo",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:4822,Availability,avail,available,4822,"f I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in :srcsample:`fsapt1`. A video; lecture explaining this example is available `F-SAPT#1; <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a ""difference F-SAPT""; analysis is available `F-SAPT#2; <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.069686",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:5077,Availability,avail,available,5077,"=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in :srcsample:`fsapt1`. A video; lecture explaining this example is available `F-SAPT#1; <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a ""difference F-SAPT""; analysis is available `F-SAPT#2; <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.436798",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8829,Availability,down,down,8829," 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:12448,Availability,avail,available,12448,"med ``fsapt.py`` analysis using the same; functional group names in ``source-fsapt-dir-1`` and ``source-fsapt-dir-2``. The; difference F-SAPT partition entries are computed as :math:`E^{\Delta} = E^{1} -; E^{2}`, and the geometries for order-1 ``.pdb`` visualization files are taken; from system 1. I-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. caution:: As of April 2018, you can't specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which |PSIfour| doesn't at; present let be set independently. For situations like this, use the; temporary input pattern in :srcsample:`isapt1` . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in :srcsample:`isapt1`. A video; lecture explaining this example is available; `I-SAPT#1 <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available `I-SAPT#2 <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }; ; # => Standard Options",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:12683,Availability,avail,available,12683,"re computed as :math:`E^{\Delta} = E^{1} -; E^{2}`, and the geometries for order-1 ``.pdb`` visualization files are taken; from system 1. I-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. caution:: As of April 2018, you can't specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which |PSIfour| doesn't at; present let be set independently. For situations like this, use the; temporary input pattern in :srcsample:`isapt1` . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in :srcsample:`isapt1`. A video; lecture explaining this example is available; `I-SAPT#1 <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available `I-SAPT#2 <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }; ; # => Standard Options <= #; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essential",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:20273,Availability,avail,available,20273,"; ``ab`` (the opposite of ``c`` where the entire linking pair is assigned to A/B), ``sao0``, ``sao1``, ``sao2``,; ``siao0``, ``siao1`` (recommended for all I-SAPT applications), and ``siao2`` (essentially identical to ``siao1`` but; slightly more expensive). Advanced I-SAPT Keywords for SAOn/SIAOn Partitionings; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/fisapt__fisapt_link_ortho.rst; .. include:: autodir_options_c/fisapt__fisapt_exch_parperp.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkibos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkihos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_densmat.rst. Other F/I-SAPT Keywords; ^^^^^^^^^^^^^^^^^^^^^^^. The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; `video tutorial devoted to F/I-SAPT Options <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_ .; Direct source-code documentation on these options is available :ref:`here <apdx:fisapt>`. Additional Notes; ^^^^^^^^^^^^^^^^. .. caution:: In constrast to Ed Hohenstein's SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (*e.g.*, electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets *only* for the dispersion term. Ed's code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed's SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the |sapt__df_basis_elst| option in Ed's code to; provide an accurate result. . ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:1976,Deployability,deploy,deployed,1976,".. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: FISAPT; pair: FISAPT; theory. .. _`sec:fisapt`:. F/I-SAPT: Functional Group and/or Intramolecular SAPT; =====================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:fisapt>`, :ref:`PSI Variables; <apdx:fisapt_psivar>`, :source:`FISAPT <psi4/src/psi4/fisapt>`. The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT modu",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:17213,Deployability,A/B,A/B,17213,"; and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is pla",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:18106,Deployability,A/B,A/B,18106,"e default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly ; achieves self-consistency. Altogether, the allowed values for |fisapt__fisapt_link_assignment| are ``c`` (default),; ``ab`` (the opposite of ``c`` where the enti",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:19093,Deployability,A/B,A/B,19093,"C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly ; achieves self-consistency. Altogether, the allowed values for |fisapt__fisapt_link_assignment| are ``c`` (default),; ``ab`` (the opposite of ``c`` where the entire linking pair is assigned to A/B), ``sao0``, ``sao1``, ``sao2``,; ``siao0``, ``siao1`` (recommended for all I-SAPT applications), and ``siao2`` (essentially identical to ``siao1`` but; slightly more expensive). Advanced I-SAPT Keywords for SAOn/SIAOn Partitionings; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/fisapt__fisapt_link_ortho.rst; .. include:: autodir_options_c/fisapt__fisapt_exch_parperp.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkibos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkihos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_densmat.rst. Other F/I-SAPT Keywords; ^^^^^^^^^^^^^^^^^^^^^^^. The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; `video tutorial devoted ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:3355,Energy Efficiency,energy,energy,3355,"er two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT cod",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:4628,Energy Efficiency,energy,energy,4628,"lysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in :srcsample:`fsapt1`. A video; lecture explaining this example is available `F-SAPT#1; <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a ""difference F-SAPT""; analysis is available `F-SAPT#2; <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:6251,Energy Efficiency,energy,energy,6251,"mory 1 GB; ; molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }; ; energy('fisapt0'). This file runs a DF-HF computation on the full dimer using |PSIfours| existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals |w--w| this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder :file:`fsapt/` in the same; directory as the input file (this can be changed by |fisapt__fisapt_fsapt_filepath|). One obtains the desired F-SAPT partition by post-processing the data in; :file:`fsapt/`. Within this dir, the user is expected to provide the ASCII files; :file:`fA.dat` and :file:`fB.dat`, which describe the assignment of atoms to chemical; functional groups using 1-based orderin",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8306,Energy Efficiency,charge,charge,8306,"ns::; ; OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the ``fsapt.py`` post-processing script in; the ``fsapt`` directory as::. >>> fsapt.py. This will generate, among other files, the desired functional-group partition in; ``fsapt.dat``. For our problem, the bottom of this file contains the finished; partition::. Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and df",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8591,Energy Efficiency,charge,charge,8591,"pt.dat``. For our problem, the bottom of this file contains the finished; partition::. Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwi",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:9425,Energy Efficiency,energy,energy,9425,"nerally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; salvage them, so please contact the developers with the circumstances; for guidance. Order-1 Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``fsapt.py`` script above also generates a number of order-1 ``.pdb`` files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template ``.py",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:13567,Energy Efficiency,energy,energy,13567,"w.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available `I-SAPT#2 <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }; ; # => Standard Options <= #; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then perf",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:13986,Energy Efficiency,charge,charge,13986,"; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }; ; # => Standard Options <= #; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:14536,Energy Efficiency,energy,energy,14536,"; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, a",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:15954,Energy Efficiency,adapt,adapted,15954,"in a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16005,Energy Efficiency,charge,charges,16005," non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; k",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16150,Energy Efficiency,charge,charges,16150,"ts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16214,Energy Efficiency,energy,energy,16214,"ts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16374,Energy Efficiency,charge,charges,16374,"ed in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16436,Energy Efficiency,charge,charge-charge,16436,"ed in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16503,Energy Efficiency,energy,energy,16503,"ed in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16522,Energy Efficiency,charge,charges,16522,"specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16570,Energy Efficiency,charge,charges,16570,"specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16661,Energy Efficiency,charge,charges,16661," image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid or",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16729,Energy Efficiency,energy,energy,16729," image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid or",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16834,Energy Efficiency,charge,charges,16834,"s; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT ene",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:17177,Energy Efficiency,charge,charge,17177,"; and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is pla",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:17797,Energy Efficiency,energy,energy,17797,"APT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbita",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:17904,Energy Efficiency,energy,energy,17904,"APT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbita",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:15954,Modifiability,adapt,adapted,15954,"in a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:1892,Performance,perform,perform,1892,"; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: FISAPT; pair: FISAPT; theory. .. _`sec:fisapt`:. F/I-SAPT: Functional Group and/or Intramolecular SAPT; =====================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:fisapt>`, :ref:`PSI Variables; <apdx:fisapt_psivar>`, :source:`FISAPT <psi4/src/psi4/fisapt>`. The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT m",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:3633,Performance,perform,perform,3633,"tutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the inter",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:5034,Performance,perform,perform,5034,"=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in :srcsample:`fsapt1`. A video; lecture explaining this example is available `F-SAPT#1; <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a ""difference F-SAPT""; analysis is available `F-SAPT#2; <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_::. memory 1 GB; ; molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.436798",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:6393,Performance,perform,performed,6393,"031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }; ; energy('fisapt0'). This file runs a DF-HF computation on the full dimer using |PSIfours| existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals |w--w| this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder :file:`fsapt/` in the same; directory as the input file (this can be changed by |fisapt__fisapt_fsapt_filepath|). One obtains the desired F-SAPT partition by post-processing the data in; :file:`fsapt/`. Within this dir, the user is expected to provide the ASCII files; :file:`fA.dat` and :file:`fB.dat`, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. *E.g.*, for the problem at hand,; :file:`fA.dat` contains::. OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while :file:`fB.dat` contains::; ; OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the ``",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:6481,Performance,perform,performed,6481,"031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }; ; energy('fisapt0'). This file runs a DF-HF computation on the full dimer using |PSIfours| existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals |w--w| this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder :file:`fsapt/` in the same; directory as the input file (this can be changed by |fisapt__fisapt_fsapt_filepath|). One obtains the desired F-SAPT partition by post-processing the data in; :file:`fsapt/`. Within this dir, the user is expected to provide the ASCII files; :file:`fA.dat` and :file:`fB.dat`, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. *E.g.*, for the problem at hand,; :file:`fA.dat` contains::. OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while :file:`fB.dat` contains::; ; OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the ``",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:6525,Performance,perform,performed,6525," H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }; ; energy('fisapt0'). This file runs a DF-HF computation on the full dimer using |PSIfours| existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals |w--w| this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder :file:`fsapt/` in the same; directory as the input file (this can be changed by |fisapt__fisapt_fsapt_filepath|). One obtains the desired F-SAPT partition by post-processing the data in; :file:`fsapt/`. Within this dir, the user is expected to provide the ASCII files; :file:`fA.dat` and :file:`fB.dat`, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. *E.g.*, for the problem at hand,; :file:`fA.dat` contains::. OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while :file:`fB.dat` contains::; ; OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the ``fsapt.py`` post-processing script in; the ``fsapt`` directory as::. >>> fsapt.py. This will generate, among other files, the desired functional-group partition in; ``fsapt.dat``. For our probl",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:10670,Performance,load,load,10670,"NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; salvage them, so please contact the developers with the circumstances; for guidance. Order-1 Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``fsapt.py`` script above also generates a number of order-1 ``.pdb`` files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template ``.pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /Total.png; :align: center; :scale: 30%; :alt: Total Order-1 F-SAPT0. Difference F-SAPT Analysis; ^^^^^^^^^^^^^^^^^^^^^^^^^^. For those interested in taking the differences between two F-SAPT partitions; (*e.g.*, to see how a substituent modulates a noncovalent interaction), we have; the ``fsapt-diff.py`` script to help with this. This is invoked as::. >>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed ``fsapt.py`` analysis using the same; functional group names in ``source-fsapt-dir-1`` and ``source-fsapt-dir-2``. The; difference F-SAPT partition entries are computed as :math:`E^{\Delta} = E^{1} -; E^{2}`, and the geometries for order-1 ``.p",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:11436,Performance,perform,performed,11436,"pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /Total.png; :align: center; :scale: 30%; :alt: Total Order-1 F-SAPT0. Difference F-SAPT Analysis; ^^^^^^^^^^^^^^^^^^^^^^^^^^. For those interested in taking the differences between two F-SAPT partitions; (*e.g.*, to see how a substituent modulates a noncovalent interaction), we have; the ``fsapt-diff.py`` script to help with this. This is invoked as::. >>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed ``fsapt.py`` analysis using the same; functional group names in ``source-fsapt-dir-1`` and ``source-fsapt-dir-2``. The; difference F-SAPT partition entries are computed as :math:`E^{\Delta} = E^{1} -; E^{2}`, and the geometries for order-1 ``.pdb`` visualization files are taken; from system 1. I-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. caution:: As of April 2018, you can't specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which |PSIfour| doesn't at; present let be set independently. For situations like this, use the; temporary input pattern in :srcsample:`isapt1` . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in :srcsample:`isapt1`. A video; lecture explaining ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:14222,Performance,optimiz,optimized,14222," H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }; ; # => Standard Options <= #; ; set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by ru",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:14477,Performance,perform,performed,14477,"; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }; ; energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, a",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:14604,Performance,perform,performed,14604," input as for F-SAPT, except that the molecular; system is now divided into *three* moieties |w--w| subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using |PSIfours| existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the |fisapt__fisapt_link_assignment|; options). Then, non-interacting Hartree--Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files ",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:15387,Performance,load,load,15387,"h C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subs",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:18822,Performance,optimiz,optimization,18822," observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly ; achieves self-consistency. Altogether, the allowed values for |fisapt__fisapt_link_assignment| are ``c`` (default),; ``ab`` (the opposite of ``c`` where the entire linking pair is assigned to A/B), ``sao0``, ``sao1``, ``sao2``,; ``siao0``, ``siao1`` (recommended for all I-SAPT applications), and ``siao2`` (essentially identical to ``siao1`` but; slightly more expensive). Advanced I-SAPT Keywords for SAOn/SIAOn Partitionings; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/fisapt__fisapt_link_ortho.rst; .. include:: autodir_options_c/fisapt__fisapt_exch_parperp.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkibos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkihos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_densmat.rst. Other F/I-SAPT Keywords; ^^^^^^^^^^^^^^^^^^^^^^^.",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8995,Usability,simpl,simple,8995,"1 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; s",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:10006,Usability,guid,guidance,10006," partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; salvage them, so please contact the developers with the circumstances; for guidance. Order-1 Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``fsapt.py`` script above also generates a number of order-1 ``.pdb`` files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template ``.pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to pe",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:8575,Availability,avail,available,8575,"01. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain :math:`{\cal{O}}(o^2v^4)` complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{v",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13916,Availability,avail,available,13916,"_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4604,Deployability,configurat,configuration,4604,"energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :ma",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4722,Deployability,configurat,configuration,4722,"r| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4900,Deployability,configurat,configuration,4900,"r| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:17425,Deployability,configurat,configuration,17425,,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:17611,Deployability,configurat,configuration,17611,,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:23675,Deployability,configurat,configuration,23675,-----------------------------------+; .. comment | fno-cisd | cisd with frozen natural orbitals | |globals__ci_type| CONV |; .. comment +-------------------------+-------------------------------------------------------------+-------------------------------------------+. .. comment | df-ccsd | ccsd with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | df-ccsd(t) | ccsd(t) with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd | ccsd with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd(t) | ccsd(t) with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | dci | configuration interaction with double excitations |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-dci | dci with frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+. .. include:: autodoc_capabilities_fnocc.rst. .. index:: FNOCC; basic-keywords. Basic FNOCC Keywords; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: /autodir_options_c/mints__basis.rst; .. include:: /autodir_options_c/globals__freeze_core.rst; .. include:: /autodir_options_c/fnocc__r_convergence.rst; .. include:: /autodir_options_c/fnocc__e_convergence.rst; .. include:: /autodir_options_c/fnocc__maxiter.rst; .. include:: /autodir_options_c/fnocc__diis_max_vecs.rst; .. include:: /autodir_options_c/fnocc__nat_orbs.rst; .. include:: /autodir_options_c/fnocc__occ_tolerance.rst; .. include:: /autodir_options_c/fnocc__triples_low_memory.rst; .. include:: /autodir_options_c/fnocc__cc_timings.rst; .. include,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:2323,Energy Efficiency,reduce,reduced,2323,"nocc`:. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; ===================================================================. .. codeauthor:: A. Eugene DePrince; .. sectionauthor:: A. Eugene DePrince. *Module:* :ref:`Keywords <apdx:fnocc>`, :ref:`PSI Variables <apdx:fnocc_psivar>`, :source:`FNOCC <psi4/src/psi4/fnocc>`. .. warning:: There is a known bug concerning the i7-5930 series combined; with the Intel 15 compilers and MKL 11.2.3. When |PsiFour| is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The computational cost of the CCSD [Purvis:1982]_, CCSD(T); [Raghavachari:1989]_, and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]_. The most demanding; steps in the CCSD and (T) algorithms scale as :math:`{\cal{O}}(o^2v^4)`; and :math:`{\cal{O}}(o^3v^4)`, where :math:`o` and :math:`v` represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of :math:`(v; / v_{FNO})^4`, where :math:`v_{FNO}` represents the number of virtual; orbitals retained after the FNO truncation. The general outline for the FNO procedure in |Psifour| is:. (i) construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:2836,Energy Efficiency,reduce,reduces,2836,"runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The computational cost of the CCSD [Purvis:1982]_, CCSD(T); [Raghavachari:1989]_, and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]_. The most demanding; steps in the CCSD and (T) algorithms scale as :math:`{\cal{O}}(o^2v^4)`; and :math:`{\cal{O}}(o^3v^4)`, where :math:`o` and :math:`v` represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of :math:`(v; / v_{FNO})^4`, where :math:`v_{FNO}` represents the number of virtual; orbitals retained after the FNO truncation. The general outline for the FNO procedure in |Psifour| is:. (i) construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the virtual-virtual block of the Fock matrix onto the truncated space; (v) construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; (vi) proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:3582,Energy Efficiency,reduce,reduced,3582,"educed by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]_. The most demanding; steps in the CCSD and (T) algorithms scale as :math:`{\cal{O}}(o^2v^4)`; and :math:`{\cal{O}}(o^3v^4)`, where :math:`o` and :math:`v` represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of :math:`(v; / v_{FNO})^4`, where :math:`v_{FNO}` represents the number of virtual; orbitals retained after the FNO truncation. The general outline for the FNO procedure in |Psifour| is:. (i) construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the virtual-virtual block of the Fock matrix onto the truncated space; (v) construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; (vi) proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOC",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4027,Energy Efficiency,energy,energy,4027,"d after the FNO truncation. The general outline for the FNO procedure in |Psifour| is:. (i) construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the virtual-virtual block of the Fock matrix onto the truncated space; (v) construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; (vi) proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The me",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4046,Energy Efficiency,energy,energy,4046,"ct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the virtual-virtual block of the Fock matrix onto the truncated space; (v) construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; (vi) proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); me",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:6828,Energy Efficiency,energy,energy,6828,":`T_1` and :math:`T_2`:. .. math::; :label: QCISD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\. QCISD is slightly cheaper that CCSD computationally, but it retains the; :math:`{\cal{O}}(o^2v^4)` complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD c",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:6876,Energy Efficiency,energy,energy,6876,") (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\. QCISD is slightly cheaper that CCSD computationally, but it retains the; :math:`{\cal{O}}(o^2v^4)` complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.2314316660",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7073,Energy Efficiency,energy,energy,7073,"_0\rangle = 0. \\. QCISD is slightly cheaper that CCSD computationally, but it retains the; :math:`{\cal{O}}(o^2v^4)` complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; th",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7117,Energy Efficiency,energy,energy,7117,"heaper that CCSD computationally, but it retains the; :math:`{\cal{O}}(o^2v^4)` complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7158,Energy Efficiency,energy,energy,7158,"etains the; :math:`{\cal{O}}(o^2v^4)` complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indi",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7195,Energy Efficiency,energy,energy,7195,"mplexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contrib",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7242,Energy Efficiency,energy,energy,7242,"familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth orde",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7288,Energy Efficiency,energy,energy,7288,"ted triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7331,Energy Efficiency,energy,energy,7331,"iteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a fu",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7370,Energy Efficiency,energy,energy,7370,"oth the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain the",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7415,Energy Efficiency,energy,energy,7415,"are implemented for closed-shell references; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The ke",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7459,Energy Efficiency,energy,energy,7459,"ences; in the FNOCC module. .. _`sec:fnompn`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; the",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7500,Energy Efficiency,energy,energy,7500,"n`:. Many-body perturbation theory ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7537,Energy Efficiency,energy,energy,7537,"~~~~~~~~~~~~~~~~~~~~~~~~~~. QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_method",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7587,Energy Efficiency,energy,energy,7587," closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also avail",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7636,Energy Efficiency,energy,energy,7636,"nd the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7682,Energy Efficiency,energy,energy,7682,"ies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7724,Energy Efficiency,energy,energy,7724," a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7771,Energy Efficiency,energy,energy,7771," example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive mod",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7817,Energy Efficiency,energy,energy,7817,"n run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have th",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7860,Energy Efficiency,energy,energy,7860," to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the C",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7899,Energy Efficiency,energy,energy,7899,"de-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires f",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:8215,Energy Efficiency,energy,energy,8215,"941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain :math:`{\cal{O}}(o^2v^4)` complexity of the CCSD equations.; For a detailed discussion of the properti",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:9038,Energy Efficiency,power,power,9038,"rbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain :math:`{\cal{O}}(o^2v^4)` complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:9789,Energy Efficiency,energy,energy,9789,"he methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain :math:`{\cal{O}}(o^2v^4)` complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle. The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, :math:`E_c`, with generalized shifts for the; doubles and singles equations, :math:`\Delta_{ij}` and :math:`\Delta_i`:. .. math::; :label: CEPAeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle. These shifts approximate the effects of triple and quadruple excitations.; The values for :math:`\Delta_{ij}` and :math:`\Delta_i` used in several; coupled-pair methods are",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:10310,Energy Efficiency,energy,energy,10310,"ations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle. The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, :math:`E_c`, with generalized shifts for the; doubles and singles equations, :math:`\Delta_{ij}` and :math:`\Delta_i`:. .. math::; :label: CEPAeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle. These shifts approximate the effects of triple and quadruple excitations.; The values for :math:`\Delta_{ij}` and :math:`\Delta_i` used in several; coupled-pair methods are given in Table :ref:`CEPA Shifts; <table:cepa_shifts>`. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. .. _`table:cepa_shifts`:. +-------------------------+------------------------------------------------------------+----------------------------------------------+; | method | :math:`\Delta_{ij}` | :math:`\Delta_i` |; +=========================+============================================================+==============================================+; | cisd | :math:`E_c` | :math:`E_c` |; +-------------------------+-",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12762,Energy Efficiency,energy,energy,12762,"----------------------+----------------------------------------------+; | cepa(3) | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron r",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12837,Energy Efficiency,energy,energy,12837,"----------------------+----------------------------------------------+; | cepa(3) | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron r",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12880,Energy Efficiency,energy,energy,12880,") | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13191,Energy Efficiency,energy,energy,13191,"pf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13836,Energy Efficiency,reduce,reduce,13836,"--+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:15586,Energy Efficiency,energy,energy,15586,"iary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying |globals__cc_type| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:15639,Energy Efficiency,energy,energy,15639,"most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying |globals__cc_type| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+------------------",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:16058,Energy Efficiency,energy,energy,16058,"pe| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:16079,Energy Efficiency,energy,energy,16079,"ds can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4(sdq) | fourth-order",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13085,Integrability,depend,depend,13085,"pf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:16066,Integrability,wrap,wrapper,16066,"pe| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4604,Modifiability,config,configuration,4604,"energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :ma",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4722,Modifiability,config,configuration,4722,"r| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4900,Modifiability,config,configuration,4900,"r| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13451,Modifiability,coupling,coupling,13451,"------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The secon",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:17425,Modifiability,config,configuration,17425,,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:17611,Modifiability,config,configuration,17611,,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:23675,Modifiability,config,configuration,23675,-----------------------------------+; .. comment | fno-cisd | cisd with frozen natural orbitals | |globals__ci_type| CONV |; .. comment +-------------------------+-------------------------------------------------------------+-------------------------------------------+. .. comment | df-ccsd | ccsd with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | df-ccsd(t) | ccsd(t) with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd | ccsd with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd(t) | ccsd(t) with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | dci | configuration interaction with double excitations |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-dci | dci with frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+. .. include:: autodoc_capabilities_fnocc.rst. .. index:: FNOCC; basic-keywords. Basic FNOCC Keywords; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: /autodir_options_c/mints__basis.rst; .. include:: /autodir_options_c/globals__freeze_core.rst; .. include:: /autodir_options_c/fnocc__r_convergence.rst; .. include:: /autodir_options_c/fnocc__e_convergence.rst; .. include:: /autodir_options_c/fnocc__maxiter.rst; .. include:: /autodir_options_c/fnocc__diis_max_vecs.rst; .. include:: /autodir_options_c/fnocc__nat_orbs.rst; .. include:: /autodir_options_c/fnocc__occ_tolerance.rst; .. include:: /autodir_options_c/fnocc__triples_low_memory.rst; .. include:: /autodir_options_c/fnocc__cc_timings.rst; .. include,MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:14667,Performance,optimiz,optimized,14667,"ion (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying |globals__cc_type| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obt",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13732,Safety,avoid,avoid,13732,"--+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:16618,Security,access,accessible,16618,"ng CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4(sdq) | fourth-order MP perturbation theory, less triples | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4 | full fourth-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | cisd | configuration interaction singles and doubles | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | qcisd | quadratic confi",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4989,Usability,simpl,simplified,4989,"fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:. .. math::; :label: QCISD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:10233,Usability,simpl,simple,10233,"ties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle. The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, :math:`E_c`, with generalized shifts for the; doubles and singles equations, :math:`\Delta_{ij}` and :math:`\Delta_i`:. .. math::; :label: CEPAeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle. These shifts approximate the effects of triple and quadruple excitations.; The values for :math:`\Delta_{ij}` and :math:`\Delta_i` used in several; coupled-pair methods are given in Table :ref:`CEPA Shifts; <table:cepa_shifts>`. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. .. _`table:cepa_shifts`:. +-------------------------+------------------------------------------------------------+----------------------------------------------+; | method | :math:`\Delta_{ij}` | :math:`\Delta_i` |; +=========================+==============================",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12796,Usability,simpl,simply,12796,"----------------------+----------------------------------------------+; | cepa(3) | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron r",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2790,Availability,avail,available,2790," to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | w | normal mode, un-mass-weighted | a0 | ndarray(ndof, nd",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:4791,Energy Efficiency,reduce,reduced,4791," +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | x | normal mode, normalized un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | degeneracy | degree of degeneracy | | ndarray(ndof) int |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | TRV | translation/rotation/vibration | | ndarray(ndof) str 'TR' or 'V' or '-' for partial |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | gamma | irreducible representation | | ndarray(ndof) str irrep or None if unclassifiable |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | mu | reduced mass | u | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | k | force constant | mDyne/A | ndarray(ndof) float (+/-) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | DQ0 | RMS deviation v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Qtp0 | Turning point v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Xtp0 | Turning point v=0 | a0 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | theta_vib | char temp | K | ndarray(n",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:1903,Integrability,wrap,wrapper,1903,"ndation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results acc",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:1806,Performance,perform,perform,1806,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:1787,Security,access,access,1787,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2368,Security,access,accessed,2368,".frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex ",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2904,Security,access,accessible,2904,"er over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | w | normal mode, un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+---------------------------------------",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2708,Testability,test,tests,2708,"see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+--------",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:1776,Availability,down,downloads,1776,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2028,Availability,avail,available,2028,"ndex:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:1790,Deployability,configurat,configuration,1790,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2177,Deployability,install,installed,2177,"=======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2282,Deployability,install,installed,2282,"fp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2375,Deployability,install,install,2375,"fp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2678,Deployability,install,installation,2678,"id library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3544,Deployability,install,installation,3544,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3717,Deployability,install,installation,3717,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2518,Integrability,depend,dependent,2518,"://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3020,Integrability,depend,dependent,3020,"s/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3493,Integrability,depend,dependencies,3493,"; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:4485,Integrability,depend,dependencies,4485,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:1790,Modifiability,config,configuration,1790,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3066,Modifiability,config,configure,3066," Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3457,Modifiability,variab,variable,3457,"; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3651,Modifiability,variab,variable,3651,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3861,Modifiability,variab,variable,3861,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:4000,Modifiability,variab,variable,4000,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:4320,Modifiability,config,configdir,4320,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2489,Safety,detect,detect,2489,"://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3917,Safety,detect,detecting,3917,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:4018,Safety,detect,detecting,4018,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:4372,Safety,detect,detectable,4372,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:1939,Availability,avail,available,1939,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2086,Availability,avail,available,2086,"y S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3100,Availability,down,download,3100,"is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correc",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3120,Availability,avail,available,3120,"is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correc",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3465,Availability,error,error,3465,"Ifour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These m",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4107,Availability,down,down,4107,"e freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4270,Availability,avail,available,4270,"inary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4386,Availability,avail,available,4386,"d through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2173,Deployability,install,installer,2173,".. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2205,Deployability,install,installed,2205,".. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2329,Deployability,install,install,2329,"rget: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` s",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2396,Deployability,install,install,2396,"rget: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` s",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2521,Deployability,install,installed,2521,".pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; positi",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2624,Deployability,install,install,2624,".pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; positi",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2658,Deployability,install,install,2658,".pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; positi",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2719,Deployability,install,installation,2719,"ions of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PB",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3898,Energy Efficiency,energy,energy,3898,"p-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" th",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4835,Energy Efficiency,energy,energy,4835,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4931,Energy Efficiency,energy,energy,4931,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:5093,Energy Efficiency,energy,energy,5093,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:5459,Energy Efficiency,energy,energy,5459,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3661,Integrability,interface,interface,3661,"p-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" th",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3925,Integrability,interface,interface,3925,"rom source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
