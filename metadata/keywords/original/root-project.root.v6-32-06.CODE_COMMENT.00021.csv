id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:39,Security,access,access,39,/// Determine if the function may only access memory that is; /// inaccessible from the IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:39,Security,access,access,39,/// Determine if the function may only access memory that is; /// either inaccessible from the IR or pointed to by its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:37,Performance,perform,perform,37,/// Determine if the call should not perform indirect branch tracking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:114,Security,access,access,114,///@}; // End of attribute API.; /// \name Operand Bundle API; ///; /// This group of methods provides the API to access and manipulate operand; /// bundles on this call.; /// @{; /// Return the number of operand bundles associated with this User.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,Availability,error,error,69,"/// Return an operand bundle by name, if present.; ///; /// It is an error to call this for operand bundle types that may have; /// multiple instances of them on the same instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:71,Availability,error,error,71,"/// Return an operand bundle by tag ID, if present.; ///; /// It is an error to call this for operand bundle types that may have; /// multiple instances of them on the same instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:81,Availability,error,error,81,/// Return the operand bundle for the operand at index OpIdx.; ///; /// It is an error to call this with an OpIdx that does not correspond to an; /// bundle operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Usability,Simpl,Simple,4,/// Simple helper function to map a BundleOpInfo to an; /// OperandBundleUse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:1033,Deployability,install,installed,1033," with this OperandBundleUser.; ///; /// OperandBundleUser uses the descriptor area co-allocated with the host User; /// to store some meta information about which operands are ""normal"" operands,; /// and which ones belong to some operand bundle.; ///; /// The layout of an operand bundle user is; ///; /// +-----------uint32_t End-------------------------------------+; /// | |; /// | +--------uint32_t Begin--------------------+ |; /// | | | |; /// ^ ^ v v; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// v v ^ ^; /// | | | |; /// | +--------uint32_t Begin------------+ |; /// | |; /// +-----------uint32_t End-----------------------------+; ///; ///; /// BOI0, BOI1 ... are descriptions of operand bundles in this User's use; /// list. These descriptions are installed and managed by this class, and; /// they're all instances of OperandBundleUser<T>::BundleOpInfo.; ///; /// DU is an additional descriptor installed by User's 'operator new' to keep; /// track of the 'BOI0 ... BOIN' co-allocation. OperandBundleUser does not; /// access or modify DU in any way, it's an implementation detail private to; /// User.; ///; /// The regular Use& vector for the User starts at U0. The operand bundle; /// uses are part of the Use& vector, just like normal uses. In the diagram; /// above, the operand bundle uses start at BOI0_U0. Each instance of; /// BundleOpInfo has information about a contiguous set of uses constituting; /// an operand bundle, and the total set of operand bundle uses themselves; /// form a contiguous set of uses (i.e. there are no gaps between uses; /// corresponding to individual operand bundles).; ///; /// This class does not know the location of the set of operand bundle uses; /// within the use list -- that is decided by the User using this class via; /// the BeginIdx arg",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:1181,Deployability,install,installed,1181,"to store some meta information about which operands are ""normal"" operands,; /// and which ones belong to some operand bundle.; ///; /// The layout of an operand bundle user is; ///; /// +-----------uint32_t End-------------------------------------+; /// | |; /// | +--------uint32_t Begin--------------------+ |; /// | | | |; /// ^ ^ v v; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// v v ^ ^; /// | | | |; /// | +--------uint32_t Begin------------+ |; /// | |; /// +-----------uint32_t End-----------------------------+; ///; ///; /// BOI0, BOI1 ... are descriptions of operand bundles in this User's use; /// list. These descriptions are installed and managed by this class, and; /// they're all instances of OperandBundleUser<T>::BundleOpInfo.; ///; /// DU is an additional descriptor installed by User's 'operator new' to keep; /// track of the 'BOI0 ... BOIN' co-allocation. OperandBundleUser does not; /// access or modify DU in any way, it's an implementation detail private to; /// User.; ///; /// The regular Use& vector for the User starts at U0. The operand bundle; /// uses are part of the Use& vector, just like normal uses. In the diagram; /// above, the operand bundle uses start at BOI0_U0. Each instance of; /// BundleOpInfo has information about a contiguous set of uses constituting; /// an operand bundle, and the total set of operand bundle uses themselves; /// form a contiguous set of uses (i.e. there are no gaps between uses; /// corresponding to individual operand bundles).; ///; /// This class does not know the location of the set of operand bundle uses; /// within the use list -- that is decided by the User using this class via; /// the BeginIdx argument in populateBundleOperandInfos.; ///; /// Currently operand bundle users with hung-off operands are not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:160,Energy Efficiency,allocate,allocated,160,"/// Return the start of the list of BundleOpInfo instances associated; /// with this OperandBundleUser.; ///; /// OperandBundleUser uses the descriptor area co-allocated with the host User; /// to store some meta information about which operands are ""normal"" operands,; /// and which ones belong to some operand bundle.; ///; /// The layout of an operand bundle user is; ///; /// +-----------uint32_t End-------------------------------------+; /// | |; /// | +--------uint32_t Begin--------------------+ |; /// | | | |; /// ^ ^ v v; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// v v ^ ^; /// | | | |; /// | +--------uint32_t Begin------------+ |; /// | |; /// +-----------uint32_t End-----------------------------+; ///; ///; /// BOI0, BOI1 ... are descriptions of operand bundles in this User's use; /// list. These descriptions are installed and managed by this class, and; /// they're all instances of OperandBundleUser<T>::BundleOpInfo.; ///; /// DU is an additional descriptor installed by User's 'operator new' to keep; /// track of the 'BOI0 ... BOIN' co-allocation. OperandBundleUser does not; /// access or modify DU in any way, it's an implementation detail private to; /// User.; ///; /// The regular Use& vector for the User starts at U0. The operand bundle; /// uses are part of the Use& vector, just like normal uses. In the diagram; /// above, the operand bundle uses start at BOI0_U0. Each instance of; /// BundleOpInfo has information about a contiguous set of uses constituting; /// an operand bundle, and the total set of operand bundle uses themselves; /// form a contiguous set of uses (i.e. there are no gaps between uses; /// corresponding to individual operand bundles).; ///; /// This class does not know the location of the set of operand bundle uses; /// within the use list ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:1305,Security,access,access,1305," to store some meta information about which operands are ""normal"" operands,; /// and which ones belong to some operand bundle.; ///; /// The layout of an operand bundle user is; ///; /// +-----------uint32_t End-------------------------------------+; /// | |; /// | +--------uint32_t Begin--------------------+ |; /// | | | |; /// ^ ^ v v; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// v v ^ ^; /// | | | |; /// | +--------uint32_t Begin------------+ |; /// | |; /// +-----------uint32_t End-----------------------------+; ///; ///; /// BOI0, BOI1 ... are descriptions of operand bundles in this User's use; /// list. These descriptions are installed and managed by this class, and; /// they're all instances of OperandBundleUser<T>::BundleOpInfo.; ///; /// DU is an additional descriptor installed by User's 'operator new' to keep; /// track of the 'BOI0 ... BOIN' co-allocation. OperandBundleUser does not; /// access or modify DU in any way, it's an implementation detail private to; /// User.; ///; /// The regular Use& vector for the User starts at U0. The operand bundle; /// uses are part of the Use& vector, just like normal uses. In the diagram; /// above, the operand bundle uses start at BOI0_U0. Each instance of; /// BundleOpInfo has information about a contiguous set of uses constituting; /// an operand bundle, and the total set of operand bundle uses themselves; /// form a contiguous set of uses (i.e. there are no gaps between uses; /// corresponding to individual operand bundles).; ///; /// This class does not know the location of the set of operand bundle uses; /// within the use list -- that is decided by the User using this class via; /// the BeginIdx argument in populateBundleOperandInfos.; ///; /// Currently operand bundle users with hung-off operands are not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:266,Energy Efficiency,allocate,allocated,266,/// Populate the BundleOpInfo instances and the Use& vector from \p; /// Bundles. Return the op_iterator pointing to the Use& one past the last; /// last bundle operand use.; ///; /// Each \p OperandBundleDef instance is tracked by a OperandBundleInfo; /// instance allocated in this User's descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:79,Availability,error,error,79,/// Return the BundleOpInfo for the operand at index OpIdx.; ///; /// It is an error to call this with an OpIdx that does not correspond to an; /// bundle operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:26,Availability,avail,available,26,"// Look at the callee, if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:16,Security,access,accessors,16,/// Convenience accessors; /// Return the outer EH-pad this funclet is nested within.; ///; /// Note: This returns the associated CatchSwitchInst if this FuncletPadInst; /// is a CatchPadInst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Energy Efficiency,adapt,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Integrability,adapter,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Modifiability,adapt,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Energy Efficiency,adapt,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Integrability,adapter,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,Modifiability,adapt,adapter,29,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:18,Performance,cache,cache,18,// 'dbg' Metadata cache.; /// Relative order of this instruction in its parent basic block. Used for; /// O(1) local dominance checks between instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:116,Availability,down,down,116,"/// Handle the debug-info implications of this instruction being removed. Any; /// attached DPValues need to ""fall"" down onto the next instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:50,Availability,avail,available,50,// The 15 first bits of `Value::SubclassData` are available for subclasses of; // `Instruction` to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:113,Energy Efficiency,power,powers,113,"// Template alias so that all Instruction storing alignment use the same; // definiton.; // Valid alignments are powers of two from 2^0 to 2^MaxAlignmentExponent =; // 2^32. We store them as Log2(Alignment), so we need 6 bits to encode the 33; // possible values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Performance,Perform,Perform,4,"/// Perform a \ref moveBefore operation, while signalling that the caller; /// intends to preserve the original ordering of instructions. This implicitly; /// means that any adjacent debug-info should move with this instruction.; /// This method is currently a no-op placeholder, but it will become meaningful; /// when the ""RemoveDIs"" project is enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:98,Deployability,update,updates,98,"/// RemoveDIs project: all other moves implemented with this method,; /// centralising debug-info updates into one place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:246,Performance,cache,cached,246,"/// Given an instruction Other in the same basic block as this instruction,; /// return true if this instruction comes before Other. In this worst case,; /// this takes linear time in the number of instructions in the block. The; /// results are cached, so in common cases when the block remains unmodified,; /// it takes constant time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:29,Testability,log,logical,29,/// Return true if this is a logical shift left or a logical shift right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:53,Testability,log,logical,53,/// Return true if this is a logical shift left or a logical shift right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:64,Security,hash,hash,64,// Handle 'dbg' as a special case since it is not stored in the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:71,Deployability,update,updates,71,"/// Set the metadata of the specified kind to the specified node. This updates; /// or replaces metadata if already present, or removes it if Node is null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the nuw flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the nsw flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the exact flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the nneg flag on this instruction, which must be a zext; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:38,Integrability,wrap,wrap,38,/// Determine whether the no unsigned wrap flag is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:36,Integrability,wrap,wrap,36,/// Determine whether the no signed wrap flag is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear all fast-math-flags on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the reassociation flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the no-nans flag on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the no-infs flag on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the no-signed-zeros flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the allow-reciprocal flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:27,Integrability,contract,contract,27,"/// Set or clear the allow-contract flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the allow-contract flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,Usability,clear,clear,11,"/// Set or clear the approximate-math-functions flag on this instruction,; /// which must be an operator which supports this flag. See LangRef.html for; /// the meaning of this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:32,Integrability,contract,contract,32,/// Determine whether the allow-contract flag is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:81,Integrability,wrap,wrapping,81,"/// Convenience method to copy supported exact, fast-math, and (optionally); /// wrapping flags from V to this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:35,Integrability,wrap,wrapping,35,"/// Logical 'and' of any supported wrapping, exact, and fast-math flags of; /// V and this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Testability,Log,Logical,4,"/// Logical 'and' of any supported wrapping, exact, and fast-math flags of; /// V and this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:179,Energy Efficiency,efficient,efficient,179,"/// Merge 2 debug locations and apply it to the Instruction. If the; /// instruction is a CallIns, we need to traverse the inline chain to find; /// the common scope. This is not efficient for N-way merging as each time; /// you merge 2 iterations, you need to rebuild the hashmap to find the; /// common scope. However, we still choose this API because:; /// 1) Simplicity: it takes 2 locations instead of a list of locations.; /// 2) In worst case, it increases the complexity from O(N*I) to; /// O(2*N*I), where N is # of Instructions to merge, and I is the; /// maximum level of inline stack. So it is still linear.; /// 3) Merging of call instructions should be extremely rare in real; /// applications, thus the N-way merging should be in code path.; /// The DebugLoc attached to this instruction will be overwritten by the; /// merged DebugLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:273,Security,hash,hashmap,273,"/// Merge 2 debug locations and apply it to the Instruction. If the; /// instruction is a CallIns, we need to traverse the inline chain to find; /// the common scope. This is not efficient for N-way merging as each time; /// you merge 2 iterations, you need to rebuild the hashmap to find the; /// common scope. However, we still choose this API because:; /// 1) Simplicity: it takes 2 locations instead of a list of locations.; /// 2) In worst case, it increases the complexity from O(N*I) to; /// O(2*N*I), where N is # of Instructions to merge, and I is the; /// maximum level of inline stack. So it is still linear.; /// 3) Merging of call instructions should be extremely rare in real; /// applications, thus the N-way merging should be in code path.; /// The DebugLoc attached to this instruction will be overwritten by the; /// merged DebugLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:363,Usability,Simpl,Simplicity,363,"/// Merge 2 debug locations and apply it to the Instruction. If the; /// instruction is a CallIns, we need to traverse the inline chain to find; /// the common scope. This is not efficient for N-way merging as each time; /// you merge 2 iterations, you need to rebuild the hashmap to find the; /// common scope. However, we still choose this API because:; /// 1) Simplicity: it takes 2 locations instead of a list of locations.; /// 2) In worst case, it increases the complexity from O(N*I) to; /// O(2*N*I), where N is # of Instructions to merge, and I is the; /// maximum level of inline stack. So it is still linear.; /// 3) Merging of call instructions should be extremely rare in real; /// applications, thus the N-way merging should be in code path.; /// The DebugLoc attached to this instruction will be overwritten by the; /// merged DebugLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Deployability,Update,Updates,4,/// Updates the debug location given that the instruction has been hoisted; /// from a block to a predecessor of that block.; /// Note: it is undefined behavior to call this on an instruction not; /// currently inserted into a function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:135,Performance,perform,performs,135,"/// Merge the DIAssignID metadata from this instruction and those attached to; /// instructions in \p SourceInstructions. This process performs a RAUW on; /// the MetadataAsValue uses of the merged DIAssignID nodes. Not every; /// instruction in \p SourceInstructions needs to have DIAssignID; /// metadata. If none of them do then nothing happens. If this instruction; /// does not have a DIAssignID attachment but at least one in \p; /// SourceInstructions does then the merged one will be attached to; /// it. However, instructions without attachments in \p SourceInstructions; /// are not modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Deployability,Update,Update,4,/// Update the LLVMContext ID-to-Instruction(s) mapping. If \p ID is nullptr; /// then clear the mapping for this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:87,Usability,clear,clear,87,/// Update the LLVMContext ID-to-Instruction(s) mapping. If \p ID is nullptr; /// then clear the mapping for this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:43,Performance,load,loads,43,/// Return true if this atomic instruction loads from memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:58,Security,access,access,58,/// Return true if this instruction has a volatile memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:37,Security,access,accesses,37,"/// Return the type this instruction accesses in memory, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:72,Performance,load,load,72,/// Return true if this instruction behaves like a memory fence: it can load; /// or store to memory location without being given a memory location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:281,Energy Efficiency,allocate,allocated,281,"/// Return true if the instruction may have side effects.; ///; /// Side effects are:; /// * Writing to memory.; /// * Unwinding.; /// * Not returning (e.g. an infinite loop).; ///; /// Note that this does not consider malloc and alloca to have side; /// effects because the newly allocated memory is completely invisible to; /// instructions which don't use the returned value. For cases where this; /// matters, isSafeToSpeculativelyExecute may be more appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:163,Performance,load,load,163,/// Return true if the specified instruction is exactly identical to the; /// current one. This means that all operands match and any extra information; /// (e.g. load is volatile) agree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:35,Performance,load,load,35,/// Check for equivalence ignoring load/store alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:227,Performance,load,loads,227,"/// This function determines if the speficied instruction has the same; /// ""special"" characteristics as the current one. This means that opcode; /// specific details are the same. As a common example, if we are comparing; /// loads, then hasSameSpecialState would compare the alignments (among; /// other things).; /// @returns true if the specific instruction has the same opcde specific; /// characteristics as the current one. Determine if one instruction has the; /// same state as another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Deployability,Update,Update,4,/// Update the specified successor to point at the provided block. This; /// instruction must be a terminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:393,Security,expose,exposes,393,"//===- llvm/Instructions.h - Instruction subclass definitions ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the class definitions of all of the subclasses of the; // Instruction class. This is meant to be an easy way to get access to all; // instruction subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:517,Security,access,access,517,"//===- llvm/Instructions.h - Instruction subclass definitions ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the class definitions of all of the subclasses of the; // Instruction class. This is meant to be an easy way to get access to all; // instruction subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:207,Energy Efficiency,allocate,allocate,207,//===----------------------------------------------------------------------===//; // AllocaInst Class; //===----------------------------------------------------------------------===//; /// an instruction to allocate memory on the stack,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,allocate,allocated,31,"/// Get the number of elements allocated. For a simple allocation of a single; /// element, this will return a constant 1 value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Usability,simpl,simple,48,"/// Get the number of elements allocated. For a simple allocation of a single; /// element, this will return a constant 1 value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:34,Energy Efficiency,allocate,allocated,34,/// Return the type that is being allocated by the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:53,Energy Efficiency,allocate,allocated,53,/// Return the alignment of the memory that is being allocated by the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:85,Performance,Load,LoadInst,85,//===----------------------------------------------------------------------===//; // LoadInst Class; //===----------------------------------------------------------------------===//; /// An instruction for reading from memory. This uses the SubclassData field in; /// Value to store whether or not the load is volatile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:302,Performance,load,load,302,//===----------------------------------------------------------------------===//; // LoadInst Class; //===----------------------------------------------------------------------===//; /// An instruction for reading from memory. This uses the SubclassData field in; /// Value to store whether or not the load is volatile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:29,Performance,load,load,29,/// Return true if this is a load from a volatile memory location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:39,Performance,load,load,39,/// Specify whether this is a volatile load or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:53,Performance,perform,performed,53,/// Return the alignment of the access that is being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Security,access,access,32,/// Return the alignment of the access that is being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:44,Performance,load,load,44,/// Returns the ordering constraint of this load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:70,Deployability,Release,Release,70,/// Sets the ordering constraint of this load instruction. May not be Release; /// or AcquireRelease.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,Performance,load,load,41,/// Sets the ordering constraint of this load instruction. May not be Release; /// or AcquireRelease.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:49,Performance,load,load,49,/// Returns the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Integrability,synchroniz,synchronization,13,/// Sets the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:46,Performance,load,load,46,/// Sets the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,Integrability,synchroniz,synchronization,41,/// Sets the ordering constraint and the synchronization scope ID of this load; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:74,Performance,load,load,74,/// Sets the ordering constraint and the synchronization scope ID of this load; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,Integrability,synchroniz,synchronization,8,"/// The synchronization scope ID of this load instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:121,Integrability,synchroniz,synchronization,121,"/// The synchronization scope ID of this load instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,Performance,load,load,41,"/// The synchronization scope ID of this load instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly two operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID of this store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Integrability,synchroniz,synchronization,13,/// Sets the synchronization scope ID of this store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,Integrability,synchroniz,synchronization,41,/// Sets the ordering constraint and the synchronization scope ID of this; /// store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,Integrability,synchroniz,synchronization,8,"/// The synchronization scope ID of this store instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:122,Integrability,synchroniz,synchronization,122,"/// The synchronization scope ID of this store instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:33,Deployability,Release,Release,33,"// Ordering may only be Acquire, Release, AcquireRelease, or; // SequentiallyConsistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly zero operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:86,Deployability,Release,Release,86,"/// Sets the ordering constraint of this fence instruction. May only be; /// Acquire, Release, AcquireRelease, or SequentiallyConsistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID of this fence instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Integrability,synchroniz,synchronization,13,/// Sets the synchronization scope ID of this fence instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,Integrability,synchroniz,synchronization,8,"/// The synchronization scope ID of this fence instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:122,Integrability,synchroniz,synchronization,122,"/// The synchronization scope ID of this fence instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:482,Availability,failure,failure,482,"//===----------------------------------------------------------------------===//; // AtomicCmpXchgInst Class; //===----------------------------------------------------------------------===//; /// An instruction that atomically checks whether a; /// specified value is in a memory location, and, if it is, stores a new value; /// there. The value returned by this instruction is a pair containing the; /// original value as first element, and an i1 indicating success (true) or; /// failure (false) as second element.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly three operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:53,Energy Efficiency,allocate,allocated,53,/// Return the alignment of the memory that is being allocated by the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Availability,failure,failure,16,/// Returns the failure ordering constraint of this cmpxchg instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Availability,failure,failure,13,/// Sets the failure ordering constraint of this cmpxchg instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:87,Availability,failure,failure,87,/// Returns a single ordering which is at least as strong as both the; /// success and failure orderings for this cmpxchg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID of this cmpxchg instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Integrability,synchroniz,synchronization,13,/// Sets the synchronization scope ID of this cmpxchg instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Availability,failure,failure,48,"/// Returns the strongest permitted ordering on failure, given the; /// desired ordering on success.; ///; /// If the comparison in a cmpxchg operation fails, there is no atomic store; /// so release semantics cannot be provided. So this function drops explicit; /// Release requests from the AtomicOrdering. A SequentiallyConsistent; /// operation would remain SequentiallyConsistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:192,Deployability,release,release,192,"/// Returns the strongest permitted ordering on failure, given the; /// desired ordering on success.; ///; /// If the comparison in a cmpxchg operation fails, there is no atomic store; /// so release semantics cannot be provided. So this function drops explicit; /// Release requests from the AtomicOrdering. A SequentiallyConsistent; /// operation would remain SequentiallyConsistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:267,Deployability,Release,Release,267,"/// Returns the strongest permitted ordering on failure, given the; /// desired ordering on success.; ///; /// If the comparison in a cmpxchg operation fails, there is no atomic store; /// so release semantics cannot be provided. So this function drops explicit; /// Release requests from the AtomicOrdering. A SequentiallyConsistent; /// operation would remain SequentiallyConsistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,Integrability,synchroniz,synchronization,8,"/// The synchronization scope ID of this cmpxchg instruction. Not quite; /// enough room in SubClassData for everything, so synchronization scope ID; /// gets its own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:124,Integrability,synchroniz,synchronization,124,"/// The synchronization scope ID of this cmpxchg instruction. Not quite; /// enough room in SubClassData for everything, so synchronization scope ID; /// gets its own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly two operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:53,Energy Efficiency,allocate,allocated,53,/// Return the alignment of the memory that is being allocated by the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID of this rmw instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,Integrability,synchroniz,synchronization,13,/// Sets the synchronization scope ID of this rmw instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,Integrability,synchroniz,synchronization,8,"/// The synchronization scope ID of this rmw instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:120,Integrability,synchroniz,synchronization,120,"/// The synchronization scope ID of this rmw instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:261,Availability,failure,failure,261,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:217,Integrability,wrap,wrapper,217,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:273,Integrability,message,message,273,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:251,Testability,assert,assertion,251,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:210,Usability,Simpl,Simple,210,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:28,Safety,safe,safe,28,/// an instruction for type-safe pointer arithmetic to; /// access elements of arrays and structs; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,Security,access,access,60,/// an instruction for type-safe pointer arithmetic to; /// access elements of arrays and structs; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:11,Usability,clear,clear,11,/// Set or clear the inbounds flag on this GEP instruction.; /// See LangRef.html for the meaning of inbounds on a getelementptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:83,Integrability,rout,routine,83,"/// Accumulate the constant address offset of this GEP if possible.; ///; /// This routine accepts an APInt into which it will accumulate the constant; /// offset of this GEP if the GEP is in fact constant. If the GEP is not; /// all-constant, it returns false and the value of the offset APInt is; /// undefined (it is *not* preserved!). The APInt passed into this routine; /// must be at least as wide as the IntPtr type for the address space of; /// the base GEP pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:366,Integrability,rout,routine,366,"/// Accumulate the constant address offset of this GEP if possible.; ///; /// This routine accepts an APInt into which it will accumulate the constant; /// offset of this GEP if the GEP is in fact constant. If the GEP is not; /// all-constant, it returns false and the value of the offset APInt is; /// undefined (it is *not* preserved!). The APInt passed into this routine; /// must be at least as wide as the IntPtr type for the address space of; /// the base GEP pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:69,Testability,test,tests,69,/// Return true if this predicate is either EQ or NE. This also; /// tests for commutativity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:69,Testability,test,tests,69,/// Return true if this predicate is either EQ or NE. This also; /// tests for commutativity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:219,Integrability,depend,dependent,219,/// Exchange the two operands to this instruction in such a way that it does; /// not modify the semantics of the instruction. The predicate value may be; /// changed to retain the same result if the predicate is order dependent; /// (e.g. ult).; /// Swap operands and adjust predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:219,Integrability,depend,dependent,219,/// Exchange the two operands to this instruction in such a way that it does; /// not modify the semantics of the instruction. The predicate value may be; /// changed to retain the same result if the predicate is order dependent; /// (e.g. ult).; /// Swap operands and adjust predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:38,Energy Efficiency,allocate,allocate,38,/// Compute the number of operands to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:4,Deployability,Update,Updates,4,/// Updates profile metadata by scaling it by \p S / \p T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:140,Availability,mask,mask,140,"/// This instruction constructs a fixed permutation of two; /// input vectors.; ///; /// For each element of the result vector, the shuffle mask selects an element; /// from one of the input vectors to copy to the result. Non-negative elements; /// in the mask represent an index into the concatenated pair of input vectors.; /// PoisonMaskElem (-1) specifies that the result element is poison.; ///; /// For scalable vectors, all the elements of the mask must be 0 or -1. This; /// requirement may be relaxed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:256,Availability,mask,mask,256,"/// This instruction constructs a fixed permutation of two; /// input vectors.; ///; /// For each element of the result vector, the shuffle mask selects an element; /// from one of the input vectors to copy to the result. Non-negative elements; /// in the mask represent an index into the concatenated pair of input vectors.; /// PoisonMaskElem (-1) specifies that the result element is poison.; ///; /// For scalable vectors, all the elements of the mask must be 0 or -1. This; /// requirement may be relaxed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:451,Availability,mask,mask,451,"/// This instruction constructs a fixed permutation of two; /// input vectors.; ///; /// For each element of the result vector, the shuffle mask selects an element; /// from one of the input vectors to copy to the result. Non-negative elements; /// in the mask represent an index into the concatenated pair of input vectors.; /// PoisonMaskElem (-1) specifies that the result element is poison.; ///; /// For scalable vectors, all the elements of the mask must be 0 or -1. This; /// requirement may be relaxed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:409,Performance,scalab,scalable,409,"/// This instruction constructs a fixed permutation of two; /// input vectors.; ///; /// For each element of the result vector, the shuffle mask selects an element; /// from one of the input vectors to copy to the result. Non-negative elements; /// in the mask represent an index into the concatenated pair of input vectors.; /// PoisonMaskElem (-1) specifies that the result element is poison.; ///; /// For scalable vectors, all the elements of the mask must be 0 or -1. This; /// requirement may be relaxed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,/// Swap the operands and adjust the mask to preserve the semantics; /// of the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Availability,mask,mask,23,/// Return the shuffle mask value of this instruction for the given element; /// index. Return PoisonMaskElem if the element is undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:30,Availability,mask,mask,30,/// Convert the input shuffle mask operand to a vector of integers. Undefined; /// elements of the mask are returned as PoisonMaskElem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:99,Availability,mask,mask,99,/// Convert the input shuffle mask operand to a vector of integers. Undefined; /// elements of the mask are returned as PoisonMaskElem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:15,Availability,mask,mask,15,/// Return the mask for this instruction as a vector of integers. Undefined; /// elements of the mask are returned as PoisonMaskElem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:97,Availability,mask,mask,97,/// Return the mask for this instruction as a vector of integers. Undefined; /// elements of the mask are returned as PoisonMaskElem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:15,Availability,mask,mask,15,"/// Return the mask for this instruction, for use in bitcode.; ///; /// TODO: This is temporary until we decide a new bitcode encoding for; /// shufflevector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask chooses elements from exactly one source; /// vector.; /// Example: <7,5,undef,7>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:216,Availability,mask,mask,216,"/// Return true if this shuffle mask chooses elements from exactly one source; /// vector.; /// Example: <7,5,undef,7>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask chooses elements from exactly one source; /// vector without lane crossings. A shuffle using this mask is not; /// necessarily a no-op because it may change the number of elements from its; /// input vectors or it may provide demanded bits knowledge via undef lanes.; /// Example: <undef,undef,2,3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:135,Availability,mask,mask,135,"/// Return true if this shuffle mask chooses elements from exactly one source; /// vector without lane crossings. A shuffle using this mask is not; /// necessarily a no-op because it may change the number of elements from its; /// input vectors or it may provide demanded bits knowledge via undef lanes.; /// Example: <undef,undef,2,3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask chooses elements from its source vectors; /// without lane crossings. A shuffle using this mask would be; /// equivalent to a vector select with a constant condition operand.; /// Example: <4,1,6,undef>; /// This returns false if the mask does not choose from both input vectors.; /// In that case, the shuffle is better classified as an identity shuffle.; /// This assumes that vector operands are the same length as the mask; /// (a length-changing shuffle can never be equivalent to a vector select).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:128,Availability,mask,mask,128,"/// Return true if this shuffle mask chooses elements from its source vectors; /// without lane crossings. A shuffle using this mask would be; /// equivalent to a vector select with a constant condition operand.; /// Example: <4,1,6,undef>; /// This returns false if the mask does not choose from both input vectors.; /// In that case, the shuffle is better classified as an identity shuffle.; /// This assumes that vector operands are the same length as the mask; /// (a length-changing shuffle can never be equivalent to a vector select).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:271,Availability,mask,mask,271,"/// Return true if this shuffle mask chooses elements from its source vectors; /// without lane crossings. A shuffle using this mask would be; /// equivalent to a vector select with a constant condition operand.; /// Example: <4,1,6,undef>; /// This returns false if the mask does not choose from both input vectors.; /// In that case, the shuffle is better classified as an identity shuffle.; /// This assumes that vector operands are the same length as the mask; /// (a length-changing shuffle can never be equivalent to a vector select).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:459,Availability,mask,mask,459,"/// Return true if this shuffle mask chooses elements from its source vectors; /// without lane crossings. A shuffle using this mask would be; /// equivalent to a vector select with a constant condition operand.; /// Example: <4,1,6,undef>; /// This returns false if the mask does not choose from both input vectors.; /// In that case, the shuffle is better classified as an identity shuffle.; /// This assumes that vector operands are the same length as the mask; /// (a length-changing shuffle can never be equivalent to a vector select).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:354,Availability,mask,mask,354,"/// Return true if this shuffle chooses elements from its source vectors; /// without lane crossings and all operands have the same number of elements.; /// In other words, this shuffle is equivalent to a vector select with a; /// constant condition operand.; /// Example: shufflevector <4 x n> A, <4 x n> B, <undef,1,6,3>; /// This returns false if the mask does not choose from both input vectors.; /// In that case, the shuffle is better classified as an identity shuffle.; /// TODO: Optionally allow length-changing shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask swaps the order of elements from exactly; /// one source vector.; /// Example: <7,6,undef,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:227,Availability,mask,mask,227,"/// Return true if this shuffle mask swaps the order of elements from exactly; /// one source vector.; /// Example: <7,6,undef,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask chooses all elements with the same value; /// as the first element of exactly one source vector.; /// Example: <4,undef,undef,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:263,Availability,mask,mask,263,"/// Return true if this shuffle mask chooses all elements with the same value; /// as the first element of exactly one source vector.; /// Example: <4,undef,undef,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask is a transpose mask.; /// Transpose vector masks transpose a 2xn matrix. They read corresponding; /// even- or odd-numbered vector elements from two n-dimensional source; /// vectors and write each result into consecutive elements of an; /// n-dimensional destination vector. Two shuffles are necessary to complete; /// the transpose, one for the even elements and another for the odd elements.; /// This description closely follows how the TRN1 and TRN2 AArch64; /// instructions operate.; ///; /// For example, a simple 2x2 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b >; /// m1 = < c, d >; ///; /// ; Transposed matrix; /// t0 = < a, c > = shufflevector m0, m1, < 0, 2 >; /// t1 = < b, d > = shufflevector m0, m1, < 1, 3 >; ///; /// For matrices having greater than n columns, the resulting nx2 transposed; /// matrix is stored in two result vectors such that one vector contains; /// interleaved elements from all the even-numbered rows and the other vector; /// contains interleaved elements from all the odd-numbered rows. For example,; /// a 2x4 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b, c, d >; /// m1 = < e, f, g, h >; ///; /// ; Transposed matrix; /// t0 = < a, e, c, g > = shufflevector m0, m1 < 0, 4, 2, 6 >; /// t1 = < b, f, d, h > = shufflevector m0, m1 < 1, 5, 3, 7 >",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:52,Availability,mask,mask,52,"/// Return true if this shuffle mask is a transpose mask.; /// Transpose vector masks transpose a 2xn matrix. They read corresponding; /// even- or odd-numbered vector elements from two n-dimensional source; /// vectors and write each result into consecutive elements of an; /// n-dimensional destination vector. Two shuffles are necessary to complete; /// the transpose, one for the even elements and another for the odd elements.; /// This description closely follows how the TRN1 and TRN2 AArch64; /// instructions operate.; ///; /// For example, a simple 2x2 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b >; /// m1 = < c, d >; ///; /// ; Transposed matrix; /// t0 = < a, c > = shufflevector m0, m1, < 0, 2 >; /// t1 = < b, d > = shufflevector m0, m1, < 1, 3 >; ///; /// For matrices having greater than n columns, the resulting nx2 transposed; /// matrix is stored in two result vectors such that one vector contains; /// interleaved elements from all the even-numbered rows and the other vector; /// contains interleaved elements from all the odd-numbered rows. For example,; /// a 2x4 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b, c, d >; /// m1 = < e, f, g, h >; ///; /// ; Transposed matrix; /// t0 = < a, e, c, g > = shufflevector m0, m1 < 0, 4, 2, 6 >; /// t1 = < b, f, d, h > = shufflevector m0, m1 < 1, 5, 3, 7 >",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:80,Availability,mask,masks,80,"/// Return true if this shuffle mask is a transpose mask.; /// Transpose vector masks transpose a 2xn matrix. They read corresponding; /// even- or odd-numbered vector elements from two n-dimensional source; /// vectors and write each result into consecutive elements of an; /// n-dimensional destination vector. Two shuffles are necessary to complete; /// the transpose, one for the even elements and another for the odd elements.; /// This description closely follows how the TRN1 and TRN2 AArch64; /// instructions operate.; ///; /// For example, a simple 2x2 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b >; /// m1 = < c, d >; ///; /// ; Transposed matrix; /// t0 = < a, c > = shufflevector m0, m1, < 0, 2 >; /// t1 = < b, d > = shufflevector m0, m1, < 1, 3 >; ///; /// For matrices having greater than n columns, the resulting nx2 transposed; /// matrix is stored in two result vectors such that one vector contains; /// interleaved elements from all the even-numbered rows and the other vector; /// contains interleaved elements from all the odd-numbered rows. For example,; /// a 2x4 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b, c, d >; /// m1 = < e, f, g, h >; ///; /// ; Transposed matrix; /// t0 = < a, e, c, g > = shufflevector m0, m1 < 0, 4, 2, 6 >; /// t1 = < b, f, d, h > = shufflevector m0, m1 < 1, 5, 3, 7 >",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:552,Usability,simpl,simple,552,"/// Return true if this shuffle mask is a transpose mask.; /// Transpose vector masks transpose a 2xn matrix. They read corresponding; /// even- or odd-numbered vector elements from two n-dimensional source; /// vectors and write each result into consecutive elements of an; /// n-dimensional destination vector. Two shuffles are necessary to complete; /// the transpose, one for the even elements and another for the odd elements.; /// This description closely follows how the TRN1 and TRN2 AArch64; /// instructions operate.; ///; /// For example, a simple 2x2 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b >; /// m1 = < c, d >; ///; /// ; Transposed matrix; /// t0 = < a, c > = shufflevector m0, m1, < 0, 2 >; /// t1 = < b, d > = shufflevector m0, m1, < 1, 3 >; ///; /// For matrices having greater than n columns, the resulting nx2 transposed; /// matrix is stored in two result vectors such that one vector contains; /// interleaved elements from all the even-numbered rows and the other vector; /// contains interleaved elements from all the odd-numbered rows. For example,; /// a 2x4 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b, c, d >; /// m1 = < e, f, g, h >; ///; /// ; Transposed matrix; /// t0 = < a, e, c, g > = shufflevector m0, m1 < 0, 4, 2, 6 >; /// t1 = < b, f, d, h > = shufflevector m0, m1 < 1, 5, 3, 7 >",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask is a splice mask, concatenating the two; /// inputs together and then extracts an original width vector starting from; /// the splice index.; /// Example: shufflevector <4 x n> A, <4 x n> B, <1,2,3,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:49,Availability,mask,mask,49,"/// Return true if this shuffle mask is a splice mask, concatenating the two; /// inputs together and then extracts an original width vector starting from; /// the splice index.; /// Example: shufflevector <4 x n> A, <4 x n> B, <1,2,3,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:335,Availability,mask,mask,335,"/// Return true if this shuffle mask is a splice mask, concatenating the two; /// inputs together and then extracts an original width vector starting from; /// the splice index.; /// Example: shufflevector <4 x n> A, <4 x n> B, <1,2,3,4>; /// This assumes that vector operands (of length \p NumSrcElts) are the same; /// length as the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,/// Return true if this shuffle mask is an extract subvector mask.; /// A valid extract subvector mask returns a smaller vector from a single; /// source operand. The base extraction index is returned as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:61,Availability,mask,mask,61,/// Return true if this shuffle mask is an extract subvector mask.; /// A valid extract subvector mask returns a smaller vector from a single; /// source operand. The base extraction index is returned as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:98,Availability,mask,mask,98,/// Return true if this shuffle mask is an extract subvector mask.; /// A valid extract subvector mask returns a smaller vector from a single; /// source operand. The base extraction index is returned as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,/// Return true if this shuffle mask is an extract subvector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:61,Availability,mask,mask,61,/// Return true if this shuffle mask is an extract subvector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,/// Return true if this shuffle mask is an insert subvector mask.; /// A valid insert subvector mask inserts the lowest elements of a second; /// source operand into an in-place first source operand.; /// Both the sub vector width and the insertion index is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,Availability,mask,mask,60,/// Return true if this shuffle mask is an insert subvector mask.; /// A valid insert subvector mask inserts the lowest elements of a second; /// source operand into an in-place first source operand.; /// Both the sub vector width and the insertion index is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:96,Availability,mask,mask,96,/// Return true if this shuffle mask is an insert subvector mask.; /// A valid insert subvector mask inserts the lowest elements of a second; /// source operand into an in-place first source operand.; /// Both the sub vector width and the insertion index is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,/// Return true if this shuffle mask is an insert subvector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,Availability,mask,mask,60,/// Return true if this shuffle mask is an insert subvector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask replicates each of the \p VF elements; /// in a vector \p ReplicationFactor times.; /// For example, the mask for \p ReplicationFactor=3 and \p VF=4 is:; /// <0,0,0,1,1,1,2,2,2,3,3,3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:142,Availability,mask,mask,142,"/// Return true if this shuffle mask replicates each of the \p VF elements; /// in a vector \p ReplicationFactor times.; /// For example, the mask for \p ReplicationFactor=3 and \p VF=4 is:; /// <0,0,0,1,1,1,2,2,2,3,3,3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:37,Availability,mask,mask,37,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,Performance,scalab,scalable,48,// Not possible to express a shuffle mask for a scalable vector for this; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,/// Return true if this shuffle mask is a replication mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:54,Availability,mask,mask,54,/// Return true if this shuffle mask is a replication mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask represents ""clustered"" mask of size VF,; /// i.e. each index between [0..VF) is used exactly once in each submask of; /// size VF.; /// For example, the mask for \p VF=4 is:; /// 0, 1, 2, 3, 3, 2, 0, 1 - ""clustered"", because each submask of size 4; /// (0,1,2,3 and 3,2,0,1) uses indices [0..VF) exactly one time.; /// 0, 1, 2, 3, 3, 3, 1, 0 - not ""clustered"", because; /// element 3 is used twice in the second submask; /// (3,3,1,0) and index 2 is not used at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,Availability,mask,mask,60,"/// Return true if this shuffle mask represents ""clustered"" mask of size VF,; /// i.e. each index between [0..VF) is used exactly once in each submask of; /// size VF.; /// For example, the mask for \p VF=4 is:; /// 0, 1, 2, 3, 3, 2, 0, 1 - ""clustered"", because each submask of size 4; /// (0,1,2,3 and 3,2,0,1) uses indices [0..VF) exactly one time.; /// 0, 1, 2, 3, 3, 3, 1, 0 - not ""clustered"", because; /// element 3 is used twice in the second submask; /// (3,3,1,0) and index 2 is not used at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:190,Availability,mask,mask,190,"/// Return true if this shuffle mask represents ""clustered"" mask of size VF,; /// i.e. each index between [0..VF) is used exactly once in each submask of; /// size VF.; /// For example, the mask for \p VF=4 is:; /// 0, 1, 2, 3, 3, 2, 0, 1 - ""clustered"", because each submask of size 4; /// (0,1,2,3 and 3,2,0,1) uses indices [0..VF) exactly one time.; /// 0, 1, 2, 3, 3, 3, 1, 0 - not ""clustered"", because; /// element 3 is used twice in the second submask; /// (3,3,1,0) and index 2 is not used at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Availability,mask,mask,32,"/// Return true if this shuffle mask is a one-use-single-source(""clustered""); /// mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:82,Availability,mask,mask,82,"/// Return true if this shuffle mask is a one-use-single-source(""clustered""); /// mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:39,Availability,mask,mask,39,/// Change values in a shuffle permute mask assuming the two vector operands; /// of length InVecNumElts have swapped position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Availability,mask,mask,23,"/// Return true if the mask interleaves one or more input vectors together.; ///; /// I.e. <0, LaneLen, ... , LaneLen*(Factor - 1), 1, LaneLen + 1, ...>; /// E.g. For a Factor of 2 (LaneLen=4):; /// <0, 4, 1, 5, 2, 6, 3, 7>; /// E.g. For a Factor of 3 (LaneLen=4):; /// <4, 0, 9, 5, 1, 10, 6, 2, 11, 7, 3, 12>; /// E.g. For a Factor of 4 (LaneLen=2):; /// <0, 2, 6, 4, 1, 3, 7, 5>; ///; /// NumInputElts is the total number of elements in the input vectors.; ///; /// StartIndexes are the first indexes of each vector being interleaved,; /// substituting any indexes that were undef; /// E.g. <4, -1, 2, 5, 1, 3> (Factor=3): StartIndexes=<4, 0, 2>; ///; /// Note that this does not check if the input vectors are consecutive:; /// It will return true for masks such as; /// <0, 4, 6, 1, 5, 7> (Factor=3, LaneLen=2)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:755,Availability,mask,masks,755,"/// Return true if the mask interleaves one or more input vectors together.; ///; /// I.e. <0, LaneLen, ... , LaneLen*(Factor - 1), 1, LaneLen + 1, ...>; /// E.g. For a Factor of 2 (LaneLen=4):; /// <0, 4, 1, 5, 2, 6, 3, 7>; /// E.g. For a Factor of 3 (LaneLen=4):; /// <4, 0, 9, 5, 1, 10, 6, 2, 11, 7, 3, 12>; /// E.g. For a Factor of 4 (LaneLen=2):; /// <0, 2, 6, 4, 1, 3, 7, 5>; ///; /// NumInputElts is the total number of elements in the input vectors.; ///; /// StartIndexes are the first indexes of each vector being interleaved,; /// substituting any indexes that were undef; /// E.g. <4, -1, 2, 5, 1, 3> (Factor=3): StartIndexes=<4, 0, 2>; ///; /// Note that this does not check if the input vectors are consecutive:; /// It will return true for masks such as; /// <0, 4, 6, 1, 5, 7> (Factor=3, LaneLen=2)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly two operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:36,Energy Efficiency,allocate,allocated,36,/// The number of operands actually allocated. NumOperands is; /// the number actually in use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:111,Energy Efficiency,allocate,allocate,111,"// allocHungoffUses - this is more complicated than the generic; // User::allocHungoffUses, because we have to allocate Uses for the incoming; // values and pointers to the incoming blocks, all in one allocation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:227,Deployability,update,updates,227,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.; // Please note that we are not providing non-const iterators for blocks to; // force all updates go through an interface function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:18,Integrability,interface,interface,18,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.; // Please note that we are not providing non-const iterators for blocks to; // force all updates go through an interface function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:249,Integrability,interface,interface,249,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.; // Please note that we are not providing non-const iterators for blocks to; // force all updates go through an interface function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:43,Security,access,access,43,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.; // Please note that we are not providing non-const iterators for blocks to; // force all updates go through an interface function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:492,Security,access,accessible,492,"//===----------------------------------------------------------------------===//; // LandingPadInst Class; //===----------------------------------------------------------------------===//; //===---------------------------------------------------------------------------; /// The landingpad instruction holds all of the information; /// necessary to generate correct exception handling. The landingpad instruction; /// cannot be moved from the top of a landing pad block, which itself is; /// accessible only from the 'unwind' edge of an invoke. This uses the; /// SubclassData field in Value to store whether or not the landingpad is a; /// cleanup.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:36,Energy Efficiency,allocate,allocated,36,/// The number of operands actually allocated. NumOperands is; /// the number actually in use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for exactly zero operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Security,access,accessor,16,/// Convenience accessor. Returns null if there is no return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:113,Security,access,accessors,113,"/// Ops list - Branches are strange. The operands are ordered:; /// [Cond, FalseDest,] TrueDest. This makes some accessors faster because; /// they don't have to check for cond/uncond branchness. These are mostly; /// accessed relative from op_end().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:218,Security,access,accessed,218,"/// Ops list - Branches are strange. The operands are ordered:; /// [Cond, FalseDest,] TrueDest. This makes some accessors faster because; /// they don't have to check for cond/uncond branchness. These are mostly; /// accessed relative from op_end().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:190,Energy Efficiency,efficient,efficient,190,"/// Create a new switch instruction, specifying a value to switch on and a; /// default destination. The number of additional cases can be specified here; /// to make memory allocation more efficient. This constructor can also; /// auto-insert before another instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:190,Energy Efficiency,efficient,efficient,190,"/// Create a new switch instruction, specifying a value to switch on and a; /// default destination. The number of additional cases can be specified here; /// to make memory allocation more efficient. This constructor also; /// auto-inserts at the end of the specified BasicBlock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly zero operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:66,Integrability,interface,interface,66,/// A handle to a particular switch case. It exposes a convenient interface; /// to both the case value and the successor block.; ///; /// We define this as a template and instantiate it to form both a const and; /// non-const handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:45,Security,expose,exposes,45,/// A handle to a particular switch case. It exposes a convenient interface; /// to both the case value and the successor block.; ///; /// We define this as a template and instantiate it to form both a const and; /// non-const handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,Modifiability,parameteriz,parameterized,32,// Expose the switch type we're parameterized with to the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Security,Expose,Expose,3,// Expose the switch type we're parameterized with to the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Security,Access,Accessor,3,// Accessor Methods for Switch stmt,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Energy Efficiency,adapt,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Integrability,adapter,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Modifiability,adapt,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Energy Efficiency,adapt,adapter,23,/// Constant iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Integrability,adapter,adapter,23,/// Constant iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Modifiability,adapt,adapter,23,/// Constant iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:161,Testability,assert,assertion,161,"/// Returns an iterator that points to the default case.; /// Note: this iterator allows to resolve successor only. Attempt; /// to resolve case value causes an assertion.; /// Also note, that increment and decrement also causes an assertion and; /// makes iterator invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:232,Testability,assert,assertion,232,"/// Returns an iterator that points to the default case.; /// Note: this iterator allows to resolve successor only. Attempt; /// to resolve case value causes an assertion.; /// Also note, that increment and decrement also causes an assertion and; /// makes iterator invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:6,Integrability,wrap,wrapper,6,/// A wrapper class to simplify modification of SwitchInst cases along with; /// their prof branch_weights metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,Usability,simpl,simplify,23,/// A wrapper class to simplify modification of SwitchInst cases along with; /// their prof branch_weights metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:174,Energy Efficiency,efficient,efficient,174,"/// Create a new indirectbr instruction, specifying an; /// Address to jump to. The number of expected destinations can be specified; /// here to make memory allocation more efficient. This constructor can also; /// autoinsert before another instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:174,Energy Efficiency,efficient,efficient,174,"/// Create a new indirectbr instruction, specifying an; /// Address to jump to. The number of expected destinations can be specified; /// here to make memory allocation more efficient. This constructor also; /// autoinserts at the end of the specified BasicBlock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly zero operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Security,Access,Accessor,3,// Accessor Methods for IndirectBrInst instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:38,Energy Efficiency,allocate,allocate,38,/// Compute the number of operands to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:38,Energy Efficiency,allocate,allocate,38,/// Compute the number of operands to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:85,Usability,Resume,ResumeInst,85,//===----------------------------------------------------------------------===//; // ResumeInst Class; //===----------------------------------------------------------------------===//; //===---------------------------------------------------------------------------; /// Resume the propagation of an exception.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:271,Usability,Resume,Resume,271,//===----------------------------------------------------------------------===//; // ResumeInst Class; //===----------------------------------------------------------------------===//; //===---------------------------------------------------------------------------; /// Resume the propagation of an exception.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Security,access,accessor,16,/// Convenience accessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:36,Energy Efficiency,allocate,allocated,36,/// The number of operands actually allocated. NumOperands is; /// the number actually in use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:168,Energy Efficiency,efficient,efficient,168,"/// Create a new switch instruction, specifying a; /// default destination. The number of additional handlers can be specified; /// here to make memory allocation more efficient.; /// This constructor can also autoinsert before another instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:168,Energy Efficiency,efficient,efficient,168,"/// Create a new switch instruction, specifying a; /// default destination. The number of additional handlers can be specified; /// here to make memory allocation more efficient.; /// This constructor also autoinserts at the end of the specified BasicBlock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly zero operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Security,Access,Accessor,3,// Accessor Methods for CatchSwitch stmt,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Security,Access,Accessor,3,// Accessor Methods for CatchSwitch stmt,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Energy Efficiency,adapt,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Integrability,adapter,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Modifiability,adapt,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Energy Efficiency,adapt,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Integrability,adapter,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,Modifiability,adapt,adapter,14,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Security,access,accessors,16,/// Convenience accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Security,access,accessors,16,/// Convenience accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,Security,access,accessor,16,/// Convenience accessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly zero operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:26,Modifiability,extend,extended,26,///< The value to be zero extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:22,Modifiability,extend,extend,22,///< The type to zero extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:26,Modifiability,extend,extended,26,///< The value to be zero extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:22,Modifiability,extend,extend,22,///< The type to zero extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:26,Modifiability,extend,extended,26,///< The value to be sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:22,Modifiability,extend,extend,22,///< The type to sign extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:26,Modifiability,extend,extended,26,///< The value to be sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:22,Modifiability,extend,extend,22,///< The type to sign extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:21,Modifiability,extend,extended,21,///< The value to be extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:17,Modifiability,extend,extend,17,///< The type to extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:21,Modifiability,extend,extended,21,///< The value to be extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:17,Modifiability,extend,extend,17,///< The type to extend to,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:245,Performance,load,load,245,//===----------------------------------------------------------------------===//; // Helper functions; //===----------------------------------------------------------------------===//; /// A helper function that returns the pointer operand of a load or store; /// instruction. Returns nullptr if not load or store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:300,Performance,load,load,300,//===----------------------------------------------------------------------===//; // Helper functions; //===----------------------------------------------------------------------===//; /// A helper function that returns the pointer operand of a load or store; /// instruction. Returns nullptr if not load or store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,Performance,load,load,60,"/// A helper function that returns the pointer operand of a load, store; /// or GEP instruction. Returns nullptr if not load, store, or GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:120,Performance,load,load,120,"/// A helper function that returns the pointer operand of a load, store; /// or GEP instruction. Returns nullptr if not load, store, or GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:52,Performance,load,load,52,/// A helper function that returns the alignment of load or store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:84,Performance,load,load,84,/// A helper function that returns the address space of the pointer operand of; /// load or store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:49,Performance,load,load,49,/// A helper function that returns the type of a load or store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:1965,Energy Efficiency,efficient,efficient,1965,"; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch statement over the instruction; /// opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:295,Modifiability,inherit,inherit,295,"/// Base class for instruction visitors; ///; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:97,Performance,perform,perform,97,"/// Base class for instruction visitors; ///; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:1872,Safety,avoid,avoid,1872,"; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch statement over the instruction; /// opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:83,Integrability,Interface,Interface,83,//===--------------------------------------------------------------------===//; // Interface code - This is the public interface of the InstVisitor that you; // use to visit instructions...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:119,Integrability,interface,interface,119,//===--------------------------------------------------------------------===//; // Interface code - This is the public interface of the InstVisitor that you; // use to visit instructions...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:53,Integrability,Wrap,Wrappers,53,"//===-- llvm/IntrinsicInst.h - Intrinsic Instruction Wrappers ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines classes that make it really easy to deal with intrinsic; // functions with the isa/dyncast family of functions. In particular, this; // allows you to do things like:; //; // if (MemCpyInst *MCI = dyn_cast<MemCpyInst>(Inst)); // ... MCI->getDest() ... MCI->getSource() ...; //; // All intrinsic function calls are instances of the call instruction, so these; // are all subclasses of the CallInst class. Note that none of these classes; // has state or virtual methods, which is an important part of this gross/neat; // hack working.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:6,Integrability,wrap,wrapper,6,/// A wrapper class for inspecting calls to intrinsic functions.; /// This allows the standard isa/dyncast/cast functionality to work with calls; /// to intrinsic functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:27,Integrability,wrap,wraps,27,"/// Lightweight class that wraps the location operand metadata of a debug; /// intrinsic. The raw location may be a ValueAsMetadata, an empty MDTuple,; /// or a DIArgList.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:97,Integrability,Depend,Depending,97,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:43,Modifiability,variab,variable,43,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:148,Modifiability,variab,variable,148,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:64,Modifiability,variab,variables,64,/// This is the common base class for debug info intrinsics for variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:97,Integrability,Depend,Depending,97,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:43,Modifiability,variab,variable,43,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:148,Modifiability,variab,variable,148,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:46,Modifiability,variab,variable,46,"/// Does this describe the address of a local variable. True for dbg.declare,; /// but not dbg.value, which describes its value, or dbg.assign, which; /// describes a combination of the variable's value and address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:186,Modifiability,variab,variable,186,"/// Does this describe the address of a local variable. True for dbg.declare,; /// but not dbg.value, which describes its value, or dbg.assign, which; /// describes a combination of the variable's value and address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:36,Safety,avoid,avoided,36,"/// Use of this should generally be avoided; instead,; /// replaceVariableLocationOp and addVariableLocationOps should be used where; /// possible to avoid creating invalid state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:150,Safety,avoid,avoid,150,"/// Use of this should generally be avoided; instead,; /// replaceVariableLocationOp and addVariableLocationOps should be used where; /// possible to avoid creating invalid state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:34,Modifiability,variab,variable,34,"/// Get the size (in bits) of the variable, or fragment of the variable that; /// is described.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:63,Modifiability,variab,variable,63,"/// Get the size (in bits) of the variable, or fragment of the variable that; /// is described.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:33,Modifiability,variab,variable,33,/// Get the FragmentInfo for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:33,Modifiability,variab,variable,33,"/// Get the FragmentInfo for the variable if it exists, otherwise return a; /// FragmentInfo that covers the entire variable if the variable size is; /// known, otherwise return a zero-sized fragment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:116,Modifiability,variab,variable,116,"/// Get the FragmentInfo for the variable if it exists, otherwise return a; /// FragmentInfo that covers the entire variable if the variable size is; /// known, otherwise return a zero-sized fragment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:132,Modifiability,variab,variable,132,"/// Get the FragmentInfo for the variable if it exists, otherwise return a; /// FragmentInfo that covers the entire variable if the variable size is; /// known, otherwise return a zero-sized fragment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:23,Modifiability,variab,variable,23,"// Get the fragment or variable size, or zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:219,Modifiability,variab,variable,219,"/// Check whether this kills the address component. This doesn't take into; /// account the position of the intrinsic, therefore a returned value of false; /// does not guarentee the address is a valid location for the variable at the; /// intrinsic's position in IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:112,Performance,load,load,112,"/// \brief Declares a llvm.vp.* intrinsic in \p M that matches the parameters; /// \p Params. Additionally, the load and gather intrinsics require; /// \p ReturnType to be specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:16,Availability,mask,mask,16,/// \return The mask parameter or nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:54,Performance,load,load,54,/// \return The alignment of the pointer used by this load/store/gather or; /// scatter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:100,Performance,load,load,100,"// MaybeAlign setPointerAlignment(Align NewAlign); // TODO; /// \return The pointer operand of this load,store, gather or scatter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:110,Safety,avoid,avoid,110,/// Common base class for all memory intrinsics. Simply provides; /// common methods.; /// Written as CRTP to avoid a common base class amongst the; /// three atomicity hierarchies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:49,Usability,Simpl,Simply,49,/// Common base class for all memory intrinsics. Simply provides; /// common methods.; /// Written as CRTP to avoid a common base class amongst the; /// three atomicity hierarchies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:58,Usability,Simpl,Simply,58,/// Common base class for all memory transfer intrinsics. Simply provides; /// common methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:49,Usability,Simpl,Simply,49,/// Common base class for all memset intrinsics. Simply provides; /// common methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:14,Integrability,wrap,wraps,14,// This class wraps the atomic memcpy/memmove intrinsics; // i.e. llvm.element.unordered.atomic.memcpy/memmove,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memset and llvm.memset.inline intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memset.inline intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memcpy/memmove intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memcpy intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memmove intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,Integrability,wrap,wraps,15,/// This class wraps the llvm.memcpy.inline intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:14,Integrability,wrap,wraps,14,// This class wraps any memcpy/memmove intrinsics; // i.e. llvm.element.unordered.atomic.memcpy/memmove; // and llvm.memcpy/memmove,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:7,Security,hash,hash,7,// The hash of the CFG for the instrumented function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:53,Deployability,update,update,53,/// This represents the llvm.instrprof.mcdc.tvbitmap.update intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:29,Testability,Test,TestVector,29,/// \return The index of the TestVector Bitmap upon which this intrinsic; /// acts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:109,Deployability,update,update,109,/// \return The address of the corresponding condition bitmap containing; /// the index of the TestVector to update within the TestVector Bitmap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:95,Testability,Test,TestVector,95,/// \return The address of the corresponding condition bitmap containing; /// the index of the TestVector to update within the TestVector Bitmap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:127,Testability,Test,TestVector,127,/// \return The address of the corresponding condition bitmap containing; /// the index of the TestVector to update within the TestVector Bitmap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:55,Deployability,update,update,55,/// This represents the llvm.instrprof.mcdc.condbitmap.update intrinsic.; /// It does not pertain to global bitmap updates or parameters and so doesn't; /// inherit from InstrProfMCDCBitmapInstBase.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:115,Deployability,update,updates,115,/// This represents the llvm.instrprof.mcdc.condbitmap.update intrinsic.; /// It does not pertain to global bitmap updates or parameters and so doesn't; /// inherit from InstrProfMCDCBitmapInstBase.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:157,Modifiability,inherit,inherit,157,/// This represents the llvm.instrprof.mcdc.condbitmap.update intrinsic.; /// It does not pertain to global bitmap updates or parameters and so doesn't; /// inherit from InstrProfMCDCBitmapInstBase.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:39,Deployability,update,update,39,/// \return The ID of the condition to update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:112,Availability,avail,available,112,"/// Common base class for representing values projected from a statepoint.; /// Currently, the only projections available are gc.result and gc.relocate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h:175,Energy Efficiency,efficient,efficient,175,"/// Return the LLVM name for an intrinsic, such as ""llvm.ppc.altivec.lvx"" or; /// ""llvm.ssa.copy.p0s_s.1"". Note, this version of getName supports overloads.; /// This is less efficient than the StringRef version of this function. If no; /// overloads are required, it is safe to use this version, but better to use; /// the StringRef version. If one of the types is based on an unnamed type, a; /// function type will be computed. Providing FT will avoid this computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h:271,Safety,safe,safe,271,"/// Return the LLVM name for an intrinsic, such as ""llvm.ppc.altivec.lvx"" or; /// ""llvm.ssa.copy.p0s_s.1"". Note, this version of getName supports overloads.; /// This is less efficient than the StringRef version of this function. If no; /// overloads are required, it is safe to use this version, but better to use; /// the StringRef version. If one of the types is based on an unnamed type, a; /// function type will be computed. Providing FT will avoid this computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h:449,Safety,avoid,avoid,449,"/// Return the LLVM name for an intrinsic, such as ""llvm.ppc.altivec.lvx"" or; /// ""llvm.ssa.copy.p0s_s.1"". Note, this version of getName supports overloads.; /// This is less efficient than the StringRef version of this function. If no; /// overloads are required, it is safe to use this version, but better to use; /// the StringRef version. If one of the types is based on an unnamed type, a; /// function type will be computed. Providing FT will avoid this computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h:187,Availability,error,error,187,/// Verify if the intrinsic has variable arguments. This method is intended to; /// be called after all the fixed arguments have been matched first.; ///; /// This method returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h:32,Modifiability,variab,variable,32,/// Verify if the intrinsic has variable arguments. This method is intended to; /// be called after all the fixed arguments have been matched first.; ///; /// This method returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Intrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:521,Integrability,interface,interface,521,"//===- llvm/IRBuilder.h - Builder for LLVM Instructions ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the IRBuilder class, which is used as a convenient way; // to create LLVM instructions with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:510,Usability,simpl,simplified,510,"//===- llvm/IRBuilder.h - Builder for LLVM Instructions ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the IRBuilder class, which is used as a convenient way; // to create LLVM instructions with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:78,Performance,perform,performing,78,/// Provides an 'InsertHelper' that calls a user-provided callback after; /// performing the default insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:11,Deployability,update,update,11,"/// Add or update the an entry (Kind, MD) to MetadataToCopy, if \p MD is not; /// null. If \p MD is null, remove the entry with \p Kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:91,Deployability,configurat,configuration,91,//===--------------------------------------------------------------------===//; // Builder configuration methods; //===--------------------------------------------------------------------===//; /// Clear the insertion point: created instructions will not be; /// inserted into a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:91,Modifiability,config,configuration,91,//===--------------------------------------------------------------------===//; // Builder configuration methods; //===--------------------------------------------------------------------===//; /// Clear the insertion point: created instructions will not be; /// inserted into a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:198,Usability,Clear,Clear,198,//===--------------------------------------------------------------------===//; // Builder configuration methods; //===--------------------------------------------------------------------===//; /// Clear the insertion point: created instructions will not be; /// inserted into a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:38,Usability,clear,clearing,38,"/// Returns the current insert point, clearing it in the process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:4,Usability,Clear,Clear,4,/// Clear the fast-math flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:218,Modifiability,variab,variable,218,"//===--------------------------------------------------------------------===//; // Miscellaneous creation methods.; //===--------------------------------------------------------------------===//; /// Make a new global variable with initializer type i8*; ///; /// Make a new global variable with an initializer that has array of i8 type; /// filled in with the null terminated string value specified. The new global; /// variable will be marked mergable with any others of the same contents. If; /// Name is specified, it is the name of the global variable created.; ///; /// If no module is given via \p M, it is take from the insertion point basic; /// block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:281,Modifiability,variab,variable,281,"//===--------------------------------------------------------------------===//; // Miscellaneous creation methods.; //===--------------------------------------------------------------------===//; /// Make a new global variable with initializer type i8*; ///; /// Make a new global variable with an initializer that has array of i8 type; /// filled in with the null terminated string value specified. The new global; /// variable will be marked mergable with any others of the same contents. If; /// Name is specified, it is the name of the global variable created.; ///; /// If no module is given via \p M, it is take from the insertion point basic; /// block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:420,Modifiability,variab,variable,420,"//===--------------------------------------------------------------------===//; // Miscellaneous creation methods.; //===--------------------------------------------------------------------===//; /// Make a new global variable with initializer type i8*; ///; /// Make a new global variable with an initializer that has array of i8 type; /// filled in with the null terminated string value specified. The new global; /// variable will be marked mergable with any others of the same contents. If; /// Name is specified, it is the name of the global variable created.; ///; /// If no module is given via \p M, it is take from the insertion point basic; /// block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:547,Modifiability,variab,variable,547,"//===--------------------------------------------------------------------===//; // Miscellaneous creation methods.; //===--------------------------------------------------------------------===//; /// Make a new global variable with initializer type i8*; ///; /// Make a new global variable with an initializer that has array of i8 type; /// filled in with the null terminated string value specified. The new global; /// variable will be marked mergable with any others of the same contents. If; /// Name is specified, it is the name of the global variable created.; ///; /// If no module is given via \p M, it is take from the insertion point basic; /// block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:37,Modifiability,extend,extended,37,"/// Get a constant N-bit value, zero extended or truncated from; /// a 64-bit value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Load intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:28,Performance,Load,Load,28,/// Create a call to Masked Load intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Store intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Gather intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Scatter intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Expand Load intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:35,Performance,Load,Load,35,/// Create a call to Masked Expand Load intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:21,Availability,Mask,Masked,21,/// Create a call to Masked Compress Store intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:39,Availability,mask,mask,39,/// Return an all true boolean vector (mask) with \p NumElts lanes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:52,Performance,optimiz,optimizer,52,/// Create an assume intrinsic call that allows the optimizer to; /// assume that the provided condition will be true.; ///; /// The optional argument \p OpBundles specifies operand bundles that are; /// added to the call instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:97,Integrability,wrap,wrapped,97,/// Create a call to the experimental.gc.result intrinsic to extract; /// the result from a call wrapped in a statepoint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:23,Availability,mask,masked,23,/// Create a call to a masked intrinsic with given Id.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:99,Availability,avail,available,99,"/// Create a conditional 'br Cond, TrueDest, FalseDest'; /// instruction. Copy branch meta data if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:141,Energy Efficiency,efficient,efficient,141,"/// Create a switch instruction with the specified value, default dest,; /// and with a hint for the number of cases that will be added (for efficient; /// allocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:165,Energy Efficiency,efficient,efficient,165,"/// Create an indirect branch instruction with the specified address; /// operand, with an optional hint for the number of destinations that will be; /// added (for efficient allocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:52,Integrability,depend,depending,52,/// Create either a UnaryOperator or BinaryOperator depending on \p Opc.; /// Correct number of operands must be passed accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:83,Availability,error,error,83,"// Provided to resolve 'CreateIntCast(Ptr, Ptr, ""..."")', giving a; // compile time error, instead of converting the string to bool for the; // isSigned parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:10,Integrability,rout,routine,10,// Helper routine to create either a signaling or a quiet FP comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:57,Availability,mask,mask,57,/// See class ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:216,Testability,test,testing,216,//===--------------------------------------------------------------------===//; // Utility creation methods; //===--------------------------------------------------------------------===//; /// Return a boolean value testing if \p Arg == 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,Testability,test,testing,27,/// Return a boolean value testing if \p Arg != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,Testability,test,testing,27,/// Return a boolean value testing if \p Arg < 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,Testability,test,testing,27,/// Return a boolean value testing if \p Arg > -1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:46,Performance,scalab,scalable,46,"/// Return a vector splice intrinsic if using scalable vectors, otherwise; /// return a shufflevector. If the immediate is positive, a vector is; /// extracted from concat(V1, V2), starting at Imm. If the immediate; /// is negative, we extract -Imm elements from V1 and the remaining; /// elements from V2. Imm is a signed integer in the range; /// -VL <= Imm < VL (where VL is the runtime vector length of the; /// source/result vector)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:359,Integrability,depend,dependent,359,"/// Create an assume intrinsic call that represents an alignment; /// assumption on the provided pointer.; ///; /// An optional offset can be provided, and if it is provided, the offset; /// must be subtracted from the provided pointer to get the pointer with the; /// specified alignment.; ///; /// This overload handles the condition where the Alignment is dependent; /// on an existing value rather than a static value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:230,Security,expose,expose,230,"/// This provides a uniform API for creating instructions and inserting; /// them into a basic block: either at the end of a BasicBlock, or at a specific; /// iterator location in a block.; ///; /// Note that the builder does not expose the full generality of LLVM; /// instructions. For access to extra instruction properties, use the mutators; /// (e.g. setVolatile) on the instructions after they have been; /// created. Convenience state exists to specify fast-math flags and fp-math; /// tags.; ///; /// The first template argument specifies a class to use for creating constants.; /// This defaults to creating minimally folded constants. The second template; /// argument allows clients to specify custom insertion hooks that are called on; /// every newly created insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:288,Security,access,access,288,"/// This provides a uniform API for creating instructions and inserting; /// them into a basic block: either at the end of a BasicBlock, or at a specific; /// iterator location in a block.; ///; /// Note that the builder does not expose the full generality of LLVM; /// instructions. For access to extra instruction properties, use the mutators; /// (e.g. setVolatile) on the instructions after they have been; /// created. Convenience state exists to specify fast-math flags and fp-math; /// tags.; ///; /// The first template argument specifies a class to use for creating constants.; /// This defaults to creating minimally folded constants. The second template; /// argument allows clients to specify custom insertion hooks that are called on; /// every newly created insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:4,Safety,Avoid,Avoid,4,/// Avoid copying the full IRBuilder. Prefer using InsertPointGuard; /// or FastMathFlagGuard instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h:40,Integrability,interface,interface,40,"//===- IRBuilderFolder.h - Const folder interface for IRBuilder -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines for constant folding interface used by IRBuilder.; // It is implemented by ConstantFolder (default), TargetFolder and NoFoler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h:422,Integrability,interface,interface,422,"//===- IRBuilderFolder.h - Const folder interface for IRBuilder -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines for constant folding interface used by IRBuilder.; // It is implemented by ConstantFolder (default), TargetFolder and NoFoler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h:22,Integrability,Interface,Interface,22,/// IRBuilderFolder - Interface for constant folding in IRBuilder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h:175,Usability,simpl,simplified,175,//===--------------------------------------------------------------------===//; // Value-based folders.; //; // Return an existing value or a constant if the operation can be simplified.; // Otherwise return nullptr.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRPrintingPasses.h:418,Integrability,interface,interface,418,"//===- IRPrintingPasses.h - Passes to print out IR constructs ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file contains an interface for creating legacy passes to print out IR; /// in various granularities.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/IRPrintingPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRPrintingPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:567,Availability,avail,available,567,"//===- LegacyPassManager.h - Legacy Container for Passes --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the legacy PassManager class. This class is used to hold,; // maintain, and optimize execution of Passes. The PassManager class ensures; // that analysis results are available before a pass runs, and that Pass's are; // destroyed when the PassManager is destroyed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:477,Performance,optimiz,optimize,477,"//===- LegacyPassManager.h - Legacy Container for Passes --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the legacy PassManager class. This class is used to hold,; // maintain, and optimize execution of Passes. The PassManager class ensures; // that analysis results are available before a pass runs, and that Pass's are; // destroyed when the PassManager is destroyed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:34,Integrability,interface,interface,34,/// PassManagerBase - An abstract interface to allow code to add passes to; /// a pass manager without having to hard-code what kind of pass manager; /// it is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:289,Availability,redundant,redundant,289,"/// Add a pass to the queue of passes to run. This passes ownership of; /// the Pass to the PassManager. When the PassManager is destroyed, the pass; /// will be destroyed as well, so there is no need to delete the pass. This; /// may even destroy the pass right away if it is found to be redundant. This; /// implies that all passes MUST be allocated with 'new'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:342,Energy Efficiency,allocate,allocated,342,"/// Add a pass to the queue of passes to run. This passes ownership of; /// the Pass to the PassManager. When the PassManager is destroyed, the pass; /// will be destroyed as well, so there is no need to delete the pass. This; /// may even destroy the pass right away if it is found to be redundant. This; /// implies that all passes MUST be allocated with 'new'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:22,Performance,queue,queue,22,"/// Add a pass to the queue of passes to run. This passes ownership of; /// the Pass to the PassManager. When the PassManager is destroyed, the pass; /// will be destroyed as well, so there is no need to delete the pass. This; /// may even destroy the pass right away if it is found to be redundant. This; /// implies that all passes MUST be allocated with 'new'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:289,Safety,redund,redundant,289,"/// Add a pass to the queue of passes to run. This passes ownership of; /// the Pass to the PassManager. When the PassManager is destroyed, the pass; /// will be destroyed as well, so there is no need to delete the pass. This; /// may even destroy the pass right away if it is found to be redundant. This; /// implies that all passes MUST be allocated with 'new'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:36,Energy Efficiency,schedul,scheduled,36,"/// run - Execute all of the passes scheduled for execution. Keep track of; /// whether any of the passes modifies the module, and if so, return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:74,Integrability,wrap,wraper,74,/// PassManagerImpl_New is the actual class. PassManager is just the; /// wraper to publish simple pass manager interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:112,Integrability,interface,interface,112,/// PassManagerImpl_New is the actual class. PassManager is just the; /// wraper to publish simple pass manager interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:92,Usability,simpl,simple,92,/// PassManagerImpl_New is the actual class. PassManager is just the; /// wraper to publish simple pass manager interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:36,Energy Efficiency,schedul,scheduled,36,"/// run - Execute all of the passes scheduled for execution. Keep; /// track of whether any of the passes modifies the function, and if; /// so, return true.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:35,Integrability,wrap,wrappers,35,// End legacy namespace; // Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:266,Availability,avail,available,266,"//===----------------------------------------------------------------------===//; // Overview:; // The Pass Manager Infrastructure manages passes. It's responsibilities are:; //; // o Manage optimization pass execution order; // o Make required Analysis information available before pass P is run; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:1256,Availability,avail,available,1256,"n; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManager : public Pass, public PMDataManager;; //; // MPPassManager manages ModulePasses and FPPassManagers; //; // [o] class PassManager;; //; // This is a external interface used by various tools to manages passes. It; // relies on PassManagerImpl to do all the tasks.; //; // [o] class PassManagerI",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:303,Deployability,Release,Release,303,"//===----------------------------------------------------------------------===//; // Overview:; // The Pass Manager Infrastructure manages passes. It's responsibilities are:; //; // o Manage optimization pass execution order; // o Make required Analysis information available before pass P is run; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:852,Integrability,interface,interface,852,"//===----------------------------------------------------------------------===//; // Overview:; // The Pass Manager Infrastructure manages passes. It's responsibilities are:; //; // o Manage optimization pass execution order; // o Make required Analysis information available before pass P is run; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:1528,Integrability,interface,interface,1528,"multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManager : public Pass, public PMDataManager;; //; // MPPassManager manages ModulePasses and FPPassManagers; //; // [o] class PassManager;; //; // This is a external interface used by various tools to manages passes. It; // relies on PassManagerImpl to do all the tasks.; //; // [o] class PassManagerImpl : public Pass, public PMDataManager,; // public PMTopLevelManager; //; // PassManagerImpl is a top level pass manager responsible for managing; // MPPassManagers.; //===----------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:1578,Integrability,interface,interface,1578,"re; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManager : public Pass, public PMDataManager;; //; // MPPassManager manages ModulePasses and FPPassManagers; //; // [o] class PassManager;; //; // This is a external interface used by various tools to manages passes. It; // relies on PassManagerImpl to do all the tasks.; //; // [o] class PassManagerImpl : public Pass, public PMDataManager,; // public PMTopLevelManager; //; // PassManagerImpl is a top level pass manager responsible for managing; // MPPassManagers.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:2161,Integrability,interface,interface,2161,"re; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManager : public Pass, public PMDataManager;; //; // MPPassManager manages ModulePasses and FPPassManagers; //; // [o] class PassManager;; //; // This is a external interface used by various tools to manages passes. It; // relies on PassManagerImpl to do all the tasks.; //; // [o] class PassManagerImpl : public Pass, public PMDataManager,; // public PMTopLevelManager; //; // PassManagerImpl is a top level pass manager responsible for managing; // MPPassManagers.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:669,Modifiability,inherit,inheritance,669,"//===----------------------------------------------------------------------===//; // Overview:; // The Pass Manager Infrastructure manages passes. It's responsibilities are:; //; // o Manage optimization pass execution order; // o Make required Analysis information available before pass P is run; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:191,Performance,optimiz,optimization,191,"//===----------------------------------------------------------------------===//; // Overview:; // The Pass Manager Infrastructure manages passes. It's responsibilities are:; //; // o Manage optimization pass execution order; // o Make required Analysis information available before pass P is run; // o Release memory occupied by dead passes; // o If Analysis information is dirtied by a pass then regenerate Analysis; // information before it is consumed by another pass.; //; // Pass Manager Infrastructure uses multiple pass managers. They are; // PassManager, FunctionPassManager, MPPassManager, FPPassManager, BBPassManager.; // This class hierarchy uses multiple inheritance but pass managers do not; // derive from another pass manager.; //; // PassManager and FunctionPassManager are two top-level pass manager that; // represents the external interface of this entire pass manager infrastucture.; //; // Important classes :; //; // [o] class PMTopLevelManager;; //; // Two top level managers, PassManager and FunctionPassManager, derive from; // PMTopLevelManager. PMTopLevelManager manages information used by top level; // managers such as last user info.; //; // [o] class PMDataManager;; //; // PMDataManager manages information, e.g. list of available analysis info,; // used by a pass manager to manage execution order of passes. It also provides; // a place to implement common pass manager APIs. All pass managers derive from; // PMDataManager.; //; // [o] class FunctionPassManager;; //; // This is a external interface used to manage FunctionPasses. This; // interface relies on FunctionPassManagerImpl to do all the tasks.; //; // [o] class FunctionPassManagerImpl : public ModulePass, PMDataManager,; // public PMTopLevelManager;; //; // FunctionPassManagerImpl is a top level manager. It manages FPPassManagers; //; // [o] class FPPassManager : public ModulePass, public PMDataManager;; //; // FPPassManager manages FunctionPasses and BBPassManagers; //; // [o] class MPPassManag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:13,Deployability,release,releaseMemory,13,// When P is releaseMemory'd.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:101,Deployability,Update,Update,101,/// Schedule pass P for execution. Make sure that passes required by; /// P are run before P is run. Update analysis info maintained by; /// the manager. Remove dead passes. This is a recursive function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:4,Energy Efficiency,Schedul,Schedule,4,/// Schedule pass P for execution. Make sure that passes required by; /// P are run before P is run. Update analysis info maintained by; /// the manager. Remove dead passes. This is a recursive function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:6,Integrability,wrap,wrapper,6,/// A wrapper around AnalysisUsage for the purpose of uniqueing. The wrapper; /// is used to avoid needing to make AnalysisUsage itself a folding set node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:69,Integrability,wrap,wrapper,69,/// A wrapper around AnalysisUsage for the purpose of uniqueing. The wrapper; /// is used to avoid needing to make AnalysisUsage itself a folding set node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:93,Safety,avoid,avoid,93,/// A wrapper around AnalysisUsage for the purpose of uniqueing. The wrapper; /// is used to avoid needing to make AnalysisUsage itself a folding set node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:39,Integrability,depend,dependency,39,// TODO: We could consider sorting the dependency arrays within the; // AnalysisUsage (since they are conceptually unordered).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:85,Energy Efficiency,allocate,allocated,85,// Allocator used for allocating UAFoldingSetNodes. This handles deletion of; // all allocated nodes in one fell swoop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:12,Availability,Avail,AvailableAnalysis,12,/// Augment AvailableAnalysis by adding analysis made available by pass P.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:54,Availability,avail,available,54,/// Augment AvailableAnalysis by adding analysis made available by pass P.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:48,Availability,Avail,AvailableAnalysis,48,/// Add pass P into the PassVector. Update; /// AvailableAnalysis appropriately if ProcessAnalysis is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:36,Deployability,Update,Update,36,/// Add pass P into the PassVector. Update; /// AvailableAnalysis appropriately if ProcessAnalysis is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:169,Integrability,interface,interface,169,/// Add RequiredPass into list of lower level passes required by pass P.; /// RequiredPass is run on the fly by Pass Manager when P requests it; /// through getAnalysis interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:15,Availability,avail,available,15,/// Initialize available analysis information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:92,Availability,avail,available,92,/// Populate UsedPasses with analysis pass that are used or required by pass; /// P and are available. Populate ReqPassNotAvailable with analysis pass that; /// are required by pass P but are not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:196,Availability,avail,available,196,/// Populate UsedPasses with analysis pass that are used or required by pass; /// P and are available. Populate ReqPassNotAvailable with analysis pass that; /// are required by pass P but are not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:36,Availability,avail,available,36,/// All Required analyses should be available to the pass as it runs! Here; /// we fill in the AnalysisImpls member of the pass so that it can; /// successfully use the getAnalysis() method to retrieve the; /// implementations it needs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:3,Security,Access,Access,3,// Access toplevel manager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:9,Integrability,rout,routines,9,// Print routines used by debug-pass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:11,Availability,Avail,AvailableAnalysis,11,// Collect AvailableAnalysis from all the active Pass Managers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:222,Availability,avail,available,222,"/// Emit a remark signifying that the number of IR instructions in the module; /// changed.; /// \p F is optionally passed by passes which run on Functions, and thus; /// always know whether or not a non-empty function is available.; ///; /// \p FunctionToInstrCount maps the name of a \p Function to a pair. The; /// first member of the pair is the IR count of the \p Function before running; /// \p P, and the second member is the IR count of the \p Function after; /// running \p P.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:10,Availability,avail,available,10,// Set of available Analysis. This information is used while scheduling; // pass. If a pass requires an analysis which is not available then; // the required analysis pass is scheduled to run before the pass itself is; // scheduled to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:126,Availability,avail,available,126,// Set of available Analysis. This information is used while scheduling; // pass. If a pass requires an analysis which is not available then; // the required analysis pass is scheduled to run before the pass itself is; // scheduled to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:61,Energy Efficiency,schedul,scheduling,61,// Set of available Analysis. This information is used while scheduling; // pass. If a pass requires an analysis which is not available then; // the required analysis pass is scheduled to run before the pass itself is; // scheduled to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:175,Energy Efficiency,schedul,scheduled,175,// Set of available Analysis. This information is used while scheduling; // pass. If a pass requires an analysis which is not available then; // the required analysis pass is scheduled to run before the pass itself is; // scheduled to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:222,Energy Efficiency,schedul,scheduled,222,// Set of available Analysis. This information is used while scheduling; // pass. If a pass requires an analysis which is not available then; // the required analysis pass is scheduled to run before the pass itself is; // scheduled to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:36,Energy Efficiency,schedul,scheduled,36,"/// run - Execute all of the passes scheduled for execution. Keep track of; /// whether any of the passes modifies the module, and if so, return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:62,Performance,cache,cache,62,"/// cleanup - After running all passes, clean up pass manager cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassNameParser.h:70,Performance,optimiz,optimizations,70,// Ignore non-selectable and non-constructible passes! Ignore; // non-optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassNameParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassNameParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:204,Energy Efficiency,efficient,efficiently,204,"/// Known synchronization scope IDs, which always have the same value. All; /// synchronization scope IDs that LLVM has special knowledge of are listed; /// here. Additionally, this scheme allows LLVM to efficiently check for; /// specific synchronization scope ID without comparing strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:10,Integrability,synchroniz,synchronization,10,"/// Known synchronization scope IDs, which always have the same value. All; /// synchronization scope IDs that LLVM has special knowledge of are listed; /// here. Additionally, this scheme allows LLVM to efficiently check for; /// specific synchronization scope ID without comparing strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:80,Integrability,synchroniz,synchronization,80,"/// Known synchronization scope IDs, which always have the same value. All; /// synchronization scope IDs that LLVM has special knowledge of are listed; /// here. Additionally, this scheme allows LLVM to efficiently check for; /// specific synchronization scope ID without comparing strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:240,Integrability,synchroniz,synchronization,240,"/// Known synchronization scope IDs, which always have the same value. All; /// synchronization scope IDs that LLVM has special knowledge of are listed; /// here. Additionally, this scheme allows LLVM to efficiently check for; /// specific synchronization scope ID without comparing strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:4,Integrability,Synchroniz,Synchronized,4,/// Synchronized with respect to signal handlers executing in the same thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:4,Integrability,Synchroniz,Synchronized,4,/// Synchronized with respect to all concurrently executing threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:37,Performance,concurren,concurrently,37,/// Synchronized with respect to all concurrently executing threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:87,Performance,perform,performance,87,"// Pinned metadata names, which always have the same value. This is a; // compile-time performance optimization, not a correctness optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:99,Performance,optimiz,optimization,99,"// Pinned metadata names, which always have the same value. This is a; // compile-time performance optimization, not a correctness optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:131,Performance,optimiz,optimization,131,"// Pinned metadata names, which always have the same value. This is a; // compile-time performance optimization, not a correctness optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:195,Energy Efficiency,efficient,efficiently,195,"/// Known operand bundle tag IDs, which always have the same value. All; /// operand bundle tags that LLVM has special knowledge of are listed here.; /// Additionally, this scheme allows LLVM to efficiently check for specific; /// operand bundle tags without comparing strings. Keep this in sync with; /// LLVMContext::LLVMContext().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:34,Integrability,synchroniz,synchronization,34,/// getOrInsertSyncScopeID - Maps synchronization scope name to; /// synchronization scope ID. Every synchronization scope registered with; /// LLVMContext has unique ID except pre-defined ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:69,Integrability,synchroniz,synchronization,69,/// getOrInsertSyncScopeID - Maps synchronization scope name to; /// synchronization scope ID. Every synchronization scope registered with; /// LLVMContext has unique ID except pre-defined ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:101,Integrability,synchroniz,synchronization,101,/// getOrInsertSyncScopeID - Maps synchronization scope name to; /// synchronization scope ID. Every synchronization scope registered with; /// LLVMContext has unique ID except pre-defined ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:72,Integrability,synchroniz,synchronization,72,/// getSyncScopeNames - Populates client supplied SmallVector with; /// synchronization scope names registered with LLVMContext. Synchronization; /// scope names are ordered by increasing synchronization scope IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:129,Integrability,Synchroniz,Synchronization,129,/// getSyncScopeNames - Populates client supplied SmallVector with; /// synchronization scope names registered with LLVMContext. Synchronization; /// scope names are ordered by increasing synchronization scope IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:188,Integrability,synchroniz,synchronization,188,/// getSyncScopeNames - Populates client supplied SmallVector with; /// synchronization scope names registered with LLVMContext. Synchronization; /// scope names are ordered by increasing synchronization scope IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:135,Availability,avail,available,135,"/// Return true if the Context runtime configuration is set to discard all; /// value names. When true, only GlobalValue names will be available in the; /// IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:39,Deployability,configurat,configuration,39,"/// Return true if the Context runtime configuration is set to discard all; /// value names. When true, only GlobalValue names will be available in the; /// IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:39,Modifiability,config,configuration,39,"/// Return true if the Context runtime configuration is set to discard all; /// value names. When true, only GlobalValue names will be available in the; /// IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:28,Deployability,configurat,configuration,28,"/// Set the Context runtime configuration to discard all value name (but; /// GlobalValue). Clients can use this flag to save memory and runtime,; /// especially in release mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:165,Deployability,release,release,165,"/// Set the Context runtime configuration to discard all value name (but; /// GlobalValue). Clients can use this flag to save memory and runtime,; /// especially in release mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:28,Modifiability,config,configuration,28,"/// Set the Context runtime configuration to discard all value name (but; /// GlobalValue). Clients can use this flag to save memory and runtime,; /// especially in release mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:58,Performance,optimiz,optimization,58,/// Return if a code hotness metric should be included in optimization; /// diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:55,Performance,optimiz,optimization,55,/// Set if a code hotness metric should be included in optimization; /// diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:93,Performance,optimiz,optimization,93,"/// Return the minimum hotness value a diagnostic would need in order; /// to be included in optimization diagnostics.; ///; /// Three possible return values:; /// 0 - threshold is disabled. Everything will be printed out.; /// positive int - threshold is set.; /// UINT64_MAX - threshold is not yet set, and needs to be synced from; /// profile summary. Note that in case of missing profile; /// summary, threshold will be kept at ""MAX"", effectively; /// suppresses all remarks output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:85,Performance,optimiz,optimization,85,/// Set the minimum hotness value a diagnostic needs in order to be; /// included in optimization diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:244,Integrability,depend,depending,244,"/// The ""main remark streamer"" used by all the specialized remark streamers.; /// This streamer keeps generic remark metadata in memory throughout the life; /// of the LLVMContext. This metadata may be emitted in a section in object; /// files depending on the format requirements.; ///; /// All specialized remark streamers should convert remarks to; /// llvm::remarks::Remark and emit them through this streamer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:130,Availability,error,error,130,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:453,Availability,error,error,453,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:38,Deployability,install,installed,38,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:13,Integrability,message,message,13,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:347,Integrability,message,message,347,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:251,Performance,perform,perform,251,"/// Registers a yield callback with the given context.; ///; /// The yield callback function may be called by LLVM to transfer control back; /// to the client that invoked the LLVM compilation. This can be used to yield; /// control of the thread, or perform periodic work needed by the client.; /// There is no guaranteed frequency at which callbacks must occur; in fact,; /// the client is not guaranteed to ever receive this callback. It is at the; /// sole discretion of LLVM to do so and only if it can guarantee that; /// suspending the thread won't block any forward progress in other LLVM; /// contexts in the same process.; ///; /// At a suspend point, the state of the current LLVM context is intentionally; /// undefined. No assumptions about it can or should be made. Only LLVM; /// context API calls that explicitly state that they can be used during a; /// yield callback are allowed to be used. Any other API calls into the; /// context are not supported until the yield callback function returns; /// control to LLVM. Other LLVM contexts are unaffected by this restriction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:24,Availability,error,error,24,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:65,Availability,error,error,65,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:286,Availability,error,error,286,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:339,Availability,error,error,339,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:55,Deployability,install,installed,55,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:30,Integrability,message,message,30,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:292,Integrability,message,message,292,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:76,Performance,optimiz,optimizations,76,/// Access the object which can disable optional passes and individual; /// optimizations at compile time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:4,Security,Access,Access,4,/// Access the object which can disable optional passes and individual; /// optimizations at compile time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:163,Modifiability,extend,extend,163,/// Set the object which can disable optional passes and individual; /// optimizations at compile time.; ///; /// The lifetime of the object must be guaranteed to extend as long as the; /// LLVMContext is used by compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:73,Performance,optimiz,optimizations,73,/// Set the object which can disable optional passes and individual; /// optimizations at compile time.; ///; /// The lifetime of the object must be guaranteed to extend as long as the; /// LLVMContext is used by compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:206,Performance,perform,performs,206,"/// Set whether opaque pointers are enabled. The method may be called multiple; /// times, but only with the same value. Note that creating a pointer type or; /// otherwise querying the opaque pointer mode performs an implicit set to; /// the default value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:16,Security,access,access,16,// Module needs access to the add/removeModule methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h:40,Testability,log,logic,40,/// Streamer for LLVM remarks which has logic for dealing with DiagnosticInfo; /// objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h:10,Performance,optimiz,optimization,10,/// Setup optimization remarks that output to a file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h:10,Performance,optimiz,optimization,10,/// Setup optimization remarks that output directly to a raw_ostream.; /// \p OS is managed by the caller and should be open for writing as long as \p; /// Context is streaming remarks to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h:58,Modifiability,variab,variable,58,"/// Print the appropriate prefix and the specified global variable's name.; /// If the global variable doesn't have a name, this fills in a unique name; /// for the global.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h:94,Modifiability,variab,variable,94,"/// Print the appropriate prefix and the specified global variable's name.; /// If the global variable doesn't have a name, this fills in a unique name; /// for the global.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h:70,Modifiability,variab,variable,70,/// Print the appropriate prefix and the specified name as the global variable; /// name. GVName must not be empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h:42,Performance,load,load,42,"/// Create a column major, strided matrix load.; /// \p EltTy - Matrix element type; /// \p DataPtr - Start address of the matrix read; /// \p Rows - Number of rows in matrix (must be a constant); /// \p Columns - Number of columns in matrix (must be a constant); /// \p Stride - Space between columns",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h:25,Security,access,access,25,"/// Compute the index to access the element at (\p RowIdx, \p ColumnIdx) from; /// a matrix with \p NumRows embedded in a vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MatrixBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:517,Integrability,interface,interface,517,"//===---- llvm/MDBuilder.h - Builder for LLVM metadata ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MDBuilder class, which is used as a convenient way to; // create LLVM metadata with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:506,Usability,simpl,simplified,506,"//===---- llvm/MDBuilder.h - Builder for LLVM metadata ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MDBuilder class, which is used as a convenient way to; // create LLVM metadata with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:269,Performance,optimiz,optimized,269,"/// Return metadata containing the entry \p Count for a function, a boolean; /// \Synthetic indicating whether the counts were synthetized, and the; /// GUIDs stored in \p Imports that need to be imported for sample PGO, to; /// enable the same inlines as the profiled optimized binary",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:153,Usability,GUID,GUIDs,153,"/// Return metadata containing the entry \p Count for a function, a boolean; /// \Synthetic indicating whether the counts were synthetized, and the; /// GUIDs stored in \p Imports that need to be imported for sample PGO, to; /// enable the same inlines as the profiled optimized binary",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:71,Security,access,access,71,"/// Return metadata for a TBAA tag node with the given; /// base type, access type and offset relative to the base type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:31,Security,access,access,31,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:79,Security,access,access,79,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:106,Security,access,access,106,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:157,Security,access,access,157,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:196,Security,access,accessed,196,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:71,Security,access,access,71,/// Return mutable version of the given mutable or immutable TBAA; /// access tag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:49,Testability,assert,asserts,49,"/// Default handling of a changed operand, which asserts.; ///; /// If subclasses pass themselves in as owners to a tracking node reference,; /// they must provide an implementation of this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:4,Usability,User-friendly,User-friendly,4,"/// User-friendly dump.; ///; /// If \c M is provided, metadata nodes will be numbered canonically;; /// otherwise, pointer addresses are substituted.; ///; /// Note: this uses an explicit overload instead of default arguments so that; /// the nullptr version is easy to call from a debugger.; ///; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:13,Integrability,wrap,wrapper,13,"/// Metadata wrapper in the Value hierarchy.; ///; /// A member of the \a Value hierarchy to represent a reference to metadata.; /// This allows, e.g., intrinsics to have metadata as operands.; ///; /// Notably, this is the only thing in either hierarchy that is allowed to; /// reference \a LocalAsMetadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:151,Modifiability,inherit,inherited,151,"/// Base class for tracking ValueAsMetadata/DIArgLists with user lookups and; /// Owner callbacks outside of ValueAsMetadata.; ///; /// Currently only inherited by DPValue; if other classes need to use it, then; /// a SubclassID will need to be added (either as a new field or by making; /// DebugValue into a PointerIntUnion) to discriminate between the subclasses in; /// lookup and callback handling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:162,Modifiability,parameteriz,parameterize,162,"// Capacity to store 3 debug values.; // TODO: Not all DebugValueUser instances need all 3 elements, if we; // restructure the DPValue class then we can template parameterize this array; // size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:246,Usability,user-friendly,user-friendly,246,/// API for tracking metadata references through RAUW and deletion.; ///; /// Shared API for updating \a Metadata pointers in subclasses that support; /// RAUW.; ///; /// This API is not meant to be used directly. See \a TrackingMDRef for a; /// user-friendly tracking reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:153,Deployability,update,updated,153,"/// Track the reference to metadata.; ///; /// Register \c MD with \c *MD, if the subclass supports tracking. If \c *MD; /// gets RAUW'ed, \c MD will be updated to the new address. If \c *MD gets; /// deleted, \c MD will be set to \c nullptr.; ///; /// If tracking isn't supported, \c *MD will not change.; ///; /// \return true iff tracking is supported by \c MD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:206,Availability,error,error,206,"/// Move tracking from one reference to another.; ///; /// Semantically equivalent to \c untrack(MD) followed by \c track(New),; /// except that ownership callbacks are maintained.; ///; /// Note: it is an error if \c *MD does not equal \c New.; ///; /// \return true iff tracking is supported by \c MD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:308,Energy Efficiency,efficient,efficient,308,"/// Value wrapper in the Metadata hierarchy.; ///; /// This is a custom value handle that allows other metadata to refer to; /// classes in the Value hierarchy.; ///; /// Because of full uniquing support, each value is only wrapped by a single \a; /// ValueAsMetadata object, so the lookup maps are far more efficient than; /// those using ValueHandleBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:10,Integrability,wrap,wrapper,10,"/// Value wrapper in the Metadata hierarchy.; ///; /// This is a custom value handle that allows other metadata to refer to; /// classes in the Value hierarchy.; ///; /// Because of full uniquing support, each value is only wrapped by a single \a; /// ValueAsMetadata object, so the lookup maps are far more efficient than; /// those using ValueHandleBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:224,Integrability,wrap,wrapped,224,"/// Value wrapper in the Metadata hierarchy.; ///; /// This is a custom value handle that allows other metadata to refer to; /// classes in the Value hierarchy.; ///; /// Because of full uniquing support, each value is only wrapped by a single \a; /// ValueAsMetadata object, so the lookup maps are far more efficient than; /// those using ValueHandleBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:135,Integrability,wrap,wrapped,135,"/// Handle collisions after \a Value::replaceAllUsesWith().; ///; /// RAUW isn't supported directly for \a ValueAsMetadata, but if the wrapped; /// \a Value gets RAUW'ed and the target already exists, this is used to; /// merge the two metadata nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:943,Integrability,bridg,bridge,943,"/// Transitional API for extracting constants from Metadata.; ///; /// This namespace contains transitional functions for metadata that points to; /// \a Constants.; ///; /// In prehistory -- when metadata was a subclass of \a Value -- \a MDNode; /// operands could refer to any \a Value. There's was a lot of code like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *CI = dyn_cast<ConstantInt>(N->getOperand(2));; /// \endcode; ///; /// Now that \a Value and \a Metadata are in separate hierarchies, maintaining; /// the semantics for \a isa(), \a cast(), \a dyn_cast() (etc.) requires three; /// steps: cast in the \a Metadata hierarchy, extraction of the \a Value, and; /// cast in the \a Value hierarchy. Besides creating boiler-plate, this; /// requires subtle control flow changes.; ///; /// The end-goal is to create a new type of metadata, called (e.g.) \a MDInt,; /// so that metadata can refer to numbers without traversing a bridge to the \a; /// Value hierarchy. In this final state, the code above would look like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *MI = dyn_cast<MDInt>(N->getOperand(2));; /// \endcode; ///; /// The API in this namespace supports the transition. \a MDInt doesn't exist; /// yet, and even once it does, changing each metadata schema to use it is its; /// own mini-project. In the meantime this API prevents us from introducing; /// complex and bug-prone control flow that will disappear in the end. In; /// particular, the above code looks like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *CI = mdconst::dyn_extract<ConstantInt>(N->getOperand(2));; /// \endcode; ///; /// The full set of provided functions includes:; ///; /// mdconst::hasa <=> isa; /// mdconst::extract <=> cast; /// mdconst::extract_or_null <=> cast_or_null; /// mdconst::dyn_extract <=> dyn_cast; /// mdconst::dyn_extract_or_null <=> dyn_cast_or_null; ///; /// The target of the cast must be a subclass of \a Constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:165,Energy Efficiency,efficient,efficiently,165,// end namespace mdconst; //===----------------------------------------------------------------------===//; /// A single uniqued string.; ///; /// These are used to efficiently contain a byte sequence for metadata.; /// MDString is always unnamed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:79,Security,access,access,79,/// A collection of metadata nodes that might be associated with a; /// memory access used by the alias-analysis infrastructure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:3,Modifiability,Extend,Extend,3,// Extend tbaa Metadata node to apply to a series of bytes of length len.; // A size of -1 denotes an unknown size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:61,Modifiability,extend,extending,61,/// Create a new AAMDNode that describes this AAMDNode after extending it to; /// apply to a series of bytes of length Len. A size of -1 denotes an unknown; /// size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:54,Modifiability,Extend,Extending,54,"// tbaa.struct contains (offset, size, type) triples. Extending the length; // of the tbaa.struct doesn't require changing this (though more information; // could be provided by adding more triples at subsequent lengths).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:892,Energy Efficiency,allocate,allocated,892,"/// Metadata node.; ///; /// Metadata nodes can be uniqued, like constants, or distinct. Temporary; /// metadata nodes (with full support for RAUW) can be used to delay uniquing; /// until forward references are known. The basic metadata node is an \a; /// MDTuple.; ///; /// There is limited support for RAUW at construction time. At construction; /// time, if any operand is a temporary node (or an unresolved uniqued node,; /// which indicates a transitive temporary operand), the node itself will be; /// unresolved. As soon as all operands become resolved, it will drop RAUW; /// support permanently.; ///; /// If an unresolved node is part of a cycle, \a resolveCycles() needs; /// to be called on some member of the cycle once all temporary nodes have been; /// replaced.; ///; /// MDNodes can be large or small, as well as resizable or non-resizable.; /// Large MDNodes' operands are allocated in a separate storage vector,; /// whereas small MDNodes' operands are co-allocated. Distinct and temporary; /// MDnodes are resizable, but only MDTuples support this capability.; ///; /// Clients can add operands to resizable MDNodes using push_back().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:976,Energy Efficiency,allocate,allocated,976,"/// Metadata node.; ///; /// Metadata nodes can be uniqued, like constants, or distinct. Temporary; /// metadata nodes (with full support for RAUW) can be used to delay uniquing; /// until forward references are known. The basic metadata node is an \a; /// MDTuple.; ///; /// There is limited support for RAUW at construction time. At construction; /// time, if any operand is a temporary node (or an unresolved uniqued node,; /// which indicates a transitive temporary operand), the node itself will be; /// unresolved. As soon as all operands become resolved, it will drop RAUW; /// support permanently.; ///; /// If an unresolved node is part of a cycle, \a resolveCycles() needs; /// to be called on some member of the cycle once all temporary nodes have been; /// replaced.; ///; /// MDNodes can be large or small, as well as resizable or non-resizable.; /// Large MDNodes' operands are allocated in a separate storage vector,; /// whereas small MDNodes' operands are co-allocated. Distinct and temporary; /// MDnodes are resizable, but only MDTuples support this capability.; ///; /// Clients can add operands to resizable MDNodes using push_back().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:286,Energy Efficiency,allocate,allocated,286,"/// The header that is coallocated with an MDNode along with its ""small""; /// operands. It is located immediately before the main body of the node.; /// The operands are in turn located immediately before the header.; /// For resizable MDNodes, the space for the storage vector is also allocated; /// immediately before the header, overlapping with the operands.; /// Explicity set alignment because bitfields by default have an; /// alignment of 1 on z/OS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:32,Energy Efficiency,allocate,allocated,32,/// Returns the number of bytes allocated for operands and header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:12,Usability,User-friendly,User-friendly,12,"/// @}; /// User-friendly dump in tree shape.; ///; /// If \c M is provided, metadata nodes will be numbered canonically;; /// otherwise, pointer addresses are substituted.; ///; /// Note: this uses an explicit overload instead of default arguments so that; /// the nullptr version is easy to call from a debugger.; ///; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:37,Security,access,access,37,/// Check whether MDNode is a vtable access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:45,Usability,simpl,simple,45,/// Tuple of metadata.; ///; /// This is the simple \a MDNode arbitrary tuple. Nodes are uniqued by; /// default based on their operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:12,Security,hash,hash,12,"/// Get the hash, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:21,Integrability,wrap,wrapper,21,/// This is a simple wrapper around an MDNode which provides a higher-level; /// interface by hiding the details of how alias analysis information is encoded; /// in its operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:81,Integrability,interface,interface,81,/// This is a simple wrapper around an MDNode which provides a higher-level; /// interface by hiding the details of how alias analysis information is encoded; /// in its operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:14,Usability,simpl,simple,14,/// This is a simple wrapper around an MDNode which provides a higher-level; /// interface by hiding the details of how alias analysis information is encoded; /// in its operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:61,Integrability,wrap,wrapper,61,"/// Typed, array-like tuple of metadata.; ///; /// This is a wrapper for \a MDTuple that makes it act like an array holding a; /// particular type of metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:24,Usability,clear,clear,24,/// Remove all uses and clear node vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:100,Integrability,interface,interface,100,// ---------------------------------------------------------------------------; // Operand Iterator interface...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:333,Integrability,depend,depends,333,"/// A Module instance is used to store all the information related to an; /// LLVM module. Modules are the top level container of all other LLVM; /// Intermediate Representation (IR) objects. Each module directly contains a; /// list of globals variables, a list of functions, a list of libraries (or; /// other modules) this module depends on, a symbol table, and various data; /// about the target's characteristics.; ///; /// A module maintains a GlobalList object that is used to hold all; /// constant references to global variables in the module. When a global; /// variable is destroyed, it should have no entries in the GlobalList.; /// The main container class for the LLVM Intermediate Representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:245,Modifiability,variab,variables,245,"/// A Module instance is used to store all the information related to an; /// LLVM module. Modules are the top level container of all other LLVM; /// Intermediate Representation (IR) objects. Each module directly contains a; /// list of globals variables, a list of functions, a list of libraries (or; /// other modules) this module depends on, a symbol table, and various data; /// about the target's characteristics.; ///; /// A module maintains a GlobalList object that is used to hold all; /// constant references to global variables in the module. When a global; /// variable is destroyed, it should have no entries in the GlobalList.; /// The main container class for the LLVM Intermediate Representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:528,Modifiability,variab,variables,528,"/// A Module instance is used to store all the information related to an; /// LLVM module. Modules are the top level container of all other LLVM; /// Intermediate Representation (IR) objects. Each module directly contains a; /// list of globals variables, a list of functions, a list of libraries (or; /// other modules) this module depends on, a symbol table, and various data; /// about the target's characteristics.; ///; /// A module maintains a GlobalList object that is used to hold all; /// constant references to global variables in the module. When a global; /// variable is destroyed, it should have no entries in the GlobalList.; /// The main container class for the LLVM Intermediate Representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:572,Modifiability,variab,variable,572,"/// A Module instance is used to store all the information related to an; /// LLVM module. Modules are the top level container of all other LLVM; /// Intermediate Representation (IR) objects. Each module directly contains a; /// list of globals variables, a list of functions, a list of libraries (or; /// other modules) this module depends on, a symbol table, and various data; /// about the target's characteristics.; ///; /// A module maintains a GlobalList object that is used to hold all; /// constant references to global variables in the module. When a global; /// variable is destroyed, it should have no entries in the GlobalList.; /// The main container class for the LLVM Intermediate Representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:36,Modifiability,variab,variables,36,/// The type for the list of global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:15,Modifiability,Variab,Variable,15,/// The Global Variable iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:15,Modifiability,Variab,Variable,15,/// The Global Variable constant iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:13,Availability,error,error,13,"/// Emits an error if two values disagree, otherwise the resulting value is; /// that of the operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:428,Availability,error,error,428,"/// Adds a requirement that another module flag be present and have a; /// specified value after linking is performed. The value must be a metadata; /// pair, where the first element of the pair is the ID of the module flag; /// to be restricted, and the second element of the pair is the value the; /// module flag should be restricted to. This behavior can be used to; /// restrict the allowable results (via triggering of an error) of linking; /// IDs with the **Override** behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:108,Performance,perform,performed,108,"/// Adds a requirement that another module flag be present and have a; /// specified value after linking is performed. The value must be a metadata; /// pair, where the first element of the pair is the ID of the module flag; /// to be restricted, and the second element of the pair is the value the; /// module flag should be restricted to. This behavior can be used to; /// restrict the allowable results (via triggering of an error) of linking; /// IDs with the **Override** behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:161,Availability,error,error,161,"/// Uses the specified value, regardless of the behavior or value of the; /// other module. If both modules specify **Override**, but the values; /// differ, an error will be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Modifiability,Variab,Variables,25,/// @}; /// @name Member Variables; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:62,Energy Efficiency,allocate,allocated,62,///< The LLVMContext from which types and; ///< constants are allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:16,Modifiability,Variab,Variables,16,///< The Global Variables in the module,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:31,Security,Access,Accessors,31,"/// @}; /// @name Module Level Accessors; /// @{; /// Get the module identifier which is, essentially, the name of the module.; /// @returns the module identifier as a string",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:127,Integrability,wrap,wrapper,127,"/// Get a short ""name"" for the module.; ///; /// This is useful for debugging or logging. It is essentially a convenience; /// wrapper around getModuleIdentifier().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:81,Testability,log,logging,81,"/// Get a short ""name"" for the module.; ///; /// This is useful for debugging or logging. It is essentially a convenience; /// wrapper around getModuleIdentifier().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:29,Performance,optimiz,optimization,29,"/// Return true if size-info optimization remark is enabled, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:32,Security,Access,Accessors,32,"/// @}; /// @name Generic Value Accessors; /// @{; /// Return the global value in the module with the specified name, of; /// arbitrary type. This method returns null if a global with the specified; /// name is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:521,Integrability,wrap,wrapper,521,"/// @}; /// @name Function Accessors; /// @{; /// Look up the specified function in the module symbol table. Four; /// possibilities:; /// 1. If it does not exist, add a prototype for the function and return it.; /// 2. Otherwise, if the existing function has the correct prototype, return; /// the existing function.; /// 3. Finally, the function exists but has the wrong prototype: return the; /// function with a constantexpr cast to the right prototype.; ///; /// In all cases, the returned value is a FunctionCallee wrapper around the; /// 'FunctionType *T' passed in, as well as a 'Value*' either of the Function or; /// the bitcast to the function.; ///; /// Note: For library calls getOrInsertLibFunc() should be used instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:27,Security,Access,Accessors,27,"/// @}; /// @name Function Accessors; /// @{; /// Look up the specified function in the module symbol table. Four; /// possibilities:; /// 1. If it does not exist, add a prototype for the function and return it.; /// 2. Otherwise, if the existing function has the correct prototype, return; /// the existing function.; /// 3. Finally, the function exists but has the wrong prototype: return the; /// function with a constantexpr cast to the right prototype.; ///; /// In all cases, the returned value is a FunctionCallee wrapper around the; /// 'FunctionType *T' passed in, as well as a 'Value*' either of the Function or; /// the bitcast to the function.; ///; /// Note: For library calls getOrInsertLibFunc() should be used instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:3,Safety,Avoid,Avoid,3,// Avoid an incorrect ordering that'd otherwise compile incorrectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Modifiability,Variab,Variable,25,"/// @}; /// @name Global Variable Accessors; /// @{; /// Look up the specified global variable in the module symbol table. If it; /// does not exist, return null. If AllowInternal is set to true, this; /// function will return types that have InternalLinkage. By default, these; /// types are not returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:86,Modifiability,variab,variable,86,"/// @}; /// @name Global Variable Accessors; /// @{; /// Look up the specified global variable in the module symbol table. If it; /// does not exist, return null. If AllowInternal is set to true, this; /// function will return types that have InternalLinkage. By default, these; /// types are not returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:34,Security,Access,Accessors,34,"/// @}; /// @name Global Variable Accessors; /// @{; /// Look up the specified global variable in the module symbol table. If it; /// does not exist, return null. If AllowInternal is set to true, this; /// function will return types that have InternalLinkage. By default, these; /// types are not returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:22,Modifiability,variab,variable,22,"/// Return the global variable in the module with the specified name, of; /// arbitrary type. This method returns null if a global with the specified; /// name is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:115,Modifiability,variab,variable,115,"/// Look up the specified global in the module symbol table. If required, this; /// overload constructs the global variable using its constructor's defaults.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:31,Security,Access,Accessors,31,"/// @}; /// @name Global Alias Accessors; /// @{; /// Return the global alias in the module with the specified name, of; /// arbitrary type. This method returns null if a global with the specified; /// name is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:31,Security,Access,Accessors,31,"/// @}; /// @name Global IFunc Accessors; /// @{; /// Return the global ifunc in the module with the specified name, of; /// arbitrary type. This method returns null if a global with the specified; /// name is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:33,Security,Access,Accessors,33,/// @}; /// @name Named Metadata Accessors; /// @{; /// Return the first NamedMDNode in the module with the specified name. This; /// method returns null if a NamedMDNode with the specified name is not found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Security,Access,Accessors,25,/// @}; /// @name Comdat Accessors; /// @{; /// Return the Comdat in the module with the specified name. It is created; /// if it didn't already exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:31,Security,Access,Accessors,31,/// @}; /// @name Module Flags Accessors; /// @{; /// Returns the module flags in the provided vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:469,Safety,avoid,avoid,469,"/// @}; /// @name Materialization; /// @{; /// Sets the GVMaterializer to GVM. This module must not yet have a; /// Materializer. To reset the materializer for a module that already has one,; /// call materializeAll first. Destroying this module will destroy; /// its materializer without materializing any more GlobalValues. Without; /// destroying the Module, there is no way to detach or destroy a materializer; /// without materializing all the GVs it controls, to avoid leaving orphan; /// unmaterialized GVs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:65,Usability,clear,clear,65,/// Make sure all GlobalValues in this Module are fully read and clear the; /// Materializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,Modifiability,variab,variable,18,/// Detach global variable \p GV from the list but don't delete it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,Modifiability,variab,variable,18,/// Remove global variable \p GV from the list and delete it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,Modifiability,variab,variable,18,/// Insert global variable \p GV at the end of the global variable list and; /// take ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:58,Modifiability,variab,variable,58,/// Insert global variable \p GV at the end of the global variable list and; /// take ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,Modifiability,variab,variable,18,/// Insert global variable \p GV into the global variable list before \p; /// Where and take ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:49,Modifiability,variab,variable,49,/// Insert global variable \p GV into the global variable list before \p; /// Where and take ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:55,Modifiability,variab,variables,55,// Use global_size() to get the total number of global variables.; // Use globals() to get the range of all global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:115,Modifiability,variab,variables,115,// Use global_size() to get the total number of global variables.; // Use globals() to get the range of all global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:131,Modifiability,variab,variables,131,"/// @}; /// @name Direct access to the globals list, functions list, and symbol table; /// @{; /// Get the Module's list of global variables (constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Security,access,access,25,"/// @}; /// @name Direct access to the globals list, functions list, and symbol table; /// @{; /// Get the Module's list of global variables (constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:36,Modifiability,variab,variables,36,/// Get the Module's list of global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:35,Modifiability,variab,variable,35,/// Get the symbol table of global variable and function identifiers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:44,Modifiability,variab,variable,44,/// Get the Module's symbol table of global variable and function identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Modifiability,Variab,Variable,25,/// @}; /// @name Global Variable Iteration; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:34,Safety,avoid,avoided,34,/// Returns true if PLT should be avoided for RTLib calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:27,Safety,avoid,avoid,27,/// Set that PLT should be avoid for RTLib calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:39,Modifiability,variab,variables,39,/// Get/set whether referencing global variables can use direct access; /// relocations on ELF targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:64,Security,access,access,64,/// Get/set whether referencing global variables can use direct access; /// relocations on ELF targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h:13,Integrability,interface,interface,13,/// Abstract interface of slot tracker storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h:65,Integrability,Wrap,Wrapper,65,"/// Manage lifetime of a slot tracker for printing IR.; ///; /// Wrapper around the \a SlotTracker used internally by \a AsmWriter. This; /// class allows callers to share the cost of incorporating the metadata in a; /// module or a function.; ///; /// If the IR changes from underneath \a ModuleSlotTracker, strings like; /// ""<badref>"" will be printed, or, worse, the wrong slots entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h:4,Integrability,Wrap,Wrap,4,/// Wrap a preinitialized SlotTracker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:4,Deployability,Update,Update,4,"/// Update \p RelBlockFreq from \p BlockFreq and \p EntryFreq; ///; /// BlockFreq is divided by EntryFreq and added to RelBlockFreq. To represent; /// fractional values, the result is represented as a fixed point number with; /// scale of -ScaleShift.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:117,Availability,avail,available,117,"/// The GlobalValue corresponding to this summary. This is only used in; /// per-module summaries and when the IR is available. E.g. when module; /// analysis is being run, or when parsing both the IR and the summary; /// from assembly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:324,Performance,load,loaded,324,"/// Summary string representation. This StringRef points to BC module; /// string table and is valid until module data is stored in memory.; /// This is guaranteed to happen until runThinLTOBackend function is; /// called, so it is safe to use this field during thin link. This field; /// is only valid if summary index was loaded from BC file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:232,Safety,safe,safe,232,"/// Summary string representation. This StringRef points to BC module; /// string table and is valid until module data is stored in memory.; /// This is guaranteed to happen until runThinLTOBackend function is; /// called, so it is safe to use this field during thin link. This field; /// is only valid if summary index was loaded from BC file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:26,Usability,GUID,GUID,26,"/// Map from global value GUID to corresponding summary structures. Use a; /// std::map rather than a DenseMap so that pointers to the map's value_type; /// (which are used by ValueInfo) are not invalidated by insertion. Also it will; /// likely incur less overhead, as the value type is not very small and the size; /// of the map is unknown, resulting in inefficiencies due to repeated; /// insertions and resizing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:50,Usability,GUID,GUID,50,/// Struct that holds a reference to a particular GUID in a global value; /// summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:168,Energy Efficiency,reduce,reduces,168,"// Represents stack ids in this context, recorded as indices into the; // StackIds vector in the summary index, which in turn holds the full 64-bit; // stack ids. This reduces memory as there are in practice far fewer unique; // stack ids than stack id references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:152,Energy Efficiency,power,powers,152,"// Allocation type assigned to an allocation reached by a given context.; // More can be added, now this is cold, notcold and hot.; // Values should be powers of two so that they can be ORed, in particular to; // track allocations that have different behavior with different calling; // contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:168,Energy Efficiency,reduce,reduces,168,"// Represents stack ids in this context, recorded as indices into the; // StackIds vector in the summary index, which in turn holds the full 64-bit; // stack ids. This reduces memory as there are in practice far fewer unique; // stack ids than stack id references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:17,Modifiability,variab,variable,17,/// Function and variable summary information to aid decisions and; /// implementation of importing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:307,Deployability,update,update,307,"/// The linkage type of the associated global value.; ///; /// One use is to flag values that have local linkage types and need to; /// have module identifier appended before placing into the combined; /// index, to disambiguate from other values with the same name.; /// In the future this will be used to update and optimize linkage; /// types based on global summary-based analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:318,Performance,optimiz,optimize,318,"/// The linkage type of the associated global value.; ///; /// One use is to flag values that have local linkage types and need to; /// have module identifier appended before placing into the combined; /// index, to disambiguate from other values with the same name.; /// In the future this will be used to update and optimize linkage; /// types based on global summary-based analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:301,Deployability,upgrade,upgraded,301,"/// In the per-module summary, indicates that the global value is; /// linkonce_odr and global unnamed addr (so eligible for auto-hiding; /// via hidden visibility). In the combined summary, indicates that the; /// prevailing linkonce_odr copy can be auto-hidden via hidden visibility; /// when it is upgraded to weak_odr in the backend. This is legal when; /// all copies are eligible for auto-hiding (i.e. all copies were; /// linkonce_odr global unnamed addr. If any copy is not (e.g. it was; /// originally weak_odr, we cannot auto-hide the prevailing copy as it; /// means the symbol was externally visible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:16,Security,hash,hash,16,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:200,Security,hash,hash,200,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:97,Usability,GUID,GUID,97,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:159,Usability,GUID,GUID,159,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:108,Modifiability,variab,variable,108,"/// List of values referenced by this global value's definition; /// (either by the initializer of a global variable, or referenced; /// from within a function). This does not include functions called, which; /// are listed in the derived FunctionSummary object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:16,Security,hash,hash,16,"/// Returns the hash of the original name, it is identical to the GUID for; /// externally visible symbols, but not for local ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:66,Usability,GUID,GUID,66,"/// Returns the hash of the original name, it is identical to the GUID for; /// externally visible symbols, but not for local ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,Security,hash,hash,33,/// Initialize the original name hash in this summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:74,Performance,optimiz,optimization,74,/// Sets the linkage to the value determined by global summary-based; /// optimization. Will be applied in the ThinLTO backends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:90,Modifiability,variab,variable,90,"/// If this is an alias summary, returns the summary of the aliased object (a; /// global variable or function), otherwise returns itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:100,Usability,GUID,GUID,100,"/// An ""identifier"" for a virtual function. This contains the type identifier; /// represented as a GUID and the offset from the address point to the virtual; /// function pointer, where ""address point"" is as defined in the Itanium ABI:; /// https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-general",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:106,Performance,perform,perform,106,/// A specification for a virtual function call with all constant integer; /// arguments. This is used to perform virtual constant propagation on the; /// summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:103,Energy Efficiency,allocate,allocate,103,/// All type identifier related information. Because these fields are; /// relatively uncommon we only allocate space for them if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:64,Testability,test,test,64,"/// List of type identifiers used by this function in llvm.type.test; /// intrinsics referenced by something other than an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:166,Usability,GUID,GUIDs,166,"/// List of type identifiers used by this function in llvm.type.test; /// intrinsics referenced by something other than an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:123,Performance,load,load,123,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics that do; /// not have all constant integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:96,Testability,test,test,96,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics that do; /// not have all constant integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:123,Performance,load,load,123,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics with; /// all constant integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:96,Testability,test,test,96,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics with; /// all constant integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:57,Security,access,accesses,57,"// Function attribute flags. Used to track if a function accesses memory,; // recurses or aliases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:74,Security,access,accessed,74,"/// The range contains byte offsets from the parameter pointer which; /// accessed by the function. In the per-module summary, it only includes; /// accesses made by the function instructions. In the combined summary, it; /// also includes accesses by nested function calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:149,Security,access,accesses,149,"/// The range contains byte offsets from the parameter pointer which; /// accessed by the function. In the per-module summary, it only includes; /// accesses made by the function instructions. In the combined summary, it; /// also includes accesses by nested function calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:240,Security,access,accesses,240,"/// The range contains byte offsets from the parameter pointer which; /// accessed by the function. In the per-module summary, it only includes; /// accesses made by the function instructions. In the combined summary, it; /// also includes accesses by nested function calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:335,Performance,optimiz,optimization,335,"/// Optional list of memprof callsite metadata summaries. The correspondence; /// between the callsite summary and the callsites in the function is implied; /// by the order in the vector (and can be validated by comparing the stack; /// ids in the CallsiteInfo to those in the instruction callsite metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:200,Security,validat,validated,200,"/// Optional list of memprof callsite metadata summaries. The correspondence; /// between the callsite summary and the callsites in the function is implied; /// by the order in the vector (and can be validated by comparing the stack; /// ids in the CallsiteInfo to those in the instruction callsite metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:354,Performance,optimiz,optimization,354,"/// Optional list of allocation memprof metadata summaries. The correspondence; /// between the alloc memprof summary and the allocation callsites in the; /// function is implied by the order in the vector (and can be validated by; /// comparing the stack ids in the AllocInfo to those in the instruction; /// memprof metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:218,Security,validat,validated,218,"/// Optional list of allocation memprof metadata summaries. The correspondence; /// between the alloc memprof summary and the allocation callsites in the; /// function is implied by the order in the vector (and can be validated by; /// comparing the stack ids in the AllocInfo to those in the instruction; /// memprof metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:81,Testability,test,test,81,"/// Returns the list of type identifiers used by this function in; /// llvm.type.test intrinsics other than by an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:157,Usability,GUID,GUIDs,157,"/// Returns the list of type identifiers used by this function in; /// llvm.type.test intrinsics other than by an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:93,Testability,test,test,93,/// Returns the list of virtual calls made by this function using; /// llvm.assume(llvm.type.test) intrinsics that do not have all constant; /// integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:89,Performance,load,load,89,/// Returns the list of virtual calls made by this function using; /// llvm.type.checked.load intrinsics that do not have all constant integer; /// arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:93,Testability,test,test,93,/// Returns the list of virtual calls made by this function using; /// llvm.assume(llvm.type.test) intrinsics with all constant integer; /// arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:89,Performance,load,load,89,/// Returns the list of virtual calls made by this function using; /// llvm.type.checked.load intrinsics with all constant integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,Testability,test,test,15,/// Add a type test to the summary. This is used by WholeProgramDevirt if we; /// were unable to devirtualize a checked call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:11,Modifiability,variab,variable,11,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:112,Modifiability,variab,variable,112,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:222,Modifiability,variab,variables,222,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:278,Modifiability,variab,variables,278,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:467,Modifiability,variab,variables,467,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:244,Performance,optimiz,optimized,244,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:38,Modifiability,variab,variable,38,// If true indicates that this global variable might be accessed; // purely by non-volatile load instructions. This in turn means; // it can be internalized in source and destination modules during; // thin LTO import because it neither modified nor its address; // is taken.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:92,Performance,load,load,92,// If true indicates that this global variable might be accessed; // purely by non-volatile load instructions. This in turn means; // it can be internalized in source and destination modules during; // thin LTO import because it neither modified nor its address; // is taken.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:56,Security,access,accessed,56,// If true indicates that this global variable might be accessed; // purely by non-volatile load instructions. This in turn means; // it can be internalized in source and destination modules during; // thin LTO import because it neither modified nor its address; // is taken.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:26,Modifiability,variab,variable,26,"// If true indicates that variable is possibly only written to, so; // its value isn't loaded and its address isn't taken anywhere.; // False, when 'Constant' attribute is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:87,Performance,load,loaded,87,"// If true indicates that variable is possibly only written to, so; // its value isn't loaded and its address isn't taken anywhere.; // False, when 'Constant' attribute is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:59,Modifiability,variab,variable,59,"// Indicates that value is a compile-time constant. Global variable; // can be 'Constant' while not being 'ReadOnly' on several occasions:; // - it is volatile, (e.g mapped device address); // - its address is taken, meaning that unlike 'ReadOnly' vars we can't; // internalize it.; // Constant variables are always imported thus giving compiler an; // opportunity to make some extra optimizations. Readonly constants; // are also internalized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:295,Modifiability,variab,variables,295,"// Indicates that value is a compile-time constant. Global variable; // can be 'Constant' while not being 'ReadOnly' on several occasions:; // - it is volatile, (e.g mapped device address); // - its address is taken, meaning that unlike 'ReadOnly' vars we can't; // internalize it.; // Constant variables are always imported thus giving compiler an; // opportunity to make some extra optimizations. Readonly constants; // are also internalized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:384,Performance,optimiz,optimizations,384,"// Indicates that value is a compile-time constant. Global variable; // can be 'Constant' while not being 'ReadOnly' on several occasions:; // - it is volatile, (e.g mapped device address); // - its address is taken, meaning that unlike 'ReadOnly' vars we can't; // internalize it.; // Constant variables are always imported thus giving compiler an; // opportunity to make some extra optimizations. Readonly constants; // are also internalized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,Modifiability,variab,variable,30,/// Check if this is a global variable summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:5,Testability,Test,Test,5,///< Test a byte array (first example),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:27,Performance,perform,performed,27,"///< Unknown (analysis not performed, don't lower)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:26,Performance,optimiz,optimization,26,///< Uniform return value optimization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:25,Performance,optimiz,optimization,25,///< Unique return value optimization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:63,Security,hash,hash,63,"/// String table to hold/own module path strings, as well as a hash; /// of the module. The StringMap makes a copy of and owns inserted strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:118,Energy Efficiency,efficient,efficient,118,"/// Map of global value GUID to its summary, used to identify values defined in; /// a particular module, and provide efficient access to their summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:128,Security,access,access,128,"/// Map of global value GUID to its summary, used to identify values defined in; /// a particular module, and provide efficient access to their summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:24,Usability,GUID,GUID,24,"/// Map of global value GUID to its summary, used to identify values defined in; /// a particular module, and provide efficient access to their summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:18,Usability,GUID,GUID,18,/// Map of a type GUID to type id string and summary (multimap used; /// in case of GUID conflicts).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:84,Usability,GUID,GUID,84,/// Map of a type GUID to type id string and summary (multimap used; /// in case of GUID conflicts).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:236,Modifiability,inherit,inheritance,236,"/// List of vtable definitions decorated by a particular type identifier,; /// and their corresponding offsets in that type identifier's metadata.; /// Note that each type identifier may be compatible with multiple vtables, due; /// to inheritance, which is why this is a vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,Usability,GUID,GUIDs,33,/// Mapping from type identifier GUIDs to type identifier and its summary; /// information. Produced by thin link.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:32,Usability,GUID,GUID,32,"/// Mapping from original ID to GUID. If original ID can map to multiple; /// GUIDs, it will be mapped to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:78,Usability,GUID,GUIDs,78,"/// Mapping from original ID to GUID. If original ID can map to multiple; /// GUIDs, it will be mapped to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:108,Integrability,synchroniz,synchronized,108,/// Indicates that summary-based DSOLocal propagation has run and the flag in; /// every summary of a GV is synchronized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:154,Safety,detect,detected,154,/// Indicates that distributed backend should skip compilation of the; /// module. Flag is suppose to be set by distributed ThinLTO indexing; /// when it detected that the module is not needed during the final; /// linking. As result distributed backend should just output a minimal; /// valid object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:23,Performance,perform,performing,23,"/// If true then we're performing analysis of IR module, or parsing along with; /// the IR from assembly. The value of 'false' means we're reading summary; /// from BC or YAML source. Affects the type of value stored in NameOrGV; /// union.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:29,Security,hash,hashes,29,"// List of unique stack ids (hashes). We use a 4B index of the id in the; // stack id lists on the alloc and callsite summaries for memory savings,; // since the number of unique ids is in practice much smaller than the; // number of stack id references in the summaries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:92,Deployability,release,releaseTemporaryMemory,92,// Temporary map while building StackIds list. Clear when index is completely; // built via releaseTemporaryMemory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:47,Usability,Clear,Clear,47,// Temporary map while building StackIds list. Clear when index is completely; // built via releaseTemporaryMemory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,Modifiability,variab,variable,15,// See HaveGVs variable comment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,Deployability,release,release,15,// Facility to release memory from data structures only needed during index; // construction (including while building combined index). Currently this only; // releases the temporary map used while constructing a correspondence between; // stack ids and their index in the StackIds vector. Mostly impactful when; // building a large combined index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:160,Deployability,release,releases,160,// Facility to release memory from data structures only needed during index; // construction (including while building combined index). Currently this only; // releases the temporary map used while constructing a correspondence between; // stack ids and their index in the StackIds vector. Mostly impactful when; // building a large combined index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:27,Usability,GUID,GUID,27,"/// Return a ValueInfo for GUID if it exists, otherwise return ValueInfo().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,Usability,GUID,GUID,30,/// Return a ValueInfo for \p GUID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,Usability,GUID,GUID,30,/// Return a ValueInfo for \p GUID setting value \p Name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,Usability,GUID,GUID,15,/// Return the GUID for \p OriginalId in the OidGuidMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:52,Usability,GUID,GUID,52,/// Add an original name for the value of the given GUID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:35,Usability,GUID,GUID,35,"/// Find the summary for global \p GUID in module \p ModuleId, or nullptr if; /// not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:52,Testability,assert,asserting,52,"/// Returns the first GlobalValueSummary for \p GV, asserting that there; /// is only one if \p PerModuleIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:59,Testability,assert,asserting,59,"/// Returns the first GlobalValueSummary for \p ValueGUID, asserting that; /// there; /// is only one if \p PerModuleIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:40,Security,hash,hash,40,"/// Table of modules, containing module hash and id.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,Security,hash,hash,33,"/// Table of modules, containing hash and id.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:24,Security,hash,hash,24,/// Get the module SHA1 hash recorded for the given module path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:257,Performance,optimiz,optimization,257,"/// Helper to obtain the unpromoted name for a global value (or the original; /// name if not promoted). Split off the rightmost "".llvm.${hash}"" suffix,; /// because it is possible in certain clients (not clang at the moment) for; /// two rounds of ThinLTO optimization and therefore promotion to occur.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:138,Security,hash,hash,138,"/// Helper to obtain the unpromoted name for a global value (or the original; /// name if not promoted). Split off the rightmost "".llvm.${hash}"" suffix,; /// because it is possible in certain clients (not clang at the moment) for; /// two rounds of ThinLTO optimization and therefore promotion to occur.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:39,Security,Hash,Hash,39,"/// Add a new module with the given \p Hash, mapped to the given \p; /// ModID, and return a reference to the module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:48,Availability,avail,available,48,/// Check if the given Module has any functions available for exporting; /// in the index. We consider any module present in the ModulePathStringTable; /// to have exported functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:75,Security,access,accessor,75,/// Return an existing or new TypeIdSummary entry for \p TypeId.; /// This accessor can mutate the map and therefore should not be used in; /// the ThinLTO backends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:87,Security,access,accessor,87,/// Return an existing or new TypeIdCompatibleVtableMap entry for \p TypeId.; /// This accessor can mutate the map and therefore should not be used in; /// the ThinLTO backends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:72,Usability,GUID,GUID,72,/// Collect for the given module the list of functions it defines; /// (GUID -> Summary).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:62,Usability,GUID,GUID,62,/// Collect for each module the list of Summaries it defines (GUID ->; /// Summary).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:11,Security,access,access,11,/// Do the access attribute and DSOLocal propagation in combined index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:35,Modifiability,variab,variable,35,/// Checks if we can import global variable from another module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h:738,Integrability,rout,routines,738,"//===- NoFolder.h - Constant folding helper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the NoFolder class, a helper for IRBuilder. It provides; // IRBuilder with a set of methods for creating unfolded constants. This is; // useful for learners trying to understand how LLVM IR works, and who don't; // want details to be hidden by the constant folder. For general constant; // creation and folding, use ConstantExpr and the routines in; // llvm/Analysis/ConstantFolding.h.; //; // Note: since it is not actually possible to create unfolded constants, this; // class returns instructions rather than constants.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h:549,Usability,learn,learners,549,"//===- NoFolder.h - Constant folding helper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the NoFolder class, a helper for IRBuilder. It provides; // IRBuilder with a set of methods for creating unfolded constants. This is; // useful for learners trying to understand how LLVM IR works, and who don't; // want details to be hidden by the constant folder. For general constant; // creation and folding, use ConstantExpr and the routines in; // llvm/Analysis/ConstantFolding.h.; //; // Note: since it is not actually possible to create unfolded constants, this; // class returns instructions rather than constants.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h:175,Usability,simpl,simplified,175,//===--------------------------------------------------------------------===//; // Value-based folders.; //; // Return an existing value or a constant if the operation can be simplified.; // Otherwise return nullptr.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:570,Energy Efficiency,efficient,efficient,570,"//===-- llvm/OperandTraits.h - OperandTraits class definition ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the traits classes that are handy for enforcing the correct; // layout of various User subclasses. It also provides the means for accessing; // the operands in the most efficient manner.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:531,Security,access,accessing,531,"//===-- llvm/OperandTraits.h - OperandTraits class definition ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the traits classes that are handy for enforcing the correct; // layout of various User subclasses. It also provides the means for accessing; // the operands in the most efficient manner.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:324,Energy Efficiency,allocate,allocated,324,"//===----------------------------------------------------------------------===//; // HungoffOperand Trait Class; //===----------------------------------------------------------------------===//; /// HungoffOperandTraits - determine the allocation regime of the Use array; /// when it is not a prefix to the User object, but allocated at an unrelated; /// heap address.; ///; /// This is the traits class that is needed when the Use array must be; /// resizable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:124,Integrability,interface,interface,124,/// Macro for generating in-class operand accessor declarations.; /// It should only be called in the public section of the interface.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:42,Security,access,accessor,42,/// Macro for generating in-class operand accessor declarations.; /// It should only be called in the public section of the interface.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:46,Security,access,accessor,46,/// Macro for generating out-of-class operand accessor definitions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,"/// Test whether this operation is known to never; /// undergo unsigned overflow, aka the nuw property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,"/// Test whether this operation is known to never; /// undergo signed overflow, aka the nsw property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,"/// Test whether this division is known to be exact, with zero remainder.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:77,Availability,mask,mask,77,/// Convenience function for setting multiple fast-math flags.; /// FMF is a mask of the bits to set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation allows all non-strict floating-point transforms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation may be simplified with reassociative transforms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:34,Usability,simpl,simplified,34,/// Test if this operation may be simplified with reassociative transforms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation's arguments and results are assumed not-NaN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation's arguments and results are assumed not-infinite.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation can ignore the sign of zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation can use reciprocal multiply instead of division.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:49,Integrability,contract,contracted,49,/// Test if this operation can be floating-point contracted (FMA).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation can be floating-point contracted (FMA).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,/// Test if this operation allows approximations of math library functions or; /// intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:20,Availability,error,error,20,/// Get the maximum error permitted by this operation in ULPs. An accuracy of; /// 0.0 means that the operation should be performed with the default; /// precision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:122,Performance,perform,performed,122,/// Get the maximum error permitted by this operation in ULPs. An accuracy of; /// 0.0 means that the operation should be performed with the default; /// precision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Testability,Test,Test,4,"/// Test whether this is an inbounds GEP, as defined by LangRef.html.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:83,Integrability,rout,routine,83,"/// Accumulate the constant address offset of this GEP if possible.; ///; /// This routine accepts an APInt into which it will try to accumulate the; /// constant offset of this GEP.; ///; /// If \p ExternalAnalysis is provided it will be used to calculate a offset; /// when a operand of GEP is not constant.; /// For example, for a value \p ExternalAnalysis might try to calculate a; /// lower bound. If \p ExternalAnalysis is successful, it should return true.; ///; /// If the \p ExternalAnalysis returns false or the value returned by \p; /// ExternalAnalysis results in a overflow/underflow, this routine returns; /// false and the value of the offset APInt is undefined (it is *not*; /// preserved!).; ///; /// The APInt passed into this routine must be at exactly as wide as the; /// IntPtr type for the address space of the base GEP pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:603,Integrability,rout,routine,603,"/// Accumulate the constant address offset of this GEP if possible.; ///; /// This routine accepts an APInt into which it will try to accumulate the; /// constant offset of this GEP.; ///; /// If \p ExternalAnalysis is provided it will be used to calculate a offset; /// when a operand of GEP is not constant.; /// For example, for a value \p ExternalAnalysis might try to calculate a; /// lower bound. If \p ExternalAnalysis is successful, it should return true.; ///; /// If the \p ExternalAnalysis returns false or the value returned by \p; /// ExternalAnalysis results in a overflow/underflow, this routine returns; /// false and the value of the offset APInt is undefined (it is *not*; /// preserved!).; ///; /// The APInt passed into this routine must be at exactly as wide as the; /// IntPtr type for the address space of the base GEP pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:745,Integrability,rout,routine,745,"/// Accumulate the constant address offset of this GEP if possible.; ///; /// This routine accepts an APInt into which it will try to accumulate the; /// constant offset of this GEP.; ///; /// If \p ExternalAnalysis is provided it will be used to calculate a offset; /// when a operand of GEP is not constant.; /// For example, for a value \p ExternalAnalysis might try to calculate a; /// lower bound. If \p ExternalAnalysis is successful, it should return true.; ///; /// If the \p ExternalAnalysis returns false or the value returned by \p; /// ExternalAnalysis results in a overflow/underflow, this routine returns; /// false and the value of the offset APInt is undefined (it is *not*; /// preserved!).; ///; /// The APInt passed into this routine must be at exactly as wide as the; /// IntPtr type for the address space of the base GEP pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:419,Integrability,interface,interface,419,"//===- llvm/IR/OptBisect.h - LLVM Bisect support ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file declares the interface for bisecting optimizations.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:443,Performance,optimiz,optimizations,443,"//===- llvm/IR/OptBisect.h - LLVM Bisect support ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file declares the interface for bisecting optimizations.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:88,Performance,optimiz,optimizations,88,/// Extensions to this class implement mechanisms to disable passes and; /// individual optimizations at compile time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:76,Performance,optimiz,optimizations,76,/// This class implements a mechanism to disable passes and individual; /// optimizations at compile time based on a command line option; /// (-opt-bisect-limit) in order to perform a bisecting search for; /// optimization-related problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:174,Performance,perform,perform,174,/// This class implements a mechanism to disable passes and individual; /// optimizations at compile time based on a command line option; /// (-opt-bisect-limit) in order to perform a bisecting search for; /// optimization-related problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:210,Performance,optimiz,optimization-related,210,/// This class implements a mechanism to disable passes and individual; /// optimizations at compile time based on a command line option; /// (-opt-bisect-limit) in order to perform a bisecting search for; /// optimization-related problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:231,Security,access,access,231,"/// Default constructor. Initializes the state to ""disabled"". The bisection; /// will be enabled by the cl::opt call-back when the command line option; /// is processed.; /// Clients should not instantiate this class directly. All access should go; /// through LLVMContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:365,Integrability,rout,routine,365,"/// Checks the bisect limit to determine if the specified pass should run.; ///; /// The method prints the name of the pass, its assigned bisect number, and; /// whether or not the pass will be executed. It returns true if the pass; /// should run, i.e. if the bisect limit is set to -1 or has not yet been; /// exceeded.; ///; /// Most passes should not call this routine directly. Instead, it is called; /// through helper routines provided by the base classes of the pass. For; /// instance, function passes should call FunctionPass::skipFunction().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:425,Integrability,rout,routines,425,"/// Checks the bisect limit to determine if the specified pass should run.; ///; /// The method prints the name of the pass, its assigned bisect number, and; /// whether or not the pass will be executed. It returns true if the pass; /// should run, i.e. if the bisect limit is set to -1 or has not yet been; /// exceeded.; ///; /// Most passes should not call this routine directly. Instead, it is called; /// through helper routines provided by the base classes of the pass. For; /// instance, function passes should call FunctionPass::skipFunction().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h:16,Performance,optimiz,optimization,16,/// Set the new optimization limit and reset the counter. Passing; /// OptBisect::Disabled disables the limiting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OptBisect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:1739,Integrability,wrap,wraps,1739,".; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Pass Instrumentation classes that provide; /// instrumentation points into the pass execution by PassManager.; ///; /// There are two main classes:; /// - PassInstrumentation provides a set of instrumentation points for; /// pass managers to call on.; ///; /// - PassInstrumentationCallbacks registers callbacks and provides access; /// to them for PassInstrumentation.; ///; /// PassInstrumentation object is being used as a result of; /// PassInstrumentationAnalysis (so it is intended to be easily copyable).; ///; /// Intended scheme of use for Pass Instrumentation is as follows:; /// - register instrumentation callbacks in PassInstrumentationCallbacks; /// instance. PassBuilder provides helper for that.; ///; /// - register PassInstrumentationAnalysis with all the PassManagers.; /// PassBuilder handles that automatically when registering analyses.; ///; /// - Pass Manager requests PassInstrumentationAnalysis from analysis manager; /// and gets PassInstrumentation as its result.; ///; /// - Pass Manager invokes PassInstrumentation entry points appropriately,; /// passing StringRef identification (""name"") of the pass currently being; /// executed and IRUnit it works on. There can be different schemes of; /// providing names in future, currently it is just a name() of the pass.; ///; /// - PassInstrumentation wraps address of IRUnit into llvm::Any and passes; /// control to all the registered callbacks. Note that we specifically wrap; /// 'const IRUnitT*' so as to avoid any accidental changes to IR in; /// instrumenting callbacks.; ///; /// - Some instrumentation points (BeforePass) allow to control execution; /// of a pass. For those callbacks returning false means pass will not be; /// executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:1861,Integrability,wrap,wrap,1861,".; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Pass Instrumentation classes that provide; /// instrumentation points into the pass execution by PassManager.; ///; /// There are two main classes:; /// - PassInstrumentation provides a set of instrumentation points for; /// pass managers to call on.; ///; /// - PassInstrumentationCallbacks registers callbacks and provides access; /// to them for PassInstrumentation.; ///; /// PassInstrumentation object is being used as a result of; /// PassInstrumentationAnalysis (so it is intended to be easily copyable).; ///; /// Intended scheme of use for Pass Instrumentation is as follows:; /// - register instrumentation callbacks in PassInstrumentationCallbacks; /// instance. PassBuilder provides helper for that.; ///; /// - register PassInstrumentationAnalysis with all the PassManagers.; /// PassBuilder handles that automatically when registering analyses.; ///; /// - Pass Manager requests PassInstrumentationAnalysis from analysis manager; /// and gets PassInstrumentation as its result.; ///; /// - Pass Manager invokes PassInstrumentation entry points appropriately,; /// passing StringRef identification (""name"") of the pass currently being; /// executed and IRUnit it works on. There can be different schemes of; /// providing names in future, currently it is just a name() of the pass.; ///; /// - PassInstrumentation wraps address of IRUnit into llvm::Any and passes; /// control to all the registered callbacks. Note that we specifically wrap; /// 'const IRUnitT*' so as to avoid any accidental changes to IR in; /// instrumenting callbacks.; ///; /// - Some instrumentation points (BeforePass) allow to control execution; /// of a pass. For those callbacks returning false means pass will not be; /// executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:1897,Safety,avoid,avoid,1897,".; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Pass Instrumentation classes that provide; /// instrumentation points into the pass execution by PassManager.; ///; /// There are two main classes:; /// - PassInstrumentation provides a set of instrumentation points for; /// pass managers to call on.; ///; /// - PassInstrumentationCallbacks registers callbacks and provides access; /// to them for PassInstrumentation.; ///; /// PassInstrumentation object is being used as a result of; /// PassInstrumentationAnalysis (so it is intended to be easily copyable).; ///; /// Intended scheme of use for Pass Instrumentation is as follows:; /// - register instrumentation callbacks in PassInstrumentationCallbacks; /// instance. PassBuilder provides helper for that.; ///; /// - register PassInstrumentationAnalysis with all the PassManagers.; /// PassBuilder handles that automatically when registering analyses.; ///; /// - Pass Manager requests PassInstrumentationAnalysis from analysis manager; /// and gets PassInstrumentation as its result.; ///; /// - Pass Manager invokes PassInstrumentation entry points appropriately,; /// passing StringRef identification (""name"") of the pass currently being; /// executed and IRUnit it works on. There can be different schemes of; /// providing names in future, currently it is just a name() of the pass.; ///; /// - PassInstrumentation wraps address of IRUnit into llvm::Any and passes; /// control to all the registered callbacks. Note that we specifically wrap; /// 'const IRUnitT*' so as to avoid any accidental changes to IR in; /// instrumenting callbacks.; ///; /// - Some instrumentation points (BeforePass) allow to control execution; /// of a pass. For those callbacks returning false means pass will not be; /// executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:737,Security,access,access,737,"//===- llvm/IR/PassInstrumentation.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Pass Instrumentation classes that provide; /// instrumentation points into the pass execution by PassManager.; ///; /// There are two main classes:; /// - PassInstrumentation provides a set of instrumentation points for; /// pass managers to call on.; ///; /// - PassInstrumentationCallbacks registers callbacks and provides access; /// to them for PassInstrumentation.; ///; /// PassInstrumentation object is being used as a result of; /// PassInstrumentationAnalysis (so it is intended to be easily copyable).; ///; /// Intended scheme of use for Pass Instrumentation is as follows:; /// - register instrumentation callbacks in PassInstrumentationCallbacks; /// instance. PassBuilder provides helper for that.; ///; /// - register PassInstrumentationAnalysis with all the PassManagers.; /// PassBuilder handles that automatically when registering analyses.; ///; /// - Pass Manager requests PassInstrumentationAnalysis from analysis manager; /// and gets PassInstrumentation as its result.; ///; /// - Pass Manager invokes PassInstrumentation entry points appropriately,; /// passing StringRef identification (""name"") of the pass currently being; /// executed and IRUnit it works on. There can be different schemes of; /// providing names in future, currently it is just a name() of the pass.; ///; /// - PassInstrumentation wraps address of IRUnit into llvm::Any and passes; /// control to all the registered callbacks. Note that we specifically wrap; /// 'const IRUnitT*' so as to avoid any accidental changes to IR in; /// instrumenting callbacks.; ///; /// - Some instrumentation poi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:115,Integrability,wrap,wrapped,115,"// Before/After callbacks accept IRUnits whenever appropriate, so they need; // to take them as constant pointers, wrapped with llvm::Any.; // For the case when IRUnit has been invalidated there is a different; // callback to use - AfterPassInvalidated.; // We call all BeforePassFuncs to determine if a pass should run or not.; // BeforeNonSkippedPassFuncs are called only if the pass should run.; // TODO: currently AfterPassInvalidated does not accept IRUnit, since passing; // already invalidated IRUnit is unsafe. There are ways to handle invalidated; // IRUnits in a safe way, and we might pursue that as soon as there is a; // useful instrumentation that needs it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:511,Safety,unsafe,unsafe,511,"// Before/After callbacks accept IRUnits whenever appropriate, so they need; // to take them as constant pointers, wrapped with llvm::Any.; // For the case when IRUnit has been invalidated there is a different; // callback to use - AfterPassInvalidated.; // We call all BeforePassFuncs to determine if a pass should run or not.; // BeforeNonSkippedPassFuncs are called only if the pass should run.; // TODO: currently AfterPassInvalidated does not accept IRUnit, since passing; // already invalidated IRUnit is unsafe. There are ways to handle invalidated; // IRUnits in a safe way, and we might pursue that as soon as there is a; // useful instrumentation that needs it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:573,Safety,safe,safe,573,"// Before/After callbacks accept IRUnits whenever appropriate, so they need; // to take them as constant pointers, wrapped with llvm::Any.; // For the case when IRUnit has been invalidated there is a different; // callback to use - AfterPassInvalidated.; // We call all BeforePassFuncs to determine if a pass should run or not.; // BeforeNonSkippedPassFuncs are called only if the pass should run.; // TODO: currently AfterPassInvalidated does not accept IRUnit, since passing; // already invalidated IRUnit is unsafe. There are ways to handle invalidated; // IRUnits in a safe way, and we might pursue that as soon as there is a; // useful instrumentation that needs it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:45,Usability,clear,cleared,45,/// These are run on analyses that have been cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:165,Energy Efficiency,adapt,adaptor,165,// Template argument PassT of PassInstrumentation::runBeforePass could be two; // kinds: (1) a regular pass inherited from PassInfoMixin (happen when; // creating a adaptor pass for a regular pass); (2) a type-erased PassConcept; // created from (1). Here we want to make case (1) skippable unconditionally; // since they are regular passes. We call PassConcept::isRequired to decide; // for case (2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:108,Modifiability,inherit,inherited,108,// Template argument PassT of PassInstrumentation::runBeforePass could be two; // kinds: (1) a regular pass inherited from PassInfoMixin (happen when; // creating a adaptor pass for a regular pass); (2) a type-erased PassConcept; // created from (1). Here we want to make case (1) skippable unconditionally; // since they are regular passes. We call PassConcept::isRequired to decide; // for case (2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:165,Modifiability,adapt,adaptor,165,// Template argument PassT of PassInstrumentation::runBeforePass could be two; // kinds: (1) a regular pass inherited from PassInfoMixin (happen when; // creating a adaptor pass for a regular pass); (2) a type-erased PassConcept; // created from (1). Here we want to make case (1) skippable unconditionally; // since they are regular passes. We call PassConcept::isRequired to decide; // for case (2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:424,Integrability,interface,interfaces,424,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:488,Integrability,interface,interface,488,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1396,Modifiability,polymorphi,polymorphism,1396,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1468,Modifiability,Polymorphi,Polymorphism,1468,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1516,Modifiability,Inherit,Inheritance,1516,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1773,Modifiability,Inherit,Inheritance-Is-The-Base-Class-of-Evil,1773,"//===- PassManager.h - Pass management infrastructure -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines various interfaces for pass management in LLVM. There; /// is no ""pass"" interface in LLVM per se. Instead, an instance of any class; /// which supports a method to 'run' it over a unit of IR can be used as; /// a pass. A pass manager is generally a tool to collect a sequence of passes; /// which run over a particular IR construct, and run each of them in sequence; /// over each such construct in the containing IR construct. As there is no; /// containing IR construct for a Module, a manager for passes over modules; /// forms the base case which runs its managed passes in sequence over the; /// single module provided.; ///; /// The core IR library provides managers for running passes over; /// modules and functions.; ///; /// * FunctionPassManager can run over a Module, runs each pass over; /// a Function.; /// * ModulePassManager must be directly run, runs each pass over the Module.; ///; /// Note that the implementations of the pass managers use concept-based; /// polymorphism as outlined in the ""Value Semantics and Concept-based; /// Polymorphism"" talk (or its abbreviated sibling ""Inheritance Is The Base; /// Class of Evil"") by Sean Parent:; /// * http://github.com/sean-parent/sean-parent.github.com/wiki/Papers-and-Presentations; /// * http://www.youtube.com/watch?v=_BpMYeUFXv8; /// * http://channel9.msdn.com/Events/GoingNative/2013/Inheritance-Is-The-Base-Class-of-Evil; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:340,Integrability,depend,depends,340,"/// A special type used to provide an address that identifies a set of related; /// analyses. These sets are primarily used below to mark sets of analyses as; /// preserved.; ///; /// For example, a transformation can indicate that it preserves the CFG of a; /// function by preserving the appropriate AnalysisSetKey. An analysis that; /// depends only on the CFG can then check if that AnalysisSetKey is preserved;; /// if it is, the analysis knows that it itself is preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:401,Deployability,update,updated,401,"/// A set of analyses that are preserved following a run of a transformation; /// pass.; ///; /// Transformation passes build and return these objects to communicate which; /// analyses are still valid after the transformation. For most passes this is; /// fairly simple: if they don't change anything all analyses are preserved,; /// otherwise only a short list of analyses that have been explicitly updated; /// are preserved.; ///; /// This class also lets transformation passes mark abstract *sets* of analyses; /// as preserved. A transformation that (say) does not alter the CFG can; /// indicate such by marking a particular AnalysisSetKey as preserved, and; /// then analyses can query whether that AnalysisSetKey is preserved.; ///; /// Finally, this class can represent an ""abandoned"" analysis, which is; /// not preserved even if it would be covered by some abstract set of analyses.; ///; /// Given a `PreservedAnalyses` object, an analysis will typically want to; /// figure out whether it is preserved. In the example below, MyAnalysisType is; /// preserved if it's not abandoned, and (a) it's explicitly marked as; /// preserved, (b), the set AllAnalysesOn<MyIRUnit> is preserved, or (c) both; /// AnalysisSetA and AnalysisSetB are preserved.; ///; /// ```; /// auto PAC = PA.getChecker<MyAnalysisType>();; /// if (PAC.preserved() || PAC.preservedSet<AllAnalysesOn<MyIRUnit>>() ||; /// (PAC.preservedSet<AnalysisSetA>() &&; /// PAC.preservedSet<AnalysisSetB>())) {; /// // The analysis has been successfully preserved ...; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:264,Usability,simpl,simple,264,"/// A set of analyses that are preserved following a run of a transformation; /// pass.; ///; /// Transformation passes build and return these objects to communicate which; /// analyses are still valid after the transformation. For most passes this is; /// fairly simple: if they don't change anything all analyses are preserved,; /// otherwise only a short list of analyses that have been explicitly updated; /// are preserved.; ///; /// This class also lets transformation passes mark abstract *sets* of analyses; /// as preserved. A transformation that (say) does not alter the CFG can; /// indicate such by marking a particular AnalysisSetKey as preserved, and; /// then analyses can query whether that AnalysisSetKey is preserved.; ///; /// Finally, this class can represent an ""abandoned"" analysis, which is; /// not preserved even if it would be covered by some abstract set of analyses.; ///; /// Given a `PreservedAnalyses` object, an analysis will typically want to; /// figure out whether it is preserved. In the example below, MyAnalysisType is; /// preserved if it's not abandoned, and (a) it's explicitly marked as; /// preserved, (b), the set AllAnalysesOn<MyIRUnit> is preserved, or (c) both; /// AnalysisSetA and AnalysisSetB are preserved.; ///; /// ```; /// auto PAC = PA.getChecker<MyAnalysisType>();; /// if (PAC.preserved() || PAC.preservedSet<AllAnalysesOn<MyIRUnit>>() ||; /// (PAC.preservedSet<AnalysisSetA>() &&; /// PAC.preservedSet<AnalysisSetB>())) {; /// // The analysis has been successfully preserved ...; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:3,Usability,Clear,Clear,3,// Clear this ID from the explicit not-preserved set if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:106,Performance,optimiz,optimize,106,/// Test whether all analyses are preserved (and none are abandoned).; ///; /// This is used primarily to optimize for the common case of a transformation; /// which makes no changes to the IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Testability,Test,Test,4,/// Test whether all analyses are preserved (and none are abandoned).; ///; /// This is used primarily to optimize for the common case of a transformation; /// which makes no changes to the IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:13,Testability,test,test,13,/// Directly test whether a set of analyses is preserved.; ///; /// This is only true when no analyses have been explicitly abandoned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:13,Testability,test,test,13,/// Directly test whether a set of analyses is preserved.; ///; /// This is only true when no analyses have been explicitly abandoned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:747,Deployability,configurat,configuration,747,"/// Returns an opaque, unique ID for this analysis type.; ///; /// This ID is a pointer type that is guaranteed to be 8-byte aligned and thus; /// suitable for use in sets, maps, and other data structures that use the low; /// bits of pointers.; ///; /// Note that this requires the derived type provide a static \c AnalysisKey; /// member called \c Key.; ///; /// FIXME: The only reason the mixin type itself can't declare the Key value; /// is that some compilers cannot correctly unique a templated static variable; /// so it has the same addresses in each instantiation. The only currently; /// known platform with this limitation is Windows DLL builds, specifically; /// building each part of LLVM as a DLL. If we ever remove that build; /// configuration, this mixin can provide the static key as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:509,Modifiability,variab,variable,509,"/// Returns an opaque, unique ID for this analysis type.; ///; /// This ID is a pointer type that is guaranteed to be 8-byte aligned and thus; /// suitable for use in sets, maps, and other data structures that use the low; /// bits of pointers.; ///; /// Note that this requires the derived type provide a static \c AnalysisKey; /// member called \c Key.; ///; /// FIXME: The only reason the mixin type itself can't declare the Key value; /// is that some compilers cannot correctly unique a templated static variable; /// so it has the same addresses in each instantiation. The only currently; /// known platform with this limitation is Windows DLL builds, specifically; /// building each part of LLVM as a DLL. If we ever remove that build; /// configuration, this mixin can provide the static key as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:747,Modifiability,config,configuration,747,"/// Returns an opaque, unique ID for this analysis type.; ///; /// This ID is a pointer type that is guaranteed to be 8-byte aligned and thus; /// suitable for use in sets, maps, and other data structures that use the low; /// bits of pointers.; ///; /// Note that this requires the derived type provide a static \c AnalysisKey; /// member called \c Key.; ///; /// FIXME: The only reason the mixin type itself can't declare the Key value; /// is that some compilers cannot correctly unique a templated static variable; /// so it has the same addresses in each instantiation. The only currently; /// known platform with this limitation is Windows DLL builds, specifically; /// building each part of LLVM as a DLL. If we ever remove that build; /// configuration, this mixin can provide the static key as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:402,Deployability,pipeline,pipeline,402,"/// Manages a sequence of passes over a particular unit of IR.; ///; /// A pass manager contains a sequence of passes to run over a particular unit; /// of IR (e.g. Functions, Modules). It is itself a valid pass over that unit of; /// IR, and when run over some given IR will run each of its contained passes in; /// sequence. Pass managers are the primary and most basic building block of a; /// pass pipeline.; ///; /// When you run a pass manager, you provide an \c AnalysisManager<IRUnitT>; /// argument. The pass manager will propagate that analysis manager to each; /// pass it runs, and will call the analysis manager's invalidation routine with; /// the PreservedAnalyses of each pass it runs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:640,Integrability,rout,routine,640,"/// Manages a sequence of passes over a particular unit of IR.; ///; /// A pass manager contains a sequence of passes to run over a particular unit; /// of IR (e.g. Functions, Modules). It is itself a valid pass over that unit of; /// IR, and when run over some given IR will run each of its contained passes in; /// sequence. Pass managers are the primary and most basic building block of a; /// pass pipeline.; ///; /// When you run a pass manager, you provide an \c AnalysisManager<IRUnitT>; /// argument. The pass manager will propagate that analysis manager to each; /// pass it runs, and will call the analysis manager's invalidation routine with; /// the PreservedAnalyses of each pass it runs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:125,Availability,error,errors,125,"// FIXME: These are equivalent to the default move constructor/move; // assignment. However, using = default triggers linker errors due to the; // explicit instantiations below. Find away to use the default and remove the; // duplicated code here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:150,Integrability,wrap,wrapper,150,"// Request PassInstrumentation from analysis manager, will use it to run; // instrumenting callbacks for the passes later.; // Here we use std::tuple wrapper over getResult which helps to extract; // AnalysisManager's arguments out of the whole ExtraArgs set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:3,Deployability,Update,Update,3,// Update the analysis manager as each pass runs and potentially; // invalidates analyses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:217,Energy Efficiency,reduce,reduce,217,"/// When adding a pass manager pass that has the same type as this pass; /// manager, simply move the passes over. This is because we don't have use; /// cases rely on executing nested pass managers. Doing this could reduce; /// implementation complexity and avoid potential invalidation issues that may; /// happen with nested pass managers of the same type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:259,Safety,avoid,avoid,259,"/// When adding a pass manager pass that has the same type as this pass; /// manager, simply move the passes over. This is because we don't have use; /// cases rely on executing nested pass managers. Doing this could reduce; /// implementation complexity and avoid potential invalidation issues that may; /// happen with nested pass managers of the same type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:86,Usability,simpl,simply,86,"/// When adding a pass manager pass that has the same type as this pass; /// manager, simply move the passes over. This is because we don't have use; /// cases rely on executing nested pass managers. Doing this could reduce; /// implementation complexity and avoid potential invalidation issues that may; /// happen with nested pass managers of the same type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:30,Security,expose,exposes,30,/// Pseudo-analysis pass that exposes the \c PassInstrumentation to pass; /// managers. Goes before AnalysisManager definition to provide its; /// internals (e.g PassInstrumentationAnalysis::ID) for use there if needed.; /// FIXME: figure out a way to move PassInstrumentationAnalysis into its own; /// header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:55,Performance,cache,caches,55,/// A container for analyses that lazily runs them and caches their; /// results.; ///; /// This class can manage analyses for any IR unit where the address of the IR; /// unit sufficies as its identity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:23,Integrability,depend,dependencies,23,"/// API to communicate dependencies between analyses during invalidation.; ///; /// When an analysis result embeds handles to other analysis results, it; /// needs to be invalidated both when its own information isn't preserved and; /// when any of its embedded analysis results end up invalidated. We pass an; /// \c Invalidator object as an argument to \c invalidate() in order to let; /// the analysis results themselves define the dependency graph on the fly.; /// This lets us avoid building an explicit representation of the; /// dependencies between analysis results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:435,Integrability,depend,dependency,435,"/// API to communicate dependencies between analyses during invalidation.; ///; /// When an analysis result embeds handles to other analysis results, it; /// needs to be invalidated both when its own information isn't preserved and; /// when any of its embedded analysis results end up invalidated. We pass an; /// \c Invalidator object as an argument to \c invalidate() in order to let; /// the analysis results themselves define the dependency graph on the fly.; /// This lets us avoid building an explicit representation of the; /// dependencies between analysis results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:536,Integrability,depend,dependencies,536,"/// API to communicate dependencies between analyses during invalidation.; ///; /// When an analysis result embeds handles to other analysis results, it; /// needs to be invalidated both when its own information isn't preserved and; /// when any of its embedded analysis results end up invalidated. We pass an; /// \c Invalidator object as an argument to \c invalidate() in order to let; /// the analysis results themselves define the dependency graph on the fly.; /// This lets us avoid building an explicit representation of the; /// dependencies between analysis results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:482,Safety,avoid,avoid,482,"/// API to communicate dependencies between analyses during invalidation.; ///; /// When an analysis result embeds handles to other analysis results, it; /// needs to be invalidated both when its own information isn't preserved and; /// when any of its embedded analysis results end up invalidated. We pass an; /// \c Invalidator object as an argument to \c invalidate() in order to let; /// the analysis results themselves define the dependency graph on the fly.; /// This lets us avoid building an explicit representation of the; /// dependencies between analysis results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:650,Availability,error,error,650,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:293,Integrability,depend,dependencies,293,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:422,Integrability,rout,routine,422,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:676,Integrability,depend,dependencies,676,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:795,Integrability,depend,dependecies,795,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:598,Performance,cache,cache,598,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:193,Energy Efficiency,efficient,efficient,193,"/// A type-erased variant of the above invalidate method with the same core; /// API other than passing an analysis ID rather than an analysis type; /// parameter.; ///; /// This is sadly less efficient than the above routine, which leverages; /// the type parameter to avoid the type erasure overhead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:218,Integrability,rout,routine,218,"/// A type-erased variant of the above invalidate method with the same core; /// API other than passing an analysis ID rather than an analysis type; /// parameter.; ///; /// This is sadly less efficient than the above routine, which leverages; /// the type parameter to avoid the type erasure overhead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:270,Safety,avoid,avoid,270,"/// A type-erased variant of the above invalidate method with the same core; /// API other than passing an analysis ID rather than an analysis type; /// parameter.; ///; /// This is sadly less efficient than the above routine, which leverages; /// the type parameter to avoid the type erasure overhead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:62,Performance,cache,cache,62,/// Returns true if the analysis manager has an empty results cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:14,Performance,cache,cached,14,"/// Clear any cached analysis results for a single unit of IR.; ///; /// This doesn't invalidate, but instead simply deletes, the relevant results.; /// It is useful when the IR is being removed and we want to clear out all the; /// memory pinned for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Usability,Clear,Clear,4,"/// Clear any cached analysis results for a single unit of IR.; ///; /// This doesn't invalidate, but instead simply deletes, the relevant results.; /// It is useful when the IR is being removed and we want to clear out all the; /// memory pinned for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:110,Usability,simpl,simply,110,"/// Clear any cached analysis results for a single unit of IR.; ///; /// This doesn't invalidate, but instead simply deletes, the relevant results.; /// It is useful when the IR is being removed and we want to clear out all the; /// memory pinned for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:210,Usability,clear,clear,210,"/// Clear any cached analysis results for a single unit of IR.; ///; /// This doesn't invalidate, but instead simply deletes, the relevant results.; /// It is useful when the IR is being removed and we want to clear out all the; /// memory pinned for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:31,Performance,cache,cached,31,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Usability,Clear,Clear,4,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:81,Usability,clear,clear,81,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:138,Usability,simpl,simply,138,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:331,Usability,clear,clear,331,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:114,Availability,avail,available,114,/// Get the result of an analysis pass for a given IR unit.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:93,Performance,cache,cached,93,/// Get the result of an analysis pass for a given IR unit.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:12,Performance,cache,cached,12,/// Get the cached result of an analysis pass for a given IR unit.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:153,Performance,cache,cached,153,/// Get the cached result of an analysis pass for a given IR unit.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:56,Testability,assert,assert,56,"/// Verify that the given Result cannot be invalidated, assert otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:917,Security,hash,hashtable,917,"/// Register an analysis pass with the manager.; ///; /// The parameter is a callable whose result is an analysis pass. This allows; /// passing in a lambda to construct the analysis.; ///; /// The analysis type to register is the type returned by calling the \c; /// PassBuilder argument. If that type has already been registered, then the; /// argument will not be called and this function will return false.; /// Otherwise, we register the analysis returned by calling \c PassBuilder(),; /// and this function returns true.; ///; /// (Note: Although the return value of this function indicates whether or not; /// an analysis was previously registered, there intentionally isn't a way to; /// query this directly. Instead, you should just register all the analyses; /// you might want and let this class run them lazily. This idiom lets us; /// minimize the number of times we have to look up analyses in our; /// hashtable.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:15,Performance,cache,cached,15,"/// Invalidate cached analyses for an IR unit.; ///; /// Walk through all of the analyses pertaining to this unit of IR and; /// invalidate them, unless they are preserved by the PreservedAnalyses set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:10,Performance,cache,cached,10,/// Get a cached analysis result or return null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:176,Performance,cache,cached,176,/// Map from IR unit to a list of analysis results.; ///; /// Provides linear time removal of all analysis results for a IR unit and; /// the ultimate storage for a particular cached analysis result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:56,Performance,cache,cached,56,/// Map from an analysis ID and IR unit to a particular cached; /// analysis result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:54,Security,access,access,54,"/// An analysis over an ""outer"" IR unit that provides access to an; /// analysis manager over an ""inner"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example, InnerAnalysisManagerProxy<FunctionAnalysisManager, Module> is; /// an analysis over Modules (the ""outer"" unit) that provides access to a; /// Function analysis manager. The FunctionAnalysisManager is the ""inner""; /// manager being proxied, and Functions are the ""inner"" unit. The inner/outer; /// relationship is valid because each Function is contained in one Module.; ///; /// If you're (transitively) within a pass manager for an IR unit U that; /// contains IR unit V, you should never use an analysis manager over V, except; /// via one of these proxies.; ///; /// Note that the proxy's result is a move-only RAII object. The validity of; /// the analyses in the inner analysis manager is tied to its lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:319,Security,access,access,319,"/// An analysis over an ""outer"" IR unit that provides access to an; /// analysis manager over an ""inner"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example, InnerAnalysisManagerProxy<FunctionAnalysisManager, Module> is; /// an analysis over Modules (the ""outer"" unit) that provides access to a; /// Function analysis manager. The FunctionAnalysisManager is the ""inner""; /// manager being proxied, and Functions are the ""inner"" unit. The inner/outer; /// relationship is valid because each Function is contained in one Module.; ///; /// If you're (transitively) within a pass manager for an IR unit U that; /// contains IR unit V, you should never use an analysis manager over V, except; /// via one of these proxies.; ///; /// Note that the proxy's result is a move-only RAII object. The validity of; /// the analyses in the inner analysis manager is tied to its lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:128,Usability,clear,clear,128,// We have to null out the analysis manager in the moved-from state; // because we are taking ownership of the responsibilty to clear the; // analysis state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:14,Usability,clear,cleared,14,// InnerAM is cleared in a moved from state where there is nothing to do.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:3,Usability,Clear,Clear,3,// Clear out the analysis manager if we're being destroyed -- it means we; // didn't even see an invalidate call when we got invalidated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:128,Usability,clear,clear,128,// We have to null out the analysis manager in the moved-from state; // because we are taking ownership of the responsibilty to clear the; // analysis state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Security,Access,Accessor,4,/// Accessor for the analysis manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:244,Usability,clear,clear,244,"/// Handler for invalidation of the outer IR unit, \c IRUnitT.; ///; /// If the proxy analysis itself is not preserved, we assume that the set of; /// inner IR objects contained in IRUnit may have changed. In this case,; /// we have to call \c clear() on the inner analysis manager, as it may now; /// have stale pointers to its inner IR objects.; ///; /// Regardless of whether the proxy analysis is marked as preserved, all of; /// the analyses in the inner analysis manager are potentially invalidated; /// based on the set of preserved analyses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:194,Performance,cache,cache,194,/// Run the analysis pass and create our proxy result object.; ///; /// This doesn't do any interesting work; it is primarily used to insert our; /// proxy result object into the outer analysis cache so that we can proxy; /// invalidation to the inner analysis manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:605,Integrability,interface,interface,605,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:841,Performance,concurren,concurrency,841,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1136,Performance,cache,cached,1136,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:54,Security,access,access,54,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:320,Security,access,access,320,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:587,Security,expose,exposes,587,"/// An analysis over an ""inner"" IR unit that provides access to an; /// analysis manager over a ""outer"" IR unit. The inner unit must be contained; /// in the outer unit.; ///; /// For example OuterAnalysisManagerProxy<ModuleAnalysisManager, Function> is an; /// analysis over Functions (the ""inner"" unit) which provides access to a Module; /// analysis manager. The ModuleAnalysisManager is the ""outer"" manager being; /// proxied, and Modules are the ""outer"" IR unit. The inner/outer relationship; /// is valid because each Function is contained in one Module.; ///; /// This proxy only exposes the const interface of the outer analysis manager,; /// to indicate that you cannot cause an outer analysis to run from within an; /// inner pass. Instead, you must rely on the \c getCachedResult API. This is; /// due to keeping potential future concurrency in mind. To give an example,; /// running a module analysis before any function passes may give a different; /// result than running it in a function pass. Both may be valid, but it would; /// produce non-deterministic results. GlobalsAA is a good analysis example,; /// because the cached information has the mod/ref info for all memory for each; /// function at the time the analysis was computed. The information is still; /// valid after a function transformation, but it may be *different* if; /// recomputed after that transform. GlobalsAA is never invalidated.; ///; /// This proxy doesn't manage invalidation in any way -- that is handled by the; /// recursive return path of each layer of the pass manager. A consequence of; /// this is the outer analyses may be stale. We invalidate the outer analyses; /// only when we're done running passes over the inner IR units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:10,Performance,cache,cached,10,"/// Get a cached analysis. If the analysis can be invalidated, this will; /// assert.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:78,Testability,assert,assert,78,"/// Get a cached analysis. If the analysis can be invalidated, this will; /// assert.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:29,Testability,test,testing,29,"/// Method provided for unit testing, not intended for general use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:126,Usability,clear,clear,126,"// Loop over the set of registered outer invalidation mappings and if any; // of them map to an analysis that is now invalid, clear it out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Security,Access,Access,4,/// Access the map from outer analyses to deferred invalidation requiring; /// analyses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:12,Energy Efficiency,adapt,adaptor,12,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:278,Energy Efficiency,adapt,adaptor,278,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:12,Modifiability,adapt,adaptor,12,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:278,Modifiability,adapt,adaptor,278,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:315,Security,access,access,315,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:1058,Security,access,access,1058,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:80,Energy Efficiency,adapt,adaptor,80,/// A function to deduce a function pass type and wrap it in the; /// templated adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:50,Integrability,wrap,wrap,50,/// A function to deduce a function pass type and wrap it in the; /// templated adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:80,Modifiability,adapt,adaptor,80,/// A function to deduce a function pass type and wrap it in the; /// templated adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:62,Availability,avail,available,62,"/// A utility pass template to force an analysis result to be available.; ///; /// If there are extra arguments at the pass's run level there may also be; /// extra arguments to the analysis manager's \c getResult routine. We can't; /// guess how to effectively map the arguments from one to the other, and so; /// this specialization just ignores them.; ///; /// Specific patterns of run-method extra arguments and analysis manager extra; /// arguments will have to be defined as appropriate specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:214,Integrability,rout,routine,214,"/// A utility pass template to force an analysis result to be available.; ///; /// If there are extra arguments at the pass's run level there may also be; /// extra arguments to the analysis manager's \c getResult routine. We can't; /// guess how to effectively map the arguments from one to the other, and so; /// this specialization just ignores them.; ///; /// Specific patterns of run-method extra arguments and analysis manager extra; /// arguments will have to be defined as appropriate specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:32,Usability,simpl,simply,32,/// A no-op pass template which simply forces a specific analysis result; /// to be invalidated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:181,Modifiability,extend,extend,181,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:121,Testability,test,testing,121,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:33,Usability,simpl,simply,33,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:150,Integrability,wrap,wrapper,150,"// Request PassInstrumentation from analysis manager, will use it to run; // instrumenting callbacks for the passes later.; // Here we use std::tuple wrapper over getResult which helps to extract; // AnalysisManager's arguments out of the whole Args set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:22,Performance,cache,cached,22,"// If we don't have a cached result for this function, look up the pass and; // run it to produce a result, which we then add to the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:133,Performance,cache,cache,133,"// If we don't have a cached result for this function, look up the pass and; // run it to produce a result, which we then add to the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:99,Integrability,depend,dependencies,99,"// Try to invalidate the result, giving it the Invalidator so it can; // recursively query for any dependencies it has and record the result.; // Note that we cannot reuse 'IMapI' here or pre-insert the ID, as; // Result.invalidate may insert things into the map, invalidating our; // iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:491,Integrability,interface,interfaces,491,"//===- PassManager internal APIs and implementation details -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides internal APIs and implementation details used by the; /// pass management interfaces exposed in PassManager.h. To understand more; /// context of why these particular interfaces are needed, see that header; /// file. None of these APIs should be used elsewhere.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:584,Integrability,interface,interfaces,584,"//===- PassManager internal APIs and implementation details -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides internal APIs and implementation details used by the; /// pass management interfaces exposed in PassManager.h. To understand more; /// context of why these particular interfaces are needed, see that header; /// file. None of these APIs should be used elsewhere.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:502,Security,expose,exposed,502,"//===- PassManager internal APIs and implementation details -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides internal APIs and implementation details used by the; /// pass management interfaces exposed in PassManager.h. To understand more; /// context of why these particular interfaces are needed, see that header; /// file. None of these APIs should be used elsewhere.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:46,Integrability,interface,interfaces,46,// Implementation details of the pass manager interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:63,Modifiability,polymorphi,polymorphically,63,/// Template for the abstract base class used to dispatch; /// polymorphically over pass objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:255,Deployability,pipeline,pipeline,255,/// The polymorphic API which runs the pass over a given IR entity.; ///; /// Note that actual pass object can omit the analysis manager argument if; /// desired. Also that the analysis manager may be null if there is no; /// analysis manager in the pass pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:8,Modifiability,polymorphi,polymorphic,8,/// The polymorphic API which runs the pass over a given IR entity.; ///; /// Note that actual pass object can omit the analysis manager argument if; /// desired. Also that the analysis manager may be null if there is no; /// analysis manager in the pass pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Modifiability,Polymorphi,Polymorphic,4,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:26,Security,access,access,26,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Modifiability,Polymorphi,Polymorphic,4,"/// Polymorphic method to let a pass optionally exempted from skipping by; /// PassInstrumentation.; /// To opt-in, pass should implement `static bool isRequired()`. It's no-op; /// to have `isRequired` always return false since that is the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:15,Integrability,wrap,wrapper,15,/// A template wrapper used to implement the polymorphic API.; ///; /// Can be instantiated for any object which provides a \c run method accepting; /// an \c IRUnitT& and an \c AnalysisManager<IRUnit>&. It requires the pass to; /// be a copyable object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:45,Modifiability,polymorphi,polymorphic,45,/// A template wrapper used to implement the polymorphic API.; ///; /// Can be instantiated for any object which provides a \c run method accepting; /// an \c IRUnitT& and an \c AnalysisManager<IRUnit>&. It requires the pass to; /// be a copyable object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:70,Modifiability,parameteriz,parameterized,70,/// Abstract concept of an analysis result.; ///; /// This concept is parameterized over the IR unit that this result pertains; /// to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:361,Deployability,update,update,361,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:632,Integrability,depend,depends,632,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:194,Performance,cache,cached,194,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:90,Safety,detect,detects,90,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:270,Safety,avoid,avoid,270,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:133,Integrability,rout,routine,133,"// Purely to help out MSVC which fails to disable the below specialization,; // explicitly enable using the result type's invalidate routine if we can; // successfully call that routine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:178,Integrability,rout,routine,178,"// Purely to help out MSVC which fails to disable the below specialization,; // explicitly enable using the result type's invalidate routine if we can; // successfully call that routine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper to model the analysis result concept.; ///; /// By default, this will implement the invalidate method with a trivial; /// implementation so that the actual analysis result doesn't need to provide; /// an invalidation handler. It is only selected when the invalidation handler; /// is not part of the ResultT's interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:322,Integrability,interface,interface,322,"/// Wrapper to model the analysis result concept.; ///; /// By default, this will implement the invalidate method with a trivial; /// implementation so that the actual analysis result doesn't need to provide; /// an invalidation handler. It is only selected when the invalidation handler; /// is not part of the ResultT's interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:195,Safety,avoid,avoid,195,"/// The model bases invalidation solely on being in the preserved set.; //; // FIXME: We should actually use two different concepts for analysis results; // rather than two different models, and avoid the indirect function call for; // ones that use the trivial behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:68,Modifiability,parameteriz,parameterized,68,/// Abstract concept of an analysis pass.; ///; /// This concept is parameterized over the IR unit that it can run over and; /// produce an analysis result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Modifiability,Polymorphi,Polymorphic,4,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:26,Security,access,access,26,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper to model the analysis pass concept.; ///; /// Can wrap any type which implements a suitable \c run method. The method; /// must accept an \c IRUnitT& and an \c AnalysisManager<IRUnitT>& as arguments; /// and produce an object which can be wrapped in a \c AnalysisResultModel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:62,Integrability,wrap,wrap,62,/// Wrapper to model the analysis pass concept.; ///; /// Can wrap any type which implements a suitable \c run method. The method; /// must accept an \c IRUnitT& and an \c AnalysisManager<IRUnitT>& as arguments; /// and produce an object which can be wrapped in a \c AnalysisResultModel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:251,Integrability,wrap,wrapped,251,/// Wrapper to model the analysis pass concept.; ///; /// Can wrap any type which implements a suitable \c run method. The method; /// must accept an \c IRUnitT& and an \c AnalysisManager<IRUnitT>& as arguments; /// and produce an object which can be wrapped in a \c AnalysisResultModel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:77,Integrability,wrap,wrapped,77,/// The model delegates to the \c PassT::run method.; ///; /// The return is wrapped in an \c AnalysisResultModel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassTimingInfo.h:488,Integrability,interface,interfaces,488,"//===- PassTimingInfo.h - pass execution timing -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header defines classes/functions to handle pass execution timing; /// information with interfaces for both pass managers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PassTimingInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassTimingInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:415,Energy Efficiency,efficient,efficient,415,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:509,Energy Efficiency,power,power,509,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:524,Integrability,rout,routines,524,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:746,Modifiability,variab,variables,746,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:1033,Modifiability,variab,variables,1033,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:439,Performance,perform,performing,439,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:404,Usability,simpl,simple,404,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:130,Modifiability,extend,extend,130,"// If Val is negative, and CI is shorter than it, truncate to the right; // number of bits. If it is larger, then we have to sign extend. Just; // compare their negated values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:27,Performance,scalab,scalable,27,// Number of elements of a scalable vector unknown at compile time,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:50,Performance,scalab,scalable,50,// FIXME: this should be able to do something for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:31,Energy Efficiency,power,power-of-,31,"/// Match an integer or vector power-of-2.; /// For vectors, this includes constants with undefined elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:38,Energy Efficiency,power,power-of-,38,"/// Match a integer or vector negated power-of-2.; /// For vectors, this includes constants with undefined elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:39,Energy Efficiency,power,power-of-,39,"/// Match an integer or vector of 0 or power-of-2 values.; /// For vectors, this includes constants with undefined elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,Testability,log,logical,12,/// Matches logical shift operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,Testability,log,logical,12,/// Matches logical shift operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:20,Testability,log,logic,20,/// Matches bitwise logic operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:47,Availability,mask,mask,47,/// Matches ShuffleVectorInst independently of mask value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,Performance,Load,LoadInst,12,/// Matches LoadInst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,Availability,Mask,MaskedLoad,12,/// Matches MaskedLoad Intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,Availability,Mask,MaskedGather,12,/// Matches MaskedGather Intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:83,Testability,log,logical,83,"/// Matches either L && R or L || R,; /// either one being in the either binary or logical form.; /// Note that the latter form is poison-blocking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:43,Performance,Cache,Cache,43,"//===- PredIteratorCache.h - pred_iterator Cache ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PredIteratorCache class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:59,Performance,cache,cache,59,/// PredIteratorCache - This class is an extremely trivial cache for; /// predecessor iterator queries. This is useful for code that repeatedly; /// wants the predecessor list for the same blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:42,Performance,cache,cached,42,/// Memory - This is the space that holds cached preds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:21,Performance,cache,cached,21,"/// GetPreds - Get a cached list for the null-terminated predecessor list of; /// the specified block. This can be used in a loop like this:; /// for (BasicBlock **PI = PredCache->GetPreds(BB); *PI; ++PI); /// use(*PI);; /// instead of:; /// for (pred_iterator PI = pred_begin(BB), E = pred_end(BB); PI != E; ++PI)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:4,Usability,clear,clear,4,/// clear - Remove all information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:285,Availability,error,error,285,"// Ensure temporary files exist, creating or re-using them. \p FD contains; // file descriptors (-1 indicates that the file should be created) and; // \p SR contains the corresponding initial content. \p FileName will have; // the filenames filled in when creating files. Return first error code (if; // any) and stop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:116,Availability,error,error,116,// Remove the temporary files in \p FileName. Typically used in conjunction; // with prepareTempFiles. Return first error code (if any) and stop..,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:191,Availability,error,error,191,"// Perform a system based diff between \p Before and \p After, using \p; // OldLineFormat, \p NewLineFormat, and \p UnchangedLineFormat to control the; // formatting of the output. Return an error message for any failures instead; // of the diff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:213,Availability,failure,failures,213,"// Perform a system based diff between \p Before and \p After, using \p; // OldLineFormat, \p NewLineFormat, and \p UnchangedLineFormat to control the; // formatting of the output. Return an error message for any failures instead; // of the diff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:197,Integrability,message,message,197,"// Perform a system based diff between \p Before and \p After, using \p; // OldLineFormat, \p NewLineFormat, and \p UnchangedLineFormat to control the; // formatting of the output. Return an error message for any failures instead; // of the diff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h:3,Performance,Perform,Perform,3,"// Perform a system based diff between \p Before and \p After, using \p; // OldLineFormat, \p NewLineFormat, and \p UnchangedLineFormat to control the; // formatting of the output. Return an error message for any failures instead; // of the diff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PrintPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:268,Usability,clear,cleared,268,"/// Extract branch weights from MD_prof metadata; ///; /// \param ProfileData A pointer to an MDNode.; /// \param [out] Weights An output vector to fill with branch weights; /// \returns True if weights were extracted, False otherwise. When false Weights; /// will be cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:281,Usability,clear,cleared,281,"/// Extract branch weights attatched to an Instruction; ///; /// \param I The Instruction to extract weights from.; /// \param [out] Weights An output vector to fill with branch weights; /// \returns True if weights were extracted, False otherwise. When false Weights; /// will be cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:173,Modifiability,variab,variable,173,/// Retrieve the total of all weights from MD_prof data.; ///; /// \param ProfileData The profile data to extract the total weight from; /// \param [out] TotalWeights input variable to fill with total weights; /// \returns True on success with profile total weights filled in. False if no; /// metadata was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:164,Modifiability,variab,variable,164,/// Retrieve the total of all weights from an instruction.; ///; /// \param I The instruction to extract the total weight from; /// \param [out] TotalWeights input variable to fill with total weights; /// \returns True on success with profile total weights filled in. False if no; /// metadata was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h:106,Integrability,depend,depend,106,"// The profile summary is one or more (Cutoff, MinCount, NumCounts) triplets.; // The semantics of counts depend on the type of profile. For instrumentation; // profile, counts are block counts and for sample profile, counts are; // per-line samples. Given a target counts percentile, we compute the minimum; // number of counts needed to reach this target and the minimum among these; // counts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h:62,Performance,optimiz,optimize,62,"/// If 'Partial' is false, it means the profile being used to optimize; /// a target is collected from the same target.; /// If 'Partial' is true, it means the profile is for common/shared; /// code. The common profile is usually merged from profiles collected; /// from running other targets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h:250,Availability,avail,available,250,"/// This approximately represents the ratio of the number of profile counters; /// of the program being built to the number of profile counters in the; /// partial sample profile. When 'Partial' is false, it is undefined. This is; /// currently only available under thin LTO mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfileSummary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PseudoProbe.h:446,Integrability,rout,routines,446,"//===- PseudoProbe.h - Pseudo Probe IR Helpers ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Pseudo probe IR intrinsic and dwarf discriminator manipulation routines.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/PseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:7,Safety,Safe,SafepointIRVerifier,7,"//===- SafepointIRVerifier.h - Checks for GC relocation problems *- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a verifier which is useful for enforcing the relocation; // properties required by a relocating GC. Specifically, it looks for uses of; // the unrelocated value of pointer SSA values after a possible safepoint. It; // attempts to report no false negatives, but may end up reporting false; // positives in rare cases (see the note at the top of the corresponding cpp; // file.); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:601,Safety,safe,safepoint,601,"//===- SafepointIRVerifier.h - Checks for GC relocation problems *- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a verifier which is useful for enforcing the relocation; // properties required by a relocating GC. Specifically, it looks for uses of; // the unrelocated value of pointer SSA values after a possible safepoint. It; // attempts to report no false negatives, but may end up reporting false; // positives in rare cases (see the note at the top of the corresponding cpp; // file.); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:66,Availability,failure,failure,66,/// Run the safepoint verifier over a single function. Crashes on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:12,Safety,safe,safepoint,12,/// Run the safepoint verifier over a single function. Crashes on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:88,Deployability,pipeline,pipeline,88,/// Create an instance of the safepoint verifier pass which can be added to; /// a pass pipeline to check for relocation bugs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:30,Safety,safe,safepoint,30,/// Create an instance of the safepoint verifier pass which can be added to; /// a pass pipeline to check for relocation bugs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:88,Deployability,pipeline,pipeline,88,/// Create an instance of the safepoint verifier pass which can be added to; /// a pass pipeline to check for relocation bugs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:30,Safety,safe,safepoint,30,/// Create an instance of the safepoint verifier pass which can be added to; /// a pass pipeline to check for relocation bugs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:426,Integrability,wrap,wrapper,426,"//===- llvm/IR/Statepoint.h - gc.statepoint utilities -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains utility functions and a wrapper class analogous to; // CallBase for accessing the fields of gc.statepoint, gc.relocate,; // gc.result intrinsics; and some general utilities helpful when dealing with; // gc.statepoint.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:470,Security,access,accessing,470,"//===- llvm/IR/Statepoint.h - gc.statepoint utilities -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains utility functions and a wrapper class analogous to; // CallBase for accessing the fields of gc.statepoint, gc.relocate,; // gc.result intrinsics; and some general utilities helpful when dealing with; // gc.statepoint.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:398,Availability,avail,available,398,"///< Indicates that this statepoint is a transition from; ///< GC-aware code to code that is not GC-aware.; /// Mark the deopt arguments associated with the statepoint as only being; /// ""live-in"". By default, deopt arguments are ""live-through"". ""live-through""; /// requires that they the value be live on entry, on exit, and at any point; /// during the call. ""live-in"" only requires the value be available at the; /// start of the call. In particular, ""live-in"" values can be placed in; /// unused argument registers or other non-callee saved registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:52,Modifiability,extend,extends,52,/// Represents a gc.statepoint intrinsic call. This extends directly from; /// CallBase as the IntrinsicInst only supports calls and gc.statepoint is; /// invokable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:25,Deployability,patch,patchable,25,/// Return the number of patchable bytes associated with this statepoint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:45,Integrability,wrap,wrapping,45,"/// Returns the function called if this is a wrapping a direct call, and null; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Energy Efficiency,adapt,adapter,10,/// range adapter for actual call arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Integrability,adapter,adapter,10,/// range adapter for actual call arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Modifiability,adapt,adapter,10,/// range adapter for actual call arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Energy Efficiency,adapt,adapter,10,/// range adapter for GC transition arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Integrability,adapter,adapter,10,/// range adapter for GC transition arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Modifiability,adapt,adapter,10,/// range adapter for GC transition arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Energy Efficiency,adapt,adapter,10,/// range adapter for vm state arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Integrability,adapter,adapter,10,/// range adapter for vm state arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Modifiability,adapt,adapter,10,/// range adapter for vm state arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Energy Efficiency,adapt,adapter,10,/// range adapter for gc arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Integrability,adapter,adapter,10,/// range adapter for gc arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,Modifiability,adapt,adapter,10,/// range adapter for gc arguments,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:24,Integrability,wrap,wrapped,24,/// Call sites that get wrapped by a gc.statepoint (currently only in; /// RewriteStatepointsForGC and potentially in other passes in the future) can; /// have attributes that describe properties of gc.statepoint call they will be; /// eventually be wrapped in. This struct is used represent such directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:250,Integrability,wrap,wrapped,250,/// Call sites that get wrapped by a gc.statepoint (currently only in; /// RewriteStatepointsForGC and potentially in other passes in the future) can; /// have attributes that describe properties of gc.statepoint call they will be; /// eventually be wrapped in. This struct is used represent such directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:75,Modifiability,Rewrite,RewriteStatepointsForGC,75,/// Call sites that get wrapped by a gc.statepoint (currently only in; /// RewriteStatepointsForGC and potentially in other passes in the future) can; /// have attributes that describe properties of gc.statepoint call they will be; /// eventually be wrapped in. This struct is used represent such directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:37,Security,Hash,Hashing,37,"//===- llvm/IR/StructuralHash.h - IR Hashing --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides hashing of the LLVM IR structure to be used to check; // Passes modification status.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:402,Security,hash,hashing,402,"//===- llvm/IR/StructuralHash.h - IR Hashing --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides hashing of the LLVM IR structure to be used to check; // Passes modification status.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:14,Security,hash,hash,14,/// Returns a hash of the function \p F.; /// \param F The function to hash.; /// \param DetailedHash Whether or not to encode additional information in the; /// hash. The additional information added into the hash when this flag is set; /// to true includes instruction and operand type information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:71,Security,hash,hash,71,/// Returns a hash of the function \p F.; /// \param F The function to hash.; /// \param DetailedHash Whether or not to encode additional information in the; /// hash. The additional information added into the hash when this flag is set; /// to true includes instruction and operand type information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:162,Security,hash,hash,162,/// Returns a hash of the function \p F.; /// \param F The function to hash.; /// \param DetailedHash Whether or not to encode additional information in the; /// hash. The additional information added into the hash when this flag is set; /// to true includes instruction and operand type information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:210,Security,hash,hash,210,/// Returns a hash of the function \p F.; /// \param F The function to hash.; /// \param DetailedHash Whether or not to encode additional information in the; /// hash. The additional information added into the hash when this flag is set; /// to true includes instruction and operand type information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:79,Modifiability,variab,variables,79,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:14,Security,hash,hash,14,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:41,Security,hash,hashing,41,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:130,Security,hash,hash,130,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:225,Security,hash,hashes,225,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:262,Security,hash,hash,262,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h:858,Deployability,update,updated,858,"//===- llvm/SymbolTableListTraits.h - Traits for iplist ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a generic class that is used to implement the automatic; // symbol table manipulation that occurs when you put (for example) a named; // instruction into a basic block.; //; // The way that this is implemented is by using a special traits class with the; // intrusive list that makes up the list of instructions in a basic block. When; // a new element is added to the list of instructions, the traits class is; // notified, allowing the symbol table to be updated.; //; // This generic class implements the traits class. It must be generic so that; // it can work for all uses it, which include lists of instructions, basic; // blocks, arguments, functions, global variables, etc...; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h:1067,Modifiability,variab,variables,1067,"//===- llvm/SymbolTableListTraits.h - Traits for iplist ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a generic class that is used to implement the automatic; // symbol table manipulation that occurs when you put (for example) a named; // instruction into a basic block.; //; // The way that this is implemented is by using a special traits class with the; // intrusive list that makes up the list of instructions in a basic block. When; // a new element is added to the list of instructions, the traits class is; // notified, allowing the symbol table to be updated.; //; // This generic class implements the traits class. It must be generic so that; // it can work for all uses it, which include lists of instructions, basic; // blocks, arguments, functions, global variables, etc...; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h:28,Deployability,update,updates,28,"/// List that automatically updates parent links and symbol tables.; ///; /// When nodes are inserted into and removed from this list, the associated; /// symbol table will be automatically updated. Similarly, parent links get; /// updated automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h:190,Deployability,update,updated,190,"/// List that automatically updates parent links and symbol tables.; ///; /// When nodes are inserted into and removed from this list, the associated; /// symbol table will be automatically updated. Similarly, parent links get; /// updated automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h:232,Deployability,update,updated,232,"/// List that automatically updates parent links and symbol tables.; ///; /// When nodes are inserted into and removed from this list, the associated; /// symbol table will be automatically updated. Similarly, parent links get; /// updated automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SymbolTableListTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h:3,Security,Expose,Expose,3,// Expose the underlying metadata to casting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:437,Energy Efficiency,allocate,allocated,437,"/// The instances of the Type class are immutable: once they are created,; /// they are never changed. Also note that only one instance of a particular; /// type is ever created. Thus seeing if two types are equal is a matter of; /// doing a trivial pointer comparison. To enforce that no two equal instances; /// are created, Type instances can only be created via static factory methods; /// in class Type and in derived classes. Once allocated, Types are never; /// free'd.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:370,Deployability,update,update,370,"//===--------------------------------------------------------------------===//; /// Definitions of all of the base types for the Type system. Based on this; /// value, you can cast to a class defined in DerivedTypes.h.; /// Note: If you add an element to this, you need to add an element to the; /// Type::getPrimitiveType function, or else things will break!; /// Also update LLVMTypeKind and LLVMGetTypeKind () in the C binding.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:47,Energy Efficiency,Power,PowerPC,47,"///< 128-bit floating point type (two 64-bits, PowerPC)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:5,Performance,Scalab,Scalable,5,///< Scalable SIMD vector type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:68,Integrability,synchroniz,synchronized,68,// Space for subclasses to store data.; // Note that this should be synchronized with; // MAX_INT_BITS value in IntegerType class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:83,Security,Access,Accessors,83,//===--------------------------------------------------------------------===//; // Accessors for working with types.; //; /// Return the type id for the type. This will return one of the TypeID enum; /// elements defined above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:27,Energy Efficiency,power,powerpc,27,/// Return true if this is powerpc long double.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:58,Performance,scalab,scalable,58,/// Return true if this is a target extension type with a scalable layout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:437,Energy Efficiency,allocate,allocated,437,"/// Return the basic size of this type if it is a primitive type. These are; /// fixed by LLVM and are not target-dependent.; /// This will return zero if the type does not have a size or is not a; /// primitive type.; ///; /// If this is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// Note that this may not reflect the size of memory allocated for an; /// instance of the type or the number of bytes that are written when an; /// instance of the type is stored to memory. The DataLayout class provides; /// additional query functions to provide this information.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:114,Integrability,depend,dependent,114,"/// Return the basic size of this type if it is a primitive type. These are; /// fixed by LLVM and are not target-dependent.; /// This will return zero if the type does not have a size or is not a; /// primitive type.; ///; /// If this is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// Note that this may not reflect the size of memory allocated for an; /// instance of the type or the number of bytes that are written when an; /// instance of the type is stored to memory. The DataLayout class provides; /// additional query functions to provide this information.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:241,Performance,scalab,scalable,241,"/// Return the basic size of this type if it is a primitive type. These are; /// fixed by LLVM and are not target-dependent.; /// This will return zero if the type does not have a size or is not a; /// primitive type.; ///; /// If this is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// Note that this may not reflect the size of memory allocated for an; /// instance of the type or the number of bytes that are written when an; /// instance of the type is stored to memory. The DataLayout class provides; /// additional query functions to provide this information.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:267,Performance,scalab,scalable,267,"/// Return the basic size of this type if it is a primitive type. These are; /// fixed by LLVM and are not target-dependent.; /// This will return zero if the type does not have a size or is not a; /// primitive type.; ///; /// If this is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// Note that this may not reflect the size of memory allocated for an; /// instance of the type or the number of bytes that are written when an; /// instance of the type is stored to memory. The DataLayout class provides; /// additional query functions to provide this information.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:196,Security,access,accessor,196,"//===--------------------------------------------------------------------===//; // Helper methods corresponding to subclass methods. This forces a cast to; // the specified subclass and calls its accessor. ""getArrayNumElements"" (for; // example) is shorthand for cast<ArrayType>(Ty)->getNumElements(). This is; // only intended to cover the core methods that are frequently used, helper; // methods should not be added here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:117,Usability,simpl,simply,117,"/// Given vector type, change the element type,; /// whilst keeping the old number of elements.; /// For non-vectors simply returns \p EltTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:127,Availability,avail,available,127,//===--------------------------------------------------------------------===//; // These are the builtin types that are always available.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TypeFinder.h:6,Safety,avoid,avoid,6,"// To avoid walking constant expressions multiple times and other IR; // objects, we keep several helper maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/TypeFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TypeFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Use.h:650,Energy Efficiency,efficient,efficiently,650,"//===- llvm/Use.h - Definition of the Use class -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This defines the Use class. The Use class represents the operand of an; /// instruction or some other User instance which refers to a Value. The Use; /// class keeps the ""use list"" of the referenced value up to date.; ///; /// Pointer tagging is used to efficiently find the User corresponding to a Use; /// without having to store a User pointer in every Use. A User is preceded in; /// memory by all the Uses corresponding to its operands, and the low bits of; /// one of the fields (Prev) of the Use class are used to encode offsets to be; /// able to find that User given a pointer to any Use. For details, see:; ///; /// http://www.llvm.org/docs/ProgrammersManual.html#UserLayout; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Use.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Use.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Use.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Use.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Use.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:406,Integrability,interface,interface,406,"//===- llvm/User.h - User class definition ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class defines the interface that one who uses a Value must implement.; // Each instance of the Value class keeps track of what User's have handles; // to it.; //; // * Instructions are the largest class of Users.; // * Constants may be users of other constants (think arrays and stuff); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:101,Security,access,accessors,101,/// Compile-time customization of User operands.; ///; /// Customizes operand-related allocators and accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a User with an operand pointer co-allocated.; ///; /// This is used for subclasses which need to allocate a variable number; /// of operands, ie, 'hung off uses'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:47,Energy Efficiency,allocate,allocated,47,"/// Allocate a User with an operand pointer co-allocated.; ///; /// This is used for subclasses which need to allocate a variable number; /// of operands, ie, 'hung off uses'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:110,Energy Efficiency,allocate,allocate,110,"/// Allocate a User with an operand pointer co-allocated.; ///; /// This is used for subclasses which need to allocate a variable number; /// of operands, ie, 'hung off uses'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:121,Modifiability,variab,variable,121,"/// Allocate a User with an operand pointer co-allocated.; ///; /// This is used for subclasses which need to allocate a variable number; /// of operands, ie, 'hung off uses'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a User with the operands co-allocated.; ///; /// This is used for subclasses which have a fixed number of operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:41,Energy Efficiency,allocate,allocated,41,/// Allocate a User with the operands co-allocated.; ///; /// This is used for subclasses which have a fixed number of operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a User with the operands co-allocated. If DescBytes is non-zero; /// then allocate an additional DescBytes bytes before the operands. These; /// bytes can be accessed by calling getDescriptor.; ///; /// DescBytes needs to be divisible by sizeof(void *). The allocated; /// descriptor, if any, is aligned to sizeof(void *) bytes.; ///; /// This is used for subclasses which have a fixed number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:41,Energy Efficiency,allocate,allocated,41,"/// Allocate a User with the operands co-allocated. If DescBytes is non-zero; /// then allocate an additional DescBytes bytes before the operands. These; /// bytes can be accessed by calling getDescriptor.; ///; /// DescBytes needs to be divisible by sizeof(void *). The allocated; /// descriptor, if any, is aligned to sizeof(void *) bytes.; ///; /// This is used for subclasses which have a fixed number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:87,Energy Efficiency,allocate,allocate,87,"/// Allocate a User with the operands co-allocated. If DescBytes is non-zero; /// then allocate an additional DescBytes bytes before the operands. These; /// bytes can be accessed by calling getDescriptor.; ///; /// DescBytes needs to be divisible by sizeof(void *). The allocated; /// descriptor, if any, is aligned to sizeof(void *) bytes.; ///; /// This is used for subclasses which have a fixed number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:271,Energy Efficiency,allocate,allocated,271,"/// Allocate a User with the operands co-allocated. If DescBytes is non-zero; /// then allocate an additional DescBytes bytes before the operands. These; /// bytes can be accessed by calling getDescriptor.; ///; /// DescBytes needs to be divisible by sizeof(void *). The allocated; /// descriptor, if any, is aligned to sizeof(void *) bytes.; ///; /// This is used for subclasses which have a fixed number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:171,Security,access,accessed,171,"/// Allocate a User with the operands co-allocated. If DescBytes is non-zero; /// then allocate an additional DescBytes bytes before the operands. These; /// bytes can be accessed by calling getDescriptor.; ///; /// DescBytes needs to be divisible by sizeof(void *). The allocated; /// descriptor, if any, is aligned to sizeof(void *) bytes.; ///; /// This is used for subclasses which have a fixed number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate the array of Uses, followed by a pointer; /// (with bottom bit set) to the User.; /// \param IsPhi identifies callers which are phi nodes and which need; /// N BasicBlock* allocated along with N",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:185,Energy Efficiency,allocate,allocated,185,"/// Allocate the array of Uses, followed by a pointer; /// (with bottom bit set) to the User.; /// \param IsPhi identifies callers which are phi nodes and which need; /// N BasicBlock* allocated along with N",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:16,Energy Efficiency,allocate,allocated,16,/// Free memory allocated for User and Use objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:30,Energy Efficiency,allocate,allocated,30,/// Returns the descriptor co-allocated with this User instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:30,Energy Efficiency,allocate,allocated,30,/// Returns the descriptor co-allocated with this User instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:84,Energy Efficiency,allocate,allocates,84,"/// Set the number of operands on a GlobalVariable.; ///; /// GlobalVariable always allocates space for a single operands, but; /// doesn't always use it.; ///; /// FIXME: As that the number of operands is used to find the start of; /// the allocated memory in operator delete, we need to always think we have; /// 1 operand before delete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:241,Energy Efficiency,allocate,allocated,241,"/// Set the number of operands on a GlobalVariable.; ///; /// GlobalVariable always allocates space for a single operands, but; /// doesn't always use it.; ///; /// FIXME: As that the number of operands is used to find the start of; /// the allocated memory in operator delete, we need to always think we have; /// 1 operand before delete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:100,Integrability,interface,interface,100,// ---------------------------------------------------------------------------; // Operand Iterator interface...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:67,Energy Efficiency,charge,charge,67,"/// Drop all references to operands.; ///; /// This function is in charge of ""letting go"" of all objects that this User; /// refers to. This allows one to 'delete' a whole class at a time, even; /// though there may be circular references... First all references are; /// dropped, and all use counts go to zero. Then everything is deleted for; /// real. Note that no operations are valid on an object that has ""dropped; /// all references"", except operator delete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/User.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:632,Deployability,update,updates,632,"//===----------------------------------------------------------------------===//; // Value Class; //===----------------------------------------------------------------------===//; /// LLVM Value Representation; ///; /// This is a very important LLVM class. It is the base class of all values; /// computed by a program that may be used as operands to other values. Value is; /// the super class of other important classes such as Instruction and Function.; /// All Values have a Type. Type is not a subclass of Value. Some values can; /// have a name and they belong to some Module. Setting the name on the Value; /// automatically updates the module's symbol table.; ///; /// Every value has a ""use list"" that keeps track of which other Values are; /// using this Value. A Value can also have an arbitrary number of ValueHandle; /// objects that watch it and listen to RAUW and Destroy events. See; /// llvm/IR/ValueHandle.h for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:162,Performance,optimiz,optimization,162,"/// Hold subclass data that can be dropped.; ///; /// This member is similar to SubclassData, however it is for holding; /// information which may be used to aid optimization, but which may be; /// cleared to zero without affecting conservative interpretation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:198,Usability,clear,cleared,198,"/// Hold subclass data that can be dropped.; ///; /// This member is similar to SubclassData, however it is for holding; /// information which may be used to aid optimization, but which may be; /// cleared to zero without affecting conservative interpretation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:9,Security,access,access,9,// Allow access to IsUsedByMD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:9,Security,access,access,9,// Allow access to HasValueHandle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:207,Performance,optimiz,optimization,207,"/// Value's destructor should be virtual by design, but that would require; /// that Value and all of its subclasses have a vtable that effectively; /// duplicates the information in the value ID. As a size optimization, the; /// destructor has been protected, and the caller should manually call; /// deleteValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:188,Security,hash,hashtable,188,"/// Return a constant reference to the value's name.; ///; /// This guaranteed to return the same reference as long as the value is not; /// modified. If the value has a name, this does a hashtable lookup, so it's; /// not free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:126,Availability,error,error,126,"/// Transfer the name from V to this value.; ///; /// After taking V's name, sets V's name to empty.; ///; /// \note It is an error to call V->takeName(V).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:483,Testability,assert,assert,483,"//----------------------------------------------------------------------; // Methods for handling the chain of uses of this Value.; //; // Materializing a function can introduce new uses, so these methods come in; // two variants:; // The methods that start with materialized_ check the uses that are; // currently known given which functions are materialized. Be very careful; // when using them since you might not get all uses.; // The methods that don't start with materialized_ assert that modules is; // fully materialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:89,Deployability,release,release,89,// This indirection exists so we can keep assertModuleIsMaterializedImpl(); // around in release builds of Value.cpp to be linked with other code built; // in debug mode. But this avoids calling it in any of the release built code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:212,Deployability,release,release,212,// This indirection exists so we can keep assertModuleIsMaterializedImpl(); // around in release builds of Value.cpp to be linked with other code built; // in debug mode. But this avoids calling it in any of the release built code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:180,Safety,avoid,avoids,180,// This indirection exists so we can keep assertModuleIsMaterializedImpl(); // around in release builds of Value.cpp to be linked with other code built; // in debug mode. But this avoids calling it in any of the release built code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:42,Testability,assert,assertModuleIsMaterializedImpl,42,// This indirection exists so we can keep assertModuleIsMaterializedImpl(); // around in release builds of Value.cpp to be linked with other code built; // in debug mode. But this avoids calling it in any of the release built code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:68,Testability,log,logically,68,/// Return true if this value has N uses or more.; ///; /// This is logically equivalent to getNumUses() >= N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:68,Testability,log,logically,68,/// Return true if this value has N uses or more.; ///; /// This is logically equivalent to getNumUses() >= N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:140,Performance,perform,performing,140,/// Remove every uses that can safely be removed.; ///; /// This will remove for example uses in llvm.assume.; /// This should be used when performing want to perform a tranformation but; /// some Droppable uses pervent it.; /// This function optionally takes a filter to only remove some droppable; /// uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:159,Performance,perform,perform,159,/// Remove every uses that can safely be removed.; ///; /// This will remove for example uses in llvm.assume.; /// This should be used when performing want to perform a tranformation but; /// some Droppable uses pervent it.; /// This function optionally takes a filter to only remove some droppable; /// uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:31,Safety,safe,safely,31,/// Remove every uses that can safely be removed.; ///; /// This will remove for example uses in llvm.assume.; /// This should be used when performing want to perform a tranformation but; /// some Droppable uses pervent it.; /// This function optionally takes a filter to only remove some droppable; /// uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:55,Safety,safe,safely,55,/// Remove every use of this value in \p User that can safely be removed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:196,Modifiability,evolve,evolves,196,"/// Return an ID for the concrete type of this object.; ///; /// This is used to implement the classof checks. This should not be used; /// for any other purpose, as the values may change as LLVM evolves. Also,; /// note that for instructions, the Instruction's opcode is added to; /// InstructionVal. So this means three things:; /// # there is no value with code InstructionVal (no opcode==0).; /// # there are more possible values for the value type than in ValueTy enum.; /// # the InstructionVal enumerator must be the highest valued enumerator in; /// the ValueTy enum.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:105,Testability,test,testing,105,/// Return the raw optional flags value contained in this value.; ///; /// This should only be used when testing two Values for equivalence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:4,Usability,Clear,Clear,4,/// Clear the optional flags contained in this value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:14,Integrability,wrap,wrapper,14,/// This is a wrapper around stripAndAccumulateConstantOffsets with the; /// in-bounds requirement set to false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:104,Performance,load,load,104,"/// The maximum alignment for instructions.; ///; /// This is the greatest alignment value supported by load, store, and alloca; /// instructions, and global values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:280,Deployability,update,update,280,"/// Merge two lists together.; ///; /// Merges \c L and \c R using \c Cmp. To enable stable sorts, always pushes; /// ""equal"" items from L before items from R.; ///; /// \return the first element in the list.; ///; /// \note Completely ignores \a Use::Prev (doesn't read, doesn't update).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:29,Availability,avail,available,29,"// Save Current in the first available slot, merging on collisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:110,Testability,test,test,110,// isa - Provide some specializations of isa so that we don't have to include; // the subtype header files to test to see if the value is a subclass...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:30,Testability,assert,assert,30,// For side effect of calling assert on invalid usage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:79,Safety,avoid,avoid,79,/// This indicates what sub class the handle actually is.; ///; /// This is to avoid having a vtable for the light-weight handle pointers. The; /// fully general Callback version does have a vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:4,Usability,Clear,Clear,4,/// Clear the underlying pointer without clearing the use list.; ///; /// This should only be used if a derived class has manually removed the; /// handle from the use list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:41,Usability,clear,clearing,41,/// Clear the underlying pointer without clearing the use list.; ///; /// This should only be used if a derived class has manually removed the; /// handle from the use list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:763,Deployability,update,update,763,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:478,Energy Efficiency,allocate,allocated,478,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:887,Integrability,wrap,wrapper,887,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:22,Testability,assert,asserts,22,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:115,Testability,assert,asserts,115,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:538,Testability,Assert,AssertingVH,538,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:566,Testability,assert,assert,566,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:648,Testability,Assert,AssertingVH,648,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:779,Testability,Assert,AssertingVH,779,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:838,Testability,assert,assert,838,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:9,Testability,Assert,AssertingVH,9,// Treat AssertingVH<T> like T* inside maps. This also allows using find_as(); // to look up a value without constructing a value handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:311,Availability,error,error,311,"/// Value handle that tracks a Value across RAUW.; ///; /// TrackingVH is designed for situations where a client needs to hold a handle; /// to a Value (or subclass) across some operations which may move that value,; /// but should never destroy it or replace it with some unacceptable type.; ///; /// It is an error to attempt to replace a value with one of a type which is; /// incompatible with any of its outstanding TrackingVHs.; ///; /// It is an error to read from a TrackingVH that does not point to a valid; /// value. A TrackingVH is said to not point to a valid value if either it; /// hasn't yet been assigned a value yet or because the value it was tracking; /// has since been deleted.; ///; /// Assigning a value to a TrackingVH is always allowed, even if said TrackingVH; /// no longer points to a valid value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:453,Availability,error,error,453,"/// Value handle that tracks a Value across RAUW.; ///; /// TrackingVH is designed for situations where a client needs to hold a handle; /// to a Value (or subclass) across some operations which may move that value,; /// but should never destroy it or replace it with some unacceptable type.; ///; /// It is an error to attempt to replace a value with one of a type which is; /// incompatible with any of its outstanding TrackingVHs.; ///; /// It is an error to read from a TrackingVH that does not point to a valid; /// value. A TrackingVH is said to not point to a valid value if either it; /// hasn't yet been assigned a value yet or because the value it was tracking; /// has since been deleted.; ///; /// Assigning a value to a TrackingVH is always allowed, even if said TrackingVH; /// no longer points to a valid value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:181,Integrability,interface,interface,181,"// Check that the value is a member of the correct subclass. We would like; // to check this property on assignment for better debugging, but we don't; // want to require a virtual interface on this VH. Instead we allow RAUW to; // replace this value with a value of an invalid type, and check it here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:376,Availability,failure,failure,376,"/// Callback for Value destruction.; ///; /// Called when this->getValPtr() is destroyed, inside ~Value(), so you; /// may call any non-virtual Value method on getValPtr(), but no subclass; /// methods. If WeakTrackingVH were implemented as a CallbackVH, it would use; /// this; /// method to call setValPtr(NULL). AssertingVH would use this method to; /// cause an assertion failure.; ///; /// All implementations must remove the reference from this object to the; /// Value that's being destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:315,Testability,Assert,AssertingVH,315,"/// Callback for Value destruction.; ///; /// Called when this->getValPtr() is destroyed, inside ~Value(), so you; /// may call any non-virtual Value method on getValPtr(), but no subclass; /// methods. If WeakTrackingVH were implemented as a CallbackVH, it would use; /// this; /// method to call setValPtr(NULL). AssertingVH would use this method to; /// cause an assertion failure.; ///; /// All implementations must remove the reference from this object to the; /// Value that's being destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:366,Testability,assert,assertion,366,"/// Callback for Value destruction.; ///; /// Called when this->getValPtr() is destroyed, inside ~Value(), so you; /// may call any non-virtual Value method on getValPtr(), but no subclass; /// methods. If WeakTrackingVH were implemented as a CallbackVH, it would use; /// this; /// method to call setValPtr(NULL). AssertingVH would use this method to; /// cause an assertion failure.; ///; /// All implementations must remove the reference from this object to the; /// Value that's being destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:292,Testability,Assert,AssertingVH,292,"/// Callback for Value RAUW.; ///; /// Called when this->getValPtr()->replaceAllUsesWith(new_value) is called,; /// _before_ any of the uses have actually been replaced. If WeakTrackingVH; /// were; /// implemented as a CallbackVH, it would use this method to call; /// setValPtr(new_value). AssertingVH would do nothing in this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:900,Deployability,update,update,900,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:579,Energy Efficiency,allocate,allocated,579,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:1024,Integrability,wrap,wrapper,1024,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:272,Testability,Assert,AssertingVH,272,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:666,Testability,assert,assert,666,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:975,Testability,assert,assert,975,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:218,Security,hash,hash,218,"/// A flag tracking whether this value has been poisoned.; ///; /// On delete and RAUW, we leave the value pointer alone so that as a raw; /// pointer it produces the same value (and we fit into the same key of; /// a hash table, etc), but we poison the handle so that any top-level usage; /// will fail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:529,Deployability,update,updates,529,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:515,Integrability,interface,interface,515,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:873,Modifiability,Config,Config,873,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:1041,Modifiability,Config,Config,1041,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:1061,Modifiability,Config,Config,1061,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:1090,Modifiability,inherit,inherit,1090,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:20,Safety,Safe,Safe,20,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:558,Safety,safe,safe,558,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:48,Modifiability,config,configurable,48,/// This class defines the default behavior for configurable aspects of; /// ValueMap<>. User Configs should inherit from this class to be as compatible; /// as possible with future versions of ValueMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:94,Modifiability,Config,Configs,94,/// This class defines the default behavior for configurable aspects of; /// ValueMap<>. User Configs should inherit from this class to be as compatible; /// as possible with future versions of ValueMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:109,Modifiability,inherit,inherit,109,/// This class defines the default behavior for configurable aspects of; /// ValueMap<>. User Configs should inherit from this class to be as compatible; /// as possible with future versions of ValueMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:45,Deployability,update,update,45,"/// If FollowRAUW is true, the ValueMap will update mappings on RAUW. If it's; /// false, the ValueMap will leave the original mapping in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:143,Deployability,update,update,143,"// Inserts key,value pair into the map if the key isn't already in the map.; // If the key is already in the map, it returns false and doesn't update the; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:46,Integrability,wrap,wraps,46,"// Takes a key being looked up in the map and wraps it into a; // ValueMapCallbackVH, the actual key type of the map. We use a helper; // function because ValueMapCVH is constructed with a second parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:19,Deployability,update,updates,19,"// This CallbackVH updates its ValueMap when the contained Value changes,; // according to the user's preferences expressed through the Config object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:136,Modifiability,Config,Config,136,"// This CallbackVH updates its ValueMap when the contained Value changes,; // according to the user's preferences expressed through the Config object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h:135,Integrability,interface,interface,135,"/// This class provides a symbol table of name/value pairs. It is essentially; /// a std::map<std::string,Value*> but has a controlled interface provided by; /// LLVM as well as ensuring uniqueness of names.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h:18,Security,Access,Accessors,18,/// @}; /// @name Accessors; /// @{; /// This method finds the value with the given \p Name in the; /// the symbol table.; /// @returns the value associated with the \p Name; /// Lookup a named Value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:559,Integrability,interface,interface,559,"//===- llvm/VectorBuilder.h - Builder for VP Intrinsics ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the VectorBuilder class, which is used as a convenient way; // to create VP intrinsics as if they were LLVM instructions with a consistent; // and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:548,Usability,simpl,simplified,548,"//===- llvm/VectorBuilder.h - Builder for VP Intrinsics ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the VectorBuilder class, which is used as a convenient way; // to create VP intrinsics as if they were LLVM instructions with a consistent; // and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:3,Safety,Abort,Abort,3,// Abort if the requested VP intrinsic could not be created.; // This is useful for strict consistency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:12,Availability,mask,mask,12,// Explicit mask parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:7,Availability,mask,mask,7,// Get mask/evl value handles for the current configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:46,Deployability,configurat,configuration,46,// Get mask/evl value handles for the current configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:46,Modifiability,config,configuration,46,// Get mask/evl value handles for the current configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:12,Availability,mask,mask,12,// All-true mask for the currently configured explicit vector length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:35,Modifiability,config,configured,35,// All-true mask for the currently configured explicit vector length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:39,Performance,scalab,scalable,39,// TODO: setStaticVL(ElementCount) for scalable types.; // Emit a VP intrinsic call that mimics a regular instruction.; // This operation behaves according to the VectorBuilderBehavior.; // \p Opcode The functional instruction opcode of the emitted intrinsic.; // \p ReturnTy The return type of the operation.; // \p VecOpArray The operand list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:423,Integrability,interface,interface,423,"//===- Verifier.h - LLVM IR Verifier ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for; // validation checking of input to the system, and for checking that; // transformations haven't done something bad.; //; // Note that this does not provide full 'java style' security and verifications,; // instead it just tries to ensure that code is well formed.; //; // To see what specifically is checked, look at the top of Verifier.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:459,Security,validat,validation,459,"//===- Verifier.h - LLVM IR Verifier ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for; // validation checking of input to the system, and for checking that; // transformations haven't done something bad.; //; // Note that this does not provide full 'java style' security and verifications,; // instead it just tries to ensure that code is well formed.; //; // To see what specifically is checked, look at the top of Verifier.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:631,Security,secur,security,631,"//===- Verifier.h - LLVM IR Verifier ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for; // validation checking of input to the system, and for checking that; // transformations haven't done something bad.; //; // Note that this does not provide full 'java style' security and verifications,; // instead it just tries to ensure that code is well formed.; //; // To see what specifically is checked, look at the top of Verifier.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:25,Availability,failure,failure,25,/// Helper to diagnose a failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:4,Performance,Cache,Cache,4,"/// Cache of TBAA base nodes that have already been visited. This cachce maps; /// a node that has been visited to a pair (IsInvalid, BitWidth) where; ///; /// \c IsInvalid is true iff the node is invalid.; /// \c BitWidth, if non-zero, is the bitwidth of the integer used to denoting; /// the offset of the access. If zero, only a zero offset is allowed.; ///; /// \c BitWidth has no meaning if \c IsInvalid is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:308,Security,access,access,308,"/// Cache of TBAA base nodes that have already been visited. This cachce maps; /// a node that has been visited to a pair (IsInvalid, BitWidth) where; ///; /// \c IsInvalid is true iff the node is invalid.; /// \c BitWidth, if non-zero, is the bitwidth of the integer used to denoting; /// the offset of the access. If zero, only a zero offset is allowed.; ///; /// \c BitWidth has no meaning if \c IsInvalid is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:25,Availability,error,errors,25,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:102,Availability,error,errors,102,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:144,Availability,error,error,144,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:190,Availability,error,error,190,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:167,Integrability,message,message,167,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:23,Availability,error,errors,23,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:57,Availability,error,errors,57,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:99,Availability,error,error,99,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:145,Availability,error,error,145,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:317,Availability,failure,failures,317,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:354,Availability,error,error,354,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:426,Availability,error,errors,426,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:441,Availability,recover,recovered,441,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:122,Integrability,message,message,122,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:441,Safety,recover,recovered,441,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:23,Availability,error,errors,23,"/// Check a module for errors, and report separate error states for IR; /// and debug info errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:51,Availability,error,error,51,"/// Check a module for errors, and report separate error states for IR; /// and debug info errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:91,Availability,error,errors,91,"/// Check a module for errors, and report separate error states for IR; /// and debug info errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:238,Availability,error,error,238,"/// Create a verifier pass.; ///; /// Check a module or function for validity. This is essentially a pass wrapped; /// around the above verifyFunction and verifyModule routines and; /// functionality. When the pass detects a verification error it is always; /// printed to stderr, and by default they are fatal. You can override that by; /// passing \c false to \p FatalErrors.; ///; /// Note that this creates a pass suitable for the legacy pass manager. It has; /// nothing to do with \c VerifierPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:106,Integrability,wrap,wrapped,106,"/// Create a verifier pass.; ///; /// Check a module or function for validity. This is essentially a pass wrapped; /// around the above verifyFunction and verifyModule routines and; /// functionality. When the pass detects a verification error it is always; /// printed to stderr, and by default they are fatal. You can override that by; /// passing \c false to \p FatalErrors.; ///; /// Note that this creates a pass suitable for the legacy pass manager. It has; /// nothing to do with \c VerifierPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:168,Integrability,rout,routines,168,"/// Create a verifier pass.; ///; /// Check a module or function for validity. This is essentially a pass wrapped; /// around the above verifyFunction and verifyModule routines and; /// functionality. When the pass detects a verification error it is always; /// printed to stderr, and by default they are fatal. You can override that by; /// passing \c false to \p FatalErrors.; ///; /// Note that this creates a pass suitable for the legacy pass manager. It has; /// nothing to do with \c VerifierPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:215,Safety,detect,detects,215,"/// Create a verifier pass.; ///; /// Check a module or function for validity. This is essentially a pass wrapped; /// around the above verifyFunction and verifyModule routines and; /// functionality. When the pass detects a verification error it is always; /// printed to stderr, and by default they are fatal. You can override that by; /// passing \c false to \p FatalErrors.; ///; /// Note that this creates a pass suitable for the legacy pass manager. It has; /// nothing to do with \c VerifierPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:79,Availability,mask,mask,79,"// Global logical predicate that acts on all lanes; // of the input and output mask concurrently. For; // example, it is implied by the `M` token in the; // Vector Function ABI mangled name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:84,Performance,concurren,concurrently,84,"// Global logical predicate that acts on all lanes; // of the input and output mask concurrently. For; // example, it is implied by the `M` token in the; // Vector Function ABI mangled name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:10,Testability,log,logical,10,"// Global logical predicate that acts on all lanes; // of the input and output mask concurrently. For; // example, it is implied by the `M` token in the; // Vector Function ABI mangled name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:11,Performance,Scalab,Scalable,11,// AArch64 Scalable Vector Extension,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:207,Modifiability,extend,extendible,207,/// Encapsulates information needed to describe a parameter.; ///; /// The description of the parameter is not linked directly to; /// OpenMP or any other vector function description. This structure; /// is extendible to handle other paradigms that describe vector; /// functions and their parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:66,Availability,avail,available,66,"/// Contains the information about the kind of vectorization; /// available.; ///; /// This object in independent on the paradigm used to; /// represent vector functions. in particular, it is not attached to; /// any target-specific ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:4,Deployability,Update,Update,4,/// Update the parameter in position P.ParamPos to P.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:4,Security,Validat,Validation,4,/// Validation check on the Parameters in the VFShape.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:396,Availability,mask,mask,396,"/// Function to construct a VFInfo out of a mangled names in the; /// following format:; ///; /// <VFABI_name>{(<redirection>)}; ///; /// where <VFABI_name> is the name of the vector function, mangled according; /// to the rules described in the Vector Function ABI of the target vector; /// extension (or <isa> from now on). The <VFABI_name> is in the following; /// format:; ///; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)]; ///; /// This methods support demangling rules for the following <isa>:; ///; /// * AArch64: https://developer.arm.com/docs/101129/latest; ///; /// * x86 (libmvec): https://sourceware.org/glibc/wiki/libmvec and; /// https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt; ///; /// \param MangledName -> input string in the format; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)].; /// \param FTy -> FunctionType of the scalar function which we're trying to find; /// a vectorized variant for. This is required to determine the vectorization; /// factor for scalable vectors, since the mangled name doesn't encode that;; /// it needs to be derived from the widest element types of vector arguments; /// or return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:830,Availability,mask,mask,830,"/// Function to construct a VFInfo out of a mangled names in the; /// following format:; ///; /// <VFABI_name>{(<redirection>)}; ///; /// where <VFABI_name> is the name of the vector function, mangled according; /// to the rules described in the Vector Function ABI of the target vector; /// extension (or <isa> from now on). The <VFABI_name> is in the following; /// format:; ///; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)]; ///; /// This methods support demangling rules for the following <isa>:; ///; /// * AArch64: https://developer.arm.com/docs/101129/latest; ///; /// * x86 (libmvec): https://sourceware.org/glibc/wiki/libmvec and; /// https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt; ///; /// \param MangledName -> input string in the format; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)].; /// \param FTy -> FunctionType of the scalar function which we're trying to find; /// a vectorized variant for. This is required to determine the vectorization; /// factor for scalable vectors, since the mangled name doesn't encode that;; /// it needs to be derived from the widest element types of vector arguments; /// or return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:1062,Performance,scalab,scalable,1062,"/// Function to construct a VFInfo out of a mangled names in the; /// following format:; ///; /// <VFABI_name>{(<redirection>)}; ///; /// where <VFABI_name> is the name of the vector function, mangled according; /// to the rules described in the Vector Function ABI of the target vector; /// extension (or <isa> from now on). The <VFABI_name> is in the following; /// format:; ///; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)]; ///; /// This methods support demangling rules for the following <isa>:; ///; /// * AArch64: https://developer.arm.com/docs/101129/latest; ///; /// * x86 (libmvec): https://sourceware.org/glibc/wiki/libmvec and; /// https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt; ///; /// \param MangledName -> input string in the format; /// _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)].; /// \param FTy -> FunctionType of the scalar function which we're trying to find; /// a vectorized variant for. This is required to determine the vectorization; /// factor for scalable vectors, since the mangled name doesn't encode that;; /// it needs to be derived from the widest element types of vector arguments; /// or return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:336,Integrability,Inject,InjectTLIMappings,336,"/// Populates a set of strings representing the Vector Function ABI variants; /// associated to the CallInst CI. If the CI does not contain the; /// vector-function-abi-variant attribute, we return without populating; /// VariantMappings, i.e. callers of getVectorVariantNames need not check for; /// the presence of the attribute (see InjectTLIMappings).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:336,Security,Inject,InjectTLIMappings,336,"/// Populates a set of strings representing the Vector Function ABI variants; /// associated to the CallInst CI. If the CI does not contain the; /// vector-function-abi-variant attribute, we return without populating; /// VariantMappings, i.e. callers of getVectorVariantNames need not check for; /// the presence of the attribute (see InjectTLIMappings).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h:601,Deployability,pipeline,pipelined,601,"//===- IRPrintingPasses.h - Passes to print out IR constructs ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines passes to print out IR in various granularities. The; /// PrintModulePass pass simply prints out the entire module when it is; /// executed. The PrintFunctionPass class is designed to be pipelined with; /// other FunctionPass's, and prints out the functions of the module as they; /// are processed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h:493,Usability,simpl,simply,493,"//===- IRPrintingPasses.h - Passes to print out IR constructs ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines passes to print out IR in various granularities. The; /// PrintModulePass pass simply prints out the entire module when it is; /// executed. The PrintFunctionPass class is designed to be pipelined with; /// other FunctionPass's, and prints out the functions of the module as they; /// are processed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:490,Safety,detect,detecting,490,"//===---- llvm/IRReader/IRReader.h - Reader for LLVM IR files ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines functions for reading LLVM IR. They support both; // Bitcode and Assembly, automatically detecting the input format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:270,Availability,down,down,270,"/// If the given MemoryBuffer holds a bitcode image, return a Module; /// for it which does lazy deserialization of function bodies. Otherwise,; /// attempt to parse it as LLVM Assembly and return a fully populated; /// Module. The ShouldLazyLoadMetadata flag is passed down to the bitcode; /// reader to optionally enable lazy metadata loading. This takes ownership; /// of \p Buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:337,Performance,load,loading,337,"/// If the given MemoryBuffer holds a bitcode image, return a Module; /// for it which does lazy deserialization of function bodies. Otherwise,; /// attempt to parse it as LLVM Assembly and return a fully populated; /// Module. The ShouldLazyLoadMetadata flag is passed down to the bitcode; /// reader to optionally enable lazy metadata loading. This takes ownership; /// of \p Buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:262,Availability,down,down,262,"/// If the given file holds a bitcode image, return a Module; /// for it which does lazy deserialization of function bodies. Otherwise,; /// attempt to parse it as LLVM Assembly and return a fully populated; /// Module. The ShouldLazyLoadMetadata flag is passed down to the bitcode; /// reader to optionally enable lazy metadata loading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:329,Performance,load,loading,329,"/// If the given file holds a bitcode image, return a Module; /// for it which does lazy deserialization of function bodies. Otherwise,; /// attempt to parse it as LLVM Assembly and return a fully populated; /// Module. The ShouldLazyLoadMetadata flag is passed down to the bitcode; /// reader to optionally enable lazy metadata loading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h:344,Availability,error,error,344,"/// Create a LineEditor object.; ///; /// \param ProgName The name of the current program. Used to form a default; /// prompt.; /// \param HistoryPath Path to the file in which to store history data, if; /// possible.; /// \param In The input stream used by the editor.; /// \param Out The output stream used by the editor.; /// \param Err The error stream used by the editor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h:18,Performance,perform,perform,18,/// The action to perform upon a completion request.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LineEditor/LineEditor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/IRMover.h:571,Performance,perform,perform,571,"/// Move in the provide values in \p ValuesToLink from \p Src.; ///; /// - \p AddLazyFor is a call back that the IRMover will call when a global; /// value is referenced by one of the ValuesToLink (transitively) but was; /// not present in ValuesToLink. The GlobalValue and a ValueAdder callback; /// are passed as an argument, and the callback is expected to be called; /// if the GlobalValue needs to be added to the \p ValuesToLink and linked.; /// Pass nullptr if there's no work to be done in such cases.; /// - \p IsPerformingImport is true when this IR link is to perform ThinLTO; /// function importing from Src.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Linker/IRMover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/IRMover.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h:32,Integrability,Interface,Interface,32,"//===- Linker.h - Module Linker Interface -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h:338,Availability,error,error,338,/// Link \p Src into the composite.; ///; /// Passing OverrideSymbols as true will have symbols from Src; /// shadow those in the Dest.; ///; /// Passing InternalizeCallback will have the linker call the function with; /// the new module and a list of global value names to be internalized by the; /// callback.; ///; /// Returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Linker/Linker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:42,Deployability,Configurat,Configuration,42,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:6,Modifiability,Config,Config,6,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:42,Modifiability,Config,Configuration,42,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:410,Modifiability,Config,Config,410,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:461,Modifiability,config,configure,461,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:32,Performance,Optimiz,Optimizer,32,"//===-Config.h - LLVM Link Time Optimizer Configuration ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the lto::Config data structure, which allows clients to; // configure LTO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:8,Deployability,configurat,configuration,8,/// LTO configuration. A linker can configure LTO by setting fields in this data; /// structure and passing it to the lto::LTO constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:8,Modifiability,config,configuration,8,/// LTO configuration. A linker can configure LTO by setting fields in this data; /// structure and passing it to the lto::LTO constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:36,Modifiability,config,configure,36,/// LTO configuration. A linker can configure LTO by setting fields in this data; /// structure and passing it to the lto::LTO constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:34,Deployability,pipeline,pipeline,34,/// Use the standard optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:21,Performance,optimiz,optimization,21,/// Use the standard optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:30,Performance,optimiz,optimizer,30,/// Flag to indicate that the optimizer should not assume builtins are present; /// on the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:25,Performance,optimiz,optimizer,25,"/// Disable entirely the optimizer, including importing for ThinLTO",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:36,Security,hash,hash,36,/// Turn on/off the warning about a hash mismatch in the PGO profile data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:4,Testability,Assert,Asserts,4,/// Asserts whether we can assume whole program visibility during the LTO; /// link.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:10,Security,validat,validating,10,/// We're validating that all native vtables have corresponding type infos.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:223,Performance,optimiz,optimized,223,/// Allows non-imported definitions to get the potentially more constraining; /// visibility from the prevailing definition. FromPrevailing is the default; /// because it works for many binary formats. ELF can use the more optimized; /// 'ELF' scheme.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:66,Performance,optimiz,optimizer,66,"/// If this field is set, the set of passes run in the middle-end optimizer; /// will be the one specified by the string. Only works with the new pass; /// manager as the old one doesn't have this ability.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:68,Deployability,pipeline,pipeline,68,"// If this field is set, it has the same effect of specifying an AA pipeline; // identified by the string. Only works with the new pass manager, in; // conjunction OptPipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:4,Performance,Optimiz,Optimization,4,/// Optimization remarks file path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:4,Performance,Optimiz,Optimization,4,/// Optimization remarks pass filter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:20,Performance,optimiz,optimization,20,/// Whether to emit optimization remarks with hotness informations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:430,Availability,avail,available,430,"/// The minimum hotness value a diagnostic needs in order to be included in; /// optimization diagnostics.; ///; /// The threshold is an Optional value, which maps to one of the 3 states:; /// 1. 0 => threshold disabled. All emarks will be printed.; /// 2. positive int => manual threshold by user. Remarks with hotness exceed; /// threshold will be printed.; /// 3. None => 'auto' threshold by user. The actual value is not; /// available at command line, but will be synced with; /// hotness threhold from profile summary during; /// compilation.; ///; /// If threshold option is not specified, it is disabled by default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:81,Performance,optimiz,optimization,81,"/// The minimum hotness value a diagnostic needs in order to be included in; /// optimization diagnostics.; ///; /// The threshold is an Optional value, which maps to one of the 3 states:; /// 1. 0 => threshold disabled. All emarks will be printed.; /// 2. positive int => manual threshold by user. Remarks with hotness exceed; /// threshold will be printed.; /// 3. None => 'auto' threshold by user. The actual value is not; /// available at command line, but will be synced with; /// hotness threhold from profile summary during; /// compilation.; ///; /// If threshold option is not specified, it is disabled by default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:188,Deployability,pipeline,pipeline,188,"/// If this field is set, LTO will write input file paths and symbol; /// resolutions here in llvm-lto2 command line flag format. This can be; /// used for testing and for running the LTO pipeline outside of the linker; /// with llvm-lto2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:156,Testability,test,testing,156,"/// If this field is set, LTO will write input file paths and symbol; /// resolutions here in llvm-lto2 command line flag format. This can be; /// used for testing and for running the LTO pipeline outside of the linker; /// with llvm-lto2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:49,Deployability,pipeline,pipelines,49,/// Tunable parameters for passes in the default pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:119,Deployability,pipeline,pipeline,119,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:345,Deployability,pipeline,pipeline,345,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:872,Deployability,pipeline,pipeline,872,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:86,Performance,optimiz,optimization,86,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:836,Performance,perform,perform,836,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:1181,Performance,concurren,concurrently,1181,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:1034,Safety,abort,aborted,1034,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:1081,Safety,safe,safe,1081,"/// The following callbacks deal with tasks, which normally represent the; /// entire optimization and code generation pipeline for what will become a; /// single native object file. Each task has a unique identifier between 0 and; /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.; /// A task represents the entire pipeline for ThinLTO and regular; /// (non-parallel) LTO, but a parallel code generation task will be split into; /// N tasks before code generation, where N is the parallelism level.; ///; /// LTO may decide to stop processing a task at any time, for example if the; /// module is empty or if a module hook (see below) returns false. For this; /// reason, the client should not expect to receive exactly getMaxTasks(); /// native object files.; /// A module hook may be used by a linker to perform actions during the LTO; /// pipeline. For example, a linker may use this function to implement; /// -save-temps. If this function returns false, any further processing for; /// that task is aborted.; ///; /// Module hooks must be thread safe with respect to the linker's internal; /// data structures. A module hook will never be called concurrently from; /// multiple threads with the same task ID, or the same module.; ///; /// Note that in out-of-process backend scenarios, none of the hooks will be; /// called for ThinLTO tasks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:62,Performance,load,loading,62,"/// This module hook is called after linking (regular LTO) or loading; /// (ThinLTO) the module, before modifying it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:37,Performance,optimiz,optimization,37,/// This module hook is called after optimization is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:269,Safety,abort,aborted,269,"/// A combined index hook is called after all per-module indexes have been; /// combined (ThinLTO-specific). It can be used to implement -save-temps for; /// the combined index.; ///; /// If this function returns false, any further processing for ThinLTO tasks; /// is aborted.; ///; /// It is called regardless of whether the backend is in-process, although it; /// is not called from individual backend processes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:40,Modifiability,config,configures,40,"/// This is a convenience function that configures this Config object to write; /// temporary files named after the given OutputFileName for each of the LTO; /// phases to disk. A client can use this function to implement -save-temps.; ///; /// FIXME: Temporary files derived from ThinLTO backends are currently named; /// after the input file name, rather than the output file name, when; /// UseInputModulePath is set to true.; ///; /// Specifically, it (1) sets each of the above module hooks and the combined; /// index hook to a function that calls the hook function (if any) that was; /// present in the appropriate field when the addSaveTemps function was; /// called, and writes the module to a bitcode file with a name prefixed by; /// the given output file name, and (2) creates a resolution file whose name; /// is prefixed by the given output file name and sets ResolutionFile to its; /// file handle.; ///; /// SaveTempsArgs can be specified to select which temps to save.; /// If SaveTempsArgs is not provided, all temps are saved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:56,Modifiability,Config,Config,56,"/// This is a convenience function that configures this Config object to write; /// temporary files named after the given OutputFileName for each of the LTO; /// phases to disk. A client can use this function to implement -save-temps.; ///; /// FIXME: Temporary files derived from ThinLTO backends are currently named; /// after the input file name, rather than the output file name, when; /// UseInputModulePath is set to true.; ///; /// Specifically, it (1) sets each of the above module hooks and the combined; /// index hook to a function that calls the hook function (if any) that was; /// present in the appropriate field when the addSaveTemps function was; /// called, and writes the module to a bitcode file with a name prefixed by; /// the given output file name, and (2) creates a resolution file whose name; /// is prefixed by the given output file name and sets ResolutionFile to its; /// file handle.; ///; /// SaveTempsArgs can be specified to select which temps to save.; /// If SaveTempsArgs is not provided, all temps are saved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:85,Modifiability,Config,Config,85,"/// A derived class of LLVMContext that initializes itself according to a given; /// Config object. The purpose of this class is to tie ownership of the; /// diagnostic handler to the context, as opposed to the Config object (which; /// may be ephemeral).; // FIXME: This should not be required as diagnostic handler is not callback.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:211,Modifiability,Config,Config,211,"/// A derived class of LLVMContext that initializes itself according to a given; /// Config object. The purpose of this class is to tie ownership of the; /// diagnostic handler to the context, as opposed to the Config object (which; /// may be ephemeral).; // FIXME: This should not be required as diagnostic handler is not callback.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:577,Integrability,interface,interfaces,577,"//===-LTO.h - LLVM Link Time Optimizer ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares functions and classes used to support LTO. It is intended; // to be used both by LTO classes as well as by clients (gold-plugin) that; // don't utilize the LTO code generator interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:523,Modifiability,plugin,plugin,523,"//===-LTO.h - LLVM Link Time Optimizer ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares functions and classes used to support LTO. It is intended; // to be used both by LTO classes as well as by clients (gold-plugin) that; // don't utilize the LTO code generator interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:29,Performance,Optimiz,Optimizer,29,"//===-LTO.h - LLVM Link Time Optimizer ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares functions and classes used to support LTO. It is intended; // to be used both by LTO classes as well as by clients (gold-plugin) that; // don't utilize the LTO code generator interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:311,Performance,optimiz,optimization,311,"/// Resolve linkage for prevailing symbols in the \p Index. Linkage changes; /// recorded in the index and the ThinLTO backends must apply the changes to; /// the module via thinLTOFinalizeInModule.; ///; /// This is done for correctness (if value exported, ensure we always; /// emit a copy), and compile-time optimization (allow drop of duplicates).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:4,Deployability,Update,Update,4,/// Update the linkages in the given \p Index to mark exported values; /// as external and non-exported values as internal. The ThinLTO backends; /// must apply the changes to the Module via thinLTOInternalizeModule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:22,Security,hash,hash,22,/// Computes a unique hash for the Module considering the current list of; /// export/import and other global analysis results.; /// The hash is produced in \p Key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:137,Security,hash,hash,137,/// Computes a unique hash for the Module considering the current list of; /// export/import and other global analysis results.; /// The hash is produced in \p Key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:10,Performance,optimiz,optimization,10,/// Setup optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:46,Performance,multi-thread,multi-threaded,46,/// Produces a container ordering for optimal multi-threaded processing. Returns; /// ordered indices to elements in the input array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:176,Availability,down,downstream,176,/// Updates MemProf attributes (and metadata) based on whether the index; /// has recorded that we are linking with allocation libraries containing; /// the necessary APIs for downstream transformations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:4,Deployability,Update,Updates,4,/// Updates MemProf attributes (and metadata) based on whether the index; /// has recorded that we are linking with allocation libraries containing; /// the necessary APIs for downstream transformations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:42,Integrability,wrap,wrapper,42,/// An input file. This is a symbol table wrapper that only exposes the; /// information that an LTO client should need in order to do symbol resolution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:60,Security,expose,exposes,60,/// An input file. This is a symbol table wrapper that only exposes the; /// information that an LTO client should need in order to do symbol resolution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:41,Security,expose,expose,41,/// The purpose of this class is to only expose the symbol information that an; /// LTO client should need in order to do symbol resolution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:12,Integrability,depend,dependent,12,/// Returns dependent library specifiers from the input file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:45,Integrability,interface,interface,45,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:267,Modifiability,Config,Config,267,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:297,Modifiability,Config,Config,297,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:325,Modifiability,Config,Config,325,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:1027,Performance,Cache,Cache,1027,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:92,Deployability,configurat,configuration,92,"/// Create an LTO object. A default constructed LTO object has a reasonable; /// production configuration, but you can customize it by passing arguments to; /// this constructor.; /// FIXME: We do currently require the DiagHandler field to be set in Conf.; /// Until that is fixed, a Config argument is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:92,Modifiability,config,configuration,92,"/// Create an LTO object. A default constructed LTO object has a reasonable; /// production configuration, but you can customize it by passing arguments to; /// this constructor.; /// FIXME: We do currently require the DiagHandler field to be set in Conf.; /// Until that is fixed, a Config argument is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:284,Modifiability,Config,Config,284,"/// Create an LTO object. A default constructed LTO object has a reasonable; /// production configuration, but you can customize it by passing arguments to; /// this constructor.; /// FIXME: We do currently require the DiagHandler field to be set in Conf.; /// Until that is fixed, a Config argument is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:17,Deployability,pipeline,pipeline,17,"/// Runs the LTO pipeline. This function calls the supplied AddStream; /// function to add native object files to the link.; ///; /// The Cache parameter is optional. If supplied, it will be used to cache; /// native object files and add them to the link.; ///; /// The client will receive at most one callback (via either AddStream or; /// Cache) for each task identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:138,Performance,Cache,Cache,138,"/// Runs the LTO pipeline. This function calls the supplied AddStream; /// function to add native object files to the link.; ///; /// The Cache parameter is optional. If supplied, it will be used to cache; /// native object files and add them to the link.; ///; /// The client will receive at most one callback (via either AddStream or; /// Cache) for each task identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:199,Performance,cache,cache,199,"/// Runs the LTO pipeline. This function calls the supplied AddStream; /// function to add native object files to the link.; ///; /// The Cache parameter is optional. If supplied, it will be used to cache; /// native object files and add them to the link.; ///; /// The client will receive at most one callback (via either AddStream or; /// Cache) for each task identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:341,Performance,Cache,Cache,341,"/// Runs the LTO pipeline. This function calls the supplied AddStream; /// function to add native object files to the link.; ///; /// The Cache parameter is optional. If supplied, it will be used to cache; /// native object files and add them to the link.; ///; /// The client will receive at most one callback (via either AddStream or; /// Cache) for each task identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:59,Modifiability,Config,Config,59,"// The bitcode modules to compile, if specified by the LTO Config.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:145,Energy Efficiency,reduce,reduce,145,// Global mapping from mangled symbol names to resolutions.; // Make this an optional to guard against accessing after it has been reset; // (to reduce memory after we're done with it).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:103,Security,access,accessing,103,// Global mapping from mangled symbol names to resolutions.; // Make this an optional to guard against accessing after it has been reset; // (to reduce memory after we're done with it).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:14,Performance,optimiz,optimization,14,// Diagnostic optimization remarks file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:62,Integrability,wrap,wrap,62,/// Linker redefined version of the symbol which appeared in -wrap or -defsym; /// linker option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:36,Performance,Optimiz,Optimizer,36,"//===-LTOBackend.h - LLVM Link Time Optimizer Backend ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ""backend"" phase of LTO, i.e. it performs; // optimization and code generation on a loaded module. It is generally used; // internally by the LTO class but can also be used independently, for example; // to implement a standalone ThinLTO backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:440,Performance,perform,performs,440,"//===-LTOBackend.h - LLVM Link Time Optimizer Backend ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ""backend"" phase of LTO, i.e. it performs; // optimization and code generation on a loaded module. It is generally used; // internally by the LTO class but can also be used independently, for example; // to implement a standalone ThinLTO backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:453,Performance,optimiz,optimization,453,"//===-LTOBackend.h - LLVM Link Time Optimizer Backend ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ""backend"" phase of LTO, i.e. it performs; // optimization and code generation on a loaded module. It is generally used; // internally by the LTO class but can also be used independently, for example; // to implement a standalone ThinLTO backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:491,Performance,load,loaded,491,"//===-LTOBackend.h - LLVM Link Time Optimizer Backend ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ""backend"" phase of LTO, i.e. it performs; // optimization and code generation on a loaded module. It is generally used; // internally by the LTO class but can also be used independently, for example; // to implement a standalone ThinLTO backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:24,Performance,optimiz,optimizations,24,/// Runs middle-end LTO optimizations on \p Mod.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:129,Security,access,access,129,"/// Runs a regular LTO backend. The regular LTO backend can also act as the; /// regular LTO phase of ThinLTO, which may need to access the combined index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/SummaryBasedOptimizations.h:53,Performance,optimiz,optimizations,53,"//=- llvm/LTO/SummaryBasedOptimizations.h -Link time optimizations-*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/SummaryBasedOptimizations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/SummaryBasedOptimizations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:1119,Integrability,depend,dependent,1119,"//===-LTOCodeGenerator.h - LLVM Link Time Optimizer -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOCodeGenerator class.; //; // LTO compilation consists of three phases: Pre-IPO, IPO and Post-IPO.; //; // The Pre-IPO phase compiles source code into bitcode file. The resulting; // bitcode files, along with object files and libraries, will be fed to the; // linker to through the IPO and Post-IPO phases. By using obj-file extension,; // the resulting bitcode file disguises itself as an object file, and therefore; // obviates the need of writing a special set of the make-rules only for LTO; // compilation.; //; // The IPO phase perform inter-procedural analyses and optimizations, and; // the Post-IPO consists two sub-phases: intra-procedural scalar optimizations; // (SOPT), and intra-procedural target-dependent code generator (CG).; //; // As of this writing, we don't separate IPO and the Post-IPO SOPT. They; // are intermingled together, and are driven by a single pass manager (see; // PassManagerBuilder::populateLTOPassManager()).; // FIXME: populateLTOPassManager no longer exists.; //; // The ""LTOCodeGenerator"" is the driver for the IPO and Post-IPO stages.; // The ""CodeGenerator"" here is bit confusing. Don't confuse the ""CodeGenerator""; // with the machine specific code generator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:42,Performance,Optimiz,Optimizer,42,"//===-LTOCodeGenerator.h - LLVM Link Time Optimizer -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOCodeGenerator class.; //; // LTO compilation consists of three phases: Pre-IPO, IPO and Post-IPO.; //; // The Pre-IPO phase compiles source code into bitcode file. The resulting; // bitcode files, along with object files and libraries, will be fed to the; // linker to through the IPO and Post-IPO phases. By using obj-file extension,; // the resulting bitcode file disguises itself as an object file, and therefore; // obviates the need of writing a special set of the make-rules only for LTO; // compilation.; //; // The IPO phase perform inter-procedural analyses and optimizations, and; // the Post-IPO consists two sub-phases: intra-procedural scalar optimizations; // (SOPT), and intra-procedural target-dependent code generator (CG).; //; // As of this writing, we don't separate IPO and the Post-IPO SOPT. They; // are intermingled together, and are driven by a single pass manager (see; // PassManagerBuilder::populateLTOPassManager()).; // FIXME: populateLTOPassManager no longer exists.; //; // The ""LTOCodeGenerator"" is the driver for the IPO and Post-IPO stages.; // The ""CodeGenerator"" here is bit confusing. Don't confuse the ""CodeGenerator""; // with the machine specific code generator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:942,Performance,perform,perform,942,"//===-LTOCodeGenerator.h - LLVM Link Time Optimizer -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOCodeGenerator class.; //; // LTO compilation consists of three phases: Pre-IPO, IPO and Post-IPO.; //; // The Pre-IPO phase compiles source code into bitcode file. The resulting; // bitcode files, along with object files and libraries, will be fed to the; // linker to through the IPO and Post-IPO phases. By using obj-file extension,; // the resulting bitcode file disguises itself as an object file, and therefore; // obviates the need of writing a special set of the make-rules only for LTO; // compilation.; //; // The IPO phase perform inter-procedural analyses and optimizations, and; // the Post-IPO consists two sub-phases: intra-procedural scalar optimizations; // (SOPT), and intra-procedural target-dependent code generator (CG).; //; // As of this writing, we don't separate IPO and the Post-IPO SOPT. They; // are intermingled together, and are driven by a single pass manager (see; // PassManagerBuilder::populateLTOPassManager()).; // FIXME: populateLTOPassManager no longer exists.; //; // The ""LTOCodeGenerator"" is the driver for the IPO and Post-IPO stages.; // The ""CodeGenerator"" here is bit confusing. Don't confuse the ""CodeGenerator""; // with the machine specific code generator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:980,Performance,optimiz,optimizations,980,"//===-LTOCodeGenerator.h - LLVM Link Time Optimizer -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOCodeGenerator class.; //; // LTO compilation consists of three phases: Pre-IPO, IPO and Post-IPO.; //; // The Pre-IPO phase compiles source code into bitcode file. The resulting; // bitcode files, along with object files and libraries, will be fed to the; // linker to through the IPO and Post-IPO phases. By using obj-file extension,; // the resulting bitcode file disguises itself as an object file, and therefore; // obviates the need of writing a special set of the make-rules only for LTO; // compilation.; //; // The IPO phase perform inter-procedural analyses and optimizations, and; // the Post-IPO consists two sub-phases: intra-procedural scalar optimizations; // (SOPT), and intra-procedural target-dependent code generator (CG).; //; // As of this writing, we don't separate IPO and the Post-IPO SOPT. They; // are intermingled together, and are driven by a single pass manager (see; // PassManagerBuilder::populateLTOPassManager()).; // FIXME: populateLTOPassManager no longer exists.; //; // The ""LTOCodeGenerator"" is the driver for the IPO and Post-IPO stages.; // The ""CodeGenerator"" here is bit confusing. Don't confuse the ""CodeGenerator""; // with the machine specific code generator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:1065,Performance,optimiz,optimizations,1065,"//===-LTOCodeGenerator.h - LLVM Link Time Optimizer -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOCodeGenerator class.; //; // LTO compilation consists of three phases: Pre-IPO, IPO and Post-IPO.; //; // The Pre-IPO phase compiles source code into bitcode file. The resulting; // bitcode files, along with object files and libraries, will be fed to the; // linker to through the IPO and Post-IPO phases. By using obj-file extension,; // the resulting bitcode file disguises itself as an object file, and therefore; // obviates the need of writing a special set of the make-rules only for LTO; // compilation.; //; // The IPO phase perform inter-procedural analyses and optimizations, and; // the Post-IPO consists two sub-phases: intra-procedural scalar optimizations; // (SOPT), and intra-procedural target-dependent code generator (CG).; //; // As of this writing, we don't separate IPO and the Post-IPO SOPT. They; // are intermingled together, and are driven by a single pass manager (see; // PassManagerBuilder::populateLTOPassManager()).; // FIXME: populateLTOPassManager no longer exists.; //; // The ""LTOCodeGenerator"" is the driver for the IPO and Post-IPO stages.; // The ""CodeGenerator"" here is bit confusing. Don't confuse the ""CodeGenerator""; // with the machine specific code generator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:35,Performance,optimiz,optimization,35,"/// Pass options to the driver and optimization passes.; ///; /// These options are not necessarily for debugging purpose (the function; /// name is misleading). This function should be called before; /// LTOCodeGenerator::compilexxx(), and; /// LTOCodeGenerator::writeMergedModules().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:4,Performance,Optimiz,Optimizes,4,/// Optimizes the merged module. Returns true on success.; ///; /// Calls \a verifyMergedModuleOnce().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:24,Performance,optimiz,optimized,24,"/// Compiles the merged optimized module into a single output file. It brings; /// the output to a buffer, and returns the buffer to the caller. Return NULL; /// if the compilation was not successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:23,Performance,optimiz,optimized,23,"/// Compile the merged optimized module \p ParallelismLevel output files each; /// representing a linkable partition of the module. If out contains more; /// than one element, code generation is done in parallel with \p; /// ParallelismLevel threads. Output files will be written to the streams; /// created using the \p AddStream callback. Returns true on success.; ///; /// Calls \a verifyMergedModuleOnce().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h:52,Performance,optimiz,optimizer,52,/// Enable the Freestanding mode: indicate that the optimizer should not; /// assume builtins are present on the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h:35,Performance,Optimiz,Optimizer,35,"//===-LTOModule.h - LLVM Link Time Optimizer ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the LTOModule class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h:149,Performance,load,loaded,149,"/// Parse metadata from the module; // FIXME: it only parses ""llvm.linker.options"" metadata at the moment; // FIXME: can't access metadata in lazily loaded modules",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h:123,Security,access,access,123,"/// Parse metadata from the module; // FIXME: it only parses ""llvm.linker.options"" metadata at the moment; // FIXME: can't access metadata in lazily loaded modules",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:513,Integrability,interface,interface,513,"//===-ThinLTOCodeGenerator.h - LLVM Link Time Optimizer -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the ThinLTOCodeGenerator class, similar to the; // LTOCodeGenerator but for the ThinLTO scheme. It provides an interface for; // linker plugin.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:538,Modifiability,plugin,plugin,538,"//===-ThinLTOCodeGenerator.h - LLVM Link Time Optimizer -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the ThinLTOCodeGenerator class, similar to the; // LTOCodeGenerator but for the ThinLTO scheme. It provides an interface for; // linker plugin.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:46,Performance,Optimiz,Optimizer,46,"//===-ThinLTOCodeGenerator.h - LLVM Link Time Optimizer -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the ThinLTOCodeGenerator class, similar to the; // LTOCodeGenerator but for the ThinLTO scheme. It provides an interface for; // linker plugin.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:72,Energy Efficiency,adapt,adapted,72,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:25,Integrability,interface,interface,25,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:72,Modifiability,adapt,adapted,72,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:273,Performance,perform,perform,273,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:293,Performance,optimiz,optimizations,293,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:136,Performance,optimiz,optimized,136,"/**; * Adds to a list of all global symbols that must exist in the final generated; * code. If a symbol is not listed there, it will be optimized away if it is; * inlined into every usage.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:201,Performance,optimiz,optimized,201,"/**; * Adds to a list of all global symbols that are cross-referenced between; * ThinLTO files. If the ThinLTO CodeGenerator can ensure that every; * references from a ThinLTO module to this symbol is optimized away, then; * the symbol can be discarded.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:249,Availability,avail,available,249,"/**; * Process all the modules that were added to the code generator in parallel.; *; * Client can access the resulting object files using getProducedBinaries(),; * unless setGeneratedObjectsDirectory() has been called, in which case; * results are available through getProducedBinaryFiles().; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:99,Security,access,access,99,"/**; * Process all the modules that were added to the code generator in parallel.; *; * Client can access the resulting object files using getProducedBinaries(),; * unless setGeneratedObjectsDirectory() has been called, in which case; * results are available through getProducedBinaryFiles().; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:185,Availability,avail,available,185,"/**; * Return the ""in memory"" binaries produced by the code generator. This is; * filled after run() unless setGeneratedObjectsDirectory() has been; * called, in which case results are available through; * getProducedBinaryFiles().; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:181,Availability,avail,available,181,"/**; * Return the ""on-disk"" binaries produced by the code generator. This is; * filled after run() when setGeneratedObjectsDirectory() has been; * called, in which case results are available through getProducedBinaries().; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:61,Performance,Cache,Cache,61,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:132,Performance,cache,cache,132,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:143,Performance,cache,cache,143,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:267,Performance,cache,cache,267,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:590,Performance,cache,cache,590,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:915,Performance,cache,cache,915,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:433,Safety,avoid,avoid,433,"/**; * \defgroup Options setters; * @{; */; /**; * \defgroup Cache controlling options; *; * These entry points control the ThinLTO cache. The cache is intended to; * support incremental build, and thus needs to be persistent accross build.; * The client enabled the cache by supplying a path to an existing directory.; * The code generator will use this to store objects files that may be reused; * during a subsequent build.; * To avoid filling the disk space, a few knobs are provided:; * - The pruning interval limit the frequency at which the garbage collector; * will try to scan the cache directory to prune it from expired entries.; * Setting to -1 disable the pruning (default). Setting to 0 will force; * pruning to occur.; * - The pruning expiration time indicates to the garbage collector how old; * an entry needs to be to be removed.; * - Finally, the garbage collector can be instructed to prune the cache till; * the occupied space goes below a threshold.; * @{; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:15,Performance,cache,cache,15,"// Path to the cache, empty to disable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:53,Performance,cache,cached,53,/// Provide a path to a directory where to store the cached files for; /// incremental build.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:4,Performance,Cache,Cache,4,/// Cache policy: interval (seconds) between two prunes of the cache. Set to a; /// negative value to disable pruning. A value of 0 will force pruning to; /// occur.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:63,Performance,cache,cache,63,/// Cache policy: interval (seconds) between two prunes of the cache. Set to a; /// negative value to disable pruning. A value of 0 will force pruning to; /// occur.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:4,Performance,Cache,Cache,4,/// Cache policy: expiration (in seconds) for an entry.; /// A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:105,Availability,avail,available,105,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:239,Availability,avail,available,239,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:370,Availability,Avail,AvailableSpace,370,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:435,Availability,Avail,AvailableSpace,435,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:281,Energy Efficiency,reduce,reduced,281,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:24,Performance,cache,cache,24,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:194,Performance,cache,cache,194,"/**; * Sets the maximum cache size that can be persistent across build, in terms; * of percentage of the available space on the disk. Set to 100 to indicate; * no limit, 50 to indicate that the cache size will not be left over; * half the available space. A value over 100 will be reduced to 100, and a; * value of 0 will be ignored.; *; *; * The formula looks like:; * AvailableSpace = FreeSpace + ExistingCacheSize; * NewCacheSize = AvailableSpace * P/100; *; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:101,Availability,avail,available,101,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:167,Availability,avail,available,167,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:137,Energy Efficiency,reduce,reduced,137,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:4,Performance,Cache,Cache,4,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:43,Performance,cache,cache,43,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:4,Performance,Cache,Cache,4,/// Cache policy: the maximum number of files in the cache directory. A value; /// of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:53,Performance,cache,cache,53,/// Cache policy: the maximum number of files in the cache directory. A value; /// of 0 will be ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:191,Availability,avail,available,191,"/// Set the path to a directory where to save generated object files. This; /// path can be used by a linker to request on-disk files instead of in-memory; /// buffers. When set, results are available through getProducedBinaryFiles(); /// instead of getProducedBinaries().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:52,Performance,optimiz,optimizer,52,/// Enable the Freestanding mode: indicate that the optimizer should not; /// assume builtins are present on the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:12,Performance,optimiz,optimization,12,/// CodeGen optimization level,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,optimiz,optimization,7,/// IR optimization level: from 0 to 3.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:4,Performance,Perform,Perform,4,/// Perform CodeGen only: disable all other stages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:137,Deployability,update,updated,137,"/**; * Perform promotion and renaming of exported internal functions,; * and additionally resolve weak and linkonce symbols.; * Index is updated to reflect linkage changes from weak resolution.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,Perform,Perform,7,"/**; * Perform promotion and renaming of exported internal functions,; * and additionally resolve weak and linkonce symbols.; * Index is updated to reflect linkage changes from weak resolution.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,Perform,Perform,7,/**; * Perform cross-module importing for the module identified by; * ModuleIdentifier.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:41,Deployability,update,updated,41,/**; * Perform internalization. Index is updated to reflect linkage changes.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,Perform,Perform,7,/**; * Perform internalization. Index is updated to reflect linkage changes.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,Perform,Perform,7,/**; * Perform post-importing ThinLTO optimizations.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:38,Performance,optimiz,optimizations,38,/**; * Perform post-importing ThinLTO optimizations.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:84,Performance,Cache,Cache,84,"/**; * Write temporary object file to SavedObjectDirectoryPath, write symlink; * to Cache directory if needed. Returns the path to the generated file in; * SavedObjectsDirectoryPath.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:83,Performance,optimiz,optimizations,83,"/// Flag to enable/disable CodeGen. When set to true, the process stops after; /// optimizations and a bitcode is produced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:51,Performance,perform,performed,51,"/// Flag to indicate that only the CodeGen will be performed, no cross-module; /// importing or optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:96,Performance,optimiz,optimization,96,"/// Flag to indicate that only the CodeGen will be performed, no cross-module; /// importing or optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:30,Performance,optimiz,optimizer,30,/// Flag to indicate that the optimizer should not assume builtins are present; /// on the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:7,Performance,Optimiz,Optimization,7,/// IR Optimization Level [0-3].,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h:11,Deployability,Update,UpdateCompilerUsed,11,"//==------ UpdateCompilerUsed.h - LLVM Link Time Optimizer Utility --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares a helper class to update llvm.compiler_used metadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h:420,Deployability,update,update,420,"//==------ UpdateCompilerUsed.h - LLVM Link Time Optimizer Utility --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares a helper class to update llvm.compiler_used metadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h:49,Performance,Optimiz,Optimizer,49,"//==------ UpdateCompilerUsed.h - LLVM Link Time Optimizer Utility --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares a helper class to update llvm.compiler_used metadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h:180,Deployability,update,update,180,"/// Find all globals in \p TheModule that are referenced in; /// \p AsmUndefinedRefs, as well as the user-supplied functions definitions that; /// are also libcalls, and create or update the magic ""llvm.compiler_used""; /// global in \p TheModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/UpdateCompilerUsed.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:165,Availability,mask,mask,165,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:255,Availability,mask,masks,255,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:19,Integrability,interface,interface,19,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:52,Integrability,interface,interface,52,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:29,Usability,user-friendly,user-friendly,29,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h:407,Usability,simpl,simple,407,"// TODO: Make this interface user-friendly.; // The interface here is bad, and we'll want to change this in the future. We; // probably will want to build out these mask vectors as vectors of bools and; // have this utility object convert them to the bit masks. I don't want to; // over-engineer this API now since we don't know what the data coming in to; // feed it will look like, so I kept it extremely simple for the immediate use; // case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/DXContainerPSVInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h:481,Availability,mask,mask,481,"//===- llvm/MC/LaneBitmask.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A common definition of LaneBitmask for use in TableGen and CodeGen.; ///; /// A lane mask is a bitmask representing the covering of a register with; /// sub-registers.; ///; /// This is typically used to track liveness at sub-register granularity.; /// Lane masks for sub-register indices are similar to register units for; /// physical registers. The individual bits in a lane mask can't be assigned; /// any specific meaning. They can be used to check if two sub-register; /// indices overlap.; ///; /// Iff the target has a register such that:; ///; /// getSubReg(Reg, A) overlaps getSubReg(Reg, B); ///; /// then:; ///; /// (getSubRegIndexLaneMask(A) & getSubRegIndexLaneMask(B)) != 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h:654,Availability,mask,masks,654,"//===- llvm/MC/LaneBitmask.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A common definition of LaneBitmask for use in TableGen and CodeGen.; ///; /// A lane mask is a bitmask representing the covering of a register with; /// sub-registers.; ///; /// This is typically used to track liveness at sub-register granularity.; /// Lane masks for sub-register indices are similar to register units for; /// physical registers. The individual bits in a lane mask can't be assigned; /// any specific meaning. They can be used to check if two sub-register; /// indices overlap.; ///; /// Iff the target has a register such that:; ///; /// getSubReg(Reg, A) overlaps getSubReg(Reg, B); ///; /// then:; ///; /// (getSubRegIndexLaneMask(A) & getSubRegIndexLaneMask(B)) != 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h:774,Availability,mask,mask,774,"//===- llvm/MC/LaneBitmask.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A common definition of LaneBitmask for use in TableGen and CodeGen.; ///; /// A lane mask is a bitmask representing the covering of a register with; /// sub-registers.; ///; /// This is typically used to track liveness at sub-register granularity.; /// Lane masks for sub-register indices are similar to register units for; /// physical registers. The individual bits in a lane mask can't be assigned; /// any specific meaning. They can be used to check if two sub-register; /// indices overlap.; ///; /// Iff the target has a register such that:; ///; /// getSubReg(Reg, A) overlaps getSubReg(Reg, B); ///; /// then:; ///; /// (getSubRegIndexLaneMask(A) & getSubRegIndexLaneMask(B)) != 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/LaneBitmask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h:428,Usability,simpl,simple,428,"//===- llvm/MC/MachineLocation.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // The MachineLocation class is used to represent a simple location in a machine; // frame. Locations will be one of two forms; a register or an address formed; // from a base address plus an offset. Register indirection can be specified by; // explicitly passing an offset to the constructor.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h:3,Security,Access,Accessors,3,// Accessors.; /// \return true iff this is a register-indirect location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:12,Integrability,interface,interface,12,/// Generic interface to target specific assembler backends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:166,Performance,optimiz,optimization,166,/// Return true if this target allows an unrelaxable instruction to be; /// emitted into RelaxableFragment and then we can increase its size in a; /// tricky way for optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:105,Performance,optimiz,optimization,105,"/// Give the target a chance to manipulate state related to instruction; /// alignment (e.g. padding for optimization), instruction relaxablility, etc.; /// before and after actually emitting the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:23,Integrability,Interface,Interfaces,23,/// \name Target Fixup Interfaces; /// @{; /// Get the number of target specific fixup kinds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:167,Availability,Error,Errors,167,"/// Apply the \p Value for given \p Fixup into the provided data fragment, at; /// the offset specified by the fixup and following the fixup kind as; /// appropriate. Errors (such as an out of range fixup value) should be; /// reported via \p Ctx.; /// The \p STI is present only for fragments of type MCRelaxableFragment and; /// MCDataFragment with hasInstructions() == true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:36,Integrability,Interface,Interfaces,36,/// @}; /// \name Target Relaxation Interfaces; /// @{; /// Check whether the given instruction may need relaxation.; ///; /// \param Inst - The instruction to test.; /// \param STI - The MCSubtargetInfo in effect when the instruction was; /// encoded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:160,Testability,test,test,160,/// @}; /// \name Target Relaxation Interfaces; /// @{; /// Check whether the given instruction may need relaxation.; ///; /// \param Inst - The instruction to test.; /// \param STI - The MCSubtargetInfo in effect when the instruction was; /// encoded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:4,Usability,Simpl,Simple,4,/// Simple predicate for targets where !Resolved implies requiring relaxation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:177,Usability,simpl,simple,177,/// @}; /// Returns the minimum size of a nop in bytes on this target. The assembler; /// will use this to emit excess padding in situations where the padding; /// required for simple alignment would be less than the minimum nop size.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:144,Availability,error,error,144,"/// Write an (optimal) nop sequence of Count bytes to the given output. If the; /// target cannot generate such a sequence, it should return an error.; ///; /// \return - True on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:20,Energy Efficiency,Power,PowerPC,20,"/// Windows CE ARM, PowerPC, SH3, SH4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:132,Modifiability,config,configure,132,"//===------------------------------------------------------------------===//; // Properties to be set by the target writer, used to configure asm printer.; //; /// Code pointer size in bytes. Default is 4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:53,Energy Efficiency,power,power-of-two,53,/// True if .align is to be used for alignment. Only power-of-two; /// alignment is supported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:16,Modifiability,Variab,Variable,16,"//===--- Global Variable Emission Directives --------------------------===//; /// This is the directive used to declare a global entity. Defaults to; /// "".globl"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:92,Security,sanitiz,sanitizers,92,/// True if target uses CFI unwind information for other purposes than EH; /// (debugging / sanitizers) when `ExceptionsType == ExceptionHandling::None`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:9,Deployability,Integrat,Integrated,9,"//===--- Integrated Assembler Information ----------------------------===//; // Generated object files can use all ELF features supported by GNU ld of; // this binutils version and later. INT_MAX means all features can be used,; // regardless of GNU ld support. The default value is referenced by; // clang/Driver/Options.td.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:9,Integrability,Integrat,Integrated,9,"//===--- Integrated Assembler Information ----------------------------===//; // Generated object files can use all ELF features supported by GNU ld of; // this binutils version and later. INT_MAX means all features can be used,; // regardless of GNU ld support. The default value is referenced by; // clang/Driver/Options.td.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:22,Deployability,integrat,integrated,22,/// Should we use the integrated assembler?; /// The integrated assembler should be enabled by default (by the; /// constructors) when failing to parse a valid piece of assembly (inline; /// or otherwise) is considered a bug. It may then be overridden after; /// construction (see LLVMTargetMachine::initAsmInfo()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:53,Deployability,integrat,integrated,53,/// Should we use the integrated assembler?; /// The integrated assembler should be enabled by default (by the; /// constructors) when failing to parse a valid piece of assembly (inline; /// or otherwise) is considered a bug. It may then be overridden after; /// construction (see LLVMTargetMachine::initAsmInfo()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:22,Integrability,integrat,integrated,22,/// Should we use the integrated assembler?; /// The integrated assembler should be enabled by default (by the; /// constructors) when failing to parse a valid piece of assembly (inline; /// or otherwise) is considered a bug. It may then be overridden after; /// construction (see LLVMTargetMachine::initAsmInfo()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:53,Integrability,integrat,integrated,53,/// Should we use the integrated assembler?; /// The integrated assembler should be enabled by default (by the; /// constructors) when failing to parse a valid piece of assembly (inline; /// or otherwise) is considered a bug. It may then be overridden after; /// construction (see LLVMTargetMachine::initAsmInfo()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:16,Deployability,integrat,integrated,16,/// True if the integrated assembler should interpret 'a >> b' constant; /// expressions as logical rather than arithmetic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:16,Integrability,integrat,integrated,16,/// True if the integrated assembler should interpret 'a >> b' constant; /// expressions as logical rather than arithmetic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:92,Testability,log,logical,92,/// True if the integrated assembler should interpret 'a >> b' constant; /// expressions as logical rather than arithmetic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:18,Security,access,accessors,18,// Data directive accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:3,Security,Access,Accessors,3,// Accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:323,Energy Efficiency,efficient,efficiently,323,"/// Encapsulates the layout of an assembly file at a particular point in time.; ///; /// Assembly may require computing multiple layouts for a particular assembly; /// file as part of the relaxation process. This class encapsulates the layout; /// at a single point in time in such a way that it is always possible to; /// efficiently compute the exact address of any symbol in the assembly file,; /// even during the relaxation process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:124,Deployability,update,updated,124,"/// Invalidate the fragments starting with F because it has been; /// resized. The fragment's size should have already been updated, but; /// its bundle padding will be recomputed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:4,Performance,Perform,Perform,4,"/// Perform layout for a single fragment, assuming that the previous; /// fragment has already been laid out correctly, and the parent section has; /// been initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:18,Security,Access,Access,18,/// \name Section Access (in layout order); /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:33,Availability,error,error,33,/// Variant that reports a fatal error if the offset is not computable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h:220,Safety,safe,safe,220,"/// Get the string for the current token, this includes all characters (for; /// example, the quotes on strings) in the token.; ///; /// The returned StringRef points into the source manager's memory buffer, and; /// is safe to store across calls to Lex().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h:130,Availability,recover,recovery,130,"// FIXME: Don't compute this in advance, it makes every token larger, and is; // also not generally what we want (it is nicer for recovery etc. to lex 123br; // as a single token, then diagnose as an invalid number).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h:130,Safety,recover,recovery,130,"// FIXME: Don't compute this in advance, it makes every token larger, and is; // also not generally what we want (it is nicer for recovery etc. to lex 123br; // as a single token, then diagnose as an invalid number).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmMacro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:19,Deployability,deploy,deployment,19,/// MachO specific deployment target version info.; // A Major version of 0 indicates that no version information was supplied; // and so the corresponding load command should not be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:156,Performance,load,load,156,/// MachO specific deployment target version info.; // A Major version of 0 indicates that no version information was supplied; // and so the corresponding load command should not be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:305,Modifiability,refactor,refactoring,305,"/// The set of function symbols for which a .thumb_func directive has; /// been seen.; //; // FIXME: We really would like this in target specific code rather than; // here. Maybe when the relocation stuff moves to target specific,; // this can go with it? The streamer would need some target specific; // refactoring too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:147,Deployability,integrat,integrated,147,/// ELF specific e_header flags; // It would be good if there were an MCELFAssembler class to hold this.; // ELF header flags are used both by the integrated and standalone assemblers.; // Access to the flags is necessary in cases where assembler directives affect; // which flags to be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:147,Integrability,integrat,integrated,147,/// ELF specific e_header flags; // It would be good if there were an MCELFAssembler class to hold this.; // ELF header flags are used both by the integrated and standalone assemblers.; // Access to the flags is necessary in cases where assembler directives affect; // which flags to be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:189,Security,Access,Access,189,/// ELF specific e_header flags; // It would be good if there were an MCELFAssembler class to hold this.; // ELF header flags are used both by the integrated and standalone assemblers.; // Access to the flags is necessary in cases where assembler directives affect; // which flags to be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:31,Performance,Optimiz,Optimization,31,/// Used to communicate Linker Optimization Hint information between; /// the Streamer and the .o writer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:4,Performance,Perform,Perform,4,/// Perform one layout iteration and return true if any offsets; /// were adjusted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:4,Performance,Perform,Perform,4,/// Perform one layout iteration of the given section and return true; /// if any offsets were adjusted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:4,Performance,Perform,Perform,4,/// Perform relaxation on a single fragment - returns true if the fragment; /// changes as a result of relaxation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:75,Modifiability,parameteriz,parameterize,75,"/// Construct a new assembler instance.; //; // FIXME: How are we going to parameterize this? Two obvious options are stay; // concrete and require clients to pass in a target like object. The other; // option is to make this abstract, and have targets provide concrete; // implementations as we do with AsmParser.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:10,Deployability,deploy,deployment,10,/// MachO deployment target version information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:23,Security,Access,Access,23,/// \name Section List Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:30,Security,Access,Access,30,/// @}; /// \name Symbol List Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:39,Security,Access,Access,39,"/// @}; /// \name Indirect Symbol List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:173,Security,access,access,173,"/// @}; /// \name Indirect Symbol List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:37,Security,Access,Access,37,/// @}; /// \name Linker Option List Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:35,Security,Access,Access,35,"/// @}; /// \name Data Region List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:169,Security,access,access,169,"/// @}; /// \name Data Region List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:35,Security,Access,Access,35,"/// @}; /// \name Data Region List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:169,Security,access,access,169,"/// @}; /// \name Data Region List Access; /// @{; // FIXME: This is a total hack, this should not be here. Once things are; // factored so that the streamer has direct access to the .o writer, it can; // disappear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:31,Security,Access,Access,31,/// @}; /// \name Backend Data Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h:49,Integrability,interface,interface,49,/// MCCodeEmitter - Generic instruction encoding interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:19,Security,checksum,checksum,19,/// Emits the file checksum substream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:30,Security,checksum,checksum,30,/// Emits the offset into the checksum table of the given file number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:3,Security,Checksum,Checksum,3,"// Checksum offset stored as a symbol because it might be requested; // before it has been calculated, so a fixup may be needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:50,Security,checksum,checksum,50,/// Indicate whether we have already laid out the checksum table addresses or; /// not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:134,Energy Efficiency,allocate,allocated,134,/// Allocator object used for creating machine code objects.; ///; /// We use a bump pointer allocator to avoid the need to track all allocated; /// objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:106,Safety,avoid,avoid,106,/// Allocator object used for creating machine code objects.; ///; /// We use a bump pointer allocator to avoid the need to track all allocated; /// objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:172,Availability,error,error,172,/// The file name of the log file from the environment variable; /// AS_SECURE_LOG_FILE. Which must be set before the .secure_log_unique; /// directive is used or it is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:55,Modifiability,variab,variable,55,/// The file name of the log file from the environment variable; /// AS_SECURE_LOG_FILE. Which must be set before the .secure_log_unique; /// directive is used or it is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:25,Testability,log,log,25,/// The file name of the log file from the environment variable; /// AS_SECURE_LOG_FILE. Which must be set before the .secure_log_unique; /// directive is used or it is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:86,Availability,error,errors,86,/// Boolean toggled when .secure_log_unique / .secure_log_reset is seen to; /// catch errors if .secure_log_unique appears twice without; /// .secure_log_reset appearing between them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:12,Deployability,toggle,toggled,12,/// Boolean toggled when .secure_log_unique / .secure_log_reset is seen to; /// catch errors if .secure_log_unique appears twice without; /// .secure_log_reset appearing between them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:128,Energy Efficiency,reduce,reduce,128,"/// The dwarf file and directory tables from the dwarf .file directive.; /// We now emit a line table for each compile unit. To reduce the prologue; /// size of each line table, the files and directories used by each compile; /// unit are separated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:157,Safety,avoid,avoid,157,"// This set is used to record the generic mergeable section names seen.; // These are sections that are created as mergeable e.g. .debug_str. We need; // to avoid assigning non-mergeable symbols to these sections. It is used; // to prevent non-mergeable symbols being explicitly assigned to mergeable; // sections (e.g. via _attribute_((section(""myname"")))).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:81,Modifiability,variab,variable,81,/// Gets a symbol that will be defined to the final stack offset of a local; /// variable after codegen.; ///; /// \param Idx - The index of a local variable passed to \@llvm.localescape.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:149,Modifiability,variab,variable,149,/// Gets a symbol that will be defined to the final stack offset of a local; /// variable after codegen.; ///; /// \param Idx - The index of a local variable passed to \@llvm.localescape.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:222,Modifiability,config,configure,222,/// Get a section with the provided group identifier. This section is; /// named by concatenating \p Prefix with '.' then \p Suffix. The \p Type; /// describes the type of the section and \p Flags are used to further; /// configure this named section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:38,Availability,error,error,38,/// Get the main file name for use in error messages and debug; /// info. This can be set to ensure we've got the correct file name; /// after preprocessing or for -save-temps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:44,Integrability,message,messages,44,/// Get the main file name for use in error messages and debug; /// info. This can be set to ensure we've got the correct file name; /// after preprocessing or for -save-temps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:24,Security,checksum,checksum,24,/// Reports whether MD5 checksum usage is consistent (all-or-none).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:370,Availability,error,error,370,"// end namespace llvm; // operator new and delete aren't allowed inside namespaces.; // The throw specifications are mandated by the standard.; /// Placement new for using the MCContext's allocator.; ///; /// This placement form of operator new uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new, which means that it returns; /// null on error. (If that is what the allocator does. The current does, so if; /// this ever changes, this operator will have to be changed, too.); /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);; /// // Specific alignment; /// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:1019,Energy Efficiency,allocate,allocate,1019,"// end namespace llvm; // operator new and delete aren't allowed inside namespaces.; // The throw specifications are mandated by the standard.; /// Placement new for using the MCContext's allocator.; ///; /// This placement form of operator new uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new, which means that it returns; /// null on error. (If that is what the allocator does. The current does, so if; /// this ever changes, this operator will have to be changed, too.); /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);; /// // Specific alignment; /// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:1157,Energy Efficiency,allocate,allocated,1157,"// end namespace llvm; // operator new and delete aren't allowed inside namespaces.; // The throw specifications are mandated by the standard.; /// Placement new for using the MCContext's allocator.; ///; /// This placement form of operator new uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new, which means that it returns; /// null on error. (If that is what the allocator does. The current does, so if; /// this ever changes, this operator will have to be changed, too.); /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);; /// // Specific alignment; /// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:1239,Energy Efficiency,allocate,allocated,1239,"// end namespace llvm; // operator new and delete aren't allowed inside namespaces.; // The throw specifications are mandated by the standard.; /// Placement new for using the MCContext's allocator.; ///; /// This placement form of operator new uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new, which means that it returns; /// null on error. (If that is what the allocator does. The current does, so if; /// this ever changes, this operator will have to be changed, too.); /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);; /// // Specific alignment; /// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:169,Availability,error,error,169,"/// This placement form of operator new[] uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new[], which means that it returns; /// null on error.; /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// char *data = new (Context) char[10];; /// // Specific alignment; /// char *data = new (Context, 4) char[10];; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:637,Energy Efficiency,allocate,allocate,637,"/// This placement form of operator new[] uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new[], which means that it returns; /// null on error.; /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// char *data = new (Context) char[10];; /// // Specific alignment; /// char *data = new (Context, 4) char[10];; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:775,Energy Efficiency,allocate,allocated,775,"/// This placement form of operator new[] uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new[], which means that it returns; /// null on error.; /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// char *data = new (Context) char[10];; /// // Specific alignment; /// char *data = new (Context, 4) char[10];; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:857,Energy Efficiency,allocate,allocated,857,"/// This placement form of operator new[] uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new[], which means that it returns; /// null on error.; /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// char *data = new (Context) char[10];; /// // Specific alignment; /// char *data = new (Context, 4) char[10];; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:66,Energy Efficiency,allocate,allocated,66,"/// The MD5 checksum, if there is one. Non-owning pointer to data allocated; /// in MCContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:12,Security,checksum,checksum,12,"/// The MD5 checksum, if there is one. Non-owning pointer to data allocated; /// in MCContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:62,Energy Efficiency,allocate,allocated,62,/// The source code of the file. Non-owning reference to data allocated in; /// MCContext.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:123,Deployability,update,update,123,"/// First special line opcode - leave room for the standard opcodes.; /// Note: If you want to change this, you'll have to update the; /// ""StandardOpcodeLengths"" table that is emitted in; /// \c Emit().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:10,Deployability,Update,Update,10,"// FIXME: Update the remaining docs to use the new proposal wording.; /// .cfi_llvm_def_aspace_cfa defines the rule for computing the CFA to; /// be the result of evaluating the DWARF operation expression; /// `DW_OP_constu AS; DW_OP_aspace_bregx R, B` as a location description.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:14,Integrability,wrap,wrapper,14,/// A special wrapper for .cfi_escape that indicates GNU_ARGS_SIZE,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h:55,Integrability,Interface,Interface,55,"//===- MCDXContainerStreamer.h - MCDXContainerStreamer Interface ---*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; // The DXContainer format isn't a fully featured object format. It doesn't; // support symbols, and initially it will not support instruction data since it; // is used as a bitcode container for DXIL.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h:451,Testability,stub,stubs,451,"//===- MCDXContainerStreamer.h - MCDXContainerStreamer Interface ---*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; // The DXContainer format isn't a fully featured object format. It doesn't; // support symbols, and initially it will not support instruction data since it; // is used as a bitcode container for DXIL.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h:10,Security,Access,Accessors,10,/// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h:23,Security,access,accessors,23,// N64 relocation type accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h:52,Integrability,Interface,Interface,52,"//===- MCELFStreamer.h - MCStreamer ELF Object File Interface ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h:21,Integrability,Interface,Interface,21,/// \name MCStreamer Interface; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:10,Security,Access,Accessors,10,/// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:310,Availability,avail,available,310,"/// Try to evaluate the expression to a relocatable value, i.e. an; /// expression of the fixed form (a - b + constant).; ///; /// \param Res - The relocatable value, if evaluation succeeds.; /// \param Layout - The assembler layout object to use for evaluating values.; /// \param Fixup - The Fixup object if available.; /// \return - True on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:232,Availability,avail,available,232,"/// Try to evaluate the expression to the form (a - b + constant) where; /// neither a nor b are variables.; ///; /// This is a more aggressive variant of evaluateAsRelocatable. The intended; /// use is for when relocations are not available, like the .size directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:97,Modifiability,variab,variables,97,"/// Try to evaluate the expression to the form (a - b + constant) where; /// neither a nor b are variables.; ///; /// This is a more aggressive variant of evaluateAsRelocatable. The intended; /// use is for when relocations are not available, like the .size directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:163,Modifiability,variab,variable,163,"/// Represent a reference to a symbol from inside an expression.; ///; /// A symbol reference in an expression may be a use of a label, a use of an; /// assembler variable (defined constant), or constitute an implicit definition; /// of the symbol as external.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:23,Modifiability,variab,variable,23,// Mach-O thread local variable relocations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Testability,Log,Logical,5,///< Logical negation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors; /// @{; /// Get the kind of this unary expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Testability,Log,Logical,5,///< Logical and.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Testability,Log,Logical,5,///< Logical or.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Testability,Log,Logical,5,///< Logical shift right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors; /// @{; /// Get the kind of this binary expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:198,Energy Efficiency,allocate,allocated,198,/// This is an extension point for target-specific MCExpr subclasses to; /// implement.; ///; /// NOTE: All subclasses are required to have trivial destructors because; /// MCExprs are bump pointer allocated and not destructed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:55,Deployability,Patch,Patching,55,"//===-- llvm/MC/MCFixup.h - Instruction Relocation and Patching -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:706,Availability,error,errors,706,"/// Encode information on a single operation to perform on a byte; /// sequence (e.g., an encoded instruction) which requires assemble- or run-; /// time patching.; ///; /// Fixups are used any time the target instruction encoder needs to represent; /// some value in an instruction which is not yet concrete. The encoder will; /// encode the instruction assuming the value is 0, and emit a fixup which; /// communicates to the assembler backend how it should rewrite the encoded; /// value.; ///; /// During the process of relaxation, the assembler will apply fixups as; /// symbolic values become concrete. When relaxation is complete, any remaining; /// fixups become relocations in the object file (or errors, if the fixup cannot; /// be encoded on the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:154,Deployability,patch,patching,154,"/// Encode information on a single operation to perform on a byte; /// sequence (e.g., an encoded instruction) which requires assemble- or run-; /// time patching.; ///; /// Fixups are used any time the target instruction encoder needs to represent; /// some value in an instruction which is not yet concrete. The encoder will; /// encode the instruction assuming the value is 0, and emit a fixup which; /// communicates to the assembler backend how it should rewrite the encoded; /// value.; ///; /// During the process of relaxation, the assembler will apply fixups as; /// symbolic values become concrete. When relaxation is complete, any remaining; /// fixups become relocations in the object file (or errors, if the fixup cannot; /// be encoded on the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:460,Modifiability,rewrite,rewrite,460,"/// Encode information on a single operation to perform on a byte; /// sequence (e.g., an encoded instruction) which requires assemble- or run-; /// time patching.; ///; /// Fixups are used any time the target instruction encoder needs to represent; /// some value in an instruction which is not yet concrete. The encoder will; /// encode the instruction assuming the value is 0, and emit a fixup which; /// communicates to the assembler backend how it should rewrite the encoded; /// value.; ///; /// During the process of relaxation, the assembler will apply fixups as; /// symbolic values become concrete. When relaxation is complete, any remaining; /// fixups become relocations in the object file (or errors, if the fixup cannot; /// be encoded on the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:48,Performance,perform,perform,48,"/// Encode information on a single operation to perform on a byte; /// sequence (e.g., an encoded instruction) which requires assemble- or run-; /// time patching.; ///; /// Fixups are used any time the target instruction encoder needs to represent; /// some value in an instruction which is not yet concrete. The encoder will; /// encode the instruction assuming the value is 0, and emit a fixup which; /// communicates to the assembler backend how it should rewrite the encoded; /// value.; ///; /// During the process of relaxation, the assembler will apply fixups as; /// symbolic values become concrete. When relaxation is complete, any remaining; /// fixups become relocations in the object file (or errors, if the fixup cannot; /// be encoded on the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:104,Integrability,depend,dependent,104,"/// The value to put into the fixup location. The exact interpretation of the; /// expression is target dependent, usually it will be one of the operands to; /// an instruction or an assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:15,Integrability,depend,dependent,15,/// The target dependent kind of fixup item this is. The kind is used to; /// determine how the operand value should be encoded into the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:81,Availability,error,error,81,/// Return the generic fixup kind for a value with the given size. It; /// is an error to pass an unsupported size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h:47,Integrability,depend,dependent,47,/// Should this fixup be evaluated in a target dependent manner?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:4,Integrability,Interface,Interface,4,/// Interface implemented by fragments that contain encoded instructions and/or; /// data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:214,Energy Efficiency,reduce,reduce,214,"/// Get the padding size that must be inserted before this fragment.; /// Used for bundling. By default, no padding is inserted.; /// Note that padding size is restricted to 8 bits. This is an optimization; /// to reduce the amount of space used for each fragment. In practice, larger; /// padding should never be required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:193,Performance,optimiz,optimization,193,"/// Get the padding size that must be inserted before this fragment.; /// Used for bundling. By default, no padding is inserted.; /// Note that padding size is restricted to 8 bits. This is an optimization; /// to reduce the amount of space used for each fragment. In practice, larger; /// padding should never be required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:4,Integrability,Interface,Interface,4,/// Interface implemented by fragments that contain encoded instructions and/or; /// data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:4,Integrability,Interface,Interface,4,/// Interface implemented by fragments that contain encoded instructions and/or; /// data and also have fixups registered.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:230,Energy Efficiency,consumption,consumption,230,"/// This is a compact (memory-size-wise) fragment for holding an encoded; /// instruction (non-relaxable) that has no fixups registered. When applicable,; /// it can be used instead of MCDataFragment and lead to lower memory; /// consumption.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:154,Integrability,depend,dependent,154,/// Flag to indicate that (optimal) NOPs should be emitted instead; /// of using the provided value. The exact interpretation of this flag is; /// target dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:72,Security,access,access,72,"/// CodeViewContext has the real knowledge about this format, so let it access; /// our members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:72,Security,access,access,72,"/// CodeViewContext has the real knowledge about this format, so let it access; /// our members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:111,Energy Efficiency,power,power-of-two,111,/// Represents required padding such that a particular other set of fragments; /// does not cross a particular power-of-two boundary. The other fragments must; /// follow this one within the same section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCGOFFStreamer.h:54,Integrability,Interface,Interface,54,"//===- MCGOFFStreamer.h - MCStreamer GOFF Object File Interface--*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCGOFFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCGOFFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h:83,Usability,simpl,simple,83,/// Instances of this class represent operands of the MCInst class.; /// This is a simple discriminated union.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h:34,Usability,Simpl,Simplify,34,"//===-- llvm/MC/MCInstBuilder.h - Simplify creation of MCInsts --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the MCInstBuilder class for convenient creation of; // MCInsts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:34,Deployability,update,updateState,34,/// Clear the internal state. See updateState for more information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:4,Usability,Clear,Clear,4,/// Clear the internal state. See updateState for more information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:4,Deployability,Update,Update,4,"/// Update internal state with \p Inst at \p Addr.; ///; /// For some types of analyses, inspecting a single instruction is not; /// sufficient. Some examples are auipc/jalr pairs on RISC-V or adrp/ldr pairs; /// on AArch64. To support inspecting multiple instructions, targets may keep; /// track of an internal state while analysing instructions. Clients should; /// call updateState for every instruction which allows later calls to one of; /// the analysis functions to take previous instructions into account.; /// Whenever state becomes irrelevant (e.g., when starting to disassemble a; /// new function), clients should call resetState to clear it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:374,Deployability,update,updateState,374,"/// Update internal state with \p Inst at \p Addr.; ///; /// For some types of analyses, inspecting a single instruction is not; /// sufficient. Some examples are auipc/jalr pairs on RISC-V or adrp/ldr pairs; /// on AArch64. To support inspecting multiple instructions, targets may keep; /// track of an internal state while analysing instructions. Clients should; /// call updateState for every instruction which allows later calls to one of; /// the analysis functions to take previous instructions into account.; /// Whenever state becomes irrelevant (e.g., when starting to disassemble a; /// new function), clients should call resetState to clear it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:646,Usability,clear,clear,646,"/// Update internal state with \p Inst at \p Addr.; ///; /// For some types of analyses, inspecting a single instruction is not; /// sufficient. Some examples are auipc/jalr pairs on RISC-V or adrp/ldr pairs; /// on AArch64. To support inspecting multiple instructions, targets may keep; /// track of an internal state while analysing instructions. Clients should; /// call updateState for every instruction which allows later calls to one of; /// the analysis functions to take previous instructions into account.; /// Whenever state becomes irrelevant (e.g., when starting to disassemble a; /// new function), clients should call resetState to clear it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:451,Availability,mask,mask,451,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:417,Deployability,update,updates,417,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:56,Performance,perform,performed,56,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:532,Performance,perform,performed,532,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:97,Usability,clear,clears,97,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:202,Usability,clear,clears,202,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:325,Usability,clear,clears,325,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:589,Usability,clear,clears,589,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:687,Usability,clear,cleared,687,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:1135,Usability,clear,clears,1135,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:99,Availability,Mask,Mask,99,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:195,Availability,mask,mask,195,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:326,Availability,mask,mask,326,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:566,Availability,mask,mask,566,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:622,Availability,Mask,Mask,622,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:751,Availability,mask,mask,751,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:855,Availability,Mask,Mask,855,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:888,Availability,mask,mask,888,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:28,Integrability,depend,dependency,28,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:155,Integrability,depend,dependency,155,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:391,Integrability,Depend,Dependencies,391,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:588,Integrability,depend,dependency,588,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:790,Integrability,depend,dependent,790,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:900,Integrability,depend,dependencies,900,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:506,Usability,clear,cleared,506,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:368,Availability,Mask,Mask,368,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:468,Availability,mask,mask,468,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:555,Availability,mask,mask,555,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:700,Availability,Mask,Mask,700,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:837,Availability,Mask,Mask,837,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:915,Availability,Mask,Mask,915,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:28,Integrability,depend,dependency,28,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:141,Integrability,depend,dependency,141,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:180,Integrability,depend,dependent,180,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:224,Integrability,depend,dependency,224,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:310,Integrability,depend,dependency,310,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:126,Performance,optimiz,optimizable,126,"/// Returns true if MI is a candidate for move elimination.; ///; /// Different subtargets may apply different constraints to optimizable; /// register moves. For example, on most X86 subtargets, a candidate for move; /// elimination cannot specify the same register for both source and; /// destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:11,Energy Efficiency,allocate,allocated,11,// Must be allocated the same register as specified value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:80,Security,access,access,80,"/// These are flags set on operands, but should be considered; /// private, all access should go through the MCOperandInfo accessors.; /// See the accessors for a description of what these are.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:123,Security,access,accessors,123,"/// These are flags set on operands, but should be considered; /// private, all access should go through the MCOperandInfo accessors.; /// See the accessors for a description of what these are.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:147,Security,access,accessors,147,"/// These are flags set on operands, but should be considered; /// private, all access should go through the MCOperandInfo accessors.; /// See the accessors for a description of what these are.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:47,Modifiability,variab,variable,47,"/// Return true if this instruction can have a variable number of; /// operands. In this case, the variable operands will be after the normal; /// operands but before the implicit definitions and uses (if any are; /// present).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:99,Modifiability,variab,variable,99,"/// Return true if this instruction can have a variable number of; /// operands. In this case, the variable operands will be after the normal; /// operands but before the implicit definitions and uses (if any are; /// present).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:190,Availability,error,errors,190,"/// Return true if this instruction cannot be safely; /// duplicated. For example, if the instruction has a unique labels attached; /// to it, duplicating it would cause multiple definition errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:46,Safety,safe,safely,46,"/// Return true if this instruction cannot be safely; /// duplicated. For example, if the instruction has a unique labels attached; /// to it, duplicating it would cause multiple definition errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:165,Performance,load,loads,165,"/// Return true for instructions that can be folded as memory operands; /// in other instructions. The most common use for this is instructions that; /// are simple loads from memory that don't modify the loaded value in any; /// way, but it can also be used for instructions that can be expressed as; /// constant-pool loads, such as V_SETALLONES on x86, to allow them to be; /// folded when it is beneficial. This should only be set on instructions; /// that return a value in their only virtual register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:205,Performance,load,loaded,205,"/// Return true for instructions that can be folded as memory operands; /// in other instructions. The most common use for this is instructions that; /// are simple loads from memory that don't modify the loaded value in any; /// way, but it can also be used for instructions that can be expressed as; /// constant-pool loads, such as V_SETALLONES on x86, to allow them to be; /// folded when it is beneficial. This should only be set on instructions; /// that return a value in their only virtual register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:320,Performance,load,loads,320,"/// Return true for instructions that can be folded as memory operands; /// in other instructions. The most common use for this is instructions that; /// are simple loads from memory that don't modify the loaded value in any; /// way, but it can also be used for instructions that can be expressed as; /// constant-pool loads, such as V_SETALLONES on x86, to allow them to be; /// folded when it is beneficial. This should only be set on instructions; /// that return a value in their only virtual register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:158,Usability,simpl,simple,158,"/// Return true for instructions that can be folded as memory operands; /// in other instructions. The most common use for this is instructions that; /// are simple loads from memory that don't modify the loaded value in any; /// way, but it can also be used for instructions that can be expressed as; /// constant-pool loads, such as V_SETALLONES on x86, to allow them to be; /// folded when it is beneficial. This should only be set on instructions; /// that return a value in their only virtual register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:243,Performance,optimiz,optimizers,243,"/// Return true if this instruction behaves; /// the same way as the generic REG_SEQUENCE instructions.; /// E.g., on ARM,; /// dX VMOVDRR rY, rZ; /// is equivalent to; /// dX = REG_SEQUENCE rY, ssub_0, rZ, ssub_1.; ///; /// Note that for the optimizers to be able to take advantage of; /// this property, TargetInstrInfo::getRegSequenceLikeInputs has to be; /// override accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:290,Performance,optimiz,optimizers,290,"/// Return true if this instruction behaves; /// the same way as the generic EXTRACT_SUBREG instructions.; /// E.g., on ARM,; /// rX, rY VMOVRRD dZ; /// is equivalent to two EXTRACT_SUBREG:; /// rX = EXTRACT_SUBREG dZ, ssub_0; /// rY = EXTRACT_SUBREG dZ, ssub_1; ///; /// Note that for the optimizers to be able to take advantage of; /// this property, TargetInstrInfo::getExtractSubregLikeInputs has to be; /// override accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:281,Performance,optimiz,optimizers,281,"/// Return true if this instruction behaves; /// the same way as the generic INSERT_SUBREG instructions.; /// E.g., on ARM,; /// dX = VSETLNi32 dY, rZ, Imm; /// is equivalent to a INSERT_SUBREG:; /// dX = INSERT_SUBREG dY, rZ, translateImmToSubIdx(Imm); ///; /// Note that for the optimizers to be able to take advantage of; /// this property, TargetInstrInfo::getInsertSubregLikeInputs has to be; /// override accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:109,Integrability,depend,dependent,109,/// Return true if this instruction is convergent.; ///; /// Convergent instructions may not be made control-dependent on any; /// additional values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:102,Performance,perform,perform,102,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:110,Performance,load,loads,110,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:36,Security,authenticat,authenticates,36,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:130,Security,authenticat,authentication,130,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:160,Security,authenticat,authenticated,160,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:313,Performance,load,load,313,"//===--------------------------------------------------------------------===//; // Side Effect Analysis; //===--------------------------------------------------------------------===//; /// Return true if this instruction could possibly read memory.; /// Instructions with this flag set are not necessarily simple load; /// instructions, they may load a value and modify it, for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:346,Performance,load,load,346,"//===--------------------------------------------------------------------===//; // Side Effect Analysis; //===--------------------------------------------------------------------===//; /// Return true if this instruction could possibly read memory.; /// Instructions with this flag set are not necessarily simple load; /// instructions, they may load a value and modify it, for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:306,Usability,simpl,simple,306,"//===--------------------------------------------------------------------===//; // Side Effect Analysis; //===--------------------------------------------------------------------===//; /// Return true if this instruction could possibly read memory.; /// Instructions with this flag set are not necessarily simple load; /// instructions, they may load a value and modify it, for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:123,Usability,simpl,simple,123,"/// Return true if this instruction could possibly modify memory.; /// Instructions with this flag set are not necessarily simple store; /// instructions, they may store a modified value based on their operands, or; /// may not actually modify anything, for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:534,Performance,cache,cache,534,"/// Return true if this instruction has side; /// effects that are not modeled by other flags. This does not return true; /// for instructions whose effects are captured by:; ///; /// 1. Their operand list and implicit definition/use list. Register use/def; /// info is explicit for instructions.; /// 2. Memory accesses. Use mayLoad/mayStore.; /// 3. Calling, branching, returning: use isCall/isReturn/isBranch.; ///; /// Examples of side effects would be modifying 'invisible' machine state like; /// a control register, flushing a cache, modifying a register invisible to; /// LLVM, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:312,Security,access,accesses,312,"/// Return true if this instruction has side; /// effects that are not modeled by other flags. This does not return true; /// for instructions whose effects are captured by:; ///; /// 1. Their operand list and implicit definition/use list. Register use/def; /// info is explicit for instructions.; /// 2. Memory accesses. Use mayLoad/mayStore.; /// 3. Calling, branching, returning: use isCall/isReturn/isBranch.; ///; /// Examples of side effects would be modifying 'invisible' machine state like; /// a control register, flushing a cache, modifying a register invisible to; /// LLVM, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:303,Energy Efficiency,efficient,efficient,303,"/// Return true if this is a 2-address instruction which can be changed; /// into a 3-address instruction if needed. Doing this transformation can be; /// profitable in the register allocator, because it means that the; /// instruction can use a 2-address form if possible, but degrade into a less; /// efficient form if the source and dest register cannot be assigned to the; /// same register. For example, this allows the x86 backend to turn a ""shl; /// reg, 3"" instruction into an LEA instruction, which is the same speed as; /// the shift but has bigger code size.; ///; /// If this returns true, then the target must implement the; /// TargetInstrInfo::convertToThreeAddress method for this instruction, which; /// is allowed to fail if the transformation isn't valid for this specific; /// instruction (e.g. shl reg, 4 on x86).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:88,Energy Efficiency,schedul,scheduler,88,"/// Return true if this instruction requires custom insertion support; /// when the DAG scheduler is inserting it into a machine basic block. If; /// this is true for the instruction, it basically means that it is a pseudo; /// instruction used at SelectionDAG time that is expanded out into magic code; /// by the target when MachineInstrs are formed.; ///; /// If this is true, the TargetLoweringInfo::InsertAtEndOfBasicBlock method; /// is used to insert this into the MachineBasicBlock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:188,Integrability,depend,depending,188,"/// Return true if this instruction requires *adjustment* after; /// instruction selection by calling a target hook. For example, this can be; /// used to fill in ARM 's' optional operand depending on whether the; /// conditional flag register is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:492,Integrability,interface,interface,492,"/// Returns true if this instruction has the same cost (or less) than a; /// move instruction. This is useful during certain types of optimizations; /// (e.g., remat during two-address conversion or machine licm) where we would; /// like to remat or hoist the instruction, but not if it costs more than; /// moving the instruction into the appropriate register. Note, we are not; /// marking copies from and to the same register class with this flag.; ///; /// This method could be called by interface TargetInstrInfo::isAsCheapAsAMove; /// for different subtargets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:134,Performance,optimiz,optimizations,134,"/// Returns true if this instruction has the same cost (or less) than a; /// move instruction. This is useful during certain types of optimizations; /// (e.g., remat during two-address conversion or machine licm) where we would; /// like to remat or hoist the instruction, but not if it costs more than; /// moving the instruction into the appropriate register. Note, we are not; /// marking copies from and to the same register class with this flag.; ///; /// This method could be called by interface TargetInstrInfo::isAsCheapAsAMove; /// for different subtargets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:330,Modifiability,variab,variable,330,"/// Return a list of registers that are potentially read by any; /// instance of this machine instruction. For example, on X86, the ""adc""; /// instruction adds two register operands and adds the carry bit in from the; /// flags register. In this case, the instruction is marked as implicitly; /// reading the flags. Likewise, the variable shift instruction on X86 is; /// marked as implicitly reading the 'CL' register, which it always does.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:15,Energy Efficiency,schedul,scheduling,15,/// Return the scheduling class for this instruction. The; /// scheduling class is an index into the InstrItineraryData table. This; /// returns zero if there is no known scheduling information for the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:63,Energy Efficiency,schedul,scheduling,63,/// Return the scheduling class for this instruction. The; /// scheduling class is an index into the InstrItineraryData table. This; /// returns zero if there is no known scheduling information for the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:171,Energy Efficiency,schedul,scheduling,171,/// Return the scheduling class for this instruction. The; /// scheduling class is an index into the InstrItineraryData table. This; /// returns zero if there is no known scheduling information for the; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h:83,Integrability,Interface,Interface,83,//---------------------------------------------------------------------------; /// Interface to description of machine instruction set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h:62,Integrability,rout,routines,62,"/// Initialize MCInstrInfo, called by TableGen auto-generated routines.; /// *DO NOT USE*.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:38,Energy Efficiency,Schedul,Scheduling,38,"//===- llvm/MC/MCInstrItineraries.h - Scheduling ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file describes the structures used for instruction; // itineraries, stages, and operand reads/writes. This is used by; // schedulers to determine instruction stages and latencies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:510,Energy Efficiency,schedul,schedulers,510,"//===- llvm/MC/MCInstrItineraries.h - Scheduling ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file describes the structures used for instruction; // itineraries, stages, and operand reads/writes. This is used by; // schedulers to determine instruction stages and latencies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:1419,Availability,avail,available,1419,"//===----------------------------------------------------------------------===//; /// These values represent a non-pipelined step in; /// the execution of an instruction. Cycles represents the number of; /// discrete time slots needed to complete the stage. Units represent; /// the choice of functional units that can be used to complete the; /// stage. Eg. IntUnit1, IntUnit2. NextCycles indicates how many; /// cycles should elapse from the start of this stage to the start of; /// the next stage in the itinerary. A value of -1 indicates that the; /// next stage should start immediately after the current one.; /// For example:; ///; /// { 1, x, -1 }; /// indicates that the stage occupies FU x for 1 cycle and that; /// the next stage starts immediately after this one.; ///; /// { 2, x|y, 1 }; /// indicates that the stage occupies either FU x or FU y for 2; /// consecutive cycles and that the next stage starts one cycle; /// after this stage starts. That is, the stage requirements; /// overlap in time.; ///; /// { 1, x, 0 }; /// indicates that the stage occupies FU x for 1 cycle and that; /// the next stage starts in this same cycle. This can be used to; /// indicate that the instruction requires multiple stages at the; /// same time.; ///; /// FU reservation can be of two different kinds:; /// - FUs which instruction actually requires; /// - FUs which instruction just reserves. Reserved unit is not available for; /// execution of other instruction. However, several instructions can reserve; /// the same unit several times.; /// Such two types of units reservation is used to model instruction domain; /// change stalls, FUs using the same resource (e.g. same register file), etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:115,Deployability,pipeline,pipelined,115,"//===----------------------------------------------------------------------===//; /// These values represent a non-pipelined step in; /// the execution of an instruction. Cycles represents the number of; /// discrete time slots needed to complete the stage. Units represent; /// the choice of functional units that can be used to complete the; /// stage. Eg. IntUnit1, IntUnit2. NextCycles indicates how many; /// cycles should elapse from the start of this stage to the start of; /// the next stage in the itinerary. A value of -1 indicates that the; /// next stage should start immediately after the current one.; /// For example:; ///; /// { 1, x, -1 }; /// indicates that the stage occupies FU x for 1 cycle and that; /// the next stage starts immediately after this one.; ///; /// { 2, x|y, 1 }; /// indicates that the stage occupies either FU x or FU y for 2; /// consecutive cycles and that the next stage starts one cycle; /// after this stage starts. That is, the stage requirements; /// overlap in time.; ///; /// { 1, x, 0 }; /// indicates that the stage occupies FU x for 1 cycle and that; /// the next stage starts in this same cycle. This can be used to; /// indicate that the instruction requires multiple stages at the; /// same time.; ///; /// FU reservation can be of two different kinds:; /// - FUs which instruction actually requires; /// - FUs which instruction just reserves. Reserved unit is not available for; /// execution of other instruction. However, several instructions can reserve; /// the same unit several times.; /// Such two types of units reservation is used to model instruction domain; /// change stalls, FUs using the same resource (e.g. same register file), etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:228,Deployability,pipeline,pipeline,228,//===----------------------------------------------------------------------===//; /// An itinerary represents the scheduling information for an instruction.; /// This includes a set of stages occupied by the instruction and the pipeline; /// cycle in which operands are read and written.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:114,Energy Efficiency,schedul,scheduling,114,//===----------------------------------------------------------------------===//; /// An itinerary represents the scheduling information for an instruction.; /// This includes a set of stages occupied by the instruction and the pipeline; /// cycle in which operands are read and written.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:35,Modifiability,variab,variable,35,"///< # of micro-ops, -1 means it's variable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:14,Deployability,pipeline,pipeline,14,///< Array of pipeline forwarding paths,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:27,Performance,latency,latency,27,"/// Return the total stage latency of the given class. The latency is; /// the maximum completion time for any stage in the itinerary. If no stages; /// exist, it defaults to one cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:59,Performance,latency,latency,59,"/// Return the total stage latency of the given class. The latency is; /// the maximum completion time for any stage in the itinerary. If no stages; /// exist, it defaults to one cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:62,Usability,simpl,simple,62,"// If the target doesn't provide itinerary information, use a simple; // non-zero default value for all instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:105,Availability,avail,available,105,/// Return the cycle for the given class and operand. Return std::nullopt if; /// the information is not available for the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:30,Deployability,pipeline,pipeline,30,"/// Return true if there is a pipeline forwarding between instructions; /// of itinerary classes DefClass and UseClasses so that value produced by an; /// instruction of itinerary class DefClass, operand index DefIdx can be; /// bypassed when it's read by an instruction of itinerary class UseClass,; /// operand index UseIdx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:252,Availability,avail,available,252,/// Compute and return the use operand latency of a given itinerary; /// class and operand index if the value is produced by an instruction of the; /// specified itinerary class and def operand index. Return std::nullopt if; /// the information is not available for the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:39,Performance,latency,latency,39,/// Compute and return the use operand latency of a given itinerary; /// class and operand index if the value is produced by an instruction of the; /// specified itinerary class and def operand index. Return std::nullopt if; /// the information is not available for the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:51,Deployability,pipeline,pipeline,51,// FIXME: This assumes one cycle benefit for every pipeline forwarding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:40,Integrability,interface,interface,40,"//===- MCLinkerOptimizationHint.h - LOH interface ---------------*- C++ -*-===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares some helpers classes to handle Linker Optimization Hint; // (LOH).; //; // FIXME: LOH interface supports only MachO format at the moment.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:492,Integrability,interface,interface,492,"//===- MCLinkerOptimizationHint.h - LOH interface ---------------*- C++ -*-===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares some helpers classes to handle Linker Optimization Hint; // (LOH).; //; // FIXME: LOH interface supports only MachO format at the moment.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:444,Performance,Optimiz,Optimization,444,"//===- MCLinkerOptimizationHint.h - LOH interface ---------------*- C++ -*-===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares some helpers classes to handle Linker Optimization Hint; // (LOH).; //; // FIXME: LOH interface supports only MachO format at the moment.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:11,Performance,Optimiz,Optimization,11,/// Linker Optimization Hint Type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:17,Performance,Optimiz,Optimization,17,/// Store Linker Optimization Hint information (LOH).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:62,Availability,avail,available,62,/// Emit this directive in \p OutStream using the information available; /// in the given \p ObjWriter and \p Layout to get the address of the; /// arguments within the object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:10,Security,access,accessor,10,/// Const accessor to the directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h:20,Performance,Optimiz,Optimization,20,/// Emit all Linker Optimization Hint in one big table.; /// Each line of the table is emitted by LOHDirective::emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCLinkerOptimizationHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:38,Security,Access,Accessors,38,/// @}; /// \name Target Writer Proxy Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:20,Performance,load,load,20,/// Write a segment load command.; ///; /// \param NumSections The number of sections in this segment.; /// \param SectionDataSize The total size of the sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:495,Availability,error,errors,495,"// FIXME: We really need to improve the relocation validation. Basically, we; // want to implement a separate computation which evaluates the relocation; // entry as the linker would, and verifies that the resultant fixup value is; // exactly what the encoder wanted. This will catch several classes of; // problems:; //; // - Relocation entry bugs, the two algorithms are unlikely to have the same; // exact bug.; //; // - Relaxation issues, where we forget to relax something.; //; // - Input errors, where something cannot be correctly encoded. 'as' allows; // these through in many cases.; // Add a relocation to be output in the object file. At the time this is; // called, the symbol indexes are not know, so if the relocation refers; // to a symbol it should be passed as \p RelSymbol so that it can be updated; // afterwards. If the relocation doesn't refer to a symbol, nullptr should be; // used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:810,Deployability,update,updated,810,"// FIXME: We really need to improve the relocation validation. Basically, we; // want to implement a separate computation which evaluates the relocation; // entry as the linker would, and verifies that the resultant fixup value is; // exactly what the encoder wanted. This will catch several classes of; // problems:; //; // - Relocation entry bugs, the two algorithms are unlikely to have the same; // exact bug.; //; // - Relaxation issues, where we forget to relax something.; //; // - Input errors, where something cannot be correctly encoded. 'as' allows; // these through in many cases.; // Add a relocation to be output in the object file. At the time this is; // called, the symbol indexes are not know, so if the relocation refers; // to a symbol it should be passed as \p RelSymbol so that it can be updated; // afterwards. If the relocation doesn't refer to a symbol, nullptr should be; // used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:51,Security,validat,validation,51,"// FIXME: We really need to improve the relocation validation. Basically, we; // want to implement a separate computation which evaluates the relocation; // entry as the linker would, and verifies that the resultant fixup value is; // exactly what the encoder wanted. This will catch several classes of; // problems:; //; // - Relocation entry bugs, the two algorithms are unlikely to have the same; // exact bug.; //; // - Relaxation issues, where we forget to relax something.; //; // - Input errors, where something cannot be correctly encoded. 'as' allows; // these through in many cases.; // Add a relocation to be output in the object file. At the time this is; // called, the symbol indexes are not know, so if the relocation refers; // to a symbol it should be passed as \p RelSymbol so that it can be updated; // afterwards. If the relocation doesn't refer to a symbol, nullptr should be; // used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:59,Integrability,rout,routine,59,/// Construct a new Mach-O writer instance.; ///; /// This routine takes ownership of the target writer subclass.; ///; /// \param MOTW - The target specific Mach-O writer subclass.; /// \param OS - The stream to write to.; /// \returns The constructed object writer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:14,Modifiability,Variab,Variable,14,"/// Extra TLS Variable Data section.; ///; /// If the target needs to put additional information for a TLS variable,; /// it'll go here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:107,Modifiability,variab,variable,107,"/// Extra TLS Variable Data section.; ///; /// If the target needs to put additional information for a TLS variable,; /// it'll go here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:4,Availability,Fault,FaultMap,4,/// FaultMap section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:128,Modifiability,variab,variable,128,"// MachO specific sections.; /// Section for thread local structure information.; ///; /// Contains the source code name of the variable, visibility and a pointer to; /// the initial value (.tdata or .tbss).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:51,Integrability,Interface,Interface,51,"//===- MCObjectStreamer.h - MCStreamer Object File Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:37,Integrability,interface,interface,37,/// Streaming object file generation interface.; ///; /// This class provides an implementation of the MCStreamer interface which is; /// suitable for use with the assembler backend. Specific object file formats; /// are expected to subclass this interface to implement directives specific; /// to that file format or custom semantics expected by the object writer; /// implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:114,Integrability,interface,interface,114,/// Streaming object file generation interface.; ///; /// This class provides an implementation of the MCStreamer interface which is; /// suitable for use with the assembler backend. Specific object file formats; /// are expected to subclass this interface to implement directives specific; /// to that file format or custom semantics expected by the object writer; /// implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:247,Integrability,interface,interface,247,/// Streaming object file generation interface.; ///; /// This class provides an implementation of the MCStreamer interface which is; /// suitable for use with the assembler backend. Specific object file formats; /// are expected to subclass this interface to implement directives specific; /// to that file format or custom semantics expected by the object writer; /// implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:33,Deployability,integrat,integrated,33,/// Object streamers require the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:33,Integrability,integrat,integrated,33,/// Object streamers require the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:21,Integrability,Interface,Interface,21,/// \name MCStreamer Interface; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:47,Integrability,depend,depend,47,/// Emits pending conditional assignments that depend on \p Symbol; /// being emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:53,Integrability,Interface,Interface,53,"//===- llvm/MC/MCObjectWriter.h - Object File Writer Interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:51,Integrability,interface,interfaces,51,"/// Defines the object file and target independent interfaces used by the; /// assembler backend to write native file format object files.; ///; /// The object writer contains a few callbacks used by the assembler to allow; /// the object writer to modify the assembler data structures at appropriate; /// points. Once assembly is complete, the object writer is given the; /// MCAssembler instance, which contains all the symbol and section data which; /// should be emitted as part of writeObject().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:171,Integrability,rout,routine,171,"/// \name High-Level API; /// @{; /// Perform any late binding of symbols (for example, to assign symbol; /// indices for use when generating relocations).; ///; /// This routine is called by the assembler after layout and relaxation is; /// complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:38,Performance,Perform,Perform,38,"/// \name High-Level API; /// @{; /// Perform any late binding of symbols (for example, to assign symbol; /// indices for use when generating relocations).; ///; /// This routine is called by the assembler after layout and relaxation is; /// complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:46,Integrability,rout,routine,46,"/// Record a relocation entry.; ///; /// This routine is called by the assembler after layout and relaxation, and; /// post layout binding. The implementation is responsible for storing; /// information about the relocation so that it can be emitted during; /// writeObject().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:82,Integrability,rout,routine,82,"/// Write the object file and returns the number of bytes written.; ///; /// This routine is called by the assembler after layout and relaxation is; /// complete, fixups have been evaluated and applied, and relocations; /// generated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:1614,Availability,down,downwards,1614,"--------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLINE SITE; // ID of the callsite probe (ULEB128); // FUNCTION BODY; // A FUNCTION BODY entry describing the inlined function.; //; // TODO: retire the ADDRESS_TYPE encoding for code addresses once compatibility; // is no longer an issue.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:1780,Integrability,depend,depending,1780,"--------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLINE SITE; // ID of the callsite probe (ULEB128); // FUNCTION BODY; // A FUNCTION BODY entry describing the inlined function.; //; // TODO: retire the ADDRESS_TYPE encoding for code addresses once compatibility; // is no longer an issue.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:889,Usability,GUID,GUID,889,"//===- MCPseudoProbe.h - Pseudo probe encoding support ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLI",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:907,Usability,GUID,GUID,907,"//===- MCPseudoProbe.h - Pseudo probe encoding support ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLI",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:1011,Usability,GUID,GUID,1011,"rt ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLINE SITE; // ID of the callsite probe (ULEB128); // ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:1645,Usability,GUID,GUID,1645,"--------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLINE SITE; // ID of the callsite probe (ULEB128); // FUNCTION BODY; // A FUNCTION BODY entry describing the inlined function.; //; // TODO: retire the ADDRESS_TYPE encoding for code addresses once compatibility; // is no longer an issue.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:3,Usability,GUID,GUID,3,// GUID to PseudoProbeFuncDesc map,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:154,Energy Efficiency,reduce,reduce,154,// The value should be equal to PseudoProbeReservedId::Last + 1 which is; // defined in SampleProfileProbe.h. The header file is not included here to; // reduce the dependency from MC to IPO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:165,Integrability,depend,dependency,165,// The value should be equal to PseudoProbeReservedId::Last + 1 which is; // defined in SampleProfileProbe.h. The header file is not included here to; // reduce the dependency from MC to IPO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:19,Usability,GUID,GUID,19,// Root node has a GUID 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:82,Energy Efficiency,allocate,allocated,82,"// A Tri-tree based data structure to group probes by inline stack.; // A tree is allocated for a standalone .text section. A fake; // instance is created as the root of a tree.; // A real instance of this class is created for each function, either a; // not inlined function that has code in .text section or an inlined function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:90,Usability,GUID,GUIDs,90,// A collection of MCPseudoProbe for each function. The MCPseudoProbes are; // grouped by GUIDs due to inlining that can bring probes from different; // functions into one function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:3,Usability,GUID,GUID,3,// GUID to PseudoProbeFuncDesc map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:45,Usability,GUID,GUID,45,// Decode pseudo_probe_desc section to build GUID to PseudoProbeFuncDesc map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper class representing physical registers. Should be passed by value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h:406,Energy Efficiency,allocate,allocated,406,"// Register numbers can represent physical registers, virtual registers, and; // sometimes stack slots. The unsigned values are divided into these ranges:; //; // 0 Not a register, can be used as a sentinel.; // [1;2^30) Physical registers assigned by TableGen.; // [2^30;2^31) Stack slots. (Rarely used.); // [2^31;2^32) Virtual registers assigned by MachineRegisterInfo.; //; // Further sentinels can be allocated from the small negative integers.; // DenseMapInfo<unsigned> uses -1u and -2u.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:415,Integrability,interface,interface,415,"//===- MC/MCRegisterInfo.h - Target Register Description --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file describes an abstract interface used to get information about a; // target machines register file. This information is used for a variety of; // purposed, especially register allocation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:30,Availability,mask,mask,30,/// Index into list with lane mask sequences. The sequence contains a lanemask; /// for every register unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:411,Integrability,interface,interface,411,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:623,Modifiability,extend,extended,623,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:553,Security,access,access,553,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:194,Usability,simpl,simply,194,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:84,Performance,perform,performed,84,/// DwarfLLVMRegPair - Emitted by tablegen so Dwarf<->LLVM reg mappings can be; /// performed with a binary search.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:19,Availability,mask,mask,19,// Pointer to lane mask sequences; // for register units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:164,Energy Efficiency,adapt,adaptors,164,"// LLVM to CV regs mapping; /// Iterator class that can traverse the differentially encoded values in; /// DiffLists. Don't use this class directly, use one of the adaptors below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:164,Modifiability,adapt,adaptors,164,"// LLVM to CV regs mapping; /// Iterator class that can traverse the differentially encoded values in; /// DiffLists. Don't use this class directly, use one of the adaptors below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:65,Security,access,access,65,// These iterators are allowed to sub-class DiffListIterator and access; // internal list pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:70,Integrability,rout,routines,70,"/// Initialize MCRegisterInfo, called by TableGen; /// auto-generated routines. *DO NOT USE*.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:37,Modifiability,variab,variables,37,// Initialize DWARF register mapping variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:110,Integrability,rout,routines,110,/// Used to initialize LLVM register to Dwarf; /// register number mapping. Called by TableGen auto-generated routines.; /// *DO NOT USE*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:110,Integrability,rout,routines,110,/// Used to initialize Dwarf register to LLVM; /// register number mapping. Called by TableGen auto-generated routines.; /// *DO NOT USE*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:91,Deployability,continuous,continuous,91,"/// Get the size of the bit range covered by a sub-register index.; /// If the index isn't continuous, return the sum of the sizes of its parts.; /// If the index is used to access subregisters of different sizes, return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:174,Security,access,access,174,"/// Get the size of the bit range covered by a sub-register index.; /// If the index isn't continuous, return the sum of the sizes of its parts.; /// If the index is used to access subregisters of different sizes, return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:123,Deployability,continuous,continuous,123,"/// Get the offset of the bit range covered by a sub-register index.; /// If an Offset doesn't make sense (the index isn't continuous, or is used to; /// access sub-registers at different offsets), return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:154,Security,access,access,154,"/// Get the offset of the bit range covered by a sub-register index.; /// If an Offset doesn't make sense (the index isn't continuous, or is used to; /// access sub-registers at different offsets), return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:146,Security,access,accessed,146,/// Return the number of (native) register units in the; /// target. Register units are numbered from 0 to getNumRegUnits() - 1. They; /// can be accessed through MCRegUnitIterator defined below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:3,Performance,Cache,Cache,3,"// Cache the current value, so that we can return a reference to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:3,Performance,Cache,Cache,3,"// Cache the current value, so that we can return a reference to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:42,Availability,down,down,42,// Definition for isSuperRegister. Put it down here since it needs the; // iterator defined above in addition to the MCRegisterInfo class itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:3,Performance,Cache,Cache,3,"// Cache the current value, so that we can return a reference to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:93,Availability,mask,masks,93,/// MCRegUnitMaskIterator enumerates a list of register units and their; /// associated lane masks for Reg. The register units are in ascending; /// numerical order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:31,Energy Efficiency,Schedul,Scheduling,31,"//===-- llvm/MC/MCSchedule.h - Scheduling -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes used to describe a subtarget's machine model; // for scheduling and other instruction cost heuristics.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:466,Energy Efficiency,schedul,scheduling,466,"//===-- llvm/MC/MCSchedule.h - Scheduling -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes used to describe a subtarget's machine model; // for scheduling and other instruction cost heuristics.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:68,Energy Efficiency,schedul,scheduler,68,/// Define a kind of processor resource that will be modeled by the scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:510,Energy Efficiency,schedul,scheduler,510,"// Index of the resources kind that contains this kind.; // Number of resources that may be buffered.; //; // Buffered resources (BufferSize != 0) may be consumed at some indeterminate; // cycle after dispatch. This should be used for out-of-order cpus when; // instructions that use this resource can be buffered in a reservaton; // station.; //; // Unbuffered resources (BufferSize == 0) always consume their resource some; // fixed number of cycles after dispatch. If a resource is unbuffered, then; // the scheduler will avoid scheduling instructions with conflicting resources; // in the same cycle. This is for in-order cpus, or the in-order portion of; // an out-of-order cpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:531,Energy Efficiency,schedul,scheduling,531,"// Index of the resources kind that contains this kind.; // Number of resources that may be buffered.; //; // Buffered resources (BufferSize != 0) may be consumed at some indeterminate; // cycle after dispatch. This should be used for out-of-order cpus when; // instructions that use this resource can be buffered in a reservaton; // station.; //; // Unbuffered resources (BufferSize == 0) always consume their resource some; // fixed number of cycles after dispatch. If a resource is unbuffered, then; // the scheduler will avoid scheduling instructions with conflicting resources; // in the same cycle. This is for in-order cpus, or the in-order portion of; // an out-of-order cpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:525,Safety,avoid,avoid,525,"// Index of the resources kind that contains this kind.; // Number of resources that may be buffered.; //; // Buffered resources (BufferSize != 0) may be consumed at some indeterminate; // cycle after dispatch. This should be used for out-of-order cpus when; // instructions that use this resource can be buffered in a reservaton; // station.; //; // Unbuffered resources (BufferSize == 0) always consume their resource some; // fixed number of cycles after dispatch. If a resource is unbuffered, then; // the scheduler will avoid scheduling instructions with conflicting resources; // in the same cycle. This is for in-order cpus, or the in-order portion of; // an out-of-order cpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:79,Energy Efficiency,schedul,scheduling,79,/// Identify one of the processor resource kinds consumed by a; /// particular scheduling class for the specified number of cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:40,Deployability,release,released,40,"/// Cycle at which the resource will be released by an instruction,; /// relatively to the cycle in which the instruction is issued; /// (assuming no stalls inbetween).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:55,Energy Efficiency,schedul,scheduling,55,"/// Specify the latency in cpu cycles for a particular scheduling class and def; /// index. -1 indicates an invalid latency. Heuristics would typically consider; /// an instruction with invalid latency to have infinite latency. Also identify; /// the WriteResources of this def. When the operand expands to a sequence of; /// writes, this ID is the last write in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:16,Performance,latency,latency,16,"/// Specify the latency in cpu cycles for a particular scheduling class and def; /// index. -1 indicates an invalid latency. Heuristics would typically consider; /// an instruction with invalid latency to have infinite latency. Also identify; /// the WriteResources of this def. When the operand expands to a sequence of; /// writes, this ID is the last write in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:116,Performance,latency,latency,116,"/// Specify the latency in cpu cycles for a particular scheduling class and def; /// index. -1 indicates an invalid latency. Heuristics would typically consider; /// an instruction with invalid latency to have infinite latency. Also identify; /// the WriteResources of this def. When the operand expands to a sequence of; /// writes, this ID is the last write in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:194,Performance,latency,latency,194,"/// Specify the latency in cpu cycles for a particular scheduling class and def; /// index. -1 indicates an invalid latency. Heuristics would typically consider; /// an instruction with invalid latency to have infinite latency. Also identify; /// the WriteResources of this def. When the operand expands to a sequence of; /// writes, this ID is the last write in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:219,Performance,latency,latency,219,"/// Specify the latency in cpu cycles for a particular scheduling class and def; /// index. -1 indicates an invalid latency. Heuristics would typically consider; /// an instruction with invalid latency to have infinite latency. Also identify; /// the WriteResources of this def. When the operand expands to a sequence of; /// writes, this ID is the last write in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:140,Energy Efficiency,reduce,reduces,140,"/// Specify the number of cycles allowed after instruction issue before a; /// particular use operand reads its registers. This effectively reduces the; /// write's latency. Here we allow negative cycles for corner cases where; /// latency increases. This rule only applies when the entry's WriteResource; /// matches the write's WriteResource.; ///; /// MCReadAdvanceEntries are sorted first by operand index (UseIdx), then by; /// WriteResourceIdx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:165,Performance,latency,latency,165,"/// Specify the number of cycles allowed after instruction issue before a; /// particular use operand reads its registers. This effectively reduces the; /// write's latency. Here we allow negative cycles for corner cases where; /// latency increases. This rule only applies when the entry's WriteResource; /// matches the write's WriteResource.; ///; /// MCReadAdvanceEntries are sorted first by operand index (UseIdx), then by; /// WriteResourceIdx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:232,Performance,latency,latency,232,"/// Specify the number of cycles allowed after instruction issue before a; /// particular use operand reads its registers. This effectively reduces the; /// write's latency. Here we allow negative cycles for corner cases where; /// latency increases. This rule only applies when the entry's WriteResource; /// matches the write's WriteResource.; ///; /// MCReadAdvanceEntries are sorted first by operand index (UseIdx), then by; /// WriteResourceIdx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:18,Energy Efficiency,schedul,scheduling,18,/// Summarize the scheduling resources required for an instruction of a; /// particular scheduling class.; ///; /// Defined as an aggregate struct for creating tables with initializer lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:88,Energy Efficiency,schedul,scheduling,88,/// Summarize the scheduling resources required for an instruction of a; /// particular scheduling class.; ///; /// Defined as an aggregate struct for creating tables with initializer lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:333,Deployability,update,updates,333,"/// Specify the cost of a register definition in terms of number of physical; /// register allocated at register renaming stage. For example, AMD Jaguar.; /// natively supports 128-bit data types, and operations on 256-bit registers; /// (i.e. YMM registers) are internally split into two COPs (complex operations); /// and each COP updates a physical register. Basically, on Jaguar, a YMM; /// register write effectively consumes two physical registers. That means,; /// the cost of a YMM write in the BtVer2 model is 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:91,Energy Efficiency,allocate,allocated,91,"/// Specify the cost of a register definition in terms of number of physical; /// register allocated at register renaming stage. For example, AMD Jaguar.; /// natively supports 128-bit data types, and operations on 256-bit registers; /// (i.e. YMM registers) are internally split into two COPs (complex operations); /// and each COP updates a physical register. Basically, on Jaguar, a YMM; /// register write effectively consumes two physical registers. That means,; /// the cost of a YMM write in the BtVer2 model is 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:284,Modifiability,extend,extended,284,"/// A register file descriptor.; ///; /// This struct allows to describe processor register files. In particular, it; /// helps describing the size of the register file, as well as the cost of; /// allocating a register file at register renaming stage.; /// FIXME: this struct can be extended to provide information about the number; /// of read/write ports to the register file. A value of zero for field; /// 'NumPhysRegs' means: this register file has an unbounded number of physical; /// registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:48,Performance,optimiz,optimize,48,// Ture if this register file only knows how to optimize register moves from; // known zero registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:173,Energy Efficiency,schedul,schedulers,173,"/// Provide extra details about the machine processor.; ///; /// This is a collection of ""optional"" processor information that is not; /// normally used by the LLVM machine schedulers, but that can be consumed by; /// external tools like llvm-mca to improve the quality of the peformance; /// analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1287,Deployability,pipeline,pipeline,1287,"rce tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU p",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1447,Deployability,pipeline,pipeline,1447,"d reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1870,Deployability,Release,ReleaseAtCycles,1870,"en machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2065,Deployability,Release,ReleaseAtCycles,2065,"eful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2302,Deployability,pipeline,pipeline,2302,"ound the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2455,Deployability,pipeline,pipeline,2455,"chine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2484,Deployability,pipeline,pipeline,2484," not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2626,Deployability,pipeline,pipeline,2626,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2943,Deployability,pipeline,pipeline,2943,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:22,Energy Efficiency,schedul,scheduling,22,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:164,Energy Efficiency,schedul,scheduler,164,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:235,Energy Efficiency,schedul,scheduler,235,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:288,Energy Efficiency,Schedul,Scheduler,288,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:632,Energy Efficiency,schedul,scheduler,632,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:717,Energy Efficiency,schedul,scheduler,717,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1189,Energy Efficiency,schedul,scheduling,1189,"ecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// curr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1489,Energy Efficiency,schedul,scheduler,1489,"e any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1831,Energy Efficiency,reduce,reduces,1831,"en machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2706,Energy Efficiency,schedul,scheduler,2706,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2860,Energy Efficiency,schedul,scheduling,2860,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3022,Energy Efficiency,schedul,scheduling,3022,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3206,Energy Efficiency,schedul,scheduler,3206,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3521,Energy Efficiency,schedul,scheduling,3521,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:590,Integrability,depend,depending,590,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3260,Integrability,depend,dependent,3260,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1071,Modifiability,extend,extend,1071,"ecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// curr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:324,Performance,latency,latency,324,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:818,Performance,queue,queues,818,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1726,Performance,latency,latency,1726,"independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:1839,Performance,latency,latency,1839,"en machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3361,Performance,latency,latency,3361,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3457,Performance,bottleneck,bottlenecks,3457,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2650,Safety,predict,predictably,2650,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3440,Safety,detect,detect,3440,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:576,Deployability,pipeline,pipeline,576,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:64,Energy Efficiency,schedul,scheduled,64,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:261,Energy Efficiency,schedul,scheduled,261,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:349,Performance,bottleneck,bottleneck,349,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:548,Performance,bottleneck,bottleneck,548,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:167,Safety,hazard,hazard,167,"// IssueWidth is the maximum number of instructions that may be scheduled in; // the same per-cycle group. This is meant to be a hard in-order constraint; // (a.k.a. ""hazard""). In the GenericScheduler strategy, no more than; // IssueWidth micro-ops can ever be scheduled in a particular cycle.; //; // In practice, IssueWidth is useful to model any bottleneck between the; // decoder (after micro-op expansion) and the out-of-order reservation; // stations or the decoder bandwidth itself. If the total number of; // reservation stations is also a bottleneck, or if any other pipeline stage; // has a bandwidth limitation, then that can be naturally modeled by adding an; // out-of-order processor resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:199,Energy Efficiency,schedul,scheduling,199,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:285,Energy Efficiency,efficient,efficient,285,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:333,Energy Efficiency,schedul,schedule,333,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:397,Energy Efficiency,schedul,scheduling,397,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:234,Performance,queue,queue,234,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:242,Performance,Latency,Latency,242,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:464,Performance,Latency,Latency,464,"// MicroOpBufferSize is the number of micro-ops that the processor may buffer; // for out-of-order execution.; //; // ""0"" means operations that are not ready in this cycle are not considered; // for scheduling (they go in the pending queue). Latency is paramount. This; // may be more efficient if many instructions are pending in a schedule.; //; // ""1"" means all instructions are considered for scheduling regardless of; // whether they are ready in this cycle. Latency still causes issue stalls,; // but we balance those stalls against other heuristics.; //; // ""> 1"" means the processor is out-of-order. This is a machine independent; // estimate of highly machine specific characteristics such as the register; // renaming pool and reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:90,Performance,optimiz,optimized,90,"// LoopMicroOpBufferSize is the number of micro-ops that the processor may; // buffer for optimized loop execution. More generally, this represents the; // optimal number of micro-ops in a loop body. A loop may be partially; // unrolled to bring the count of micro-ops in the loop body closer to this; // number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:3,Performance,Load,LoadLatency,3,// LoadLatency is the expected latency of load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:31,Performance,latency,latency,31,// LoadLatency is the expected latency of load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:42,Performance,load,load,42,// LoadLatency is the expected latency of load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:221,Energy Efficiency,schedul,scheduling,221,"// HighLatency is the expected latency of ""very high latency"" operations.; // See TargetInstrInfo::isHighLatencyDef().; // By default, this is set to an arbitrarily high number of cycles; // likely to have some impact on scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:31,Performance,latency,latency,31,"// HighLatency is the expected latency of ""very high latency"" operations.; // See TargetInstrInfo::isHighLatencyDef().; // By default, this is set to an arbitrarily high number of cycles; // likely to have some impact on scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:53,Performance,latency,latency,53,"// HighLatency is the expected latency of ""very high latency"" operations.; // See TargetInstrInfo::isHighLatencyDef().; // By default, this is set to an arbitrarily high number of cycles; // likely to have some impact on scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:86,Availability,recover,recover,86,// MispredictPenalty is the typical number of extra cycles the processor; // takes to recover from a branch misprediction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:86,Safety,recover,recover,86,// MispredictPenalty is the typical number of extra cycles the processor; // takes to recover from a branch misprediction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:54,Energy Efficiency,schedul,scheduling,54,/// Does this machine model include instruction-level scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:76,Energy Efficiency,schedul,scheduling,76,/// Return true if this machine model data for all instructions with a; /// scheduling class (itinerary class or SchedRW list).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:38,Energy Efficiency,schedul,scheduling,38,/// Returns the latency value for the scheduling class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:16,Performance,latency,latency,16,/// Returns the latency value for the scheduling class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:26,Performance,throughput,throughput,26,// Returns the reciprocal throughput information from a MCSchedClassDesc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:88,Energy Efficiency,schedul,scheduling,88,/// Returns the maximum forwarding delay for register reads dependent on; /// writes of scheduling class WriteResourceIdx.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:60,Integrability,depend,dependent,60,/// Returns the maximum forwarding delay for register reads dependent on; /// writes of scheduling class WriteResourceIdx.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSection.h:50,Performance,optimiz,optimized,50,"/// Return true if a .align directive should use ""optimized nops"" to fill; /// instead of 0s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h:139,Performance,load,loader,139,"/// This represents a section on a Mach-O system (used by Mac OS X). On a Mac; /// system, these are also described in /usr/include/mach-o/loader.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h:70,Testability,stub,stubs,70,"/// The 'reserved2' field of a section, used to represent the size of stubs,; /// for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h:312,Availability,Error,Error,312,"/// Parse the section specifier indicated by ""Spec"". This is a string that can; /// appear after a .section directive in a mach-o flavored .s file. If; /// successful, this fills in the specified Out parameters and returns an; /// empty string. When an invalid section specifier is present, this returns; /// an Error indicating the problem. If no TAA was parsed, TAA is not altered,; /// and TAAWasSet becomes false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h:57,Integrability,Interface,Interface,57,"//===- MCSPIRVStreamer.h - MCStreamer SPIR-V Object File Interface -*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h:451,Testability,stub,stubs,451,"//===- MCSPIRVStreamer.h - MCStreamer SPIR-V Object File Interface -*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:29,Integrability,interface,interface,29,"/// Target specific streamer interface. This is used so that targets can; /// implement support for target specific assembly directives.; ///; /// If target foo wants to use this, it should implement 3 classes:; /// * FooTargetStreamer : public MCTargetStreamer; /// * FooTargetAsmStreamer : public FooTargetStreamer; /// * FooTargetELFStreamer : public FooTargetStreamer; ///; /// FooTargetStreamer should have a pure virtual method for each directive. For; /// example, for a "".bar symbol_name"" directive, it should have; /// virtual emitBar(const MCSymbol &Symbol) = 0;; ///; /// The FooTargetAsmStreamer and FooTargetELFStreamer classes implement the; /// method. The assembly streamer just prints "".bar symbol_name"". The object; /// streamer does whatever is needed to implement .bar in the object file.; ///; /// In the assembly printer and parser the target streamer can be used by; /// calling getTargetStreamer and casting it to FooTargetStreamer:; ///; /// MCTargetStreamer &TS = OutStreamer.getTargetStreamer();; /// FooTargetStreamer &ATS = static_cast<FooTargetStreamer &>(TS);; ///; /// The base classes FooTargetAsmStreamer and FooTargetELFStreamer should; /// *never* be treated differently. Callers should always talk to a; /// FooTargetStreamer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:4,Deployability,Update,Update,4,"/// Update streamer for a new active section.; ///; /// This is called by popSection and switchSection, if the current; /// section changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:38,Integrability,interface,interface,38,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:64,Integrability,interface,interface,64,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:112,Integrability,interface,interface,112,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:285,Integrability,interface,interface,285,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:408,Integrability,interface,interface,408,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:37,Availability,avail,available,37,/// Pointer to the parser's SMLoc if available. This is used to provide; /// locations for diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:232,Deployability,integrat,integrated,232,"/// Is the assembler allowed to insert padding automatically? For; /// correctness reasons, we sometimes need to ensure instructions aren't; /// separated in unexpected ways. At the moment, this feature is only; /// useable from an integrated assembler, but assembly syntax is under; /// discussion for future inclusion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:232,Integrability,integrat,integrated,232,"/// Is the assembler allowed to insert padding automatically? For; /// correctness reasons, we sometimes need to ensure instructions aren't; /// separated in unexpected ways. At the moment, this feature is only; /// useable from an integrated assembler, but assembly syntax is under; /// discussion for future inclusion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:127,Safety,avoid,avoid,127,"/// When emitting an object file, create and emit a real label. When emitting; /// textual assembly, this should do nothing to avoid polluting our output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:46,Availability,avail,available,46,"/// Retrieve the current frame info if one is available and it is not yet; /// closed. Otherwise, issue an error and return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:107,Availability,error,error,107,"/// Retrieve the current frame info if one is available and it is not yet; /// closed. Otherwise, issue an error and return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:11,Deployability,integrat,integrated,11,/// Is the integrated assembler required for this streamer to function; /// correctly?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:11,Integrability,integrat,integrated,11,/// Is the integrated assembler required for this streamer to function; /// correctly?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:186,Safety,safe,safe,186,"/// Print T and prefix it with the comment string (normally #) and; /// optionally a tab. This prints the comment immediately, not at the end of; /// the current line. It is basically a safe version of EmitRawText: since it; /// only prints comments, the object streamer ignores it instead of asserting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:293,Testability,assert,asserting,293,"/// Print T and prefix it with the comment string (normally #) and; /// optionally a tab. This prints the comment immediately, not at the end of; /// the current line. It is basically a safe version of EmitRawText: since it; /// only prints comments, the object streamer ignores it instead of asserting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:4,Deployability,Update,Update,4,"/// Update streamer for a new active section.; ///; /// This is called by popSection and switchSection, if the current; /// section changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:96,Deployability,update,update,96,"/// Set the current section where code is being emitted to \p Section. This; /// is required to update CurSection.; ///; /// This corresponds to assembler directives like .section, .text, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:96,Deployability,update,update,96,/// Set the current section where code is being emitted to \p Section.; /// This is required to update CurSection. This version does not call; /// changeSection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:56,Security,access,access,56,"/// Returns the mnemonic for \p MI, if the streamer has access to a; /// instruction printer and returns an empty string otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:31,Deployability,deploy,deployment,31,/// Specify the Mach-O minimum deployment target version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:18,Performance,Optimiz,Optimization,18,/// Emit a Linker Optimization Hint (LOH) directive.; /// \param Args - Arguments of the LOH.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:396,Availability,error,error,396,"/// Emit the expression \p Value into the output as a native; /// integer of the given \p Size bytes.; ///; /// This is used to implement assembler directives such as .word, .quad,; /// etc.; ///; /// \param Value - The value to emit.; /// \param Size - The size of the integer (in bytes) to emit. This must; /// match a native machine width.; /// \param Loc - The location of the expression for error reporting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:35,Safety,avoid,avoids,35,/// Special case of EmitValue that avoids the client having; /// to pass in a MCExpr for constant integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:35,Safety,avoid,avoids,35,/// Special case of EmitValue that avoids the client having to pass; /// in a MCExpr for constant integers & prints in Hex format for certain; /// modes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:35,Safety,avoid,avoids,35,"/// Special case of EmitValue that avoids the client having to pass; /// in a MCExpr for constant integers & prints in Hex format for certain; /// modes, pads the field with leading zeros to Size width",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,Safety,avoid,avoids,42,/// Special case of EmitULEB128Value that avoids the client having to; /// pass in a MCExpr for constant integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,Safety,avoid,avoids,42,/// Special case of EmitSLEB128Value that avoids the client having to; /// pass in a MCExpr for constant integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:35,Safety,avoid,avoids,35,/// Special case of EmitValue that avoids the client having to pass in; /// a MCExpr for MCSymbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:322,Availability,error,error,322,/// Emit \p Size bytes worth of the value specified by \p FillValue.; ///; /// This is used to implement assembler directives such as .space or .skip.; ///; /// \param NumBytes - The number of bytes to emit.; /// \param FillValue - The value to use when filling bytes.; /// \param Loc - The location of the expression for error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:203,Performance,optimiz,optimize,203,"/// Emit nops until the byte alignment \p ByteAlignment is reached.; ///; /// This used to align code where the alignment bytes may be executed. This; /// can emit different bytes for different sizes to optimize execution.; ///; /// \param Alignment - The alignment to reach.; /// \param STI - The MCSubtargetInfo in operation when padding is emitted.; /// \param MaxBytesToEmit - The maximum numbers of bytes to emit, or 0. If; /// the alignment cannot be reached in this many bytes, no bytes are; /// emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:28,Testability,log,logical,28,"/// @}; /// Switch to a new logical file. This is used to implement the '.file; /// ""foo.c""' assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,Testability,log,logical,42,"/// Associate a filename with a specified logical file number. This; /// implements the DWARF2 '.file 4 ""foo.c""' assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:105,Security,checksum,checksum,105,"/// Associate a filename with a specified logical file number.; /// Also associate a directory, optional checksum, and optional source; /// text with the logical file. This implements the DWARF2; /// '.file 4 ""dir/foo.c""' assembler directive, and the DWARF5; /// '.file 4 ""dir/foo.c"" md5 ""..."" source ""...""' assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,Testability,log,logical,42,"/// Associate a filename with a specified logical file number.; /// Also associate a directory, optional checksum, and optional source; /// text with the logical file. This implements the DWARF2; /// '.file 4 ""dir/foo.c""' assembler directive, and the DWARF5; /// '.file 4 ""dir/foo.c"" md5 ""..."" source ""...""' assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:154,Testability,log,logical,154,"/// Associate a filename with a specified logical file number.; /// Also associate a directory, optional checksum, and optional source; /// text with the logical file. This implements the DWARF2; /// '.file 4 ""dir/foo.c""' assembler directive, and the DWARF5; /// '.file 4 ""dir/foo.c"" md5 ""..."" source ""...""' assembler directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:97,Security,checksum,checksum,97,"/// Associate a filename with a specified logical file number, and also; /// specify that file's checksum information. This implements the '.cv_file 4; /// ""foo.c""' assembler directive. Returns true on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,Testability,log,logical,42,"/// Associate a filename with a specified logical file number, and also; /// specify that file's checksum information. This implements the '.cv_file 4; /// ""foo.c""' assembler directive. Returns true on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:141,Availability,error,error,141,"/// Record a relocation described by the .reloc directive. Return std::nullopt; /// if succeeded. Otherwise, return a pair (Name is invalid, error message).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:147,Integrability,message,message,147,"/// Record a relocation described by the .reloc directive. Return std::nullopt; /// if succeeded. Otherwise, return a pair (Name is invalid, error message).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:199,Safety,abort,aborts,199,"/// If this file is backed by a assembly streamer, this dumps the; /// specified string in the output .s file. This capability is indicated by; /// the hasRawTextSupport() predicate. By default this aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:13,Availability,mask,mask,13,///< K-V bit mask; /// Compare routine for std::lower_bound,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:31,Integrability,rout,routine,31,///< K-V bit mask; /// Compare routine for std::lower_bound,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:12,Integrability,rout,routine,12,/// Compare routine for std::is_sorted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:13,Availability,mask,mask,13,///< K-V bit mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:13,Availability,mask,mask,13,///< K-V bit mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:12,Integrability,rout,routine,12,/// Compare routine for std::lower_bound,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:12,Integrability,rout,routine,12,/// Compare routine for std::is_sorted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:13,Performance,tune,tuned,13,// CPU being tuned for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:30,Energy Efficiency,Schedul,Scheduler,30,// Processor descriptions; // Scheduler machine model,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:19,Energy Efficiency,schedul,scheduling,19,"/// Initialize the scheduling model and feature bits.; ///; /// FIXME: Find a way to stick this in the constructor, since it should only; /// be called during initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:58,Performance,Tune,TuneCPU,58,"/// Set the features to the default for the given CPU and TuneCPU, with ano; /// appended feature string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:4,Deployability,Toggle,Toggle,4,/// Toggle a feature and return the re-computed feature bits.; /// This version does not change the implied bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:4,Deployability,Toggle,Toggle,4,/// Toggle a feature and return the re-computed feature bits.; /// This version does not change the implied bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:4,Deployability,Toggle,Toggle,4,/// Toggle a set of features and return the re-computed feature bits.; /// This version will also change all implied bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:8,Usability,clear,clear,8,"/// Set/clear additional feature bits, including all other bits they imply.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:80,Energy Efficiency,schedul,scheduling,80,/// Return an iterator at the first process resource consumed by the given; /// scheduling class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:58,Energy Efficiency,schedul,scheduling,58,/// Return the set of ReadAdvance entries declared by the scheduling class; /// descriptor in input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:8,Energy Efficiency,schedul,scheduling,8,/// Get scheduling itinerary of a CPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:22,Energy Efficiency,schedul,scheduling,22,/// Resolve a variant scheduling class for the given MCInst and CPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:15,Performance,cache,cache,15,"/// Return the cache size in bytes for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:58,Performance,cache,cache,58,"/// Return the cache size in bytes for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:140,Performance,cache,cache,140,"/// Return the cache size in bytes for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:15,Performance,cache,cache,15,"/// Return the cache associatvity for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:57,Performance,cache,cache,57,"/// Return the cache associatvity for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:139,Performance,cache,cache,139,"/// Return the cache associatvity for the given level of cache.; /// Level is zero-based, so a value of zero means the first level of; /// cache.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:22,Performance,cache,cache,22,/// Return the target cache line size in bytes at a given level.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:159,Integrability,interface,interface,159,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:22,Performance,cache,cache,22,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:115,Performance,cache,cache,115,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:199,Performance,cache,cache,199,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:274,Performance,cache,cache,274,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:179,Modifiability,variab,variable,179,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:212,Modifiability,variab,variable,212,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:201,Performance,cache,caches,201,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:271,Usability,simpl,simplify,271,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:86,Energy Efficiency,allocate,allocated,86,/// True if this symbol is named. A named symbol will have a pointer to the; /// name allocated in the bytes immediately prior to the MCSymbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:95,Safety,avoid,avoid,95,"/// LLVM RTTI discriminator. This is actually a SymbolKind enumerator, but is; /// unsigned to avoid sign extension and achieve better bitpacking with MSVC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:63,Safety,avoid,avoid,63,"/// This is actually a Contents enumerator, but is unsigned to avoid sign; /// extension and achieve better bitpacking with MSVC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:33,Modifiability,variab,variable,33,"/// If non-null, the value for a variable symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:45,Energy Efficiency,allocate,allocate,45,// Provide custom new/delete as we will only allocate space for a name; // if we need one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:10,Security,Access,Accessors,10,/// \name Accessors; /// @{; /// isTemporary - Check if this is an assembler temporary symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:18,Modifiability,Variab,Variable,18,/// @}; /// \name Variable Symbols; /// @{; /// isVariable - Check if this is a variable symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:80,Modifiability,variab,variable,80,/// @}; /// \name Variable Symbols; /// @{; /// isVariable - Check if this is a variable symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:41,Modifiability,variab,variable,41,/// getVariableValue - Get the value for variable symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:27,Availability,mask,mask,27,/// Modify the flags via a mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbolWasm.h:90,Safety,avoid,avoid,90,"// wasm-ld understands a finite set of symbol types. This flag allows the; // compiler to avoid emitting symbol table entries that would confuse the; // linker, unless the user specifically requests the feature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbolWasm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbolWasm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h:37,Availability,avail,available,37,// Only emit if compact unwind isn't available,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h:77,Deployability,integrat,integrated,77,/// Additional paths to search for `.include` directives when using the; /// integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h:77,Integrability,integrat,integrated,77,/// Additional paths to search for `.include` directives when using the; /// integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h:48,Energy Efficiency,Power,PowerPC,48,// Whether or not to use full register names on PowerPC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCTargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h:433,Availability,down,down,433,"/// This represents an ""assembler immediate"".; ///; /// In its most general form, this can hold "":Kind:(SymbolA - SymbolB +; /// imm64)"". Not all targets supports relocations of this general form, but we; /// need to represent this anyway.; ///; /// In general both SymbolA and SymbolB will also have a modifier; /// analogous to the top-level Kind. Current targets are not expected; /// to make use of both though. The choice comes down to whether; /// relocation modifiers apply to the closest symbol or the whole; /// expression.; ///; /// Note that this class must remain a simple POD value class, because we need; /// it to live in unions etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h:578,Usability,simpl,simple,578,"/// This represents an ""assembler immediate"".; ///; /// In its most general form, this can hold "":Kind:(SymbolA - SymbolB +; /// imm64)"". Not all targets supports relocations of this general form, but we; /// need to represent this anyway.; ///; /// In general both SymbolA and SymbolB will also have a modifier; /// analogous to the top-level Kind. Current targets are not expected; /// to make use of both though. The choice comes down to whether; /// relocation modifiers apply to the closest symbol or the whole; /// expression.; ///; /// Note that this class must remain a simple POD value class, because we need; /// it to live in unions etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmObjectWriter.h:10,Security,Access,Accessors,10,/// \name Accessors; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCWasmObjectWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmObjectWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h:54,Integrability,Interface,Interface,54,"//===- MCWasmStreamer.h - MCStreamer Wasm Object File Interface -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h:21,Integrability,Interface,Interface,21,/// \name MCStreamer Interface; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWasmStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h:46,Integrability,Interface,Interface,46,"//===- MCWinCOFFStreamer.h - COFF Object File Interface ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h:21,Integrability,interface,interface,21,/// \name MCStreamer interface; /// \{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCXCOFFStreamer.h:62,Integrability,Interface,Interface,62,"//===- MCXCOFFObjectStreamer.h - MCStreamer XCOFF Object File Interface ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCXCOFFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCXCOFFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:322,Modifiability,inherit,inheritance,322,"/// SectionKind - This is a simple POD value that classifies the properties of; /// a section. A section is classified into the deepest possible; /// classification, and then the target maps them onto their sections based on; /// what capabilities they have.; ///; /// The comments below describe these as if they were an inheritance hierarchy; /// in order to explain the predicates below.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:28,Usability,simpl,simple,28,"/// SectionKind - This is a simple POD value that classifies the properties of; /// a section. A section is classified into the deepest possible; /// classification, and then the target maps them onto their sections based on; /// what capabilities they have.; ///; /// The comments below describe these as if they were an inheritance hierarchy; /// in order to explain the predicates below.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:39,Modifiability,variab,variables,39,"/// ReadOnlyWithRel - These are global variables that are never; /// written to by the program, but that have relocations, so they; /// must be stuck in a writeable section so that the dynamic linker; /// can write to them. If it chooses to, the dynamic linker can; /// mark the pages these globals end up on as read-only after it is; /// done with its relocation phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:420,Integrability,interface,interface,420,"//===- MC/TargetRegistry.h - Target Registration ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the TargetRegistry interface, which tools can use to access; // the appropriate target specific classes (TargetMachine, AsmPrinter, etc.); // which have been registered.; //; // Target specific class implementations should register themselves using the; // appropriate TargetRegistry interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:685,Integrability,interface,interfaces,685,"//===- MC/TargetRegistry.h - Target Registration ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the TargetRegistry interface, which tools can use to access; // the appropriate target specific classes (TargetMachine, AsmPrinter, etc.); // which have been registered.; //; // Target specific class implementations should register themselves using the; // appropriate TargetRegistry interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:393,Security,expose,exposes,393,"//===- MC/TargetRegistry.h - Target Registration ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the TargetRegistry interface, which tools can use to access; // the appropriate target specific classes (TargetMachine, AsmPrinter, etc.); // which have been registered.; //; // Target specific class implementations should register themselves using the; // appropriate TargetRegistry interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:454,Security,access,access,454,"//===- MC/TargetRegistry.h - Target Registration ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the TargetRegistry interface, which tools can use to access; // the appropriate target specific classes (TargetMachine, AsmPrinter, etc.); // which have been registered.; //; // Target specific class implementations should register themselves using the; // appropriate TargetRegistry interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:13,Integrability,Wrap,Wrapper,13,"/// Target - Wrapper for Target specific information.; ///; /// For registration purposes, this is a POD type so that targets can be; /// registered without the use of static constructors.; ///; /// Targets should implement a single global instance of this class (which; /// will be zero initialized), and pass that instance to the TargetRegistry as; /// part of their initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:78,Integrability,depend,depends,78,"// If it weren't for layering issues (this header is in llvm/Support, but; // depends on MC?) this should take the Streamer by value rather than rvalue; // reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:29,Integrability,interface,interface,29,/// TargetRegistry - Generic interface to target specific features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:19,Security,Access,Access,19,/// @name Registry Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:139,Availability,Error,Error,139,"/// lookupTarget - Lookup a target based on a target triple.; ///; /// \param Triple - The triple to use for finding a target.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:150,Availability,failure,failure,150,"/// lookupTarget - Lookup a target based on a target triple.; ///; /// \param Triple - The triple to use for finding a target.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:162,Availability,error,error,162,"/// lookupTarget - Lookup a target based on a target triple.; ///; /// \param Triple - The triple to use for finding a target.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:471,Availability,Error,Error,471,"/// lookupTarget - Lookup a target based on an architecture name; /// and a target triple. If the architecture name is non-empty,; /// then the lookup is done by architecture. Otherwise, the target; /// triple is used.; ///; /// \param ArchName - The architecture to use for finding a target.; /// \param TheTriple - The triple to use for finding a target. The; /// triple is updated with canonical architecture name if a lookup; /// by architecture is done.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:482,Availability,failure,failure,482,"/// lookupTarget - Lookup a target based on an architecture name; /// and a target triple. If the architecture name is non-empty,; /// then the lookup is done by architecture. Otherwise, the target; /// triple is used.; ///; /// \param ArchName - The architecture to use for finding a target.; /// \param TheTriple - The triple to use for finding a target. The; /// triple is updated with canonical architecture name if a lookup; /// by architecture is done.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:494,Availability,error,error,494,"/// lookupTarget - Lookup a target based on an architecture name; /// and a target triple. If the architecture name is non-empty,; /// then the lookup is done by architecture. Otherwise, the target; /// triple is used.; ///; /// \param ArchName - The architecture to use for finding a target.; /// \param TheTriple - The triple to use for finding a target. The; /// triple is updated with canonical architecture name if a lookup; /// by architecture is done.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:376,Deployability,update,updated,376,"/// lookupTarget - Lookup a target based on an architecture name; /// and a target triple. If the architecture name is non-empty,; /// then the lookup is done by architecture. Otherwise, the target; /// triple is used.; ///; /// \param ArchName - The architecture to use for finding a target.; /// \param TheTriple - The triple to use for finding a target. The; /// triple is updated with canonical architecture name if a lookup; /// by architecture is done.; /// \param Error - On failure, an error string describing why no target was; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:303,Security,access,access,303,/// @}; /// @name Target Registration; /// @{; /// RegisterTarget - Register the given target. Attempts to register a; /// target which has already been registered will be ignored.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Name - The target name. This should be a static string.; /// @param ShortDesc - A short target description. This should be a static; /// string.; /// @param BackendName - The name of the backend. This should be a static; /// string that is the same for all targets that share a backend; /// implementation and must match the name used in the 'def X : Target ...' in; /// TableGen.; /// @param ArchMatchFn - The arch match checking function for this target.; /// @param HasJIT - Whether the target supports JIT code; /// generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:209,Security,access,access,209,/// RegisterMCAsmInfo - Register a MCAsmInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCAsmInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:191,Security,access,access,191,/// Register a MCObjectFileInfo implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCObjectFileInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:213,Security,access,access,213,/// RegisterMCInstrInfo - Register a MCInstrInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCInstrInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:214,Security,access,access,214,/// RegisterMCRegInfo - Register a MCRegisterInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCRegisterInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:221,Security,access,access,221,/// RegisterMCSubtargetInfo - Register a MCSubtargetInfo implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCSubtargetInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,Security,access,access,217,/// RegisterTargetMachine - Register a TargetMachine implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a TargetMachine for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:215,Security,access,access,215,/// RegisterMCAsmBackend - Register a MCAsmBackend implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an AsmBackend for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:219,Security,access,access,219,/// RegisterMCAsmParser - Register a MCTargetAsmParser implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCTargetAsmParser for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:212,Security,access,access,212,/// RegisterAsmPrinter - Register an AsmPrinter implementation for the given; /// target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an AsmPrinter for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:219,Security,access,access,219,/// RegisterMCDisassembler - Register a MCDisassembler implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCDisassembler for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,Security,access,access,217,/// RegisterMCInstPrinter - Register a MCInstPrinter implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCInstPrinter for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,Security,access,access,217,/// RegisterMCCodeEmitter - Register a MCCodeEmitter implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCCodeEmitter for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:224,Security,access,access,224,/// RegisterMCRelocationInfo - Register an MCRelocationInfo; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCRelocationInfo for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:216,Security,access,access,216,/// RegisterMCSymbolizer - Register an MCSymbolizer; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCSymbolizer for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:221,Security,access,access,221,/// RegisterCustomBehaviour - Register a CustomBehaviour; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a CustomBehaviour for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:224,Security,access,access,224,/// RegisterInstrPostProcess - Register an InstrPostProcess; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an InstrPostProcess for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:226,Security,access,access,226,/// RegisterInstrumentManager - Register an InstrumentManager; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an InstrumentManager for the; /// target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:47,Integrability,interface,interface,47,"//===- llvm/MC/MCDisassembler.h - Disassembler interface --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:414,Availability,failure,failure,414,"/// Ternary decode status. Most backends will just use Fail and; /// Success, however some have a concept of an instruction with; /// understandable semantics but which is architecturally; /// incorrect. An example of this is ARM UNPREDICTABLE instructions; /// which are disassemblable but cause undefined behaviour.; ///; /// Because it makes sense to disassemble these instructions, there; /// is a ""soft fail"" failure mode that indicates the MCInst& is; /// valid but architecturally incorrect.; ///; /// The enum numbers are deliberately chosen such that reduction; /// from Success->SoftFail ->Fail can be done with a simple; /// bitwise-AND:; ///; /// LEFT & TOP = | Success Unpredictable Fail; /// --------------+-----------------------------------; /// Success | Success Unpredictable Fail; /// Unpredictable | Unpredictable Unpredictable Fail; /// Fail | Fail Fail Fail; ///; /// An easy way of encoding this is as 0b11, 0b01, 0b00 for; /// Success, SoftFail, Fail respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:624,Usability,simpl,simple,624,"/// Ternary decode status. Most backends will just use Fail and; /// Success, however some have a concept of an instruction with; /// understandable semantics but which is architecturally; /// incorrect. An example of this is ARM UNPREDICTABLE instructions; /// which are disassemblable but cause undefined behaviour.; ///; /// Because it makes sense to disassemble these instructions, there; /// is a ""soft fail"" failure mode that indicates the MCInst& is; /// valid but architecturally incorrect.; ///; /// The enum numbers are deliberately chosen such that reduction; /// from Success->SoftFail ->Fail can be done with a simple; /// bitwise-AND:; ///; /// LEFT & TOP = | Success Unpredictable Fail; /// --------------+-----------------------------------; /// Success | Success Unpredictable Fail; /// Unpredictable | Unpredictable Unpredictable Fail; /// Fail | Fail Fail Fail; ///; /// An easy way of encoding this is as 0b11, 0b01, 0b00 for; /// Success, SoftFail, Fail respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:12,Performance,perform,perform,12,"/// Used to perform separate target specific disassembly for a particular; /// symbol. May parse any prelude that precedes instructions after the; /// start of a symbol, or the entire symbol.; /// This is used for example by WebAssembly to decode preludes.; ///; /// Base implementation returns std::nullopt. So all targets by default ignore; /// to treat symbols separately.; ///; /// \param Symbol - The symbol.; /// \param Size - The number of bytes consumed.; /// \param Address - The address, in the memory space of region, of the first; /// byte of the symbol.; /// \param Bytes - A reference to the actual bytes at the symbol location.; /// \param CStream - The stream to print comments and annotations on.; /// \return - MCDisassembler::Success if bytes are decoded; /// successfully. Size must hold the number of bytes that; /// were decoded.; /// - MCDisassembler::Fail if the bytes are invalid. Size; /// must hold the number of bytes that were decoded before; /// failing. The target must print nothing. This can be; /// done by buffering the output if needed.; /// - std::nullopt if the target doesn't want to handle the; /// symbol separately. Value of Size is ignored in this; /// case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:1142,Availability,avail,available,1142,"// TODO:; // Implement similar hooks that can be used at other points during; // disassembly. Something along the following lines:; // - onBeforeInstructionDecode(); // - onAfterInstructionDecode(); // - onSymbolEnd(); // It should help move much of the target specific code from llvm-objdump to; // respective target disassemblers.; /// Suggest a distance to skip in a buffer of data to find the next; /// place to look for the start of an instruction. For example, if; /// all instructions have a fixed alignment, this might advance to; /// the next multiple of that alignment.; ///; /// If not overridden, the default is 1.; ///; /// \param Address - The address, in the memory space of region, of the; /// starting point (typically the first byte of something; /// that did not decode as a valid instruction at all).; /// \param Bytes - A reference to the actual bytes at Address. May be; /// needed in order to determine the width of an; /// unrecognized instruction (e.g. in Thumb this is a simple; /// consistent criterion that doesn't require knowing the; /// specific instruction). The caller can pass as much data; /// as they have available, and the function is required to; /// make a reasonable default choice if not enough data is; /// available to make a better one.; /// \return - A number of bytes to skip. Must always be greater than; /// zero. May be greater than the size of Bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:1250,Availability,avail,available,1250,"// TODO:; // Implement similar hooks that can be used at other points during; // disassembly. Something along the following lines:; // - onBeforeInstructionDecode(); // - onAfterInstructionDecode(); // - onSymbolEnd(); // It should help move much of the target specific code from llvm-objdump to; // respective target disassemblers.; /// Suggest a distance to skip in a buffer of data to find the next; /// place to look for the start of an instruction. For example, if; /// all instructions have a fixed alignment, this might advance to; /// the next multiple of that alignment.; ///; /// If not overridden, the default is 1.; ///; /// \param Address - The address, in the memory space of region, of the; /// starting point (typically the first byte of something; /// that did not decode as a valid instruction at all).; /// \param Bytes - A reference to the actual bytes at Address. May be; /// needed in order to determine the width of an; /// unrecognized instruction (e.g. in Thumb this is a simple; /// consistent criterion that doesn't require knowing the; /// specific instruction). The caller can pass as much data; /// as they have available, and the function is required to; /// make a reasonable default choice if not enough data is; /// available to make a better one.; /// \return - A number of bytes to skip. Must always be greater than; /// zero. May be greater than the size of Bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:997,Usability,simpl,simple,997,"// TODO:; // Implement similar hooks that can be used at other points during; // disassembly. Something along the following lines:; // - onBeforeInstructionDecode(); // - onAfterInstructionDecode(); // - onSymbolEnd(); // It should help move much of the target specific code from llvm-objdump to; // respective target disassemblers.; /// Suggest a distance to skip in a buffer of data to find the next; /// place to look for the start of an instruction. For example, if; /// all instructions have a fixed alignment, this might advance to; /// the next multiple of that alignment.; ///; /// If not overridden, the default is 1.; ///; /// \param Address - The address, in the memory space of region, of the; /// starting point (typically the first byte of something; /// that did not decode as a valid instruction at all).; /// \param Bytes - A reference to the actual bytes at Address. May be; /// needed in order to determine the width of an; /// unrecognized instruction (e.g. in Thumb this is a simple; /// consistent criterion that doesn't require knowing the; /// specific instruction). The caller can pass as much data; /// as they have available, and the function is required to; /// make a reasonable default choice if not enough data is; /// available to make a better one.; /// \return - A number of bytes to skip. Must always be greater than; /// zero. May be greater than the size of Bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:29,Performance,cache,cache,29,"// Marked mutable because we cache it inside the disassembler, rather than; // having to pass it around as an argument through all the autogenerated code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h:60,Integrability,interface,interface,60,/// \name Hooks for symbolic disassembly via the public 'C' interface.; /// @{; /// The function to get the symbolic information for operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:106,Testability,log,logic,106,"/// Symbolize and annotate disassembled instructions.; ///; /// For now this mimics the old symbolization logic (from both ARM and x86), that; /// relied on user-provided (C API) callbacks to do the actual symbol lookup in; /// the object file. This was moved to MCExternalSymbolizer.; /// A better API would not rely on actually calling the two methods here from; /// inside each disassembler, but would use the instr info to determine what; /// operands are actually symbolizable, and in what way. I don't think this; /// information exists right now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:572,Performance,Load,Load,572,"/// Try to add a symbolic operand instead of \p Value to the MCInst.; ///; /// Instead of having a difficult to read immediate, a symbolic operand would; /// represent this immediate in a more understandable way, for instance as a; /// symbol or an offset from a symbol. Relocations can also be used to enrich; /// the symbolic expression.; /// \param Inst - The MCInst where to insert the symbolic operand.; /// \param cStream - Stream to print comments and annotations on.; /// \param Value - Operand value, pc-adjusted by the caller if necessary.; /// \param Address - Load address of the instruction.; /// \param IsBranch - Is the instruction a branch?; /// \param Offset - Byte offset of the operand inside the inst.; /// \param OpSize - Size of the operand in bytes.; /// \param InstSize - Size of the instruction in bytes.; /// \return Whether a symbolic operand was added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:44,Performance,load,load,44,"/// Try to add a comment on the PC-relative load.; /// For instance, in Mach-O, this is used to add annotations to instructions; /// that use C string literals, as found in __cstring.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:377,Modifiability,enhance,enhanced,377,"/// Get the MCSymbolizer's list of addresses that were referenced by; /// symbolizable operands but not resolved to a symbol. The caller (some; /// code that is disassembling a section or other chunk of code) would; /// typically create a synthetic label at each address and add them to its; /// list of symbols in the section, before creating a new MCSymbolizer with; /// the enhanced symbol list and retrying disassembling the section.; /// The returned array is unordered and may have duplicates.; /// The returned ArrayRef stops being valid on any call to or destruction of; /// the MCSymbolizer object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:49,Integrability,Interface,Interface,49,"//===- llvm/MC/MCAsmLexer.h - Abstract Asm Lexer Interface ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:28,Integrability,interface,interface,28,"/// Generic assembler lexer interface, for use by target specific assembly; /// lexers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:59,Security,access,access,59,"/// The current token, stored in the base class for faster access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:48,Availability,error,error,48,/// The location and description of the current error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:89,Deployability,continuous,continuously,89,/// Consume the next token from the input stream and return it.; ///; /// The lexer will continuously return the end-of-file token once the end of; /// the main input file has been reached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:20,Availability,error,error,20,/// Get the current error location,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:20,Availability,error,error,20,/// Get the current error string,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:51,Integrability,Interface,Interface,51,"//===- llvm/MC/MCAsmParser.h - Abstract Asm Parser Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:3,Modifiability,Variab,Variable,3,// Variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:16,Modifiability,variab,variable,16,// Represents a variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:29,Integrability,interface,interface,29,"/// Generic assembler parser interface, for use by target specific; /// assembly parsers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:30,Availability,error,errors,30,/// Flag tracking whether any errors have been encountered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:47,Integrability,message,message,47,"/// Emit a note at the location \p L, with the message \p Msg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:50,Integrability,message,message,50,"/// Emit a warning at the location \p L, with the message \p Msg.; ///; /// \return The return value is true, if warnings are fatal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:14,Availability,error,error,14,"/// Return an error at the location \p L, with the message \p Msg. This; /// may be modified before being emitted.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:51,Integrability,message,message,51,"/// Return an error at the location \p L, with the message \p Msg. This; /// may be modified before being emitted.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:12,Availability,error,error,12,"/// Emit an error at the location \p L, with the message \p Msg.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:49,Integrability,message,message,49,"/// Emit an error at the location \p L, with the message \p Msg.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:14,Availability,error,error,14,/// Report an error at the current lexer location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:50,Availability,error,error,50,"/// Skip to the end of the current statement, for error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:56,Availability,recover,recovery,56,"/// Skip to the end of the current statement, for error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:56,Safety,recover,recovery,56,"/// Skip to the end of the current statement, for error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:119,Availability,error,error,119,/// Parse an arbitrary expression.; ///; /// \param Res - The value of the expression. The result is undefined; /// on error.; /// \return - False on success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:116,Availability,error,error,116,/// Parse a primary expression.; ///; /// \param Res - The value of the expression. The result is undefined; /// on error.; /// \return - False on success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:180,Availability,error,error,180,"/// Parse an arbitrary expression, assuming that an initial '(' has; /// already been consumed.; ///; /// \param Res - The value of the expression. The result is undefined; /// on error.; /// \return - False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:159,Availability,error,error,159,/// Parse an expression which must evaluate to an absolute value.; ///; /// \param Res - The value of the absolute expression. The result is undefined; /// on error.; /// \return - False on success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:87,Availability,error,error,87,"/// Ensure that we have a valid section set in the streamer. Otherwise,; /// report an error and switch to .text.; /// \return - False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:346,Availability,error,error,346,"/// Parse an arbitrary expression of a specified parenthesis depth,; /// assuming that the initial '(' characters have already been consumed.; ///; /// \param ParenDepth - Specifies how many trailing expressions outside the; /// current parentheses we have to parse.; /// \param Res - The value of the expression. The result is undefined; /// on error.; /// \return - False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:12,Integrability,interface,interface,12,"/// Generic interface for extending the MCAsmParser,; /// which is implemented by target and object file assembly parser; /// implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:26,Modifiability,extend,extending,26,"/// Generic interface for extending the MCAsmParser,; /// which is implemented by target and object file assembly parser; /// implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:112,Integrability,interface,interfaces,112,/// Initialize the extension for parsing using the given \p Parser.; /// The extension should use the AsmParser interfaces to register its; /// parsing routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:152,Integrability,rout,routines,152,/// Initialize the extension for parsing using the given \p Parser.; /// The extension should use the AsmParser interfaces to register its; /// parsing routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:28,Integrability,Interface,Interfaces,28,/// \name MCAsmParser Proxy Interfaces; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h:225,Integrability,interface,interface,225,/// MCParsedAsmOperand - This abstract class represents a source-level assembly; /// instruction operand. It should be subclassed by target-specific code. This; /// base class is used by target-independent clients and is the interface; /// between parsing an asm instruction and recognizing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h:147,Safety,avoid,avoid,147,"// This only seems to need to be movable (by ARMOperand) but ARMOperand has; // lots of members and MSVC doesn't support defaulted move ops, so to avoid; // that verbosity, just rely on defaulted copy ops. It's only the Constraint; // string member that would benefit from movement anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h:75,Modifiability,variab,variable,75,/// needAddressOf - Do we need to emit code to get the address of the; /// variable/label? Only valid when parsing MS-style inline assembly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h:82,Modifiability,variab,variable,82,"/// isOffsetOfLocal - Do we need to emit code to get the offset of the local; /// variable, rather than its value? Only valid when parsing MS-style inline; /// assembly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite align as .align.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite even as .even.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite _emit as .byte.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite in terms of ${N:P}.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite in terms of $N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite in terms of $N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Modifiability,Rewrite,Rewrite,3,// Rewrite local labels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:27,Availability,error,errors,27,// operand matched but had errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:789,Modifiability,extend,extend,789,"// When an operand is parsed, the assembler will try to iterate through a set of; // possible operand classes that the operand might match and call the; // corresponding PredicateMethod to determine that.; //; // If there are two AsmOperands that would give a specific diagnostic if there; // is no match, there is currently no mechanism to distinguish which operand is; // a closer match. The DiagnosticPredicate distinguishes between 'completely; // no match' and 'near match', so the assembler can decide whether to give a; // specific diagnostic, or use 'InvalidOperand' and continue to find a; // 'better matching' diagnostic.; //; // For example:; // opcode opnd0, onpd1, opnd2; //; // where:; // opnd2 could be an 'immediate of range [-8, 7]'; // opnd2 could be a 'register + shift/extend'.; //; // If opnd2 is a valid register, but with a wrong shift/extend suffix, it makes; // little sense to give a diagnostic that the operand should be an immediate; // in range [-8, 7].; //; // This is a light-weight alternative to the 'NearMissInfo' approach; // below which collects *all* possible diagnostics. This alternative; // is optional and fully backward compatible with existing; // PredicateMethods that return a 'bool' (match or no match).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:859,Modifiability,extend,extend,859,"// When an operand is parsed, the assembler will try to iterate through a set of; // possible operand classes that the operand might match and call the; // corresponding PredicateMethod to determine that.; //; // If there are two AsmOperands that would give a specific diagnostic if there; // is no match, there is currently no mechanism to distinguish which operand is; // a closer match. The DiagnosticPredicate distinguishes between 'completely; // no match' and 'near match', so the assembler can decide whether to give a; // specific diagnostic, or use 'InvalidOperand' and continue to find a; // 'better matching' diagnostic.; //; // For example:; // opcode opnd0, onpd1, opnd2; //; // where:; // opnd2 could be an 'immediate of range [-8, 7]'; // opnd2 could be a 'register + shift/extend'.; //; // If opnd2 is a valid register, but with a wrong shift/extend suffix, it makes; // little sense to give a diagnostic that the operand should be an immediate; // in range [-8, 7].; //; // This is a light-weight alternative to the 'NearMissInfo' approach; // below which collects *all* possible diagnostics. This alternative; // is optional and fully backward compatible with existing; // PredicateMethods that return a 'bool' (match or no match).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:211,Availability,error,error,211,"// When matching of an assembly instruction fails, there may be multiple; // encodings that are close to being a match. It's often ambiguous which one; // the programmer intended to use, so we want to report an error which mentions; // each of these ""near-miss"" encodings. This struct contains information about; // one such encoding, and why it did not match the parsed instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:104,Availability,error,error,104,// The instruction encoding is not valid because the target-specific; // predicate function returned an error code. FailureCode is the; // target-specific error code returned by the predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:116,Availability,Failure,FailureCode,116,// The instruction encoding is not valid because the target-specific; // predicate function returned an error code. FailureCode is the; // target-specific error code returned by the predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:155,Availability,error,error,155,// The instruction encoding is not valid because the target-specific; // predicate function returned an error code. FailureCode is the; // target-specific error code returned by the predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:135,Availability,error,error,135,// The instruction encoding is not valid because one (and only one) parsed; // operand is not of the correct type. OperandError is the error code; // relating to the operand class expected by the encoding. OperandClass is; // the type of the expected operand. Opcode is the opcode of the encoding.; // OperandIndex is the index into the parsed operand list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Availability,Error,Error,3,// Error code returned by the target predicate when validating this; // instruction encoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:52,Security,validat,validating,52,// Error code returned by the target predicate when validating this; // instruction encoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Availability,Error,Error,3,// Error code returned when validating the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:28,Security,validat,validating,28,// Error code returned when validating the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:54,Safety,safe,safely,54,"// These two structs share a common prefix, so we can safely rely on the fact; // that they overlap in the union.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:32,Integrability,interface,interface,32,/// MCTargetAsmParser - Generic interface to target specific assembly parsers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:4,Availability,Avail,AvailableFeatures,4,/// AvailableFeatures - The current set of available features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:43,Availability,avail,available,43,/// AvailableFeatures - The current set of available features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:256,Availability,error,error,256,"/// ParseInstruction - Parse one assembly instruction.; ///; /// The parser is positioned following the instruction name. The target; /// specific instruction parser should parse the entire instruction and; /// construct the appropriate MCInst, or emit an error. On success, the entire; /// line should be parsed up to and including the end-of-statement token. On; /// failure, the parser is not required to read to the end of the line.; //; /// \param Name - The instruction name.; /// \param NameLoc - The source location of the name.; /// \param Operands [out] - The list of parsed operands, this returns; /// ownership of them to the caller.; /// \return True on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:369,Availability,failure,failure,369,"/// ParseInstruction - Parse one assembly instruction.; ///; /// The parser is positioned following the instruction name. The target; /// specific instruction parser should parse the entire instruction and; /// construct the appropriate MCInst, or emit an error. On success, the entire; /// line should be parsed up to and including the end-of-statement token. On; /// failure, the parser is not required to read to the end of the line.; //; /// \param Name - The instruction name.; /// \param NameLoc - The source location of the name.; /// \param Operands [out] - The list of parsed operands, this returns; /// ownership of them to the caller.; /// \return True on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:667,Availability,failure,failure,667,"/// ParseInstruction - Parse one assembly instruction.; ///; /// The parser is positioned following the instruction name. The target; /// specific instruction parser should parse the entire instruction and; /// construct the appropriate MCInst, or emit an error. On success, the entire; /// line should be parsed up to and including the end-of-statement token. On; /// failure, the parser is not required to read to the end of the line.; //; /// \param Name - The instruction name.; /// \param NameLoc - The source location of the name.; /// \param Operands [out] - The list of parsed operands, this returns; /// ownership of them to the caller.; /// \return True on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:252,Availability,error,error,252,"/// Parses a target-specific assembler directive.; ///; /// The parser is positioned following the directive name. The target-specific; /// directive parser should parse the entire directive doing or recording any; /// target-specific work, or emit an error. On success, the entire line should; /// be parsed up to and including the end-of-statement token. On failure, the; /// parser is not required to read to the end of the line. If the directive is; /// not target-specific, no tokens should be consumed and NoMatch is returned.; ///; /// \param DirectiveID - The token identifying the directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:360,Availability,failure,failure,360,"/// Parses a target-specific assembler directive.; ///; /// The parser is positioned following the directive name. The target-specific; /// directive parser should parse the entire directive doing or recording any; /// target-specific work, or emit an error. On success, the entire line should; /// be parsed up to and including the end-of-statement token. On failure, the; /// parser is not required to read to the end of the line. If the directive is; /// not target-specific, no tokens should be consumed and NoMatch is returned.; ///; /// \param DirectiveID - The token identifying the directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:206,Availability,failure,failure,206,"/// MatchAndEmitInstruction - Recognize a series of operands of a parsed; /// instruction as an actual MCInst and emit it to the specified MCStreamer.; /// This returns false on success and returns true on failure to match.; ///; /// On failure, the target parser is responsible for emitting a diagnostic; /// explaining the match failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:237,Availability,failure,failure,237,"/// MatchAndEmitInstruction - Recognize a series of operands of a parsed; /// instruction as an actual MCInst and emit it to the specified MCStreamer.; /// This returns false on success and returns true on failure to match.; ///; /// On failure, the target parser is responsible for emitting a diagnostic; /// explaining the match failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:331,Availability,failure,failure,331,"/// MatchAndEmitInstruction - Recognize a series of operands of a parsed; /// instruction as an actual MCInst and emit it to the specified MCStreamer.; /// This returns false on success and returns true on failure to match.; ///; /// On failure, the target parser is responsible for emitting a diagnostic; /// explaining the match failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:4,Security,Validat,Validate,4,/// Validate the instruction match against any complex target predicates; /// before rendering any operands to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:32,Security,Validat,Validate,32,/// checkTargetMatchPredicate - Validate the instruction match against; /// any complex target predicates not expressible via match classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:31,Performance,perform,performed,31,// For actions that have to be performed before a label is emitted,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:497,Security,expose,exposes,497,"//===--------------------- CodeEmitter.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A utility class used to compute instruction encodings. It buffers encodings; /// for later usage. It exposes a simple API to compute and get the encodings as; /// StringRef.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:507,Usability,simpl,simple,507,"//===--------------------- CodeEmitter.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A utility class used to compute instruction encodings. It buffers encodings; /// for later usage. It exposes a simple API to compute and get the encodings as; /// StringRef.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:187,Performance,cache,cached,187,/// A utility class used to compute instruction encodings for a code region.; ///; /// It provides a simple API to compute and return instruction encodings as; /// strings. Encodings are cached internally for later usage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:101,Usability,simpl,simple,101,/// A utility class used to compute instruction encodings for a code region.; ///; /// It provides a simple API to compute and return instruction encodings as; /// strings. Encodings are cached internally for later usage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:5,Performance,cache,cache,5,// A cache of encodings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:573,Deployability,pipeline,pipeline,573,"//===---------------------------- Context.h ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a class for holding ownership of various simulated; /// hardware units. A Context also provides a utility routine for constructing; /// a default out-of-order pipeline with fetch, dispatch, execute, and retire; /// stages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:520,Integrability,rout,routine,520,"//===---------------------------- Context.h ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a class for holding ownership of various simulated; /// hardware units. A Context also provides a utility routine for constructing; /// a default out-of-order pipeline with fetch, dispatch, execute, and retire; /// stages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:121,Deployability,pipeline,pipeline,121,"/// This is a convenience struct to hold the parameters necessary for creating; /// the pre-built ""default"" out-of-order pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:22,Deployability,pipeline,pipeline,22,"/// Construct a basic pipeline for simulating an out-of-order pipeline.; /// This pipeline consists of Fetch, Dispatch, Execute, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:62,Deployability,pipeline,pipeline,62,"/// Construct a basic pipeline for simulating an out-of-order pipeline.; /// This pipeline consists of Fetch, Dispatch, Execute, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:82,Deployability,pipeline,pipeline,82,"/// Construct a basic pipeline for simulating an out-of-order pipeline.; /// This pipeline consists of Fetch, Dispatch, Execute, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:22,Deployability,pipeline,pipeline,22,"/// Construct a basic pipeline for simulating an in-order pipeline.; /// This pipeline consists of Fetch, InOrderIssue, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:58,Deployability,pipeline,pipeline,58,"/// Construct a basic pipeline for simulating an in-order pipeline.; /// This pipeline consists of Fetch, InOrderIssue, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h:78,Deployability,pipeline,pipeline,78,"/// Construct a basic pipeline for simulating an in-order pipeline.; /// This pipeline consists of Fetch, InOrderIssue, and Retire stages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:653,Deployability,pipeline,pipeline,653,"//===---------------------- CustomBehaviour.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the base class CustomBehaviour which can be inherited from; /// by specific targets (ex. llvm/tools/llvm-mca/lib/X86CustomBehaviour.h).; /// CustomBehaviour is designed to enforce custom behaviour and dependencies; /// within the llvm-mca pipeline simulation that llvm-mca isn't already capable; /// of extracting from the Scheduling Models.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:737,Energy Efficiency,Schedul,Scheduling,737,"//===---------------------- CustomBehaviour.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the base class CustomBehaviour which can be inherited from; /// by specific targets (ex. llvm/tools/llvm-mca/lib/X86CustomBehaviour.h).; /// CustomBehaviour is designed to enforce custom behaviour and dependencies; /// within the llvm-mca pipeline simulation that llvm-mca isn't already capable; /// of extracting from the Scheduling Models.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:615,Integrability,depend,dependencies,615,"//===---------------------- CustomBehaviour.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the base class CustomBehaviour which can be inherited from; /// by specific targets (ex. llvm/tools/llvm-mca/lib/X86CustomBehaviour.h).; /// CustomBehaviour is designed to enforce custom behaviour and dependencies; /// within the llvm-mca pipeline simulation that llvm-mca isn't already capable; /// of extracting from the Scheduling Models.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:458,Modifiability,inherit,inherited,458,"//===---------------------- CustomBehaviour.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the base class CustomBehaviour which can be inherited from; /// by specific targets (ex. llvm/tools/llvm-mca/lib/X86CustomBehaviour.h).; /// CustomBehaviour is designed to enforce custom behaviour and dependencies; /// within the llvm-mca pipeline simulation that llvm-mca isn't already capable; /// of extracting from the Scheduling Models.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:99,Deployability,pipeline,pipeline,99,/// Class which can be overriden by targets to modify the; /// mca::Instruction objects before the pipeline starts.; /// A common usage of this class is to add immediate operands to certain; /// instructions or to remove Defs/Uses from an instruction where the; /// schedulinng model is incorrect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:266,Energy Efficiency,schedul,schedulinng,266,/// Class which can be overriden by targets to modify the; /// mca::Instruction objects before the pipeline starts.; /// A common usage of this class is to add immediate operands to certain; /// instructions or to remove Defs/Uses from an instruction where the; /// schedulinng model is incorrect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:205,Energy Efficiency,schedul,scheduling,205,/// This method can be overriden by targets to modify the mca::Instruction; /// object after it has been lowered from the MCInst.; /// This is generally a less disruptive alternative to modifying the; /// scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:129,Usability,clear,clear,129,// The resetState() method gets invoked at the beginning of each code region; // so that targets that override this function can clear any state that they; // have left from the previous code region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:150,Energy Efficiency,schedul,scheduling,150,"/// Class which can be overriden by targets to enforce instruction; /// dependencies and behaviours that aren't expressed well enough; /// within the scheduling model for mca to automatically simulate; /// them properly.; /// If you implement this class for your target, make sure to also implement; /// a target specific InstrPostProcess class as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:72,Integrability,depend,dependencies,72,"/// Class which can be overriden by targets to enforce instruction; /// dependencies and behaviours that aren't expressed well enough; /// within the scheduling model for mca to automatically simulate; /// them properly.; /// If you implement this class for your target, make sure to also implement; /// a target specific InstrPostProcess class as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:24,Deployability,pipeline,pipeline,24,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:110,Integrability,depend,dependencies,110,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:125,Safety,hazard,hazards,125,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:233,Safety,hazard,hazards,233,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:397,Safety,safe,safe,397,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:560,Safety,safe,safe,560,"/// Before the llvm-mca pipeline dispatches an instruction, it first checks; /// for any register or resource dependencies / hazards. If it doesn't find; /// any, this method will be invoked to determine if there are any custom; /// hazards that the instruction needs to wait for.; /// The return value of this method is the number of cycles that the; /// instruction needs to wait for.; /// It's safe to underestimate the number of cycles to wait for since these; /// checks will be invoked again before the intruction gets dispatched.; /// However, it's not safe (accurate) to overestimate the number of cycles; /// to wait for since the instruction will wait for AT LEAST that number of; /// cycles before attempting to be dispatched again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:415,Deployability,Pipeline,PipelinePrinter,415,"// Functions that target CBs can override to return a list of; // target specific Views that need to live within /lib/Target/ so that; // they can benefit from the target CB or from backend functionality that is; // not already exposed through MC-layer classes. Keep in mind that how this; // function is used is that the function is called within llvm-mca.cpp and; // then each unique_ptr<View> is passed into the PipelinePrinter::addView(); // function. This function will then std::move the View into its own vector of; // Views. So any CB that overrides this function needs to make sure that they; // are not relying on the current address or reference of the View; // unique_ptrs. If you do need the CB and View to be able to communicate with; // each other, consider giving the View a reference or pointer to the CB when; // the View is constructed. Then the View can query the CB for information; // when it needs it.; /// Return a vector of Views that will be added before all other Views.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:228,Security,expose,exposed,228,"// Functions that target CBs can override to return a list of; // target specific Views that need to live within /lib/Target/ so that; // they can benefit from the target CB or from backend functionality that is; // not already exposed through MC-layer classes. Keep in mind that how this; // function is used is that the function is called within llvm-mca.cpp and; // then each unique_ptr<View> is passed into the PipelinePrinter::addView(); // function. This function will then std::move the View into its own vector of; // Views. So any CB that overrides this function needs to make sure that they; // are not relying on the current address or reference of the View; // unique_ptrs. If you do need the CB and View to be able to communicate with; // each other, consider giving the View a reference or pointer to the CB when; // the View is constructed. Then the View can query the CB for information; // when it needs it.; /// Return a vector of Views that will be added before all other Views.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:83,Energy Efficiency,schedul,scheduling,83,/// This class allows targets to optionally customize the logic that resolves; /// scheduling class IDs. Targets can use information encoded in Instrument; /// objects to make more informed scheduling decisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:190,Energy Efficiency,schedul,scheduling,190,/// This class allows targets to optionally customize the logic that resolves; /// scheduling class IDs. Targets can use information encoded in Instrument; /// objects to make more informed scheduling decisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:58,Testability,log,logic,58,/// This class allows targets to optionally customize the logic that resolves; /// scheduling class IDs. Targets can use information encoded in Instrument; /// objects to make more informed scheduling decisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate an Instrument, and return a unique pointer to it. This function; /// may be useful to create instruments coming from comments in the assembly.; /// See createInstruments to create Instruments from MCInst",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:83,Energy Efficiency,allocate,allocated,83,"/// Return a list of unique pointers to Instruments, where each Instrument; /// is allocated by this function. See createInstrument to create Instrument; /// from a description and data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:304,Energy Efficiency,schedul,scheduling,304,"/// Given an MCInst and a vector of Instrument, a target can; /// return a SchedClassID. This can be used by a subtarget to return a; /// PseudoInstruction SchedClassID instead of the one that belongs to the; /// BaseInstruction This can be useful when a BaseInstruction does not convey; /// the correct scheduling information without additional data. By default,; /// it returns the SchedClassID that belongs to MCI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:423,Integrability,interface,interface,423,"//===----------------------- HWEventListener.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the main interface for hardware event listeners.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:118,Deployability,Pipeline,Pipeline,118,"// This is the list of event types that are shared by all targets, that; // generic subtarget-agnostic classes (e.g., Pipeline, HWInstructionEvent,; // ...) and generic Views can manipulate.; // Subtargets are free to define additional event types, that are going to be; // handled by generic components as opaque values, but can still be; // emitted by subtarget-specific pipeline stages (e.g., ExecuteStage,; // DispatchStage, ...) and interpreted by subtarget-specific EventListener; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:373,Deployability,pipeline,pipeline,373,"// This is the list of event types that are shared by all targets, that; // generic subtarget-agnostic classes (e.g., Pipeline, HWInstructionEvent,; // ...) and generic Views can manipulate.; // Subtargets are free to define additional event types, that are going to be; // handled by generic components as opaque values, but can still be; // emitted by subtarget-specific pipeline stages (e.g., ExecuteStage,; // DispatchStage, ...) and interpreted by subtarget-specific EventListener; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:27,Energy Efficiency,Schedul,Scheduler,27,// Events generated by the Scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:36,Testability,log,logic,36,// Events generated by the Dispatch logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:37,Integrability,depend,depends,37,// The event type. The exact meaning depends on the subtarget.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:31,Energy Efficiency,allocate,allocated,31,// Number of physical register allocated for this instruction. There is one; // entry per register file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:559,Energy Efficiency,schedul,schedulers,559,"// Number of micro opcodes dispatched.; // This field is often set to the total number of micro-opcodes specified by; // the instruction descriptor of IR.; // The only exception is when IR declares a number of micro opcodes; // which exceeds the processor DispatchWidth, and - by construction - it; // requires multiple cycles to be fully dispatched. In that particular case,; // the dispatch logic would generate more than one dispatch event (one per; // cycle), and each event would declare how many micro opcodes are effectively; // been dispatched to the schedulers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:393,Testability,log,logic,393,"// Number of micro opcodes dispatched.; // This field is often set to the total number of micro-opcodes specified by; // the instruction descriptor of IR.; // The only exception is when IR declares a number of micro opcodes; // which exceeds the processor DispatchWidth, and - by construction - it; // requires multiple cycles to be fully dispatched. In that particular case,; // the dispatch logic would generate more than one dispatch event (one per; // cycle), and each event would declare how many micro opcodes are effectively; // been dispatched to the schedulers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:31,Deployability,pipeline,pipeline,31,// A HWStallEvent represents a pipeline stall caused by the lack of hardware; // resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:41,Energy Efficiency,Schedul,Scheduler,41,// Generic stall events generated by the Scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:45,Integrability,depend,depends,45,// The exact meaning of the stall event type depends on the subtarget.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:132,Deployability,pipeline,pipeline,132,// A HWPressureEvent describes an increase in backend pressure caused by; // the presence of data dependencies or unavailability of pipeline resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:98,Integrability,depend,dependencies,98,// A HWPressureEvent describes an increase in backend pressure caused by; // the presence of data dependencies or unavailability of pipeline resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:77,Deployability,pipeline,pipeline,77,// Scheduler was unable to issue all the ready instructions because some; // pipeline resources were unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:3,Energy Efficiency,Schedul,Scheduler,3,// Scheduler was unable to issue all the ready instructions because some; // pipeline resources were unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:61,Integrability,depend,dependencies,61,// Instructions could not be issued because of register data dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:54,Integrability,depend,dependencies,54,// Instructions could not be issued because of memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:5,Availability,mask,mask,5,// A mask of unavailable processor resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:35,Deployability,pipeline,pipeline,35,// Generic events generated by the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:27,Energy Efficiency,Schedul,Scheduler,27,// Events generated by the Scheduler when buffered resources are; // consumed/freed for an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/IncrementalSourceMgr.h:100,Performance,throughput,throughput,100,"/// Owner of all mca::Instruction instances. Note that we use std::deque here; /// to have a better throughput, in comparison to std::vector or; /// llvm::SmallVector, as they usually pay a higher re-allocation cost when; /// there is a large number of instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/IncrementalSourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/IncrementalSourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h:466,Energy Efficiency,schedul,scheduling,466,"/// A builder class that knows how to construct Instruction objects.; ///; /// Every llvm-mca Instruction is described by an object of class InstrDesc.; /// An InstrDesc describes which registers are read/written by the instruction,; /// as well as the instruction latency and hardware resources consumed.; ///; /// This class is used by the tool to construct Instructions and instruction; /// descriptors (i.e. InstrDesc objects).; /// Information from the machine scheduling model is used to identify processor; /// resources that are consumed by an instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h:265,Performance,latency,latency,265,"/// A builder class that knows how to construct Instruction objects.; ///; /// Every llvm-mca Instruction is described by an object of class InstrDesc.; /// An InstrDesc describes which registers are read/written by the instruction,; /// as well as the instruction latency and hardware resources consumed.; ///; /// This class is used by the tool to construct Instructions and instruction; /// descriptors (i.e. InstrDesc objects).; /// Information from the machine scheduling model is used to identify processor; /// resources that are consumed by an instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/InstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:439,Deployability,Pipeline,Pipeline,439,"//===--------------------- Instruction.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines abstractions used by the Pipeline to model register reads,; /// register writes and instructions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:128,Performance,perform,performing,128,"// Operand index. The index is negative for implicit writes only.; // For implicit writes, the actual operand index is computed performing; // a bitwise not of the OpIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:9,Performance,latency,latency,9,// Write latency. Number of cycles before write-back stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:391,Integrability,depend,dependent,391,"// Instruction itineraries would set this field to the SchedClass ID.; // Otherwise, it defaults to the WriteResourceID from the MCWriteLatencyEntry; // element associated to this write.; // When computing read latencies, this value is matched against the; // ""ReadAdvance"" information. The hardware backend may implement; // dedicated forwarding paths to quickly propagate write results to dependent; // instructions waiting in the reservation station (effectively bypassing the; // write-back stage).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:51,Testability,log,logic,51,// A MCOperand index. This is used by the Dispatch logic to identify register; // reads. Implicit reads have negative indices. The actual operand index of an; // implicit read is the bitwise not of field OpIndex.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling Class Index. It is used to query the scheduling model for the; // MCSchedClassDesc object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:51,Energy Efficiency,schedul,scheduling,51,// Scheduling Class Index. It is used to query the scheduling model for the; // MCSchedClassDesc object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:20,Integrability,depend,dependency,20,/// A critical data dependency descriptor.; ///; /// Field RegID is set to the invalid register for memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:107,Integrability,depend,dependencies,107,/// A critical data dependency descriptor.; ///; /// Field RegID is set to the invalid register for memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:194,Integrability,depend,dependent,194,/// Tracks uses of a register definition (e.g. register write).; ///; /// Each implicit/explicit register write is associated with an instance of; /// this class. A WriteState object tracks the dependent users of a; /// register write. It also tracks how many cycles are left before the write; /// back stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:62,Performance,latency,latency,62,"// On instruction issue, this field is set equal to the write latency.; // Before instruction issue, this field defaults to -512, a special; // value that represents an ""unknown"" number of cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:33,Usability,clear,clears,33,// True if this write implicitly clears the upper portion of RegisterID's; // super-registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:32,Integrability,depend,dependency,32,// True if this write is from a dependency breaking zero-idiom instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:115,Energy Efficiency,schedul,scheduler,115,"// True if this write has been eliminated at register renaming stage.; // Example: a register move doesn't consume scheduler/pipleline resources if; // it is eliminated at register renaming stage. It still consumes; // decode bandwidth, and ROB entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:81,Integrability,depend,dependency,81,"// This field is set if this is a partial register write, and it has a false; // dependency on any previous write of the same register (or a portion of it).; // DependentWrite must be able to complete before this write completes, so; // that we don't break the WAW, and the two writes can be merged together.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:161,Integrability,Depend,DependentWrite,161,"// This field is set if this is a partial register write, and it has a false; // dependency on any previous write of the same register (or a portion of it).; // DependentWrite must be able to complete before this write completes, so; // that we don't break the WAW, and the two writes can be merged together.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:38,Integrability,depend,dependency,38,// A partial write that is in a false dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:21,Integrability,depend,dependency,21,// Critical register dependency for this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:13,Integrability,depend,dependent,13,"// A list of dependent reads. Users is a set of dependent; // reads. A dependent read is added to the set only if CyclesLeft; // is ""unknown"". As soon as CyclesLeft is 'known', each user in the set; // gets notified with the actual CyclesLeft.; // The 'second' element of a pair is a ""ReadAdvance"" number of cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:48,Integrability,depend,dependent,48,"// A list of dependent reads. Users is a set of dependent; // reads. A dependent read is added to the set only if CyclesLeft; // is ""unknown"". As soon as CyclesLeft is 'known', each user in the set; // gets notified with the actual CyclesLeft.; // The 'second' element of a pair is a ""ReadAdvance"" number of cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:71,Integrability,depend,dependent,71,"// A list of dependent reads. Users is a set of dependent; // reads. A dependent read is added to the set only if CyclesLeft; // is ""unknown"". As soon as CyclesLeft is 'known', each user in the set; // gets notified with the actual CyclesLeft.; // The 'second' element of a pair is a ""ReadAdvance"" number of cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:43,Integrability,depend,dependent,43,// This method adds Use to the set of data dependent reads. IID is the; // instruction identifier associated with this write. ReadAdvance is the; // number of cycles to subtract from the latency of this data dependency.; // Use is in a RAW dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:208,Integrability,depend,dependency,208,// This method adds Use to the set of data dependent reads. IID is the; // instruction identifier associated with this write. ReadAdvance is the; // number of cycles to subtract from the latency of this data dependency.; // Use is in a RAW dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:240,Integrability,depend,dependency,240,// This method adds Use to the set of data dependent reads. IID is the; // instruction identifier associated with this write. ReadAdvance is the; // number of cycles to subtract from the latency of this data dependency.; // Use is in a RAW dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:187,Performance,latency,latency,187,// This method adds Use to the set of data dependent reads. IID is the; // instruction identifier associated with this write. ReadAdvance is the; // number of cycles to subtract from the latency of this data dependency.; // Use is in a RAW dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:54,Integrability,depend,dependency,54,// Use is a younger register write that is in a false dependency with this; // write. IID is the instruction identifier associated with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:19,Deployability,update,update,19,"// On every cycle, update CyclesLeft and notify dependent users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:48,Integrability,depend,dependent,48,"// On every cycle, update CyclesLeft and notify dependent users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:154,Deployability,update,update,154,/// Tracks register operand latency in cycles.; ///; /// A read may be dependent on more than one write. This occurs when some; /// writes only partially update the register associated to this read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:71,Integrability,depend,dependent,71,/// Tracks register operand latency in cycles.; ///; /// A read may be dependent on more than one write. This occurs when some; /// writes only partially update the register associated to this read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:28,Performance,latency,latency,28,/// Tracks register operand latency in cycles.; ///; /// A read may be dependent on more than one write. This occurs when some; /// writes only partially update the register associated to this read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:108,Deployability,update,updates,108,"// Number of writes that contribute to the definition of RegisterID.; // In the absence of partial register updates, the number of DependentWrites; // cannot be more than one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:131,Integrability,Depend,DependentWrites,131,"// Number of writes that contribute to the definition of RegisterID.; // In the absence of partial register updates, the number of DependentWrites; // cannot be more than one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:67,Integrability,depend,depends,67,// Number of cycles left before RegisterID can be read. This value depends on; // the latency of all the dependent writes. It defaults to UNKNOWN_CYCLES.; // It gets set to the value of field TotalCycles only when the 'CyclesLeft' of; // every dependent write is known.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:105,Integrability,depend,dependent,105,// Number of cycles left before RegisterID can be read. This value depends on; // the latency of all the dependent writes. It defaults to UNKNOWN_CYCLES.; // It gets set to the value of field TotalCycles only when the 'CyclesLeft' of; // every dependent write is known.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:244,Integrability,depend,dependent,244,// Number of cycles left before RegisterID can be read. This value depends on; // the latency of all the dependent writes. It defaults to UNKNOWN_CYCLES.; // It gets set to the value of field TotalCycles only when the 'CyclesLeft' of; // every dependent write is known.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:86,Performance,latency,latency,86,// Number of cycles left before RegisterID can be read. This value depends on; // the latency of all the dependent writes. It defaults to UNKNOWN_CYCLES.; // It gets set to the value of field TotalCycles only when the 'CyclesLeft' of; // every dependent write is known.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:17,Deployability,update,updated,17,"// This field is updated on every writeStartEvent(). When the number of; // dependent writes (i.e. field DependentWrite) is zero, this value is; // propagated to field CyclesLeft.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:76,Integrability,depend,dependent,76,"// This field is updated on every writeStartEvent(). When the number of; // dependent writes (i.e. field DependentWrite) is zero, this value is; // propagated to field CyclesLeft.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:105,Integrability,Depend,DependentWrite,105,"// This field is updated on every writeStartEvent(). When the number of; // dependent writes (i.e. field DependentWrite) is zero, this value is; // propagated to field CyclesLeft.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:20,Integrability,depend,dependency,20,// Longest register dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:50,Integrability,depend,dependent,50,"// This field is set to true only if there are no dependent writes, and; // there are no `CyclesLeft' to wait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:40,Integrability,depend,dependency-breaking,40,// True if this register read is from a dependency-breaking instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:168,Performance,throughput,throughput,168,// SchedClassID used to construct this InstrDesc.; // This information is currently used by views to do fast queries on the; // subtarget when computing the reciprocal throughput.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:105,Safety,hazard,hazard,105,"// True if all buffered resources are in-order, and there is at least one; // buffer which is a dispatch hazard (BufferSize = 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:50,Energy Efficiency,schedul,scheduler,50,// A zero latency instruction doesn't consume any scheduler resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:10,Performance,latency,latency,10,// A zero latency instruction doesn't consume any scheduler resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:59,Deployability,pipeline,pipeline,59,/// Base class for instructions consumed by the simulation pipeline.; ///; /// This class tracks data dependencies as well as generic properties; /// of the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:102,Integrability,depend,dependencies,102,/// Base class for instructions consumed by the simulation pipeline.; ///; /// This class tracks data dependencies as well as generic properties; /// of the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:10,Integrability,depend,dependencies,10,// Output dependencies.; // One entry per each implicit and explicit register definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:9,Integrability,depend,dependencies,9,// Input dependencies.; // One entry per each implicit and explicit register use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:64,Deployability,pipeline,pipeline,64,/// An instruction propagated through the simulated instruction pipeline.; ///; /// This class is used to monitor changes to the internal state of instructions; /// that are sent to the various components of the simulated hardware pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:231,Deployability,pipeline,pipeline,231,/// An instruction propagated through the simulated instruction pipeline.; ///; /// This class is used to monitor changes to the internal state of instructions; /// that are sent to the various components of the simulated hardware pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:106,Energy Efficiency,monitor,monitor,106,/// An instruction propagated through the simulated instruction pipeline.; ///; /// This class is used to monitor changes to the internal state of instructions; /// that are sent to the various components of the simulated hardware pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:41,Performance,latency,latency,41,"// Instruction is not ready, but operand latency is known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:42,Performance,latency,latency,42,// This value defaults to the instruction latency. This instruction is; // considered executed when field CyclesLeft goes to zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:14,Availability,mask,mask,14,"// A resource mask which identifies buffered resources consumed by this; // instruction at dispatch stage. In the absence of macro-fusion, this value; // should always match the value of field `UsedBuffers` from the instruction; // descriptor (see field InstrBase::Desc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:21,Integrability,depend,dependency,21,// Critical register dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:19,Integrability,depend,dependency,19,// Critical memory dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:155,Deployability,pipeline,pipeline,155,// A bitmask of busy processor resource units.; // This field is set to zero only if execution is not delayed during this; // cycle because of unavailable pipeline resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:37,Performance,optimiz,optimized,37,// True if this instruction has been optimized at register renaming stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:157,Performance,perform,performed,157,"// Transition to the dispatch stage, and assign a RCUToken to this; // instruction. The RCUToken is used to track the completion of every; // register write performed by this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:65,Deployability,update,update,65,"// Instruction issued. Transition to the IS_EXECUTING state, and update; // all the register definitions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:354,Deployability,update,updateDispatched,354,"// Force a transition from the IS_DISPATCHED state to the IS_READY or; // IS_PENDING state. State transitions normally occur either at the beginning; // of a new cycle (see method cycleEvent()), or as a result of another issue; // event. This method is called every time the instruction might have changed; // in state. It internally delegates to method updateDispatched() and; // updateWaiting().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:381,Deployability,update,updateWaiting,381,"// Force a transition from the IS_DISPATCHED state to the IS_READY or; // IS_PENDING state. State transitions normally occur either at the beginning; // of a new cycle (see method cycleEvent()), or as a result of another issue; // event. This method is called every time the instruction might have changed; // in state. It internally delegates to method updateDispatched() and; // updateWaiting().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:27,Deployability,Pipeline,Pipeline,27,"//===--------------------- Pipeline.h ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements an ordered container of stages that simulate the; /// pipeline of a hardware backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:471,Deployability,pipeline,pipeline,471,"//===--------------------- Pipeline.h ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements an ordered container of stages that simulate the; /// pipeline of a hardware backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:6,Deployability,pipeline,pipeline,6,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:795,Deployability,pipeline,pipeline,795,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:819,Deployability,Pipeline,Pipeline,819,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:1016,Deployability,Pipeline,Pipeline,1016,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:258,Energy Efficiency,schedul,schedulers,258,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:406,Energy Efficiency,schedul,schedulers,406,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:539,Energy Efficiency,monitor,monitors,539,"/// A pipeline for a specific subtarget.; ///; /// It emulates an out-of-order execution of instructions. Instructions are; /// fetched from a MCInst sequence managed by an initial 'Fetch' stage.; /// Instructions are firstly fetched, then dispatched to the schedulers, and; /// then executed.; ///; /// This class tracks the lifetime of an instruction from the moment where; /// it gets dispatched to the schedulers, to the moment where it finishes; /// executing and register writes are architecturally committed.; /// In particular, it monitors changes in the state of every instruction; /// in flight.; ///; /// Instructions are executed in a loop of iterations. The number of iterations; /// is defined by the SourceMgr object, which is managed by the initial stage; /// of the instruction pipeline.; ///; /// The Pipeline entry point is method 'run()' which executes cycles in a loop; /// until there are new instructions to dispatch, and not every instruction; /// has been retired.; ///; /// Internally, the Pipeline collects statistical information in the form of; /// histograms. For example, it tracks how the dispatch group size changes; /// over time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:3,Deployability,Pipeline,Pipeline,3,// Pipeline was just created. The default state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:3,Deployability,Pipeline,Pipeline,3,// Pipeline has started running.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:3,Deployability,Pipeline,Pipeline,3,// Pipeline is paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:15,Usability,pause,paused,15,// Pipeline is paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:59,Deployability,pipeline,pipeline,59,/// An ordered list of stages that define this instruction pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:24,Deployability,pipeline,pipeline,24,/// Returns whether the pipeline is currently paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:46,Usability,pause,paused,46,/// Returns whether the pipeline is currently paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/SourceMgr.h:98,Availability,error,error,98,"// MSVC >= 19.15, < 19.20 need to see the definition of class Instruction to; // prevent compiler error C2139 about intrinsic type trait '__is_assignable'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:429,Deployability,pipeline,pipeline,429,"//===--------------------- Support.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Helper functions used by various pipeline components.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:134,Security,access,accessed,134,"/// This class represents the number of cycles per resource (fractions of; /// cycles). That quantity is managed here as a ratio, and accessed via the; /// double cast-operator below. The two quantities, number of cycles and; /// number of resources, are kept separate. This is used by the; /// ResourcePressureView to calculate the average resource cycles; /// per instruction/iteration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:184,Availability,error,error,184,"// Add the components of RHS to this instance. Instead of calculating; // the final value here, we keep track of the numerator and denominator; // separately, to reduce floating point error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:162,Energy Efficiency,reduce,reduce,162,"// Add the components of RHS to this instance. Instead of calculating; // the final value here, we keep track of the numerator and denominator; // separately, to reduce floating point error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:21,Availability,Mask,Masks,21,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:51,Availability,mask,masks,51,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:96,Availability,mask,mask,96,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:170,Availability,mask,mask,170,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:248,Availability,mask,mask,248,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:371,Availability,mask,mask,371,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:480,Availability,Mask,Mask,480,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:510,Availability,Mask,Mask,510,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:541,Availability,Mask,Mask,541,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:567,Availability,Mask,Mask,567,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:585,Availability,Mask,Mask,585,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:706,Availability,mask,mask,706,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:870,Availability,mask,mask,870,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:958,Availability,mask,masks,958,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:101,Integrability,depend,depends,101,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:1039,Usability,simpl,simple,1039,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:58,Availability,mask,masks,58,"// Returns the index of the highest bit set. For resource masks, the position of; // the highest bit set can be used to construct a resource mask identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:141,Availability,mask,mask,141,"// Returns the index of the highest bit set. For resource masks, the position of; // the highest bit set can be used to construct a resource mask identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:33,Performance,throughput,throughput,33,/// Compute the reciprocal block throughput from a set of processor resource; /// cycles. The reciprocal block throughput is computed as the MAX between:; /// - NumMicroOps / DispatchWidth; /// - ProcReleaseAtCycles / #ProcResourceUnits (for every consumed resource).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:111,Performance,throughput,throughput,111,/// Compute the reciprocal block throughput from a set of processor resource; /// cycles. The reciprocal block throughput is computed as the MAX between:; /// - NumMicroOps / DispatchWidth; /// - ProcReleaseAtCycles / #ProcResourceUnits (for every consumed resource).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/View.h:423,Integrability,interface,interface,423,"//===----------------------- View.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the main interface for Views. Each view contributes a; /// portion of the final report generated by the tool.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/View.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/View.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:398,Performance,Load,Load,398,"//===------------------------- LSUnit.h --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load/Store unit class that models load/store queues and that implements; /// a simple weak memory consistency model.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:432,Performance,load,load,432,"//===------------------------- LSUnit.h --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load/Store unit class that models load/store queues and that implements; /// a simple weak memory consistency model.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:443,Performance,queue,queues,443,"//===------------------------- LSUnit.h --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load/Store unit class that models load/store queues and that implements; /// a simple weak memory consistency model.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:477,Usability,simpl,simple,477,"//===------------------------- LSUnit.h --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load/Store unit class that models load/store queues and that implements; /// a simple weak memory consistency model.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:23,Integrability,depend,dependency,23,"/// A node of a memory dependency graph. A MemoryGroup describes a set of; /// instructions with same memory dependencies.; ///; /// By construction, instructions of a MemoryGroup don't depend on each other.; /// At dispatch stage, instructions are mapped by the LSUnit to MemoryGroups.; /// A Memory group identifier is then stored as a ""token"" in field; /// Instruction::LSUTokenID of each dispatched instructions. That token is used; /// internally by the LSUnit to track memory dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:109,Integrability,depend,dependencies,109,"/// A node of a memory dependency graph. A MemoryGroup describes a set of; /// instructions with same memory dependencies.; ///; /// By construction, instructions of a MemoryGroup don't depend on each other.; /// At dispatch stage, instructions are mapped by the LSUnit to MemoryGroups.; /// A Memory group identifier is then stored as a ""token"" in field; /// Instruction::LSUTokenID of each dispatched instructions. That token is used; /// internally by the LSUnit to track memory dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:186,Integrability,depend,depend,186,"/// A node of a memory dependency graph. A MemoryGroup describes a set of; /// instructions with same memory dependencies.; ///; /// By construction, instructions of a MemoryGroup don't depend on each other.; /// At dispatch stage, instructions are mapped by the LSUnit to MemoryGroups.; /// A Memory group identifier is then stored as a ""token"" in field; /// Instruction::LSUTokenID of each dispatched instructions. That token is used; /// internally by the LSUnit to track memory dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:482,Integrability,depend,dependencies,482,"/// A node of a memory dependency graph. A MemoryGroup describes a set of; /// instructions with same memory dependencies.; ///; /// By construction, instructions of a MemoryGroup don't depend on each other.; /// At dispatch stage, instructions are mapped by the LSUnit to MemoryGroups.; /// A Memory group identifier is then stored as a ""token"" in field; /// Instruction::LSUTokenID of each dispatched instructions. That token is used; /// internally by the LSUnit to track memory dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:34,Integrability,depend,dependency,34,// Successors that are in a order dependency with this group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:33,Integrability,depend,dependency,33,// Successors that are in a data dependency with this group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:24,Integrability,depend,dependency,24,// Do not need to add a dependency if there is no data; // dependency and all instructions from this group have been; // issued already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:59,Integrability,depend,dependency,59,// Do not need to add a dependency if there is no data; // dependency and all instructions from this group have been; // issued already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3,Deployability,update,update,3,// update the CriticalMemDep.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3,Deployability,Release,Release,3,// Release the order dependency with this group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:21,Integrability,depend,dependency,21,// Release the order dependency with this group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:15,Integrability,depend,dependent,15,// Notify data dependent successors that this group has finished execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:18,Integrability,interface,interface,18,/// Abstract base interface for LS (load/store) units in llvm-mca.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:36,Performance,load,load,36,/// Abstract base interface for LS (load/store) units in llvm-mca.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:4,Performance,Load,Load,4,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:9,Performance,queue,queue,9,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:77,Performance,load,load,77,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:82,Performance,queue,queue,82,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:150,Performance,load,load,150,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:155,Performance,queue,queue,155,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:217,Performance,Load,LoadQueue,217,/// Load queue size.; ///; /// A value of zero for this field means that the load queue is unbounded.; /// Processor models can declare the size of a load queue via tablegen (see; /// the definition of tablegen class LoadQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:4,Performance,Load,Load,4,/// Load queue size.; ///; /// A value of zero for this field means that the store queue is unbounded.; /// Processor models can declare the size of a store queue via tablegen (see; /// the definition of tablegen class StoreQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:9,Performance,queue,queue,9,/// Load queue size.; ///; /// A value of zero for this field means that the store queue is unbounded.; /// Processor models can declare the size of a store queue via tablegen (see; /// the definition of tablegen class StoreQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:83,Performance,queue,queue,83,/// Load queue size.; ///; /// A value of zero for this field means that the store queue is unbounded.; /// Processor models can declare the size of a store queue via tablegen (see; /// the definition of tablegen class StoreQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:157,Performance,queue,queue,157,/// Load queue size.; ///; /// A value of zero for this field means that the store queue is unbounded.; /// Processor models can declare the size of a store queue via tablegen (see; /// the definition of tablegen class StoreQueue in; /// llvm/Target/TargetSchedule.td).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:12,Performance,load,loads,12,"/// True if loads don't alias with stores.; ///; /// By default, the LS unit assumes that loads and stores don't alias with; /// eachother. If this field is set to false, then loads are always assumed to; /// alias with stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:90,Performance,load,loads,90,"/// True if loads don't alias with stores.; ///; /// By default, the LS unit assumes that loads and stores don't alias with; /// eachother. If this field is set to false, then loads are always assumed to; /// alias with stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:176,Performance,load,loads,176,"/// True if loads don't alias with stores.; ///; /// By default, the LS unit assumes that loads and stores don't alias with; /// eachother. If this field is set to false, then loads are always assumed to; /// alias with stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:47,Performance,load,load,47,/// Returns the total number of entries in the load queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:52,Performance,queue,queue,52,/// Returns the total number of entries in the load queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:53,Performance,queue,queue,53,/// Returns the total number of entries in the store queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3,Performance,Load,Load,3,// Load Queue unavailable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:8,Performance,Queue,Queue,8,// Load Queue unavailable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:9,Performance,Queue,Queue,9,// Store Queue unavailable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:27,Availability,avail,availability,27,"/// This method checks the availability of the load/store buffers.; ///; /// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR. By default, LSU_AVAILABLE is returned if IR is; /// not a memory operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:47,Performance,load,load,47,"/// This method checks the availability of the load/store buffers.; ///; /// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR. By default, LSU_AVAILABLE is returned if IR is; /// not a memory operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:119,Performance,load,load,119,"/// This method checks the availability of the load/store buffers.; ///; /// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR. By default, LSU_AVAILABLE is returned if IR is; /// not a memory operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:130,Performance,queue,queue,130,"/// This method checks the availability of the load/store buffers.; ///; /// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR. By default, LSU_AVAILABLE is returned if IR is; /// not a memory operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// with a LSUnitBase::Status value of LSU_AVAILABLE.; /// Returns the GroupID associated with this instruction. That value will be; /// used to set the LSUTokenID field in class Instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:33,Integrability,depend,depends,33,/// Check if instruction IR only depends on memory instructions that are; /// currently executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3,Performance,Load,Loads,3,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:33,Performance,load,load,33,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:38,Performance,queue,queue,38,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:118,Performance,queue,queue,118,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:221,Performance,load,load,221,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:243,Performance,Load,Loads,243,// Loads are tracked by the LDQ (load queue) from dispatch until completion.; // Stores are tracked by the STQ (store queue) from dispatch until commitment.; // By default we conservatively assume that the LDQ receives a load at; // dispatch. Loads leave the LDQ at retirement stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1942,Energy Efficiency,schedul,scheduling,1942,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:12,Performance,Load,Load,12,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:79,Performance,load,load,79,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:121,Performance,load,load,121,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:137,Performance,queue,queue,137,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:183,Performance,load,load,183,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:216,Performance,load,load,216,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:286,Performance,load,loads,286,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:413,Performance,load,load,413,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:437,Performance,load,load,437,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:488,Performance,load,load,488,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:578,Performance,load,loads,578,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:650,Performance,load,loads,650,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:772,Performance,perform,perform,772,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:830,Performance,load,loads,830,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:886,Performance,load,loads,886,"/// Default Load/Store Unit (LS Unit) for simulated processors.; ///; /// Each load (or store) consumes one entry in the load (or store) queue.; ///; /// Rules are:; /// 1) A younger load is allowed to pass an older load only if there are no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use laten",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1270,Performance,load,loads,1270,"re no; /// stores nor barriers in between the two loads.; /// 2) An younger store is not allowed to pass an older store.; /// 3) A younger store is not allowed to pass an older load.; /// 4) A younger load is allowed to pass an older store only if the load does; /// not alias with the store.; ///; /// This class optimistically assumes that loads don't alias store operations.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-b",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1627,Performance,load,load,1627,"ons.; /// Under this assumption, younger loads are always allowed to pass older; /// stores (this would only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1713,Performance,load,load,1713,"uld only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effect",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1754,Performance,cache,cache,1754,"uld only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effect",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1822,Performance,cache,cache,1822," /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1926,Performance,load,loads,1926,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1984,Performance,load,load-to-use,1984,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1996,Performance,latency,latency,1996,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2036,Performance,load,load-to-use,2036,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2048,Performance,latency,latency,2048,"s class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger sto",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2393,Performance,load,load-barrier,2393,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2438,Performance,load,loads,2438,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2475,Performance,load,load,2475,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2480,Performance,queue,queue,2480,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2813,Performance,load,load,2813,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2858,Performance,load,load,2858,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2869,Performance,queue,queue,2869,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2883,Performance,load,load,2883,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2923,Performance,load,loads,2923,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2954,Performance,load,load,2954,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2973,Performance,load,load,2973,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3059,Performance,load,load,3059,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3091,Performance,load,load,3091,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3123,Performance,load,load,3123,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3201,Performance,load,load,3201,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3212,Performance,queue,queue,3212,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:3253,Performance,load,loads,3253,"ng method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effects. This is obviously inaccurate, but this is the best that we can do; /// at the moment.; ///; /// Each load/store barrier consumes one entry in the load/store queue. A; /// load/store barrier enforces ordering of loads/stores:; /// - A younger load cannot pass a load barrier.; /// - A younger store cannot pass a store barrier.; ///; /// A younger load has to wait for the memory load barrier to execute.; /// A load/store barrier is ""executed"" when it becomes the oldest entry in; /// the load/store queue(s). That also means, all the older loads/stores have; /// already been executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1695,Safety,predict,predict,1695,"uld only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effect",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:368,Deployability,pipeline,pipeline,368,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:37,Performance,latency,latency,37,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:50,Performance,load,load,50,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:127,Performance,latency,latency,127,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:140,Performance,load,load,140,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:180,Performance,latency,latency,180,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:222,Performance,cache,cache,222,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:281,Performance,load,load,281,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:307,Performance,latency,latency,307,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:320,Performance,load,load,320,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:363,Performance,load,load,363,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:402,Performance,Load,LoadLatency,402,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:453,Performance,latency,latency,453,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:473,Performance,Load,LoadLatency,473,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:515,Performance,load,load-to-use,515,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:528,Performance,latency,latency,528,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:596,Performance,latency,latency,596,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:647,Performance,throughput,throughput,647,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:669,Performance,Load,LoadLatency,669,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:724,Performance,load,load,724,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:729,Performance,latency,latency,729,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:754,Performance,latency,latency,754,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:880,Performance,Load,LoadLatency,880,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:921,Performance,latency,latency,921,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:966,Performance,load,load,966,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:971,Performance,queue,queue,971,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:997,Performance,latency,latency,997,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1100,Performance,load,load,1100," assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1268,Performance,load,load,1268," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1315,Performance,load,loads,1315," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1337,Performance,load,load,1337," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1356,Performance,Load,LoadQueue,1356," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1435,Performance,load,load,1435," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1487,Performance,Load,LoadQueue,1487," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1729,Performance,load,load,1729," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1740,Performance,queue,queue,1740," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2115,Performance,load,load,2115," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2145,Performance,load,loads,2145," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:2179,Performance,load,loads,2179," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:711,Safety,predict,predictor,711,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:859,Security,access,accesses,859,"// This class doesn't know about the latency of a load instruction. So, it; // conservatively/pessimistically assumes that the latency of a load opcode; // matches the instruction latency.; //; // FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are is",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1382,Usability,simpl,simplicity,1382," FIXME: In the absence of cache misses (i.e. L1I/L1D/iTLB/dTLB hits/misses),; // and load/store conflicts, the latency of a load is determined by the depth; // of the load pipeline. So, we could use field `LoadLatency` in the; // MCSchedModel to model that latency.; // Field `LoadLatency` often matches the so-called 'load-to-use' latency from; // L1D, and it usually already accounts for any extra latency due to data; // forwarding.; // When doing throughput analysis, `LoadLatency` is likely to; // be a better predictor of load latency than instruction latency. This is; // particularly true when simulating code with temporal/spatial locality of; // memory accesses.; // Using `LoadLatency` (instead of the instruction latency) is also expected; // to improve the load queue allocation for long latency instructions with; // folded memory operands (See PR39829).; //; // FIXME: On some processors, load/store operations are split into multiple; // uOps. For example, X86 AMD Jaguar natively supports 128-bit data types, but; // not 256-bit data types. So, a 256-bit load is effectively split into two; // 128-bit loads, and each split load consumes one 'LoadQueue' entry. For; // simplicity, this class optimistically assumes that a load instruction only; // consumes one entry in the LoadQueue. Similarly, store instructions only; // consume a single entry in the StoreQueue.; // In future, we should reassess the quality of this design, and consider; // alternative approaches that let instructions specify the number of; // load/store queue entries which they consume at dispatch stage (See; // PR39830).; //; // An instruction that both 'mayStore' and 'HasUnmodeledSideEffects' is; // conservatively treated as a store barrier. It forces older store to be; // executed before newer stores are issued.; //; // An instruction that both 'MayLoad' and 'HasUnmodeledSideEffects' is; // conservatively treated as a load barrier. It forces older loads to execute; // before newer loads are issued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:46,Performance,load,load,46,/// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:57,Performance,queue,queue,57,/// Returns LSU_AVAILABLE if there are enough load/store queue entries to; /// accomodate instruction IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:4,Energy Efficiency,Allocate,Allocates,4,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:265,Performance,load,load,265,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:340,Performance,load,load,340,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:365,Performance,load,load,365,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:411,Performance,load,load,411,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:458,Performance,load,load,458,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:490,Performance,load,load,490,"/// Allocates LS resources for instruction IR.; ///; /// This method assumes that a previous call to `isAvailable(IR)` succeeded; /// returning LSU_AVAILABLE.; ///; /// Rules are:; /// By default, rules are:; /// 1. A store may not pass a previous store.; /// 2. A load may not pass a previous store unless flag 'NoAlias' is set.; /// 3. A load may pass a previous load.; /// 4. A store may not pass a previous load (regardless of flag 'NoAlias').; /// 5. A load has to wait until an older load barrier is fully executed.; /// 6. A store has to wait until an older store barrier is fully executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:538,Integrability,depend,dependencies,538,"//===--------------------- RegisterFile.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a register mapping file class. This class is responsible; /// for managing hardware register files and the tracking of data dependencies; /// between registers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:104,Availability,avail,available,104,"/// Returns true if this register write has been executed, and the new; /// register value is therefore available to users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:262,Availability,avail,available,262,// class RegisterMappingTracker is a physical register file (PRF) descriptor.; // There is one RegisterMappingTracker for every PRF definition in the; // scheduling model.; //; // An instance of RegisterMappingTracker tracks the number of physical; // registers available for renaming. It also tracks the number of register; // moves eliminated per cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:154,Energy Efficiency,schedul,scheduling,154,// class RegisterMappingTracker is a physical register file (PRF) descriptor.; // There is one RegisterMappingTracker for every PRF definition in the; // scheduling model.; //; // An instance of RegisterMappingTracker tracks the number of physical; // registers available for renaming. It also tracks the number of register; // moves eliminated per cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:51,Availability,avail,available,51,// The total number of physical registers that are available in this; // register file for register renaming purpouses. A value of zero for this; // field means: this register file has an unbounded number of physical; // registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:464,Availability,avail,available,464,"// A vector of register file descriptors. This set always contains at least; // one entry. Entry at index #0 is reserved. That entry describes a register; // file with an unbounded number of physical registers that ""sees"" all the; // hardware registers declared by the target (i.e. all the register; // definitions in the target specific `XYZRegisterInfo.td` - where `XYZ` is; // the target name).; //; // Users can limit the number of physical registers that are available in; // register file #0 specifying command line flag `-register-file-size=<uint>`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:211,Energy Efficiency,allocate,allocate,211,"// This type is used to propagate information about the owner of a register,; // and the cost of allocating it in the PRF. Register cost is defined as the; // number of physical registers consumed by the PRF to allocate a user; // register.; //; // For example: on X86 BtVer2, a YMM register consumes 2 128-bit physical; // registers. So, the cost of allocating a YMM register in BtVer2 is 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:628,Performance,optimiz,optimizable,628,"// Struct RegisterRenamingInfo is used to map logical registers to register; // files.; //; // There is a RegisterRenamingInfo object for every logical register defined; // by the target. RegisteRenamingInfo objects are stored into vector; // `RegisterMappings`, and MCPhysReg IDs can be used to reference; // elements in that vector.; //; // Each RegisterRenamingInfo is owned by a PRF, and field `IndexPlusCost`; // specifies both the owning PRF, as well as the number of physical registers; // consumed at register renaming stage.; //; // Field `AllowMoveElimination` is set for registers that are used as; // destination by optimizable register moves.; //; // Field `AliasRegID` is set by writes from register moves that have been; // eliminated at register renaming stage. A move eliminated at register; // renaming stage is effectively bypassed, and its write aliases the source; // register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:46,Testability,log,logical,46,"// Struct RegisterRenamingInfo is used to map logical registers to register; // files.; //; // There is a RegisterRenamingInfo object for every logical register defined; // by the target. RegisteRenamingInfo objects are stored into vector; // `RegisterMappings`, and MCPhysReg IDs can be used to reference; // elements in that vector.; //; // Each RegisterRenamingInfo is owned by a PRF, and field `IndexPlusCost`; // specifies both the owning PRF, as well as the number of physical registers; // consumed at register renaming stage.; //; // Field `AllowMoveElimination` is set for registers that are used as; // destination by optimizable register moves.; //; // Field `AliasRegID` is set by writes from register moves that have been; // eliminated at register renaming stage. A move eliminated at register; // renaming stage is effectively bypassed, and its write aliases the source; // register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:144,Testability,log,logical,144,"// Struct RegisterRenamingInfo is used to map logical registers to register; // files.; //; // There is a RegisterRenamingInfo object for every logical register defined; // by the target. RegisteRenamingInfo objects are stored into vector; // `RegisterMappings`, and MCPhysReg IDs can be used to reference; // elements in that vector.; //; // Each RegisterRenamingInfo is owned by a PRF, and field `IndexPlusCost`; // specifies both the owning PRF, as well as the number of physical registers; // consumed at register renaming stage.; //; // Field `AllowMoveElimination` is set for registers that are used as; // destination by optimizable register moves.; //; // Field `AliasRegID` is set by writes from register moves that have been; // eliminated at register renaming stage. A move eliminated at register; // renaming stage is effectively bypassed, and its write aliases the source; // register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:103,Integrability,depend,dependencies,103,"// RegisterMapping objects are mainly used to track physical register; // definitions and resolve data dependencies.; //; // Every register declared by the Target is associated with an instance of; // RegisterMapping. RegisterMapping objects keep track of writes to a logical; // register. That information is used by class RegisterFile to resolve data; // dependencies, and correctly set latencies for register uses.; //; // This implementation does not allow overlapping register files. The only; // register file that is allowed to overlap with other register files is; // register file #0. If we exclude register #0, every register is ""owned"" by; // at most one register file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:357,Integrability,depend,dependencies,357,"// RegisterMapping objects are mainly used to track physical register; // definitions and resolve data dependencies.; //; // Every register declared by the Target is associated with an instance of; // RegisterMapping. RegisterMapping objects keep track of writes to a logical; // register. That information is used by class RegisterFile to resolve data; // dependencies, and correctly set latencies for register uses.; //; // This implementation does not allow overlapping register files. The only; // register file that is allowed to overlap with other register files is; // register file #0. If we exclude register #0, every register is ""owned"" by; // at most one register file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:268,Testability,log,logical,268,"// RegisterMapping objects are mainly used to track physical register; // definitions and resolve data dependencies.; //; // Every register declared by the Target is associated with an instance of; // RegisterMapping. RegisterMapping objects keep track of writes to a logical; // register. That information is used by class RegisterFile to resolve data; // dependencies, and correctly set latencies for register uses.; //; // This implementation does not allow overlapping register files. The only; // register file that is allowed to overlap with other register files is; // register file #0. If we exclude register #0, every register is ""owned"" by; // at most one register file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:3,Deployability,Release,Releases,3,// Releases previously allocated physical registers from the register file(s).; // This method is called from `invalidateRegisterMapping()`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:23,Energy Efficiency,allocate,allocated,23,// Releases previously allocated physical registers from the register file(s).; // This method is called from `invalidateRegisterMapping()`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:37,Integrability,depend,dependency,37,// Collects writes that are in a RAW dependency with RS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:15,Deployability,update,updates,15,// This method updates the register mappings inserting a new register; // definition. This method is also responsible for updating the number of; // allocated physical registers in each register file modified by the write.; // No physical regiser is allocated if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:149,Energy Efficiency,allocate,allocated,149,// This method updates the register mappings inserting a new register; // definition. This method is also responsible for updating the number of; // allocated physical registers in each register file modified by the write.; // No physical regiser is allocated if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:250,Energy Efficiency,allocate,allocated,250,// This method updates the register mappings inserting a new register; // definition. This method is also responsible for updating the number of; // allocated physical registers in each register file modified by the write.; // No physical regiser is allocated if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:61,Deployability,update,update,61,"// Collect writes that are in a data dependency with RS, and update RS; // internal state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:37,Integrability,depend,dependency,37,"// Collect writes that are in a data dependency with RS, and update RS; // internal state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:85,Deployability,release,released,85,// Removes write \param WS from the register mappings.; // Physical registers may be released to reflect this update.; // No registers are released if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:110,Deployability,update,update,110,// Removes write \param WS from the register mappings.; // Physical registers may be released to reflect this update.; // No registers are released if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:139,Deployability,release,released,139,// Removes write \param WS from the register mappings.; // Physical registers may be released to reflect this update.; // No registers are released if this write is from a zero-idiom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:116,Deployability,update,updates,116,"// Returns true if this instruction can be fully eliminated at register; // renaming stage. On success, this method updates the internal state of each; // WriteState by setting flag `WS.isEliminated`, and by propagating the zero; // flag for known zero registers. It internally uses `canEliminateMove` to; // determine if a read/write pair can be eliminated. By default, it assumes a; // register swap if there is more than one register definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:96,Availability,mask,mask,96,"// Checks if there are enough physical registers in the register files.; // Returns a ""response mask"" where each bit represents the response from a; // different register file. A mask of all zeroes means that all register; // files are available. Otherwise, the mask can be used to identify which; // register file was busy. This sematic allows us to classify dispatch; // stalls caused by the lack of register file resources.; //; // Current implementation can simulate up to 32 register files (including the; // special register file at index #0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:179,Availability,mask,mask,179,"// Checks if there are enough physical registers in the register files.; // Returns a ""response mask"" where each bit represents the response from a; // different register file. A mask of all zeroes means that all register; // files are available. Otherwise, the mask can be used to identify which; // register file was busy. This sematic allows us to classify dispatch; // stalls caused by the lack of register file resources.; //; // Current implementation can simulate up to 32 register files (including the; // special register file at index #0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:236,Availability,avail,available,236,"// Checks if there are enough physical registers in the register files.; // Returns a ""response mask"" where each bit represents the response from a; // different register file. A mask of all zeroes means that all register; // files are available. Otherwise, the mask can be used to identify which; // register file was busy. This sematic allows us to classify dispatch; // stalls caused by the lack of register file resources.; //; // Current implementation can simulate up to 32 register files (including the; // special register file at index #0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:262,Availability,mask,mask,262,"// Checks if there are enough physical registers in the register files.; // Returns a ""response mask"" where each bit represents the response from a; // different register file. A mask of all zeroes means that all register; // files are available. Otherwise, the mask can be used to identify which; // register file was busy. This sematic allows us to classify dispatch; // stalls caused by the lack of register file resources.; //; // Current implementation can simulate up to 32 register files (including the; // special register file at index #0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:517,Energy Efficiency,Schedul,Scheduler,517,"//===--------------------- ResourceManager.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// The classes here represent processor resource units and their management; /// strategy. These classes are managed by the Scheduler.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:97,Availability,avail,available,97,"/// Used to notify the internal state of a processor resource.; ///; /// A processor resource is available if it is not reserved, and there are; /// available slots in the buffer. A processor resource is unavailable if it; /// is either reserved, or the associated buffer is full. A processor resource; /// with a buffer size of -1 is always available if it is not reserved.; ///; /// Values of type ResourceStateEvent are returned by method; /// ResourceManager::canBeDispatched(); ///; /// The naming convention for resource state events is:; /// * Event names start with prefix RS_; /// * Prefix RS_ is followed by a string describing the actual resource state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:149,Availability,avail,available,149,"/// Used to notify the internal state of a processor resource.; ///; /// A processor resource is available if it is not reserved, and there are; /// available slots in the buffer. A processor resource is unavailable if it; /// is either reserved, or the associated buffer is full. A processor resource; /// with a buffer size of -1 is always available if it is not reserved.; ///; /// Values of type ResourceStateEvent are returned by method; /// ResourceManager::canBeDispatched(); ///; /// The naming convention for resource state events is:; /// * Event names start with prefix RS_; /// * Prefix RS_ is followed by a string describing the actual resource state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:342,Availability,avail,available,342,"/// Used to notify the internal state of a processor resource.; ///; /// A processor resource is available if it is not reserved, and there are; /// available slots in the buffer. A processor resource is unavailable if it; /// is either reserved, or the associated buffer is full. A processor resource; /// with a buffer size of -1 is always available if it is not reserved.; ///; /// Values of type ResourceStateEvent are returned by method; /// ResourceManager::canBeDispatched(); ///; /// The naming convention for resource state events is:; /// * Event names start with prefix RS_; /// * Prefix RS_ is followed by a string describing the actual resource state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:50,Energy Efficiency,schedul,scheduler,50,/// Resource allocation strategy used by hardware scheduler resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:215,Testability,log,logic,215,"/// Called by the ResourceManager when a processor resource group, or a; /// processor resource with multiple units has become unavailable.; ///; /// The default strategy uses this information to bias its selection logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,Availability,Mask,Mask,6,/// A Mask of resource unit identifiers.; ///; /// There is one bit set for every available resource unit.; /// It defaults to the value of field ResourceSizeMask in ResourceState.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:82,Availability,avail,available,82,/// A Mask of resource unit identifiers.; ///; /// There is one bit set for every available resource unit.; /// It defaults to the value of field ResourceSizeMask in ResourceState.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:86,Availability,mask,mask,86,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:543,Availability,mask,mask,543,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,Usability,simpl,simple,6,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:757,Usability,clear,cleared,757,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:646,Availability,mask,mask,646,"/// This field is used to track resource units that are used (i.e. selected); /// by other groups other than the one associated with this strategy object.; ///; /// In LLVM processor resource groups are allowed to partially (or fully); /// overlap. That means, a same unit may be visible to multiple groups.; /// This field keeps track of uses that have originated from outside of; /// this group. The idea is to bias the selection strategy, so that resources; /// that haven't been used by other groups get prioritized.; ///; /// The end goal is to (try to) keep the resource distribution as much uniform; /// as possible. By construction, this mask only tracks one-level of resource; /// usage. Therefore, this strategy is expected to be less accurate when same; /// units are used multiple times by other groups within a single round of; /// select.; ///; /// Note: an LRU selector would have a better accuracy at the cost of being; /// slightly more expensive (mostly in terms of runtime cost). Methods; /// 'select' and 'used', are always in the hot execution path of llvm-mca.; /// Therefore, a slow implementation of 'select' would have a negative impact; /// on the overall performance of the tool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:1182,Performance,perform,performance,1182,"/// This field is used to track resource units that are used (i.e. selected); /// by other groups other than the one associated with this strategy object.; ///; /// In LLVM processor resource groups are allowed to partially (or fully); /// overlap. That means, a same unit may be visible to multiple groups.; /// This field keeps track of uses that have originated from outside of; /// this group. The idea is to bias the selection strategy, so that resources; /// that haven't been used by other groups get prioritized.; ///; /// The end goal is to (try to) keep the resource distribution as much uniform; /// as possible. By construction, this mask only tracks one-level of resource; /// usage. Therefore, this strategy is expected to be less accurate when same; /// units are used multiple times by other groups within a single round of; /// select.; ///; /// Note: an LRU selector would have a better accuracy at the cost of being; /// slightly more expensive (mostly in terms of runtime cost). Methods; /// 'select' and 'used', are always in the hot execution path of llvm-mca.; /// Therefore, a slow implementation of 'select' would have a negative impact; /// on the overall performance of the tool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:139,Energy Efficiency,schedul,scheduling,139,/// A processor resource descriptor.; ///; /// There is an instance of this class for every processor resource defined by; /// the machine scheduling model.; /// Objects of class ResourceState dynamically track the usage of processor; /// resource units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:15,Availability,mask,mask,15,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:399,Availability,mask,mask,399,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:445,Availability,mask,mask,445,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:616,Availability,Mask,Mask,616,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:339,Usability,simpl,simply,339,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:100,Availability,mask,mask,100,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:397,Availability,mask,mask,397,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:175,Usability,clear,clearing,175,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:257,Usability,simpl,simply,257,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,Availability,mask,mask,6,/// A mask of ready units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:250,Energy Efficiency,schedul,scheduler,250,"/// Buffered resources will have this field set to a positive number different; /// than zero. A buffered resource behaves like a reservation station; /// implementing its own buffer for out-of-order execution.; ///; /// A BufferSize of 1 is used by scheduler resources that force in-order; /// execution.; ///; /// A BufferSize of 0 is used to model in-order issue/dispatch resources.; /// Since in-order issue/dispatch resources don't implement buffers, dispatch; /// events coincide with issue events.; /// Also, no other instruction ca be dispatched/issue while this resource is; /// in use. Only when all the ""resource cycles"" are consumed (after the issue; /// event), a new instruction ca be dispatched.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:4,Availability,Avail,Available,4,"/// Available slots in the buffer (zero, if this is not a buffered resource).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:299,Deployability,pipeline,pipelines,299,"/// This field is set if this resource is currently reserved.; ///; /// Resources can be reserved for a number of cycles.; /// Instructions can still be dispatched to reserved resources. However,; /// istructions dispatched to a reserved resource cannot be issued to the; /// underlying units (i.e. pipelines) until the resource is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:332,Deployability,release,released,332,"/// This field is set if this resource is currently reserved.; ///; /// Resources can be reserved for a number of cycles.; /// Instructions can still be dispatched to reserved resources. However,; /// istructions dispatched to a reserved resource cannot be issued to the; /// underlying units (i.e. pipelines) until the resource is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:19,Availability,avail,availability,19,/// Checks for the availability of unit 'SubResMask' in the group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:92,Availability,avail,available,92,"/// Returs true if this resource is not reserved, and if there are at least; /// `NumUnits` available units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:26,Availability,avail,available,26,"/// Checks if there is an available slot in the resource buffer.; ///; /// Returns RS_BUFFER_AVAILABLE if this is not a buffered resource, or if; /// there is a slot available.; ///; /// Returns RS_RESERVED if this buffered resource is a dispatch hazard, and it; /// is reserved.; ///; /// Returns RS_BUFFER_UNAVAILABLE if there are no available slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:166,Availability,avail,available,166,"/// Checks if there is an available slot in the resource buffer.; ///; /// Returns RS_BUFFER_AVAILABLE if this is not a buffered resource, or if; /// there is a slot available.; ///; /// Returns RS_RESERVED if this buffered resource is a dispatch hazard, and it; /// is reserved.; ///; /// Returns RS_BUFFER_UNAVAILABLE if there are no available slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:336,Availability,avail,available,336,"/// Checks if there is an available slot in the resource buffer.; ///; /// Returns RS_BUFFER_AVAILABLE if this is not a buffered resource, or if; /// there is a slot available.; ///; /// Returns RS_RESERVED if this buffered resource is a dispatch hazard, and it; /// is reserved.; ///; /// Returns RS_BUFFER_UNAVAILABLE if there are no available slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:247,Safety,hazard,hazard,247,"/// Checks if there is an available slot in the resource buffer.; ///; /// Returns RS_BUFFER_AVAILABLE if this is not a buffered resource, or if; /// there is a slot available.; ///; /// Returns RS_RESERVED if this buffered resource is a dispatch hazard, and it; /// is reserved.; ///; /// Returns RS_BUFFER_UNAVAILABLE if there are no available slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:4,Deployability,Release,Releases,4,/// Releases a slot in the buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:19,Safety,hazard,hazards,19,// Ignore dispatch hazards or invalid buffer sizes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:179,Availability,mask,mask,179,"/// A resource unit identifier.; ///; /// This is used to identify a specific processor resource unit using a pair; /// of indices where the 'first' index is a processor resource mask, and the; /// 'second' index is an index for a ""sub-resource"" (i.e. unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:178,Energy Efficiency,Schedul,Scheduler,178,"/// A resource manager for processor resource units and groups.; ///; /// This class owns all the ResourceState objects, and it is responsible for; /// acting on requests from a Scheduler by updating the internal state of; /// ResourceState objects.; /// This class doesn't know about instruction itineraries and functional units.; /// In future, it can be extended to support itineraries too through the same; /// public interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:422,Integrability,interface,interface,422,"/// A resource manager for processor resource units and groups.; ///; /// This class owns all the ResourceState objects, and it is responsible for; /// acting on requests from a Scheduler by updating the internal state of; /// ResourceState objects.; /// This class doesn't know about instruction itineraries and functional units.; /// In future, it can be extended to support itineraries too through the same; /// public interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:357,Modifiability,extend,extended,357,"/// A resource manager for processor resource units and groups.; ///; /// This class owns all the ResourceState objects, and it is responsible for; /// acting on requests from a Scheduler by updating the internal state of; /// ResourceState objects.; /// This class doesn't know about instruction itineraries and functional units.; /// In future, it can be extended to support itineraries too through the same; /// public interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:20,Availability,avail,available,20,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:381,Availability,mask,mask,381,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:545,Availability,mask,mask,545,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:688,Availability,Mask,Mask,688,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:140,Energy Efficiency,schedul,scheduling,140,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:349,Integrability,depend,depends,349,"// Set of resources available on the subtarget.; //; // There is an instance of ResourceState for every resource declared by the; // target scheduling model.; //; // Elements of this vector are ordered by resource kind. In particular,; // resource units take precedence over resource groups.; //; // The index of a processor resource in this vector depends on the value of; // its mask (see the description of field ResourceState::ResourceMask). In; // particular, it is computed as the position of the most significant bit set; // (MSB) in the mask plus one (since we want to ignore the invalid resource; // descriptor at index zero).; //; // Example (little endian):; //; // Resource | Mask | MSB | Index; // ---------+---------+---------+-------; // A | 0b00001 | 0b00001 | 1; // | | |; // B | 0b00100 | 0b00100 | 3; // | | |; // C | 0b10010 | 0b10000 | 5; //; //; // The same index is also used to address elements within vector `Strategies`; // and vector `Resource2Groups`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:66,Availability,mask,masks,66,// A table that maps processor resource IDs to processor resource masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:82,Energy Efficiency,schedul,scheduling,82,// A table that maps resource indices to actual processor resource IDs in the; // scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:97,Usability,usab,usable,97,"// Keeps track of which resources are busy, and how many cycles are left; // before those become usable again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:35,Availability,avail,available,35,// Set of processor resource units available on the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:44,Availability,avail,available,44,// Set of processor resource units that are available during this cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:22,Energy Efficiency,schedul,scheduler,22,// Set of unavailable scheduler buffer resources. This is used internally to; // speedup `canBeDispatched()` queries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:19,Safety,hazard,hazard,19,// Set of dispatch hazard buffer resources that are currently unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:82,Availability,mask,mask,82,// Overrides the selection strategy for the processor resource with the given; // mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:99,Availability,avail,available,99,"// Returns RS_BUFFER_AVAILABLE if buffered resources are not reserved, and if; // there are enough available slots in the buffers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:63,Availability,Mask,Mask,63,// Return the processor resource identifier associated to this Mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:51,Availability,mask,mask,51,// Acquires a slot from every buffered resource in mask `ConsumedBuffers`.; // Units that are dispatch hazards (i.e. BufferSize=0) are marked as reserved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:103,Safety,hazard,hazards,103,// Acquires a slot from every buffered resource in mask `ConsumedBuffers`.; // Units that are dispatch hazards (i.e. BufferSize=0) are marked as reserved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:51,Availability,mask,mask,51,// Releases a slot from every buffered resource in mask `ConsumedBuffers`.; // ConsumedBuffers is a bitmask of previously acquired buffers (using method; // `reserveBuffers`). Units that are dispatch hazards (i.e. BufferSize=0) are; // not automatically unreserved by this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:3,Deployability,Release,Releases,3,// Releases a slot from every buffered resource in mask `ConsumedBuffers`.; // ConsumedBuffers is a bitmask of previously acquired buffers (using method; // `reserveBuffers`). Units that are dispatch hazards (i.e. BufferSize=0) are; // not automatically unreserved by this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:200,Safety,hazard,hazards,200,// Releases a slot from every buffered resource in mask `ConsumedBuffers`.; // ConsumedBuffers is a bitmask of previously acquired buffers (using method; // `reserveBuffers`). Units that are dispatch hazards (i.e. BufferSize=0) are; // not automatically unreserved by this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:60,Availability,avail,available,60,// Reserve a processor resource. A reserved resource is not available for; // instruction issue until it is released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:108,Deployability,release,released,108,// Reserve a processor resource. A reserved resource is not available for; // instruction issue until it is released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:3,Deployability,Release,Release,3,// Release a previously reserved processor resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:18,Availability,mask,mask,18,// Returns a zero mask if resources requested by Desc are all available during; // this cycle. It returns a non-zero mask value only if there are unavailable; // processor resources; each bit set in the mask represents a busy processor; // resource unit or a reserved processor resource group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:62,Availability,avail,available,62,// Returns a zero mask if resources requested by Desc are all available during; // this cycle. It returns a non-zero mask value only if there are unavailable; // processor resources; each bit set in the mask represents a busy processor; // resource unit or a reserved processor resource group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:117,Availability,mask,mask,117,// Returns a zero mask if resources requested by Desc are all available during; // this cycle. It returns a non-zero mask value only if there are unavailable; // processor resources; each bit set in the mask represents a busy processor; // resource unit or a reserved processor resource group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:203,Availability,mask,mask,203,// Returns a zero mask if resources requested by Desc are all available during; // this cycle. It returns a non-zero mask value only if there are unavailable; // processor resources; each bit set in the mask represents a busy processor; // resource unit or a reserved processor resource group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:298,Deployability,pipeline,pipeline,298,"/// This class tracks which instructions are in-flight (i.e., dispatched but not; /// retired) in the OoO backend.; //; /// This class checks on every cycle if/which instructions can be retired.; /// Instructions are retired in program order.; /// In the event of an instruction being retired, the pipeline that owns; /// this RetireControlUnit (RCU) gets notified.; ///; /// On instruction retired, register updates are all architecturally; /// committed, and any physicall registers previously allocated for the; /// retired instruction are freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:409,Deployability,update,updates,409,"/// This class tracks which instructions are in-flight (i.e., dispatched but not; /// retired) in the OoO backend.; //; /// This class checks on every cycle if/which instructions can be retired.; /// Instructions are retired in program order.; /// In the event of an instruction being retired, the pipeline that owns; /// this RetireControlUnit (RCU) gets notified.; ///; /// On instruction retired, register updates are all architecturally; /// committed, and any physicall registers previously allocated for the; /// retired instruction are freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:496,Energy Efficiency,allocate,allocated,496,"/// This class tracks which instructions are in-flight (i.e., dispatched but not; /// retired) in the OoO backend.; //; /// This class checks on every cycle if/which instructions can be retired.; /// Instructions are retired in program order.; /// In the event of an instruction being retired, the pipeline that owns; /// this RetireControlUnit (RCU) gets notified.; ///; /// On instruction retired, register updates are all architecturally; /// committed, and any physicall registers previously allocated for the; /// retired instruction are freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:542,Availability,avail,available,542,"// A RUToken is created by the RCU for every instruction dispatched to the; // schedulers. These ""tokens"" are managed by the RCU in its token Queue.; //; // On every cycle ('cycleEvent'), the RCU iterates through the token queue; // looking for any token with its 'Executed' flag set. If a token has that; // flag set, then the instruction has reached the write-back stage and will; // be retired by the RCU.; //; // 'NumSlots' represents the number of entries consumed by the instruction in; // the reorder buffer. Those entries will become available again once the; // instruction is retired.; //; // Note that the size of the reorder buffer is defined by the scheduling; // model via field 'NumMicroOpBufferSize'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:79,Energy Efficiency,schedul,schedulers,79,"// A RUToken is created by the RCU for every instruction dispatched to the; // schedulers. These ""tokens"" are managed by the RCU in its token Queue.; //; // On every cycle ('cycleEvent'), the RCU iterates through the token queue; // looking for any token with its 'Executed' flag set. If a token has that; // flag set, then the instruction has reached the write-back stage and will; // be retired by the RCU.; //; // 'NumSlots' represents the number of entries consumed by the instruction in; // the reorder buffer. Those entries will become available again once the; // instruction is retired.; //; // Note that the size of the reorder buffer is defined by the scheduling; // model via field 'NumMicroOpBufferSize'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:662,Energy Efficiency,schedul,scheduling,662,"// A RUToken is created by the RCU for every instruction dispatched to the; // schedulers. These ""tokens"" are managed by the RCU in its token Queue.; //; // On every cycle ('cycleEvent'), the RCU iterates through the token queue; // looking for any token with its 'Executed' flag set. If a token has that; // flag set, then the instruction has reached the write-back stage and will; // be retired by the RCU.; //; // 'NumSlots' represents the number of entries consumed by the instruction in; // the reorder buffer. Those entries will become available again once the; // instruction is retired.; //; // Note that the size of the reorder buffer is defined by the scheduling; // model via field 'NumMicroOpBufferSize'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:142,Performance,Queue,Queue,142,"// A RUToken is created by the RCU for every instruction dispatched to the; // schedulers. These ""tokens"" are managed by the RCU in its token Queue.; //; // On every cycle ('cycleEvent'), the RCU iterates through the token queue; // looking for any token with its 'Executed' flag set. If a token has that; // flag set, then the instruction has reached the write-back stage and will; // be retired by the RCU.; //; // 'NumSlots' represents the number of entries consumed by the instruction in; // the reorder buffer. Those entries will become available again once the; // instruction is retired.; //; // Note that the size of the reorder buffer is defined by the scheduling; // model via field 'NumMicroOpBufferSize'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:223,Performance,queue,queue,223,"// A RUToken is created by the RCU for every instruction dispatched to the; // schedulers. These ""tokens"" are managed by the RCU in its token Queue.; //; // On every cycle ('cycleEvent'), the RCU iterates through the token queue; // looking for any token with its 'Executed' flag set. If a token has that; // flag set, then the instruction has reached the write-back stage and will; // be retired by the RCU.; //; // 'NumSlots' represents the number of entries consumed by the instruction in; // the reorder buffer. Those entries will become available again once the; // instruction is retired.; //; // Note that the size of the reorder buffer is defined by the scheduling; // model via field 'NumMicroOpBufferSize'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:103,Safety,avoid,avoid,103,"// Some instructions may declare a number of uOps which exceeds the size; // of the reorder buffer. To avoid problems, cap the amount of slots to; // the size of the reorder buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:58,Performance,queue,queue,58,// Return the current token from the RCU's circular token queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:63,Performance,queue,queue,63,// Advance the pointer to the next token in the circular token queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h:3,Deployability,Update,Update,3,// Update the RCU token to represent the executed state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RetireControlUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:27,Energy Efficiency,Schedul,Scheduler,27,"//===--------------------- Scheduler.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A scheduler for Processor Resource Units and Processor Resource Groups.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:396,Energy Efficiency,schedul,scheduler,396,"//===--------------------- Scheduler.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A scheduler for Processor Resource Units and Processor Resource Groups.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:175,Deployability,pipeline,pipelines,175,"/// Returns true if Lhs should take priority over Rhs.; ///; /// This method is used by class Scheduler to select the ""best"" ready; /// instruction to issue to the underlying pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:94,Energy Efficiency,Schedul,Scheduler,94,"/// Returns true if Lhs should take priority over Rhs.; ///; /// This method is used by class Scheduler to select the ""best"" ready; /// instruction to issue to the underlying pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:57,Energy Efficiency,Schedul,Scheduler,57,/// Default instruction selection strategy used by class Scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:63,Deployability,pipeline,pipeline,63,"/// Class Scheduler is responsible for issuing instructions to pipeline; /// resources.; ///; /// Internally, it delegates to a ResourceManager the management of processor; /// resources. This class is also responsible for tracking the progress of; /// instructions from the dispatch stage, until the write-back stage.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:10,Energy Efficiency,Schedul,Scheduler,10,"/// Class Scheduler is responsible for issuing instructions to pipeline; /// resources.; ///; /// Internally, it delegates to a ResourceManager the management of processor; /// resources. This class is also responsible for tracking the progress of; /// instructions from the dispatch stage, until the write-back stage.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:43,Energy Efficiency,Schedul,Scheduler,43,// Instruction selection strategy for this Scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:47,Energy Efficiency,schedul,scheduler,47,// Hardware resources that are managed by this scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:252,Availability,avail,available,252,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:1155,Availability,avail,available,1155,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:890,Deployability,pipeline,pipelines,890,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:34,Energy Efficiency,Schedul,Scheduler,34,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:177,Energy Efficiency,Schedul,Scheduler,177,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:1344,Energy Efficiency,Schedul,Scheduler,1344,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:707,Integrability,depend,dependencies,707,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:951,Integrability,depend,dependencies,951,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:1030,Integrability,depend,dependencies,1030,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:1181,Integrability,depend,dependencies,1181,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:280,Performance,latency,latency,280,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:520,Performance,latency,latency,520,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:924,Performance,bottleneck,bottlenecks,924,"// Instructions dispatched to the Scheduler are internally classified based on; // the instruction stage (see Instruction::InstrStage).; //; // An Instruction dispatched to the Scheduler is added to the WaitSet if not; // all its register operands are available, and at least one latency is; // unknown. By construction, the WaitSet only contains instructions that are; // in the IS_DISPATCHED stage.; //; // An Instruction transitions from the WaitSet to the PendingSet if the; // instruction is not ready yet, but the latency of every register read is; // known. Instructions in the PendingSet can only be in the IS_PENDING or; // IS_READY stage. Only IS_READY instructions that are waiting on memory; // dependencies can be added to the PendingSet.; //; // Instructions in the PendingSet are immediately dominated only by; // instructions that have already been issued to the underlying pipelines. In; // the presence of bottlenecks caused by data dependencies, the PendingSet can; // be inspected to identify problematic data dependencies between; // instructions.; //; // An instruction is moved to the ReadySet when all register operands become; // available, and all memory dependencies are met. Instructions that are; // moved from the PendingSet to the ReadySet must transition to the 'IS_READY'; // stage.; //; // On every cycle, the Scheduler checks if it can promote instructions from the; // PendingSet to the ReadySet.; //; // An Instruction is moved from the ReadySet to the `IssuedSet` when it starts; // exection. This event also causes an instruction state transition (i.e. from; // state IS_READY, to state IS_EXECUTING). An Instruction leaves the IssuedSet; // only when it reaches the write-back stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:5,Availability,mask,mask,5,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:80,Availability,mask,mask,80,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:293,Availability,mask,mask,293,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:148,Deployability,update,updated,148,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:253,Deployability,pipeline,pipeline,253,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:171,Energy Efficiency,schedul,scheduler,171,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:97,Usability,clear,cleared,97,"// A mask of busy resource units. It defaults to the empty set (i.e. a zero; // mask), and it is cleared at the beginning of every cycle.; // It is updated every time the scheduler fails to issue an instruction from; // the ready set due to unavailable pipeline resources.; // Each bit of the mask represents an unavailable resource.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:24,Deployability,pipeline,pipeline,24,// True if the previous pipeline Stage was unable to dispatch a full group of; // opcodes because scheduler buffers (or LS queues) were unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:98,Energy Efficiency,schedul,scheduler,98,// True if the previous pipeline Stage was unable to dispatch a full group of; // opcodes because scheduler buffers (or LS queues) were unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:123,Performance,queue,queues,123,// True if the previous pipeline Stage was unable to dispatch a full group of; // opcodes because scheduler buffers (or LS queues) were unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:52,Performance,queue,queue,52,/// Issue an instruction without updating the ready queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:27,Energy Efficiency,schedul,scheduler,27,// Stalls generated by the scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:138,Availability,avail,available,138,/// Check if the instruction in 'IR' can be dispatched during this cycle.; /// Return SC_AVAILABLE if both scheduler and LS resources are available.; ///; /// This method is also responsible for setting field HadTokenStall if; /// IR cannot be dispatched to the Scheduler due to unavailable resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:107,Energy Efficiency,schedul,scheduler,107,/// Check if the instruction in 'IR' can be dispatched during this cycle.; /// Return SC_AVAILABLE if both scheduler and LS resources are available.; ///; /// This method is also responsible for setting field HadTokenStall if; /// IR cannot be dispatched to the Scheduler due to unavailable resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:262,Energy Efficiency,Schedul,Scheduler,262,/// Check if the instruction in 'IR' can be dispatched during this cycle.; /// Return SC_AVAILABLE if both scheduler and LS resources are available.; ///; /// This method is also responsible for setting field HadTokenStall if; /// IR cannot be dispatched to the Scheduler due to unavailable resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:184,Deployability,pipeline,pipelines,184,"/// Reserves buffer and LSUnit queue resources that are necessary to issue; /// this instruction.; ///; /// Returns true if instruction IR is ready to be issued to the underlying; /// pipelines. Note that this operation cannot fail; it assumes that a; /// previous call to method `isAvailable(IR)` returned `SC_AVAILABLE`.; ///; /// If IR is a memory operation, then the Scheduler queries the LS unit to; /// obtain a LS token. An LS token is used internally to track memory; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:371,Energy Efficiency,Schedul,Scheduler,371,"/// Reserves buffer and LSUnit queue resources that are necessary to issue; /// this instruction.; ///; /// Returns true if instruction IR is ready to be issued to the underlying; /// pipelines. Note that this operation cannot fail; it assumes that a; /// previous call to method `isAvailable(IR)` returned `SC_AVAILABLE`.; ///; /// If IR is a memory operation, then the Scheduler queries the LS unit to; /// obtain a LS token. An LS token is used internally to track memory; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:480,Integrability,depend,dependencies,480,"/// Reserves buffer and LSUnit queue resources that are necessary to issue; /// this instruction.; ///; /// Returns true if instruction IR is ready to be issued to the underlying; /// pipelines. Note that this operation cannot fail; it assumes that a; /// previous call to method `isAvailable(IR)` returned `SC_AVAILABLE`.; ///; /// If IR is a memory operation, then the Scheduler queries the LS unit to; /// obtain a LS token. An LS token is used internally to track memory; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:31,Performance,queue,queue,31,"/// Reserves buffer and LSUnit queue resources that are necessary to issue; /// this instruction.; ///; /// Returns true if instruction IR is ready to be issued to the underlying; /// pipelines. Note that this operation cannot fail; it assumes that a; /// previous call to method `isAvailable(IR)` returned `SC_AVAILABLE`.; ///; /// If IR is a memory operation, then the Scheduler queries the LS unit to; /// obtain a LS token. An LS token is used internally to track memory; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:56,Deployability,pipeline,pipeline,56,"/// Issue an instruction and populates a vector of used pipeline resources,; /// and a vector of instructions that transitioned to the ready state as a; /// result of this event.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:77,Performance,latency,latency,77,"/// Returns true if IR has to be issued immediately, or if IR is a zero; /// latency instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:276,Availability,avail,available,276,"/// This routine notifies the Scheduler that a new cycle just started.; ///; /// It notifies the underlying ResourceManager that a new cycle just started.; /// Vector `Freed` is populated with resourceRef related to resources that; /// have changed in state, and that are now available to new instructions.; /// Instructions executed are added to vector Executed, while vector Ready is; /// populated with instructions that have become ready in this new cycle.; /// Vector Pending is popluated by instructions that have transitioned through; /// the pending stat during this cycle. The Pending and Ready sets may not be; /// disjoint. An instruction is allowed to transition from the WAIT state to; /// the READY state (going through the PENDING state) within a single cycle.; /// That means, instructions may appear in both the Pending and Ready set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:30,Energy Efficiency,Schedul,Scheduler,30,"/// This routine notifies the Scheduler that a new cycle just started.; ///; /// It notifies the underlying ResourceManager that a new cycle just started.; /// Vector `Freed` is populated with resourceRef related to resources that; /// have changed in state, and that are now available to new instructions.; /// Instructions executed are added to vector Executed, while vector Ready is; /// populated with instructions that have become ready in this new cycle.; /// Vector Pending is popluated by instructions that have transitioned through; /// the pending stat during this cycle. The Pending and Ready sets may not be; /// disjoint. An instruction is allowed to transition from the WAIT state to; /// the READY state (going through the PENDING state) within a single cycle.; /// That means, instructions may appear in both the Pending and Ready set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:9,Integrability,rout,routine,9,"/// This routine notifies the Scheduler that a new cycle just started.; ///; /// It notifies the underlying ResourceManager that a new cycle just started.; /// Vector `Freed` is populated with resourceRef related to resources that; /// have changed in state, and that are now available to new instructions.; /// Instructions executed are added to vector Executed, while vector Ready is; /// populated with instructions that have become ready in this new cycle.; /// Vector Pending is popluated by instructions that have transitioned through; /// the pending stat during this cycle. The Pending and Ready sets may not be; /// disjoint. An instruction is allowed to transition from the WAIT state to; /// the READY state (going through the PENDING state) within a single cycle.; /// That means, instructions may appear in both the Pending and Ready set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:23,Availability,mask,mask,23,/// Convert a resource mask into a valid llvm processor resource identifier.; ///; /// Only the most significant bit of the Mask is used by this method to; /// identify the processor resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:124,Availability,Mask,Mask,124,/// Convert a resource mask into a valid llvm processor resource identifier.; ///; /// Only the most significant bit of the Mask is used by this method to; /// identify the processor resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:181,Availability,avail,available,181,"/// Select the next instruction to issue from the ReadySet. Returns an invalid; /// instruction reference if there are no ready instructions, or if processor; /// resources are not available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:115,Integrability,depend,dependencies,115,/// This method is called by the ExecuteStage at the end of each cycle to; /// identify bottlenecks caused by data dependencies. Vector RegDeps is; /// populated by instructions that were not issued because of unsolved; /// register dependencies. Vector MemDeps is populated by instructions that; /// were not issued because of unsolved memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:233,Integrability,depend,dependencies,233,/// This method is called by the ExecuteStage at the end of each cycle to; /// identify bottlenecks caused by data dependencies. Vector RegDeps is; /// populated by instructions that were not issued because of unsolved; /// register dependencies. Vector MemDeps is populated by instructions that; /// were not issued because of unsolved memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:344,Integrability,depend,dependencies,344,/// This method is called by the ExecuteStage at the end of each cycle to; /// identify bottlenecks caused by data dependencies. Vector RegDeps is; /// populated by instructions that were not issued because of unsolved; /// register dependencies. Vector MemDeps is populated by instructions that; /// were not issued because of unsolved memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:88,Performance,bottleneck,bottlenecks,88,/// This method is called by the ExecuteStage at the end of each cycle to; /// identify bottlenecks caused by data dependencies. Vector RegDeps is; /// populated by instructions that were not issued because of unsolved; /// register dependencies. Vector MemDeps is populated by instructions that; /// were not issued because of unsolved memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:14,Availability,mask,mask,14,"/// Returns a mask of busy resources, and populates vector Insts with; /// instructions that could not be issued to the underlying pipelines because; /// not all pipeline resources were available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:186,Availability,avail,available,186,"/// Returns a mask of busy resources, and populates vector Insts with; /// instructions that could not be issued to the underlying pipelines because; /// not all pipeline resources were available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:131,Deployability,pipeline,pipelines,131,"/// Returns a mask of busy resources, and populates vector Insts with; /// instructions that could not be issued to the underlying pipelines because; /// not all pipeline resources were available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:162,Deployability,pipeline,pipeline,162,"/// Returns a mask of busy resources, and populates vector Insts with; /// instructions that could not be issued to the underlying pipelines because; /// not all pipeline resources were available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:92,Energy Efficiency,schedul,scheduler,92,// Returns true if the dispatch logic couldn't dispatch a full group due to; // unavailable scheduler and/or LS resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:32,Testability,log,logic,32,// Returns true if the dispatch logic couldn't dispatch a full group due to; // unavailable scheduler and/or LS resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:3,Deployability,Update,Update,3,// Update the ready queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:20,Performance,queue,queues,20,// Update the ready queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:128,Energy Efficiency,schedul,scheduler,128,// This routine performs a basic correctness check. This routine should only; // be called when we know that 'IR' is not in the scheduler's instruction; // queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:8,Integrability,rout,routine,8,// This routine performs a basic correctness check. This routine should only; // be called when we know that 'IR' is not in the scheduler's instruction; // queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:57,Integrability,rout,routine,57,// This routine performs a basic correctness check. This routine should only; // be called when we know that 'IR' is not in the scheduler's instruction; // queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:16,Performance,perform,performs,16,// This routine performs a basic correctness check. This routine should only; // be called when we know that 'IR' is not in the scheduler's instruction; // queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:156,Performance,queue,queues,156,// This routine performs a basic correctness check. This routine should only; // be called when we know that 'IR' is not in the scheduler's instruction; // queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:454,Deployability,pipeline,pipeline,454,"//===----------------------- DispatchStage.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:597,Energy Efficiency,schedul,scheduler,597,"//===----------------------- DispatchStage.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:647,Energy Efficiency,schedul,scheduled,647,"//===----------------------- DispatchStage.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:532,Integrability,depend,dependencies,532,"//===----------------------- DispatchStage.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:497,Availability,avail,available,497,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:738,Availability,avail,available,738,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:159,Energy Efficiency,Schedul,Scheduler,159,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:849,Performance,perform,performance,849,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:36,Testability,log,logic,36,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:16,Testability,log,logic,16,// The dispatch logic internally doesn't buffer instructions. So there is; // never work to do at the beginning of every cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h:448,Deployability,pipeline,pipeline,448,"//===---------------------- EntryStage.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Entry stage of an instruction pipeline. Its sole; /// purpose in life is to pick instructions in sequence and move them to the; /// next pipeline stage.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h:555,Deployability,pipeline,pipeline,555,"//===---------------------- EntryStage.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Entry stage of an instruction pipeline. Its sole; /// purpose in life is to pick instructions in sequence and move them to the; /// next pipeline stage.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h:3,Deployability,Update,Updates,3,"// Updates the program counter, and sets 'CurrentInstruction'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/EntryStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:459,Deployability,pipeline,pipeline,459,"//===---------------------- ExecuteStage.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the execution stage of a default instruction pipeline.; ///; /// The ExecuteStage is responsible for managing the hardware scheduler; /// and issuing notifications that an instruction has been executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:537,Energy Efficiency,schedul,scheduler,537,"//===---------------------- ExecuteStage.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the execution stage of a default instruction pipeline.; ///; /// The ExecuteStage is responsible for managing the hardware scheduler; /// and issuing notifications that an instruction has been executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:104,Deployability,pipeline,pipelines,104,// Called at the beginning of each cycle to issue already dispatched; // instructions to the underlying pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:50,Deployability,Pipeline,Pipeline,50,"// This stage works under the assumption that the Pipeline will eventually; // execute a retire stage. We don't need to check if pipelines and/or; // schedulers have instructions to process, because those instructions are; // also tracked by the retire control unit. That means,; // RetireControlUnit::hasWorkToComplete() is responsible for checking if there; // are still instructions in-flight in the out-of-order backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:129,Deployability,pipeline,pipelines,129,"// This stage works under the assumption that the Pipeline will eventually; // execute a retire stage. We don't need to check if pipelines and/or; // schedulers have instructions to process, because those instructions are; // also tracked by the retire control unit. That means,; // RetireControlUnit::hasWorkToComplete() is responsible for checking if there; // are still instructions in-flight in the out-of-order backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:150,Energy Efficiency,schedul,schedulers,150,"// This stage works under the assumption that the Pipeline will eventually; // execute a retire stage. We don't need to check if pipelines and/or; // schedulers have instructions to process, because those instructions are; // also tracked by the retire control unit. That means,; // RetireControlUnit::hasWorkToComplete() is responsible for checking if there; // are still instructions in-flight in the out-of-order backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:16,Energy Efficiency,schedul,scheduler,16,"// Notifies the scheduler that a new cycle just started.; //; // This method notifies the scheduler that a new cycle started.; // This method is also responsible for notifying listeners about instructions; // state changes, and processor resources freed by the scheduler.; // Instructions that transitioned to the 'Executed' state are automatically; // moved to the next stage (i.e. RetireStage).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:90,Energy Efficiency,schedul,scheduler,90,"// Notifies the scheduler that a new cycle just started.; //; // This method notifies the scheduler that a new cycle started.; // This method is also responsible for notifying listeners about instructions; // state changes, and processor resources freed by the scheduler.; // Instructions that transitioned to the 'Executed' state are automatically; // moved to the next stage (i.e. RetireStage).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h:261,Energy Efficiency,schedul,scheduler,261,"// Notifies the scheduler that a new cycle just started.; //; // This method notifies the scheduler that a new cycle started.; // This method is also responsible for notifying listeners about instructions; // state changes, and processor resources freed by the scheduler.; // Instructions that transitioned to the 'Executed' state are automatically; // moved to the next stage (i.e. RetireStage).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/ExecuteStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h:447,Deployability,pipeline,pipeline,447,"//===---------------------- InOrderIssueStage.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// InOrderIssueStage implements an in-order execution pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h:80,Deployability,update,updates,80,"/// Returns true if IR can execute during this cycle.; /// In case of stall, it updates SI with information about the stalled; /// instruction and the stall reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h:30,Deployability,update,update,30,"/// Issue the instruction, or update the StallInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h:4,Deployability,Update,Update,4,/// Update status of instructions from IssuedInst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/InOrderIssueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:440,Performance,queue,queue,440,"//===---------------------- MicroOpQueueStage.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a stage that implements a queue of micro opcodes.; /// It can be used to simulate a hardware micro-op queue that serves opcodes to; /// the out of order backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:516,Performance,queue,queue,516,"//===---------------------- MicroOpQueueStage.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a stage that implements a queue of micro opcodes.; /// It can be used to simulate a hardware micro-op queue that serves opcodes to; /// the out of order backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:29,Performance,queue,queue,29,/// A stage that simulates a queue of instruction opcodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:157,Performance,throughput,throughput,157,// Limits the number of instructions that can be written to this buffer every; // cycle. A value of zero means that there is no limit to the instruction; // throughput in input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:30,Availability,avail,available,30,// Number of entries that are available during this cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:192,Deployability,pipeline,pipeline,192,// True if instructions dispatched to this stage don't need to wait for the; // next cycle before moving to the next stage.; // False if this buffer acts as a one cycle delay in the execution pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h:297,Safety,avoid,avoid,297,"// By default, an instruction consumes a number of buffer entries equal to its; // number of micro opcodes (see field `InstrDesc::NumMicroOpcodes`). The; // number of entries consumed by an instruction is normalized to the; // minimum value between NumMicroOpcodes and the buffer size. This is to avoid; // problems with (microcoded) instructions that generate a number of micro; // opcodes than doesn't fit in the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/MicroOpQueueStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h:456,Deployability,pipeline,pipeline,456,"//===---------------------- RetireStage.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of a default instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h:510,Testability,log,logic,510,"//===---------------------- RetireStage.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of a default instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:469,Deployability,pipeline,pipeline,469,"//===---------------------- Stage.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a stage.; /// A chain of stages compose an instruction pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:21,Deployability,pipeline,pipeline,21,/// Called after the pipeline is resumed from pausing state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:33,Usability,resume,resumed,33,/// Called after the pipeline is resumed from pausing state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:39,Performance,perform,performs,39,/// The primary action that this stage performs on instruction IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:57,Deployability,pipeline,pipeline,57,/// Called when an instruction is ready to move the next pipeline stage.; ///; /// Stages are responsible for moving instructions to their immediate; /// successor stages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:28,Availability,error,error,28,/// This is actually not an error but a marker to indicate that; /// the instruction stream is paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:95,Usability,pause,paused,95,/// This is actually not an error but a marker to indicate that; /// the instruction stream is paused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:3,Availability,Error,ErrorCallback,3,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:35,Availability,recover,recoverable,35,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:47,Availability,error,errors,47,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:58,Availability,Error,Error,58,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:35,Safety,recover,recoverable,35,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:93,Safety,abort,aborts,93,// ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:60,Deployability,update,updated,60,// Specify section name and section body for newly added or updated section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:3,Deployability,Configurat,Configuration,3,// Configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:3,Modifiability,Config,Configuration,3,// Configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h:3,Performance,Cache,Cached,3,// Cached gnu_debuglink's target CRC,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/CommonConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h:7,Modifiability,Config,ConfigManager,7,"//===- ConfigManager.h ------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h:7,Modifiability,config,configs,7,// All configs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ConfigManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:181,Availability,Error,Error,181,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:48,Modifiability,Config,Config,48,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:140,Modifiability,Config,Config,140,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:206,Performance,perform,performing,206,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:227,Availability,Error,Error,227,"/// Applies the transformations described by \p Config to \p In and writes; /// the result into \p Out. This function does the dispatch based on the; /// format of the input binary (COFF, ELF, MachO or wasm).; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:48,Modifiability,Config,Config,48,"/// Applies the transformations described by \p Config to \p In and writes; /// the result into \p Out. This function does the dispatch based on the; /// format of the input binary (COFF, ELF, MachO or wasm).; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:252,Performance,perform,performing,252,"/// Applies the transformations described by \p Config to \p In and writes; /// the result into \p Out. This function does the dispatch based on the; /// format of the input binary (COFF, ELF, MachO or wasm).; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h:17,Deployability,configurat,configuration,17,// Coff specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h:17,Modifiability,config,configuration,17,// Coff specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h:138,Availability,Error,Error,138,/// Apply the transformations described by \p Config and \p COFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p COFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h:163,Performance,perform,performing,163,/// Apply the transformations described by \p Config and \p COFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h:16,Deployability,configurat,configuration,16,// ELF specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h:16,Modifiability,config,configuration,16,// ELF specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:178,Availability,Error,Error,178,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which must represent an IHex file, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Modifiability,Config,Config,46,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which must represent an IHex file, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:203,Performance,perform,performing,203,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which must represent an IHex file, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:183,Availability,Error,Error,183,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which is treated as a raw binary input, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Modifiability,Config,Config,46,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which is treated as a raw binary input, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:208,Performance,perform,performing,208,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which is treated as a raw binary input, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:137,Availability,Error,Error,137,/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:162,Performance,perform,performing,162,/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h:19,Deployability,configurat,configuration,19,// Mach-O specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h:19,Modifiability,config,configuration,19,// Mach-O specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h:3,Deployability,install,install-name-tool,3,// install-name-tool's id option,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h:3,Deployability,install,install-name-tool,3,// install-name-tool's --delete_all_rpaths,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:139,Availability,Error,Error,139,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:164,Performance,perform,performing,164,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:139,Availability,Error,Error,139,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:164,Performance,perform,performing,164,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h:17,Deployability,configurat,configuration,17,// Wasm specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h:17,Modifiability,config,configuration,17,// Wasm specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h:138,Availability,Error,Error,138,/// Apply the transformations described by \p Config and \p WasmConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p WasmConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h:163,Performance,perform,performing,163,/// Apply the transformations described by \p Config and \p WasmConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h:18,Deployability,configurat,configuration,18,// XCOFF specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h:18,Modifiability,config,configuration,18,// XCOFF specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h:139,Availability,Error,Error,139,/// Apply the transformations described by \p Config and \p XCOFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h:46,Modifiability,Config,Config,46,/// Apply the transformations described by \p Config and \p XCOFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h:164,Performance,perform,performing,164,/// Apply the transformations described by \p Config and \p XCOFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Archive.h:10,Availability,error,errors,10,"// Ignore errors here: If an error occurred during increment then getNext; // will have been set to child_end(), and the following comparison should; // do the right thing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Archive.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Archive.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Archive.h:29,Availability,error,error,29,"// Ignore errors here: If an error occurred during increment then getNext; // will have been set to child_end(), and the following comparison should; // do the right thing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Archive.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Archive.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ArchiveWriter.h:3,Safety,Detect,Detect,3,// Detect the archive format from the object or bitcode file. This helps; // assume the archive format when creating or editing archives in the case; // one isn't explicitly set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ArchiveWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ArchiveWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h:30,Testability,Stub,Stub,30,// Text-based Dynamic Library Stub file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Binary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h:30,Testability,Stub,Stub,30,// Text-based Dynamic Library Stub file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Binary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Binary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/BuildID.h:34,Performance,cache,cache,34,/// BuildIDFetcher searches local cache directories for debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/BuildID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/BuildID.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:16,Modifiability,config,config,16,/// 32-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY32),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:11,Performance,load,load,11,/// 32-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY32),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:16,Modifiability,config,config,16,/// 64-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY64),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:11,Performance,load,load,11,/// 64-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY64),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:59,Availability,error,error,59,// Finish initializing the object and return success or an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:69,Availability,error,error,69,"/// Given an RVA base and size, returns a valid array of bytes or an error; /// code if the RVA and size is not contained completely within a valid; /// section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:146,Availability,error,error,146,"/// Get PDB information from an executable. If the information is not present,; /// Info will be set to nullptr and PDBFileName will be empty. An error is; /// returned only on corrupt object files. Convenience accessor that can be; /// used if the debug directory is not already handy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:211,Security,access,accessor,211,"/// Get PDB information from an executable. If the information is not present,; /// Info will be set to nullptr and PDBFileName will be empty. An error is; /// returned only on corrupt object files. Convenience accessor that can be; /// used if the debug directory is not already handy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:32,Energy Efficiency,allocate,allocated,32,// fUseBP: true if EBP has been allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFImportFile.h:585,Integrability,interface,interface,585,"//===- COFFImportFile.h - COFF short import file implementation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // COFF short import file is a special kind of file which contains; // only symbol names for DLL-exported symbols. This class implements; // exporting of Symbols to create libraries and a SymbolicFile; // interface for the file type.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFFImportFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFImportFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h:501,Modifiability,Config,Config,501,"//===--- COFFModuleDefinition.h ---------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Windows-specific.; // A parser for the module-definition file (.def file).; // Parsed results are directly written to Config global variable.; //; // The format of module-definition files are described in this document:; // https://msdn.microsoft.com/en-us/library/28d6s79h.aspx; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h:515,Modifiability,variab,variable,515,"//===--- COFFModuleDefinition.h ---------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Windows-specific.; // A parser for the module-definition file (.def file).; // Parsed results are directly written to Config global variable.; //; // The format of module-definition files are described in this document:; // https://msdn.microsoft.com/en-us/library/28d6s79h.aspx; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFFModuleDefinition.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h:465,Integrability,interface,interface,465,"//===- DXContainer.h - DXContainer file implementation ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the DXContainerFile class, which implements the ObjectFile; // interface for DXContainer files.; //; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h:11,Integrability,depend,depends,11,// Parsing depends on the shader kind,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h:25,Integrability,wrap,wrapper,25,"// The PartIterator is a wrapper around the iterator for the PartOffsets; // member of the DXContainer. It contains a refernce to the container, and the; // current iterator value, as well as storage for a parsed part header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h:3,Deployability,Update,Updates,3,// Updates the iterator's state data. This results in copying the part; // header into the iterator and handling any required byte swapping. This is; // called when incrementing or decrementing the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/DXContainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:46,Availability,error,error,46,"// To make this helper be more convenient for error reporting purposes we; // drop the error. But really it should never be triggered. Before this point,; // our code should have called 'sections()' and reported a proper error on; // failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:87,Availability,error,error,87,"// To make this helper be more convenient for error reporting purposes we; // drop the error. But really it should never be triggered. Before this point,; // our code should have called 'sections()' and reported a proper error on; // failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:221,Availability,error,error,221,"// To make this helper be more convenient for error reporting purposes we; // drop the error. But really it should never be triggered. Before this point,; // our code should have called 'sections()' and reported a proper error on; // failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:234,Availability,failure,failure,234,"// To make this helper be more convenient for error reporting purposes we; // drop the error. But really it should never be triggered. Before this point,; // our code should have called 'sections()' and reported a proper error on; // failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:109,Availability,error,errors,109,"// This is a callback that can be passed to a number of functions.; // It can be used to ignore non-critical errors (warnings), which is; // useful for dumpers, like llvm-readobj.; // It accepts a warning message string and returns a success; // when the warning should be ignored or an error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:287,Availability,error,error,287,"// This is a callback that can be passed to a number of functions.; // It can be used to ignore non-critical errors (warnings), which is; // useful for dumpers, like llvm-readobj.; // It accepts a warning message string and returns a success; // when the warning should be ignored or an error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:205,Integrability,message,message,205,"// This is a callback that can be passed to a number of functions.; // It can be used to ignore non-critical errors (warnings), which is; // useful for dumpers, like llvm-readobj.; // It accepts a warning message string and returns a success; // when the warning should be ignored or an error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:192,Availability,error,error,192,"/// Get an iterator over notes in a program header.; ///; /// The program header must be of type \c PT_NOTE.; ///; /// \param Phdr the program header to iterate over.; /// \param Err [out] an error to support fallible iteration, which should; /// be checked after iteration ends.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:76,Testability,test,tests,76,"// Allow 4, 8, and (for Linux core dumps) 0.; // TODO: Disallow 1 after all tests are fixed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:172,Availability,error,error,172,"/// Get an iterator over notes in a section.; ///; /// The section must be of type \c SHT_NOTE.; ///; /// \param Shdr the section to iterate over.; /// \param Err [out] an error to support fallible iteration, which should; /// be checked after iteration ends.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:38,Testability,test,tests,38,// TODO: Allow just 4 and 8 after all tests are fixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:198,Availability,error,error,198,"/// Get an iterator range over notes of a program header.; ///; /// The program header must be of type \c PT_NOTE.; ///; /// \param Phdr the program header to iterate over.; /// \param Err [out] an error to support fallible iteration, which should; /// be checked after iteration ends.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:178,Availability,error,error,178,"/// Get an iterator range over notes of a section.; ///; /// The section must be of type \c SHT_NOTE.; ///; /// \param Shdr the section to iterate over.; /// \param Err [out] an error to support fallible iteration, which should; /// be checked after iteration ends.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:372,Availability,error,error,372,"/// Returns a vector of BBAddrMap structs corresponding to each function; /// within the text section that the SHT_LLVM_BB_ADDR_MAP section \p Sec; /// is associated with. If the current ELFFile is relocatable, a corresponding; /// \p RelaSec must be passed in as an argument.; /// Optional out variable to collect all PGO Analyses. New elements are only; /// added if no error occurs. If not provided, the PGO Analyses are decoded; /// then ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:295,Modifiability,variab,variable,295,"/// Returns a vector of BBAddrMap structs corresponding to each function; /// within the text section that the SHT_LLVM_BB_ADDR_MAP section \p Sec; /// is associated with. If the current ELFFile is relocatable, a corresponding; /// \p RelaSec must be passed in as an argument.; /// Optional out variable to collect all PGO Analyses. New elements are only; /// added if no error occurs. If not provided, the PGO Analyses are decoded; /// then ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:166,Availability,error,error,166,"/// Returns a map from every section matching \p IsMatch to its relocation; /// section, or \p nullptr if it has no relocation section. This function; /// returns an error if any of the \p IsMatch calls fail or if it fails to; /// retrieve the content section of any relocation section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:14,Availability,error,error,14,// TODO: this error is untested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:243,Safety,safe,safely,243,// The Mips N64 ABI allows up to three operations to be specified per; // relocation record. Unfortunately there's no easy way to test for the; // presence of N64 ELFs as they have no special flag that identifies them; // as being N64. We can safely assume at the moment that all Mips; // ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough; // information to disambiguate between old vs new ABIs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:130,Testability,test,test,130,// The Mips N64 ABI allows up to three operations to be specified per; // relocation record. Unfortunately there's no easy way to test for the; // presence of N64 ELFs as they have no special flag that identifies them; // as being N64. We can safely assume at the moment that all Mips; // ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough; // information to disambiguate between old vs new ABIs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:66,Security,hash,hash,66,/// This function finds the number of dynamic symbols using a GNU hash table.; ///; /// @param Table The GNU hash table for .dynsym.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:109,Security,hash,hash,109,/// This function finds the number of dynamic symbols using a GNU hash table.; ///; /// @param Table The GNU hash table for .dynsym.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:124,Availability,avail,available,124,"/// This function determines the number of dynamic symbols. It reads section; /// headers first. If section headers are not available, the number of; /// symbols will be inferred by parsing dynamic hash tables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:198,Security,hash,hash,198,"/// This function determines the number of dynamic symbols. It reads section; /// headers first. If section headers are not available, the number of; /// symbols will be inferred by parsing dynamic hash tables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:40,Availability,avail,available,40,// Read .dynsym section header first if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:23,Availability,avail,available,23,// Section headers are available but .dynsym header is not found.; // Return 0 as .dynsym does not exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:92,Security,hash,hash,92,// Section headers do not exist. Falling back to infer; // upper bound of .dynsym from .gnu.hash and .hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:102,Security,hash,hash,102,// Section headers do not exist. Falling back to infer; // upper bound of .dynsym from .gnu.hash and .hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:15,Security,hash,hash,15,// Search SYSV hash table to try to find the upper bound of dynsym.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:14,Availability,error,error,14,// TODO: this error is untested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:34,Availability,avail,available,34,// A default version (@@) is only available for defined symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:30,Security,hash,hash,30,/// This function returns the hash value for a symbol in the .dynsym section; /// Name of the API remains consistent as specified in the libelf; /// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:214,Security,hash,hash,214,/// This function returns the hash value for a symbol in the .dynsym section; /// Name of the API remains consistent as specified in the libelf; /// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:30,Security,hash,hash,30,/// This function returns the hash value for a symbol in the .dynsym section; /// for the GNU hash table. The implementation is defined in the GNU hash ABI.; /// REF : https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=bfd/elf.c#l222,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:94,Security,hash,hash,94,/// This function returns the hash value for a symbol in the .dynsym section; /// for the GNU hash table. The implementation is defined in the GNU hash ABI.; /// REF : https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=bfd/elf.c#l222,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:147,Security,hash,hash,147,/// This function returns the hash value for a symbol in the .dynsym section; /// for the GNU hash table. The implementation is defined in the GNU hash ABI.; /// REF : https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=bfd/elf.c#l222,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:420,Availability,error,error,420,"/// Returns a vector of all BB address maps in the object file. When; /// `TextSectionIndex` is specified, only returns the BB address maps; /// corresponding to the section with that index. When `PGOAnalyses`is; /// specified (PGOAnalyses is not nullptr), the vector is cleared then filled; /// with extra PGO data. `PGOAnalyses` will always be the same length as the; /// return value when it is requested assuming no error occurs. Upon failure,; /// `PGOAnalyses` will be emptied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:439,Availability,failure,failure,439,"/// Returns a vector of all BB address maps in the object file. When; /// `TextSectionIndex` is specified, only returns the BB address maps; /// corresponding to the section with that index. When `PGOAnalyses`is; /// specified (PGOAnalyses is not nullptr), the vector is cleared then filled; /// with extra PGO data. `PGOAnalyses` will always be the same length as the; /// return value when it is requested assuming no error occurs. Upon failure,; /// `PGOAnalyses` will be emptied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:271,Usability,clear,cleared,271,"/// Returns a vector of all BB address maps in the object file. When; /// `TextSectionIndex` is specified, only returns the BB address maps; /// corresponding to the section with that index. When `PGOAnalyses`is; /// specified (PGOAnalyses is not nullptr), the vector is cleared then filled; /// with extra PGO data. `PGOAnalyses` will always be the same length as the; /// return value when it is requested assuming no error occurs. Upon failure,; /// `PGOAnalyses` will be emptied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:3,Usability,Clear,Clear,3,// Clear the ARM/Thumb or microMIPS indicator flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:20,Availability,error,error,20,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:26,Integrability,message,message,26,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:3,Availability,Error,Error,3,// Error check sh_link here so that getRelocationSymbol can just use it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:10,Availability,error,error,10,// FIXME: error check symbolIdx,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:10,Availability,error,errors,10,// Ignore errors here where the dynsym is empty or sh_size less than the; // size of one symbol. These should be handled elsewhere.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:17,Availability,error,error,17,// FIXME: Proper error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:34,Performance,load,loaded,34,// Address where section is to be loaded,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:34,Performance,load,loaded,34,// Address where section is to be loaded,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:9,Security,access,accessors,9,"// These accessors and mutators correspond to the ELF32_ST_BIND,; // ELF32_ST_TYPE, and ELF32_ST_INFO macros defined in the ELF specification:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:4,Security,Access,Access,4,/// Access to the STV_xxx flag stored in the first two bits of st_other.; /// STV_DEFAULT: 0; /// STV_INTERNAL: 1; /// STV_HIDDEN: 2; /// STV_PROTECTED: 3,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Security,Hash,Hash,3,// Hash of name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:11,Integrability,depend,dependency,11,// Hash of dependency name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Security,Hash,Hash,3,// Hash of dependency name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Integrability,Depend,Dependency,3,// Dependency name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:23,Modifiability,inherit,inherits,23,"/// Elf_Dyn_Impl: This inherits from Elf_Dyn_Base, adding getters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:9,Security,access,accessors,9,"// These accessors and mutators correspond to the ELF32_R_SYM, ELF32_R_TYPE,; // and ELF32_R_INFO macros defined in the ELF specification:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:9,Security,access,accessors,9,"// These accessors and mutators correspond to the ELF64_R_SYM, ELF64_R_TYPE,; // and ELF64_R_INFO macros defined in the ELF specification:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:8,Security,hash,hash,8,// .gnu.hash section,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:27,Integrability,Wrap,Wraps,27,"/// An ELF note.; ///; /// Wraps a note header, providing methods for accessing the name and; /// descriptor safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:109,Safety,safe,safely,109,"/// An ELF note.; ///; /// Wraps a note header, providing methods for accessing the name and; /// descriptor safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:70,Security,access,accessing,70,"/// An ELF note.; ///; /// Wraps a note header, providing methods for accessing the name and; /// descriptor safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:268,Availability,error,error,268,"// Advance Nhdr by NoteSize bytes, starting from NhdrPos.; //; // Assumes NoteSize <= RemainingSize. Ensures Nhdr->getSize() <= RemainingSize; // upon returning. Handles stopping iteration when reaching the end of the; // container, either cleanly or with an overflow error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:53,Availability,error,error,53,"// Ensure that if the iterator walks to the end, the error is checked; // afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,Availability,mask,mask,7,// bit-mask of used general registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,Availability,mask,mask,7,// bit-mask of used co-processor registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,Availability,mask,mask,7,// bit-mask of used general registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,Availability,mask,mask,7,// bit-mask of used co-processor registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:32,Modifiability,variab,variable,32,// Determines interpretation of variable part of descriptor,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:30,Testability,test,testing,30,// Equality operator for unit testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:56,Modifiability,extend,extended,56,/// Bitfield of optional features to include in the PGO extended map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:53,Security,validat,validates,53,// Decodes from minimum bit width representation and validates no; // unnecessary bits are used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Modifiability,Extend,Extended,3,// Extended basic block entries; // Flags to indicate if each PGO related info was enabled in this function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:7,Availability,Error,Error,7,"//===- Error.h - system_error extensions for Object -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This declares a new error_category for the Object library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:3,Availability,Error,Error,3,// Error code 0 is absent. Use std::error_code() instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:23,Availability,error,errors,23,"/// Base class for all errors indicating malformed binary files.; ///; /// Having a subclass for all malformed binary files allows archive-walking; /// code to skip malformed files without having to understand every possible; /// way that a binary file might be malformed.; ///; /// Currently inherits from ECError for easy interoperability with; /// std::error_code, but this will be removed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:324,Integrability,interoperab,interoperability,324,"/// Base class for all errors indicating malformed binary files.; ///; /// Having a subclass for all malformed binary files allows archive-walking; /// code to skip malformed files without having to understand every possible; /// way that a binary file might be malformed.; ///; /// Currently inherits from ECError for easy interoperability with; /// std::error_code, but this will be removed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:293,Modifiability,inherit,inherits,293,"/// Base class for all errors indicating malformed binary files.; ///; /// Having a subclass for all malformed binary files allows archive-walking; /// code to skip malformed files without having to understand every possible; /// way that a binary file might be malformed.; ///; /// Currently inherits from ECError for easy interoperability with; /// std::error_code, but this will be removed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:19,Availability,error,error,19,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:40,Availability,error,errors,40,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:89,Availability,error,error,89,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:101,Availability,error,errors,101,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:153,Availability,error,error,153,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:172,Integrability,message,message,172,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:169,Availability,Error,Error,169,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:298,Availability,error,error,298,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:322,Availability,error,error,322,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:368,Availability,Error,Error,368,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:289,Testability,test,test,289,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h:8,Availability,Fault,FaultMapParser,8,"//===-- FaultMapParser.h - Parser for the ""FaultMaps"" section --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h:43,Availability,Fault,FaultMaps,43,"//===-- FaultMapParser.h - Parser for the ""FaultMaps"" section --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h:63,Availability,Fault,FaultMaps,63,/// A parser for the __llvm_faultmaps section generated by the FaultMaps class; /// declared in llvm/CodeGen/FaultMaps.h. This parser is version locked with; /// with the __llvm_faultmaps section generated by the version of LLVM that; /// includes it. No guarantees are made with respect to forward or backward; /// compatibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h:109,Availability,Fault,FaultMaps,109,/// A parser for the __llvm_faultmaps section generated by the FaultMaps class; /// declared in llvm/CodeGen/FaultMaps.h. This parser is version locked with; /// with the __llvm_faultmaps section generated by the version of LLVM that; /// includes it. No guarantees are made with respect to forward or backward; /// compatibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/GOFF.h:11,Integrability,rout,routines,11,// ESD Get routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/GOFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/GOFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h:76,Availability,error,error,76,"/// Finds and returns bitcode embedded in the given object file, or an; /// error code if not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h:157,Availability,error,error,157,"/// Finds and returns bitcode in the given memory buffer (which may; /// be either a bitcode file or a native object file with embedded bitcode),; /// or an error code if not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h:556,Energy Efficiency,efficient,efficiently,556,"//===- IRSymtab.h - data definitions for IR symbol tables -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains data definitions and a reader and builder for a symbol; // table for LLVM IR. Its purpose is to allow linkers and other consumers of; // bitcode files to efficiently read the symbol table for symbol resolution; // purposes without needing to construct a module in memory.; //; // As with most object files the symbol table has two parts: the symbol table; // itself and a string table which is referenced by the symbol table.; //; // A symbol table corresponds to a single bitcode file, which may consist of; // multiple modules, so symbol tables may likewise contain symbols for multiple; // modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h:4,Integrability,Depend,Dependent,4,/// Dependent Library Specifiers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h:12,Integrability,depend,dependent,12,/// Returns dependent library specifiers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:464,Integrability,interface,interface,464,"//===- MachO.h - MachO object file implementation ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the MachOObjectFile class, which implement the ObjectFile; // interface for MachO files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:201,Availability,Error,Error,201,/// ExportEntry encapsulates the current-state-of-the-walk used when doing a; /// non-recursive walk of the trie data structure. This allows you to iterate; /// across all exported symbols using:; /// Error Err = Error::success();; /// for (const llvm::object::ExportEntry &AnExport : Obj->exports(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:213,Availability,Error,Error,213,/// ExportEntry encapsulates the current-state-of-the-walk used when doing a; /// non-recursive walk of the trie data structure. This allows you to iterate; /// across all exported symbols using:; /// Error Err = Error::success();; /// for (const llvm::object::ExportEntry &AnExport : Obj->exports(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:337,Availability,error,error,337,/// ExportEntry encapsulates the current-state-of-the-walk used when doing a; /// non-recursive walk of the trie data structure. This allows you to iterate; /// across all exported symbols using:; /// Error Err = Error::success();; /// for (const llvm::object::ExportEntry &AnExport : Obj->exports(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:51,Availability,error,errors,51,// Used to check a Mach-O Bind or Rebase entry for errors when iterating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:184,Availability,Error,Error,184,/// MachORebaseEntry encapsulates the current state in the decompression of; /// rebasing opcodes. This allows you to iterate through the compressed table of; /// rebasing using:; /// Error Err = Error::success();; /// for (const llvm::object::MachORebaseEntry &Entry : Obj->rebaseTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:196,Availability,Error,Error,196,/// MachORebaseEntry encapsulates the current state in the decompression of; /// rebasing opcodes. This allows you to iterate through the compressed table of; /// rebasing using:; /// Error Err = Error::success();; /// for (const llvm::object::MachORebaseEntry &Entry : Obj->rebaseTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:326,Availability,error,error,326,/// MachORebaseEntry encapsulates the current state in the decompression of; /// rebasing opcodes. This allows you to iterate through the compressed table of; /// rebasing using:; /// Error Err = Error::success();; /// for (const llvm::object::MachORebaseEntry &Entry : Obj->rebaseTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:181,Availability,Error,Error,181,/// MachOBindEntry encapsulates the current state in the decompression of; /// binding opcodes. This allows you to iterate through the compressed table of; /// bindings using:; /// Error Err = Error::success();; /// for (const llvm::object::MachOBindEntry &Entry : Obj->bindTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:193,Availability,Error,Error,193,/// MachOBindEntry encapsulates the current state in the decompression of; /// binding opcodes. This allows you to iterate through the compressed table of; /// bindings using:; /// Error Err = Error::success();; /// for (const llvm::object::MachOBindEntry &Entry : Obj->bindTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:319,Availability,error,error,319,/// MachOBindEntry encapsulates the current state in the decompression of; /// binding opcodes. This allows you to iterate through the compressed table of; /// bindings using:; /// Error Err = Error::success();; /// for (const llvm::object::MachOBindEntry &Entry : Obj->bindTable(&Err)) {; /// }; /// if (Err) { report error ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:205,Security,expose,exposed,205,"/// \return the raw ""on-disk"" representation of the fixup. For; /// Threaded rebases and Chained pointers these values are generally; /// encoded into various different pointer formats. This value is; /// exposed in API for tools that want to display and annotate the; /// raw bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:23,Performance,load,load,23,// Where in memory the load command is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:201,Performance,load,load,201,"/// When dsymutil generates the companion file, it strips all unnecessary; /// sections (e.g. everything in the _TEXT segment) by omitting their body; /// and setting the offset in their corresponding load command to zero.; ///; /// While the load command itself is valid, reading the section corresponds; /// to reading the number of bytes specified in the load command, starting; /// from offset 0 (i.e. the Mach-O header at the beginning of the file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:243,Performance,load,load,243,"/// When dsymutil generates the companion file, it strips all unnecessary; /// sections (e.g. everything in the _TEXT segment) by omitting their body; /// and setting the offset in their corresponding load command to zero.; ///; /// While the load command itself is valid, reading the section corresponds; /// to reading the number of bytes specified in the load command, starting; /// from offset 0 (i.e. the Mach-O header at the beginning of the file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:358,Performance,load,load,358,"/// When dsymutil generates the companion file, it strips all unnecessary; /// sections (e.g. everything in the _TEXT segment) by omitting their body; /// and setting the offset in their corresponding load command to zero.; ///; /// While the load command itself is valid, reading the section corresponds; /// to reading the number of bytes specified in the load command, starting; /// from offset 0 (i.e. the Mach-O header at the beginning of the file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:83,Integrability,interface,interface,83,// TODO: Would be useful to have an iterator based version; // of the load command interface too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:70,Performance,load,load,70,// TODO: Would be useful to have an iterator based version; // of the load command interface too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:339,Security,validat,validate,339,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.; //; // This is used by MachOBindEntry::moveNext() to validate a MachOBindEntry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:243,Testability,test,tested,243,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.; //; // This is used by MachOBindEntry::moveNext() to validate a MachOBindEntry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:325,Security,validat,validate,325,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a rebase; // (such as with the REBASE_OPCODE_DO_*_TIMES* opcodes) can be tested via the; // Count and Skip parameters.; //; // This is used by MachORebaseEntry::moveNext() to validate a MachORebaseEntry",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:223,Testability,test,tested,223,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a rebase; // (such as with the REBASE_OPCODE_DO_*_TIMES* opcodes) can be tested via the; // Count and Skip parameters.; //; // This is used by MachORebaseEntry::moveNext() to validate a MachORebaseEntry",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:275,Availability,error,error,275,"/// If the input path is a .dSYM bundle (as created by the dsymutil tool),; /// return the paths to the object files found in the bundle, otherwise return; /// an empty vector. If the path appears to be a .dSYM bundle but no objects; /// were found or there was a filesystem error, then return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:297,Availability,error,error,297,"/// If the input path is a .dSYM bundle (as created by the dsymutil tool),; /// return the paths to the object files found in the bundle, otherwise return; /// an empty vector. If the path appears to be a .dSYM bundle but no objects; /// were found or there was a filesystem error, then return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:22,Security,access,access,22,/// A class providing access to the contents of a minidump file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:86,Availability,error,error,86,"/// Construct a new MinidumpFile object from the given memory buffer. Returns; /// an error if this file cannot be identified as a minidump file, or if its; /// contents are badly corrupted (i.e. we cannot read the stream directory).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:83,Availability,error,error,83,/// Returns the raw contents of an object given by the LocationDescriptor. An; /// error is returned if the descriptor points outside of the minidump file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:56,Availability,error,error,56,"/// Returns the minidump string at the given offset. An error is returned if; /// we fail to parse the string, or the string is invalid UTF16.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:89,Availability,error,error,89,"/// Returns the contents of the SystemInfo stream, cast to the appropriate; /// type. An error is returned if the file does not contain this stream, or; /// the stream is smaller than the size of the SystemInfo structure. The; /// internal consistency of the stream is not checked in any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:66,Availability,error,error,66,"/// Returns the module list embedded in the ModuleList stream. An error is; /// returned if the file does not contain this stream, or if the stream is; /// not large enough to contain the number of modules declared in the stream; /// header. The consistency of the Module entries themselves is not checked in; /// any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:66,Availability,error,error,66,"/// Returns the thread list embedded in the ThreadList stream. An error is; /// returned if the file does not contain this stream, or if the stream is; /// not large enough to contain the number of threads declared in the stream; /// header. The consistency of the Thread entries themselves is not checked in; /// any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:53,Availability,error,error,53,"/// Returns the contents of the Exception stream. An error is returned if the; /// file does not contain this stream, or the stream is smaller than the size; /// of the ExceptionStream structure. The internal consistency of the stream; /// is not checked in any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:189,Availability,error,error,189,"/// Returns the list of descriptors embedded in the MemoryList stream. The; /// descriptors provide the content of interesting regions of memory at the; /// time the minidump was taken. An error is returned if the file does not; /// contain this stream, or if the stream is not large enough to contain the; /// number of memory descriptors declared in the stream header. The; /// consistency of the MemoryDescriptor entries themselves is not checked in; /// any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h:211,Availability,error,error,211,"/// Returns the list of descriptors embedded in the MemoryInfoList stream. The; /// descriptors provide properties (e.g. permissions) of interesting regions; /// of memory at the time the minidump was taken. An error is returned if the; /// file does not contain this stream, or if the stream is not large enough to; /// contain the number of memory descriptors declared in the stream header.; /// The consistency of the MemoryInfoList entries themselves is not checked; /// in any way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Minidump.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h:461,Security,access,access,461,"//===- ModuleSymbolTable.h - symbol table for in-memory IR ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h:516,Security,access,access,516,"//===- ModuleSymbolTable.h - symbol table for in-memory IR ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h:35,Integrability,depend,depending,35,/// Return the value of the symbol depending on the object this can be an; /// offset or a virtual address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h:62,Testability,log,log,62,/// Get the alignment of this symbol as the actual value (not log 2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:631,Integrability,wrap,wrapper,631,"//===--- Offloading.h - Utilities for handling offloading code -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the binary format used for budingling device metadata with; // an associated device image. The data can then be stored inside a host object; // file to create a fat binary and read by the linker. This is intended to be a; // thin wrapper around the image itself. If this format becomes sufficiently; // complex it should be moved to a standard binary format like msgpack or ELF.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:355,Safety,detect,detect,355,/// A simple binary serialization of an offloading file. We use this format to; /// embed the offloading image into the host executable so it can be extracted; /// and used by the linker.; ///; /// Many of these could be stored in the same section by the time the linker; /// sees it so we mark this information with a header. The version is used to; /// detect ABI stability and the size is used to find other offloading entries; /// that may exist in the same section. All offsets are given as absolute byte; /// offsets from the beginning of the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:6,Usability,simpl,simple,6,/// A simple binary serialization of an offloading file. We use this format to; /// embed the offloading image into the host executable so it can be extracted; /// and used by the linker.; ///; /// Many of these could be stored in the same section by the time the linker; /// sees it so we mark this information with a header. The version is used to; /// detect ABI stability and the size is used to find other offloading entries; /// that may exist in the same section. All offsets are given as absolute byte; /// offsets from the beginning of the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:137,Security,hash,hash-map,137,/// We use the Triple and Architecture pair to group linker inputs together.; /// This conversion function lets us use these inputs in a hash-map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/RelocationResolver.h:404,Integrability,wrap,wrapper,404,"//===- RelocVisitor.h - Visitor for object file relocations -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a wrapper around all the different types of relocations; // in different file formats, such that a client can handle them in a unified; // manner by only implementing a minimal number of functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/RelocationResolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/RelocationResolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Access,Accessor,4,/// Accessor for function records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Access,Accessor,4,/// Accessor for constants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Access,Accessor,4,/// Accessor for location records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Access,Accessor,4,/// Accessor for stackmap live-out fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Access,Accessor,4,/// Accessor for stackmap records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:12,Deployability,patch,patchpoint,12,/// Get the patchpoint/stackmap ID for this record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Security,Validat,Validates,4,/// Validates the header of the specified stack map section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:50,Performance,cache,cache,50,"// Records need to be handled specially, since we cache the start addresses; // for them: We can't just compute the 1-past-the-end address, we have to; // look at the last record and use the 'next' method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h:24,Integrability,Interface,Interface,24,"//===- SymbolicFile.h - Interface that only provides symbols ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SymbolicFile interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h:419,Integrability,interface,interface,419,"//===- SymbolicFile.h - Interface that only provides symbols ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SymbolicFile interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h:11,Integrability,interface,interface,11,// virtual interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h:15,Integrability,wrap,wrappers,15,// convenience wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/SymbolicFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h:415,Integrability,interface,interface,415,"//===- TapiFile.h - Text-based Dynamic Library Stub -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiFile interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h:47,Testability,Stub,Stub,47,"//===- TapiFile.h - Text-based Dynamic Library Stub -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiFile interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h:420,Integrability,interface,interface,420,"//===-- TapiUniversal.h - Text-based Dynamic Library Stub -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiUniversal interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h:53,Testability,Stub,Stub,53,"//===-- TapiUniversal.h - Text-based Dynamic Library Stub -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiUniversal interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h:464,Integrability,interface,interface,464,"//===- Wasm.h - Wasm object file implementation -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the WasmObjectFile class, which implements the ObjectFile; // interface for Wasm files.; //; // See: https://github.com/WebAssembly/design/blob/main/BinaryEncoding.md; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h:55,Security,validat,validate,55,"// ""linking"" section requires DATA section in order to validate data symbols",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h:49,Security,validat,validate,49,"// Must come after ""linking"" section in order to validate reloc indexes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h:945,Performance,optimiz,optimized,945,"//===-- WindowsResource.h ---------------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file declares the .res file class. .res files are intermediate; // products of the typical resource-compilation process on Windows. This; // process is as follows:; //; // .rc file(s) ---(rc.exe)---> .res file(s) ---(cvtres.exe)---> COFF file; //; // .rc files are human-readable scripts that list all resources a program uses.; //; // They are compiled into .res files, which are a list of the resources in; // binary form.; //; // Finally the data stored in the .res is compiled into a COFF file, where it; // is organized in a directory tree structure for optimized access by the; // program during runtime.; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/ms648007(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h:955,Security,access,access,955,"//===-- WindowsResource.h ---------------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file declares the .res file class. .res files are intermediate; // products of the typical resource-compilation process on Windows. This; // process is as follows:; //; // .rc file(s) ---(rc.exe)---> .res file(s) ---(cvtres.exe)---> COFF file; //; // .rc files are human-readable scripts that list all resources a program uses.; //; // They are compiled into .res files, which are a list of the resources in; // binary form.; //; // Finally the data stored in the .res is compiled into a COFF file, where it; // is organized in a directory tree structure for optimized access by the; // program during runtime.; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/ms648007(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:41,Performance,load,loaded,41,"///< This field should contain 0. When a loaded; ///< program is being debugged, the memory image of; ///< this field may be modified by a debugger to; ///< insert a trap instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:26,Availability,mask,masks,26,"// Packed field, see XR_* masks for details of packing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:202,Availability,error,error,202,"// Constructor and ""create"" factory function. The constructor is only a thin; // wrapper around the base constructor. The ""create"" function fills out the; // XCOFF-specific information and performs the error checking along the way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:81,Integrability,wrap,wrapper,81,"// Constructor and ""create"" factory function. The constructor is only a thin; // wrapper around the base constructor. The ""create"" function fills out the; // XCOFF-specific information and performs the error checking along the way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:189,Performance,perform,performs,189,"// Constructor and ""create"" factory function. The constructor is only a thin; // wrapper around the base constructor. The ""create"" function fills out the; // XCOFF-specific information and performs the error checking along the way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:51,Availability,Error,Error,51,// Helper for parsing the StringTable. Returns an 'Error' if parsing failed; // and an XCOFFStringTable if parsing succeeded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:3,Integrability,Interface,Interface,3,// Interface inherited from base classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:13,Modifiability,inherit,inherited,13,// Interface inherited from base classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:122,Availability,error,errors,122,"/// \returns the relocation offset with the base address of the containing; /// section as zero, or InvalidRelocOffset on errors (such as a relocation; /// that does not refer to an address in any section).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:35,Integrability,interface,interface,35,// Below here is the non-inherited interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:25,Modifiability,inherit,inherited,25,// Below here is the non-inherited interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:23,Integrability,interface,interfaces,23,// File header related interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:7,Security,sanitiz,sanitized,7,// The sanitized value appropriate to use as an index into the symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:88,Integrability,depend,depending,88,// Return getLogicalNumberOfSymbolTableEntries32 or; // getNumberOfSymbolTableEntries64 depending on the object mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:32,Integrability,interface,interfaces,32,// Section header table related interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:22,Integrability,interface,interfaces,22,// Relocation-related interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:26,Integrability,interface,interfaces,26,// Loader section related interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:3,Performance,Load,Loader,3,// Loader section related interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:21,Integrability,interface,interface,21,// Exception-related interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:31,Integrability,depend,dependent,31,// Symbol value; storage class-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:31,Integrability,depend,dependent,31,// Symbol value; storage class-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:96,Security,access,accessors,96,/// This class provides methods to extract traceback table data from a buffer.; /// The various accessors may reference the buffer provided via the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:146,Availability,Error,Error,146,"/// Parse an XCOFF Traceback Table from \a Ptr with \a Size bytes.; /// Returns an XCOFFTracebackTable upon successful parsing, otherwise an; /// Error is returned.; ///; /// \param[in] Ptr; /// A pointer that points just past the initial 4 bytes of zeros at the; /// beginning of an XCOFF Traceback Table.; ///; /// \param[in, out] Size; /// A pointer that points to the length of the XCOFF Traceback Table.; /// If the XCOFF Traceback Table is not parsed successfully or there are; /// extra bytes that are not recognized, \a Size will be updated to be the; /// size up to the end of the last successfully parsed field of the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:541,Deployability,update,updated,541,"/// Parse an XCOFF Traceback Table from \a Ptr with \a Size bytes.; /// Returns an XCOFFTracebackTable upon successful parsing, otherwise an; /// Error is returned.; ///; /// \param[in] Ptr; /// A pointer that points just past the initial 4 bytes of zeros at the; /// beginning of an XCOFF Traceback Table.; ///; /// \param[in, out] Size; /// A pointer that points to the length of the XCOFF Traceback Table.; /// If the XCOFF Traceback Table is not parsed successfully or there are; /// extra bytes that are not recognized, \a Size will be updated to be the; /// size up to the end of the last successfully parsed field of the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h:55,Security,hash,hashing,55,"//==- CodeViewYAMLTypeHashing.h - CodeView YAMLIO Type hashing ----*- C++-*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines classes for handling the YAML representation of CodeView; // Debug Info.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h:264,Testability,test,testing,264,"// Normally a Relocation can refer to the symbol via its name.; // It can also use a direct symbol table index instead (with no name; // specified), allowing disambiguating between multiple symbols with the; // same name or crafting intentionally broken files for testing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/DXContainerYAML.h:146,Usability,simpl,simplifies,146,"// The version field isn't actually encoded in the file, but it is inferred by; // the size of data regions. We include it in the yaml because it simplifies; // the format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/DXContainerYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/DXContainerYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h:58,Usability,simpl,simplicity,58,"// These types are invariant across 32/64-bit ELF, so for simplicity just; // directly give them their exact sizes. We don't need to worry about; // endianness because these are just the types in the YAMLIO structures,; // and are appropriately converted to the necessary endianness when; // reading/generating binary object files.; // The naming of these types is intended to be ELF_PREFIX, where PREFIX is; // the common prefix of the respective constants. E.g. ELF_EM corresponds; // to the `e_machine` constants, like `EM_X86_64`.; // In the future, these would probably be better suited by C++11 enum; // class's with appropriate fixed underlying type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h:57,Performance,load,loaded,57,"// Usually chunks are not created implicitly, but rather loaded from YAML.; // This flag is used to signal whether this is the case or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h:155,Security,validat,validation,155,"// Some derived sections might have their own special entries. This method; // returns a vector of <entry name, is used> pairs. It is used for section; // validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h:17,Security,hash,hash,17,"// The number of hash buckets.; // Not used when dumping the object, but can be used to override; // the real number of buckets when emiting an object from a YAML document.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h:77,Security,hash,hash,77,// Index of the first symbol in the dynamic symbol table; // included in the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/ELFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h:3,Performance,Load,Load,3,// Load Command struct mapping traits,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h:28,Performance,load,load,28,// Extra structures used by load commands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/MachOYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/XCOFFYAML.h:31,Integrability,depend,dependent,31,// Symbol value; storage class-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/XCOFFYAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/XCOFFYAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h:758,Energy Efficiency,allocate,allocates,758,"/// Specialized YAMLIO scalar type for representing a binary blob.; ///; /// A typical use case would be to represent the content of a section in a; /// binary file.; /// This class has custom YAMLIO traits for convenient reading and writing.; /// It renders as a string of hex digits in a YAML file.; /// For example, it might render as `DEADBEEFCAFEBABE` (YAML does not; /// require the quotation marks, so for simplicity when outputting they are; /// omitted).; /// When reading, any string whose content is an even number of hex digits; /// will be accepted.; /// For example, all of the following are acceptable:; /// `DEADBEEF`, `""DeADbEeF""`, `""\x44EADBEEF""` (Note: '\x44' == 'D'); ///; /// A significant advantage of using this class is that it never allocates; /// temporary strings or buffers for any of its functionality.; ///; /// Example:; ///; /// The YAML mapping:; /// \code; /// Foo: DEADBEEFCAFEBABE; /// \endcode; ///; /// Could be modeled in YAMLIO by the struct:; /// \code; /// struct FooHolder {; /// BinaryRef Foo;; /// };; /// namespace llvm {; /// namespace yaml {; /// template <>; /// struct MappingTraits<FooHolder> {; /// static void mapping(IO &IO, FooHolder &FH) {; /// IO.mapRequired(""Foo"", FH.Foo);; /// }; /// };; /// } // end namespace yaml; /// } // end namespace llvm; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h:413,Usability,simpl,simplicity,413,"/// Specialized YAMLIO scalar type for representing a binary blob.; ///; /// A typical use case would be to represent the content of a section in a; /// binary file.; /// This class has custom YAMLIO traits for convenient reading and writing.; /// It renders as a string of hex digits in a YAML file.; /// For example, it might render as `DEADBEEFCAFEBABE` (YAML does not; /// require the quotation marks, so for simplicity when outputting they are; /// omitted).; /// When reading, any string whose content is an even number of hex digits; /// will be accepted.; /// For example, all of the following are acceptable:; /// `DEADBEEF`, `""DeADbEeF""`, `""\x44EADBEEF""` (Note: '\x44' == 'D'); ///; /// A significant advantage of using this class is that it never allocates; /// temporary strings or buffers for any of its functionality.; ///; /// Example:; ///; /// The YAML mapping:; /// \code; /// Foo: DEADBEEFCAFEBABE; /// \endcode; ///; /// Could be modeled in YAMLIO by the struct:; /// \code; /// struct FooHolder {; /// BinaryRef Foo;; /// };; /// namespace llvm {; /// namespace yaml {; /// template <>; /// struct MappingTraits<FooHolder> {; /// static void mapping(IO &IO, FooHolder &FH) {; /// IO.mapRequired(""Foo"", FH.Foo);; /// }; /// };; /// } // end namespace yaml; /// } // end namespace llvm; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h:29,Testability,test,tests,29,/// Convenience function for tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h:157,Energy Efficiency,efficient,efficiently,157,/// A concrete instance of a particular driver option.; ///; /// The Arg class encodes just enough information to be able to; /// derive the argument values efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Arg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h:192,Availability,error,error,192,"/// Was this argument used to affect compilation?; ///; /// This is used to generate an ""argument unused"" warning (without; /// clang::driver::options::TargetSpecific) or ""unsupported option"" error; /// (with TargetSpecific).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Arg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h:146,Availability,error,error,146,"/// Used by an unclaimed option with the TargetSpecific flag. If set, report; /// an ""argument unused"" warning instead of an ""unsupported option"" error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Arg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Arg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:62,Safety,avoid,avoid,62,"/// Optional filters on the arguments which will be match. To avoid a; /// zero-sized array, we store one specifier even if we're asked for none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:55,Usability,clear,cleared,55,// Explicit move operations to ensure the container is cleared post-move; // otherwise it could lead to a double-delete in the case of moving of an; // InputArgList which deletes the contents of the container. If we could fix; // up the ownership here (delegate storage/ownership to the derived class so; // it can be a container of unique_ptr) this would be simpler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:359,Usability,simpl,simpler,359,// Explicit move operations to ensure the container is cleared post-move; // otherwise it could lead to a double-delete in the case of moving of an; // InputArgList which deletes the contents of the container. If we could fix; // up the ownership here (delegate storage/ownership to the derived class so; // it can be a container of unique_ptr) this would be simpler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:59,Modifiability,polymorphi,polymorphically,59,// Protect the dtor to ensure this type is never destroyed polymorphically.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:14,Security,Access,Access,14,/// @name Arg Access; /// @{; /// append - Append \p A to the arg list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:22,Security,Access,Access,22,"/// @}; /// @name Arg Access; /// @{; /// hasArg - Does the arg list contain any option matching \p Id.; ///; /// \p Claim Whether the argument should be claimed, if it exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:152,Integrability,rout,routines,152,"/// List of argument strings used by the contained Args.; ///; /// This is mutable since we treat the ArgList as being the list; /// of Args, and allow routines to add new strings (to have a; /// convenient place to store the memory) via MakeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:134,Integrability,rout,routines,134,"/// Strings for synthesized arguments.; ///; /// This is mutable since we treat the ArgList as being the list; /// of Args, and allow routines to add new strings (to have a; /// convenient place to store the memory) via MakeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:4,Deployability,Release,Release,4,/// Release allocated arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:12,Energy Efficiency,allocate,allocated,12,/// Release allocated arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:17,Modifiability,variab,variable,17,/// Get the meta-variable list for this option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:4,Testability,Test,Test,4,/// Test if this option has the flag \a Val.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:4,Testability,Test,Test,4,/// Test if this option has the visibility flag \a Val.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:296,Usability,resume,resume,296,"/// Potentially accept the current argument, returning a new Arg instance,; /// or 0 if the option does not accept this argument (or the argument is; /// missing values).; ///; /// If the option accepts the current argument, accept() sets; /// Index to the position where argument parsing should resume; /// (even if the argument is missing values).; ///; /// \p CurArg The argument to be matched. It may be shorter than the; /// underlying storage to represent a Joined argument.; /// \p GroupedShortOption If true, we are handling the fallback case of; /// parsing a prefix of the current argument as a short option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h:19,Integrability,Wrap,Wrapper,19,/// OptSpecifier - Wrapper class for abstracting references to option IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:12,Security,access,access,12,"/// Provide access to the Option info table.; ///; /// The OptTable class provides a layer of indirection which allows Option; /// instance to be created lazily. In the common case, only a few options will; /// be needed at runtime; the OptTable class maintains enough information to; /// parse command lines without instantiating Options, while letting other; /// parts of the driver still use Option instances where convenient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:17,Modifiability,variab,variable,17,/// Get the meta-variable name to use when describing; /// this options values in the help text.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:28,Modifiability,variab,variable,28,/// Specify the environment variable where initial options should be read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:248,Availability,error,error,248,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:415,Availability,error,error,415,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:511,Availability,error,error,511,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:677,Availability,error,error,677,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:277,Integrability,rout,routine,277,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:177,Modifiability,extend,extend,177,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:186,Availability,Error,ErrorFn,186,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:218,Availability,error,error,218,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:312,Availability,error,error,312,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:224,Integrability,message,message,224,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:99,Modifiability,variab,variable,99,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:39,Performance,Optimiz,Optimization,39,"//===-------- LLVM-provided High-Level Optimization levels -*- C++ -*------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header enumerates the LLVM-provided high-level optimization levels.; /// Each level has a specific goal and rationale.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:448,Performance,optimiz,optimization,448,"//===-------- LLVM-provided High-Level Optimization levels -*- C++ -*------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header enumerates the LLVM-provided high-level optimization levels.; /// Each level has a specific goal and rationale.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:20,Performance,optimiz,optimizations,20,"/// Disable as many optimizations as possible. This doesn't completely; /// disable the optimizer in all cases, for example always_inline functions; /// can be required to be inlined for correctness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:88,Performance,optimiz,optimizer,88,"/// Disable as many optimizations as possible. This doesn't completely; /// disable the optimizer in all cases, for example always_inline functions; /// can be required to be inlined for correctness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:457,Availability,down,down,457,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:391,Energy Efficiency,efficient,efficient-to-execute,391,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:4,Performance,Optimiz,Optimize,4,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:79,Performance,tune,tuned,79,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:114,Performance,optimiz,optimizer,114,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:159,Safety,avoid,avoid,159,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:318,Testability,test,testing,318,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:4,Performance,Optimiz,Optimize,4,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:165,Performance,optimiz,optimizations,165,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:236,Performance,optimiz,optimization,236,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:740,Performance,optimiz,optimizer,740,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:812,Performance,optimiz,optimization,812,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:329,Testability,benchmark,benchmark,329,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:345,Testability,benchmark,benchmark,345,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:525,Testability,benchmark,benchmarks,525,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:4,Performance,Optimiz,Optimize,4,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:245,Performance,optimiz,optimization,245,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:599,Safety,avoid,avoid,599,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:331,Testability,benchmark,benchmarks,331,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:404,Testability,benchmark,benchmarks,404,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:34,Performance,optimiz,optimize,34,"/// Similar to \c O2 but tries to optimize for small code size instead of; /// fast execution without triggering significant incremental execution; /// time slowdowns.; ///; /// The logic here is exactly the same as \c O2, but with code size and; /// execution time metrics swapped.; ///; /// A consequence of the different core goal is that this should in general; /// produce substantially smaller executables that still run in; /// a reasonable amount of time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:182,Testability,log,logic,182,"/// Similar to \c O2 but tries to optimize for small code size instead of; /// fast execution without triggering significant incremental execution; /// time slowdowns.; ///; /// The logic here is exactly the same as \c O2, but with code size and; /// execution time metrics swapped.; ///; /// A consequence of the different core goal is that this should in general; /// produce substantially smaller executables that still run in; /// a reasonable amount of time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:193,Energy Efficiency,reduce,reduce,193,"/// A very specialized mode that will optimize for code size at any and all; /// costs.; ///; /// This is useful primarily when there are absolute size limitations and; /// any effort taken to reduce the size is worth it regardless of the; /// execution time impact. You should expect this level to produce rather; /// slow, but very small, code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:38,Performance,optimiz,optimize,38,"/// A very specialized mode that will optimize for code size at any and all; /// costs.; ///; /// This is useful primarily when there are absolute size limitations and; /// any effort taken to reduce the size is worth it regardless of the; /// execution time impact. You should expect this level to produce rather; /// slow, but very small, code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:52,Deployability,pipeline,pipelines,52,"//===- Parsing, selection, and construction of pass pipelines --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Interfaces for registering analysis passes, producing common pass manager; /// configurations, and parsing of pass pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:475,Deployability,configurat,configurations,475,"//===- Parsing, selection, and construction of pass pipelines --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Interfaces for registering analysis passes, producing common pass manager; /// configurations, and parsing of pass pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:511,Deployability,pipeline,pipelines,511,"//===- Parsing, selection, and construction of pass pipelines --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Interfaces for registering analysis passes, producing common pass manager; /// configurations, and parsing of pass pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:396,Integrability,Interface,Interfaces,396,"//===- Parsing, selection, and construction of pass pipelines --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Interfaces for registering analysis passes, producing common pass manager; /// configurations, and parsing of pass pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:475,Modifiability,config,configurations,475,"//===- Parsing, selection, and construction of pass pipelines --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Interfaces for registering analysis passes, producing common pass manager; /// configurations, and parsing of pass pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:67,Deployability,pipeline,pipelines,67,// namespace vfs; /// Tunable parameters for passes in the default pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:21,Deployability,pipeline,pipeline,21,/// Constructor sets pipeline tuning defaults based on cl::opts. Each option; /// can be set in the PassBuilder when using a LLVM as a library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:67,Security,access,accesses,67,"/// Tuning option to cap the number of calls to retrive clobbering accesses in; /// MemorySSA, in LICM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:96,Security,access,access,96,"/// Tuning option to disable promotion to scalars in LICM with MemorySSA, if; /// the number of access is too large.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:11,Deployability,pipeline,pipeline,11,// Add LTO pipeline tuning option to enable the unified LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:60,Deployability,pipeline,pipeline,60,// Add LTO pipeline tuning option to enable the unified LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:460,Deployability,pipeline,pipelines,460,"// Experimental option to eagerly invalidate more analyses. This has the; // potential to decrease max memory usage in exchange for more compile time.; // This may affect codegen due to either passes using analyses only when; // cached, or invalidating and recalculating an analysis that was; // stale/imprecise but still valid. Currently this invalidates all function; // analyses after various module->function or cgscc->function adaptors in the; // default pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:432,Energy Efficiency,adapt,adaptors,432,"// Experimental option to eagerly invalidate more analyses. This has the; // potential to decrease max memory usage in exchange for more compile time.; // This may affect codegen due to either passes using analyses only when; // cached, or invalidating and recalculating an analysis that was; // stale/imprecise but still valid. Currently this invalidates all function; // analyses after various module->function or cgscc->function adaptors in the; // default pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:432,Modifiability,adapt,adaptors,432,"// Experimental option to eagerly invalidate more analyses. This has the; // potential to decrease max memory usage in exchange for more compile time.; // This may affect codegen due to either passes using analyses only when; // cached, or invalidating and recalculating an analysis that was; // stale/imprecise but still valid. Currently this invalidates all function; // analyses after various module->function or cgscc->function adaptors in the; // default pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:229,Performance,cache,cached,229,"// Experimental option to eagerly invalidate more analyses. This has the; // potential to decrease max memory usage in exchange for more compile time.; // This may affect codegen due to either passes using analyses only when; // cached, or invalidating and recalculating an analysis that was; // stale/imprecise but still valid. Currently this invalidates all function; // analyses after various module->function or cgscc->function adaptors in the; // default pipelines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:107,Availability,avail,available,107,"/// This class provides access to building LLVM's passes.; ///; /// Its members provide the baseline state available to passes during their; /// construction. The \c PassRegistry.def file specifies how to construct all; /// of the built-in passes, and those may reference these members during; /// construction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:24,Security,access,access,24,"/// This class provides access to building LLVM's passes.; ///; /// Its members provide the baseline state available to passes during their; /// construction. The \c PassRegistry.def file specifies how to construct all; /// of the built-in passes, and those may reference these members during; /// construction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:36,Deployability,pipeline,pipeline,36,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:64,Deployability,pipeline,pipeline,64,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:168,Deployability,pipeline,pipeline,168,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:257,Deployability,pipeline,pipeline,257,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:394,Deployability,pipeline,pipelines,394,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:481,Deployability,pipeline,pipeline,481,"/// A struct to capture parsed pass pipeline names.; ///; /// A pipeline is defined as a series of names, each of which may in itself; /// recursively contain a nested pipeline. A name is either the name of a pass; /// (e.g. ""instcombine"") or the name of a pipeline type (e.g. ""cgscc""). If the; /// name is the name of a pass, the InnerPipeline is empty, since passes; /// cannot contain inner pipelines. See parsePassPipeline() for a more; /// detailed description of the textual pipeline format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:85,Integrability,interface,interface,85,/// Cross register the analysis managers through their proxies.; ///; /// This is an interface that can be used to cross register each; /// AnalysisManager with all the others analysis managers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:18,Availability,avail,available,18,/// Registers all available module analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// ModuleAnalysisManager with all registered module analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:73,Integrability,interface,interface,73,/// Registers all available module analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// ModuleAnalysisManager with all registered module analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:18,Availability,avail,available,18,/// Registers all available CGSCC analysis passes.; ///; /// This is an interface that can be used to populate a \c CGSCCAnalysisManager; /// with all registered CGSCC analyses. Callers can still manually register any; /// additional analyses. Callers can also pre-register analyses and this will; /// not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:72,Integrability,interface,interface,72,/// Registers all available CGSCC analysis passes.; ///; /// This is an interface that can be used to populate a \c CGSCCAnalysisManager; /// with all registered CGSCC analyses. Callers can still manually register any; /// additional analyses. Callers can also pre-register analyses and this will; /// not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:18,Availability,avail,available,18,/// Registers all available function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// FunctionAnalysisManager with all registered function analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:75,Integrability,interface,interface,75,/// Registers all available function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// FunctionAnalysisManager with all registered function analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:18,Availability,avail,available,18,/// Registers all available loop analysis passes.; ///; /// This is an interface that can be used to populate a \c LoopAnalysisManager; /// with all registered loop analyses. Callers can still manually register any; /// additional analyses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:71,Integrability,interface,interface,71,/// Registers all available loop analysis passes.; ///; /// This is an interface that can be used to populate a \c LoopAnalysisManager; /// with all registered loop analyses. Callers can still manually register any; /// additional analyses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:18,Availability,avail,available,18,/// Registers all available machine function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// MachineFunctionAnalysisManager with all registered function analyses.; /// Callers can still manually register any additional analyses. Callers can; /// also pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:83,Integrability,interface,interface,83,/// Registers all available machine function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// MachineFunctionAnalysisManager with all registered function analyses.; /// Callers can still manually register any additional analyses. Callers can; /// also pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:78,Deployability,pipeline,pipeline,78,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:113,Deployability,pipeline,pipeline,113,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:419,Deployability,pipeline,pipelines,419,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:156,Performance,optimiz,optimization,156,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:488,Performance,optimiz,optimize,488,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:58,Usability,simpl,simplification,58,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:209,Usability,simpl,simplify,209,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:76,Deployability,pipeline,pipeline,76,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:101,Deployability,pipeline,pipeline,101,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:220,Deployability,pipeline,pipeline,220,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:515,Deployability,pipeline,pipelines,515,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:363,Performance,perform,perform,363,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:584,Performance,optimiz,optimize,584,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:56,Usability,simpl,simplification,56,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:140,Usability,simpl,simplifying,140,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:205,Usability,simpl,simplification,205,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:411,Usability,simpl,simplifications,411,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:25,Deployability,pipeline,pipeline,25,/// Construct the module pipeline that performs inlining as well as; /// the inlining-driven cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:39,Performance,perform,performs,39,/// Construct the module pipeline that performs inlining as well as; /// the inlining-driven cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:25,Deployability,pipeline,pipeline,25,/// Construct the module pipeline that performs inlining with; /// module inliner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:39,Performance,perform,performs,39,/// Construct the module pipeline that performs inlining with; /// module inliner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:73,Deployability,pipeline,pipeline,73,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:544,Deployability,pipeline,pipelines,544,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:35,Performance,optimiz,optimization,35,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:93,Performance,optimiz,optimizing,93,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:432,Performance,perform,performance,432,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:613,Performance,optimiz,optimize,613,"/// Construct the core LLVM module optimization pipeline.; ///; /// This pipeline focuses on optimizing the execution speed of the IR. It; /// uses cost modeling and thresholds to balance code growth against runtime; /// improvements. It includes vectorization and other information destroying; /// transformations. It also cannot generally be run repeatedly on a module; /// without potentially seriously regressing either runtime performance of; /// the code or serious code size growth.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:44,Deployability,pipeline,pipeline,44,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:106,Deployability,pipeline,pipeline,106,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:31,Performance,optimiz,optimization,31,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:93,Performance,optimiz,optimization,93,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:135,Performance,optimiz,optimization,135,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:190,Performance,optimiz,optimization,190,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:267,Performance,optimiz,optimization,267,"/// Build a per-module default optimization pipeline.; ///; /// This provides a good default optimization pipeline for per-module; /// optimization and code generation without any link-time optimization. It; /// typically correspond to frontend ""-O[123]"" options for optimization; /// levels \c O1, \c O2 and \c O3 resp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:44,Deployability,pipeline,pipeline,44,"/// Build a fat object default optimization pipeline.; ///; /// This builds a pipeline that runs the LTO/ThinLTO pre-link pipeline, and; /// emits a section containing the pre-link bitcode along side the object code; /// generated in non-LTO compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:78,Deployability,pipeline,pipeline,78,"/// Build a fat object default optimization pipeline.; ///; /// This builds a pipeline that runs the LTO/ThinLTO pre-link pipeline, and; /// emits a section containing the pre-link bitcode along side the object code; /// generated in non-LTO compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:122,Deployability,pipeline,pipeline,122,"/// Build a fat object default optimization pipeline.; ///; /// This builds a pipeline that runs the LTO/ThinLTO pre-link pipeline, and; /// emits a section containing the pre-link bitcode along side the object code; /// generated in non-LTO compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:31,Performance,optimiz,optimization,31,"/// Build a fat object default optimization pipeline.; ///; /// This builds a pipeline that runs the LTO/ThinLTO pre-link pipeline, and; /// emits a section containing the pre-link bitcode along side the object code; /// generated in non-LTO compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:61,Deployability,pipeline,pipeline,61,"/// Build a pre-link, ThinLTO-targeting default optimization pipeline to; /// a pass manager.; ///; /// This adds the pre-link optimizations tuned to prepare a module for; /// a ThinLTO run. It works to minimize the IR which needs to be analyzed; /// without making irreversible decisions which could be made better during; /// the LTO run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Performance,optimiz,optimization,48,"/// Build a pre-link, ThinLTO-targeting default optimization pipeline to; /// a pass manager.; ///; /// This adds the pre-link optimizations tuned to prepare a module for; /// a ThinLTO run. It works to minimize the IR which needs to be analyzed; /// without making irreversible decisions which could be made better during; /// the LTO run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:127,Performance,optimiz,optimizations,127,"/// Build a pre-link, ThinLTO-targeting default optimization pipeline to; /// a pass manager.; ///; /// This adds the pre-link optimizations tuned to prepare a module for; /// a ThinLTO run. It works to minimize the IR which needs to be analyzed; /// without making irreversible decisions which could be made better during; /// the LTO run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:141,Performance,tune,tuned,141,"/// Build a pre-link, ThinLTO-targeting default optimization pipeline to; /// a pass manager.; ///; /// This adds the pre-link optimizations tuned to prepare a module for; /// a ThinLTO run. It works to minimize the IR which needs to be analyzed; /// without making irreversible decisions which could be made better during; /// the LTO run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:42,Deployability,pipeline,pipeline,42,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:122,Deployability,pipeline,pipeline,122,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:29,Performance,optimiz,optimization,29,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:109,Performance,optimiz,optimization,109,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:150,Performance,optimiz,optimization,150,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:203,Performance,tune,tuned,203,"/// Build an ThinLTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:57,Deployability,pipeline,pipeline,57,"/// Build a pre-link, LTO-targeting default optimization pipeline to a pass; /// manager.; ///; /// This adds the pre-link optimizations tuned to work well with a later LTO; /// run. It works to minimize the IR which needs to be analyzed without; /// making irreversible decisions which could be made better during the LTO; /// run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:44,Performance,optimiz,optimization,44,"/// Build a pre-link, LTO-targeting default optimization pipeline to a pass; /// manager.; ///; /// This adds the pre-link optimizations tuned to work well with a later LTO; /// run. It works to minimize the IR which needs to be analyzed without; /// making irreversible decisions which could be made better during the LTO; /// run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:123,Performance,optimiz,optimizations,123,"/// Build a pre-link, LTO-targeting default optimization pipeline to a pass; /// manager.; ///; /// This adds the pre-link optimizations tuned to work well with a later LTO; /// run. It works to minimize the IR which needs to be analyzed without; /// making irreversible decisions which could be made better during the LTO; /// run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:137,Performance,tune,tuned,137,"/// Build a pre-link, LTO-targeting default optimization pipeline to a pass; /// manager.; ///; /// This adds the pre-link optimizations tuned to work well with a later LTO; /// run. It works to minimize the IR which needs to be analyzed without; /// making irreversible decisions which could be made better during the LTO; /// run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Deployability,pipeline,pipeline,38,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:118,Deployability,pipeline,pipeline,118,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:25,Performance,optimiz,optimization,25,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:105,Performance,optimiz,optimization,105,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:146,Performance,optimiz,optimization,146,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:199,Performance,tune,tuned,199,"/// Build an LTO default optimization pipeline to a pass manager.; ///; /// This provides a good default optimization pipeline for link-time; /// optimization and code generation. It is particularly tuned to fit well; /// when IR coming into the LTO phase was first run through \c; /// addPreLinkLTODefaultPipeline, and the two coordinate closely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:16,Deployability,pipeline,pipeline,16,/// Build an O0 pipeline with the minimal semantically required passes.; ///; /// This should only be used for non-LTO and LTO pre-link pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:136,Deployability,pipeline,pipelines,136,/// Build an O0 pipeline with the minimal semantically required passes.; ///; /// This should only be used for non-LTO and LTO pre-link pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:66,Deployability,pipeline,pipeline,66,/// Build the default `AAManager` with the default alias analysis pipeline; /// registered.; ///; /// This also adds target-specific alias analyses registered via; /// TargetMachine::registerDefaultAliasAnalyses().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:25,Deployability,pipeline,pipeline,25,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:121,Deployability,pipeline,pipeline,121,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1334,Deployability,pipeline,pipeline,1334,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1712,Deployability,pipeline,pipeline,1712,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1210,Energy Efficiency,adapt,adaptor,1210,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1491,Energy Efficiency,adapt,adaptor,1491,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1664,Energy Efficiency,adapt,adaptor,1664,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1210,Modifiability,adapt,adaptor,1210,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1491,Modifiability,adapt,adaptor,1491,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1664,Modifiability,adapt,adaptor,1664,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1043,Testability,test,testing,1043,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1595,Testability,test,testing,1595,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:29,Deployability,pipeline,pipeline,29,"/// {{@ Parse a textual pass pipeline description into a specific PassManager; ///; /// Automatic deduction of an appropriate pass manager stack is not supported.; /// For example, to insert a loop pass 'lpass' into a FunctionPassManager,; /// this is the valid pipeline text:; ///; /// function(lpass)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:262,Deployability,pipeline,pipeline,262,"/// {{@ Parse a textual pass pipeline description into a specific PassManager; ///; /// Automatic deduction of an appropriate pass manager stack is not supported.; /// For example, to insert a loop pass 'lpass' into a FunctionPassManager,; /// this is the valid pipeline text:; ///; /// function(lpass)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:33,Deployability,pipeline,pipeline,33,"/// @}}; /// Parse a textual MIR pipeline into the provided \c MachineFunctionPass; /// manager.; /// The format of the textual machine pipeline is a comma separated list of; /// machine pass names:; ///; /// machine-funciton-pass,machine-module-pass,...; ///; /// There is no need to specify the pass nesting, and this function; /// currently cannot handle the pass nesting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:136,Deployability,pipeline,pipeline,136,"/// @}}; /// Parse a textual MIR pipeline into the provided \c MachineFunctionPass; /// manager.; /// The format of the textual machine pipeline is a comma separated list of; /// machine pass names:; ///; /// machine-funciton-pass,machine-module-pass,...; ///; /// There is no need to specify the pass nesting, and this function; /// currently cannot handle the pass nesting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:641,Availability,error,error,641,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:35,Deployability,pipeline,pipeline,35,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:113,Deployability,pipeline,pipeline,113,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:397,Integrability,rout,routine,397,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:380,Testability,log,logic,380,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding passes that perform peephole; /// optimizations similar to the instruction combiner. These passes will be; /// inserted after each instance of the instruction combiner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding passes that perform peephole; /// optimizations similar to the instruction combiner. These passes will be; /// inserted after each instance of the instruction combiner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:135,Performance,perform,perform,135,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding passes that perform peephole; /// optimizations similar to the instruction combiner. These passes will be; /// inserted after each instance of the instruction combiner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:157,Performance,optimiz,optimizations,157,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding passes that perform peephole; /// optimizations similar to the instruction combiner. These passes will be; /// inserted after each instance of the instruction combiner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:235,Deployability,pipeline,pipeline,235,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:217,Performance,optimiz,optimization,217,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:159,Usability,simpl,simplification,159,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding loop passes to the end of the loop; /// optimizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding loop passes to the end of the loop; /// optimizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:163,Performance,optimiz,optimizer,163,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding loop passes to the end of the loop; /// optimizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes after most of the; /// main optimizations, but before the last cleanup-ish optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes after most of the; /// main optimizations, but before the last cleanup-ish optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:123,Performance,optimiz,optimization,123,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes after most of the; /// main optimizations, but before the last cleanup-ish optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:171,Performance,optimiz,optimizations,171,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes after most of the; /// main optimizations, but before the last cleanup-ish optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:218,Performance,optimiz,optimizations,218,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes after most of the; /// main optimizations, but before the last cleanup-ish optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding CallGraphSCC passes at the end of the; /// main CallGraphSCC passes and before any function simplification passes run; /// by CGPassManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding CallGraphSCC passes at the end of the; /// main CallGraphSCC passes and before any function simplification passes run; /// by CGPassManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:215,Usability,simpl,simplification,215,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding CallGraphSCC passes at the end of the; /// main CallGraphSCC passes and before any function simplification passes run; /// by CGPassManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes before the; /// vectorizer and other highly target specific optimization passes are; /// executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes before the; /// vectorizer and other highly target specific optimization passes are; /// executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:123,Performance,optimiz,optimization,123,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes before the; /// vectorizer and other highly target specific optimization passes are; /// executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:203,Performance,optimiz,optimization,203,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding optimization passes before the; /// vectorizer and other highly target specific optimization passes are; /// executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization once at the start of the; /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO; /// link-time pipelines).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:162,Deployability,pipeline,pipeline,162,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization once at the start of the; /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO; /// link-time pipelines).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:246,Deployability,pipeline,pipelines,246,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization once at the start of the; /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO; /// link-time pipelines).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization once at the start of the; /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO; /// link-time pipelines).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:119,Performance,optimiz,optimization,119,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization once at the start of the; /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO; /// link-time pipelines).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization right after passes that do; /// basic simplification of the input IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization right after passes that do; /// basic simplification of the input IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:119,Performance,optimiz,optimization,119,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization right after passes that do; /// basic simplification of the input IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:170,Usability,simpl,simplification,170,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization right after passes that do; /// basic simplification of the input IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations before the function; /// optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:170,Deployability,pipeline,pipeline,170,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations before the function; /// optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations before the function; /// optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:118,Performance,optimiz,optimizations,118,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations before the function; /// optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:157,Performance,optimiz,optimization,157,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations before the function; /// optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the very end of the; /// function optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:182,Deployability,pipeline,pipeline,182,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the very end of the; /// function optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the very end of the; /// function optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:118,Performance,optimiz,optimizations,118,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the very end of the; /// function optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:169,Performance,optimiz,optimization,169,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the very end of the; /// function optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the start of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:166,Deployability,pipeline,pipeline,166,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the start of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the start of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:118,Performance,optimiz,optimizations,118,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the start of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:48,Deployability,pipeline,pipeline,48,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the end of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:164,Deployability,pipeline,pipeline,164,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the end of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:38,Performance,optimiz,optimizer,38,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the end of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:118,Performance,optimiz,optimizations,118,/// Register a callback for a default optimizer pipeline extension point; ///; /// This extension point allows adding optimizations at the end of the full; /// LTO pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:26,Deployability,pipeline,pipeline,26,"/// @}}; /// {{@ Register pipeline parsing callbacks with this pass builder instance.; /// Using these callbacks, callers can parse both a single pass name, as well; /// as entire sub-pipelines, and populate the PassManager instance; /// accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:184,Deployability,pipeline,pipelines,184,"/// @}}; /// {{@ Register pipeline parsing callbacks with this pass builder instance.; /// Using these callbacks, callers can parse both a single pass name, as well; /// as entire sub-pipelines, and populate the PassManager instance; /// accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:49,Deployability,pipeline,pipeline,49,"/// @}}; /// Register a callback for a top-level pipeline entry.; ///; /// If the PassManager type is not given at the top level of the pipeline; /// text, this Callback should be used to determine the appropriate stack of; /// PassManagers and populate the passed ModulePassManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:136,Deployability,pipeline,pipeline,136,"/// @}}; /// Register a callback for a top-level pipeline entry.; ///; /// If the PassManager type is not given at the top level of the pipeline; /// text, this Callback should be used to determine the appropriate stack of; /// PassManagers and populate the passed ModulePassManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:80,Deployability,pipeline,pipelines,80,// Invoke the callbacks registered for the various extension points.; // Custom pipelines should use these to invoke the callbacks registered; // by TargetMachines and other clients.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:11,Deployability,pipeline,pipeline,11,// O1 pass pipeline,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:185,Deployability,pipeline,pipeline,185,"/// This utility template takes care of adding require<> and invalidate<>; /// passes for an analysis to a given \c PassManager. It is intended to be used; /// during parsing of a pass pipeline when parsing a single PipelineName.; /// When registering a new function analysis FancyAnalysis with the pass; /// pipeline name ""fancy-analysis"", a matching ParsePipelineCallback could look; /// like this:; ///; /// static bool parseFunctionPipeline(StringRef Name, FunctionPassManager &FPM,; /// ArrayRef<PipelineElement> P) {; /// if (parseAnalysisUtilityPasses<FancyAnalysis>(""fancy-analysis"", Name,; /// FPM)); /// return true;; /// return false;; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:216,Deployability,Pipeline,PipelineName,216,"/// This utility template takes care of adding require<> and invalidate<>; /// passes for an analysis to a given \c PassManager. It is intended to be used; /// during parsing of a pass pipeline when parsing a single PipelineName.; /// When registering a new function analysis FancyAnalysis with the pass; /// pipeline name ""fancy-analysis"", a matching ParsePipelineCallback could look; /// like this:; ///; /// static bool parseFunctionPipeline(StringRef Name, FunctionPassManager &FPM,; /// ArrayRef<PipelineElement> P) {; /// if (parseAnalysisUtilityPasses<FancyAnalysis>(""fancy-analysis"", Name,; /// FPM)); /// return true;; /// return false;; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:309,Deployability,pipeline,pipeline,309,"/// This utility template takes care of adding require<> and invalidate<>; /// passes for an analysis to a given \c PassManager. It is intended to be used; /// during parsing of a pass pipeline when parsing a single PipelineName.; /// When registering a new function analysis FancyAnalysis with the pass; /// pipeline name ""fancy-analysis"", a matching ParsePipelineCallback could look; /// like this:; ///; /// static bool parseFunctionPipeline(StringRef Name, FunctionPassManager &FPM,; /// ArrayRef<PipelineElement> P) {; /// if (parseAnalysisUtilityPasses<FancyAnalysis>(""fancy-analysis"", Name,; /// FPM)); /// return true;; /// return false;; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:501,Deployability,Pipeline,PipelineElement,501,"/// This utility template takes care of adding require<> and invalidate<>; /// passes for an analysis to a given \c PassManager. It is intended to be used; /// during parsing of a pass pipeline when parsing a single PipelineName.; /// When registering a new function analysis FancyAnalysis with the pass; /// pipeline name ""fancy-analysis"", a matching ParsePipelineCallback could look; /// like this:; ///; /// static bool parseFunctionPipeline(StringRef Name, FunctionPassManager &FPM,; /// ArrayRef<PipelineElement> P) {; /// if (parseAnalysisUtilityPasses<FancyAnalysis>(""fancy-analysis"", Name,; /// FPM)); /// return true;; /// return false;; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:45,Testability,test,testing,45,// These are special since they are only for testing purposes.; /// No-op module pass which does nothing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:41,Modifiability,Plugin,Plugin,41,"//===- llvm/Passes/PassPlugin.h - Public Plugin API -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines the public entry point for new-PM pass plugins.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:435,Modifiability,plugin,plugins,435,"//===- llvm/Passes/PassPlugin.h - Public Plugin API -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines the public entry point for new-PM pass plugins.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:231,Availability,error,error,231,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:86,Modifiability,plugin,plugin,86,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:111,Modifiability,plugin,plugin,111,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:166,Modifiability,plugin,plugin,166,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:206,Modifiability,plugin,plugin,206,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:121,Performance,load,loaded,121,"/// \macro LLVM_PLUGIN_API_VERSION; /// Identifies the API version understood by this plugin.; ///; /// When a plugin is loaded, the driver will check it's supported plugin version; /// against that of the plugin. A mismatch is an error. The supported version; /// will be incremented for ABI-breaking changes to the \c PassPluginLibraryInfo; /// struct, i.e. when callbacks are added, removed, or reordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:100,Integrability,interface,interface,100,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:275,Integrability,interface,interface,275,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:26,Modifiability,plugin,plugin,26,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:119,Modifiability,plugin,plugins,119,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:168,Modifiability,plugin,plugin,168,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:210,Modifiability,plugin,plugin,210,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:45,Performance,load,load,45,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:39,Modifiability,plugin,plugin,39,"/// The API version understood by this plugin, usually \c; /// LLVM_PLUGIN_API_VERSION",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:29,Modifiability,plugin,plugin,29,/// A meaningful name of the plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:23,Modifiability,plugin,plugin,23,/// The version of the plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:33,Modifiability,plugin,plugin,33,/// The callback for registering plugin passes with a \c PassBuilder; /// instance,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:62,Integrability,wrap,wraps,62,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:118,Integrability,interface,interface,118,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:18,Modifiability,plugin,plugin,18,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:82,Modifiability,plugin,plugin,82,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:6,Performance,load,loaded,6,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:70,Performance,load,loaded,70,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:99,Security,access,access,99,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:171,Security,expose,exposes,171,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:84,Availability,error,error,84,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:28,Modifiability,plugin,plugin,28,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:183,Modifiability,plugin,plugin,183,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:16,Performance,load,load,16,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:131,Performance,load,loaded,131,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:35,Modifiability,plugin,plugin,35,/// Get the filename of the loaded plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:28,Performance,load,loaded,28,/// Get the filename of the loaded plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,Modifiability,plugin,plugin,12,/// Get the plugin name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,Modifiability,plugin,plugin,12,/// Get the plugin version,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,Modifiability,plugin,plugin,12,/// Get the plugin API version,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:38,Modifiability,plugin,plugin,38,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:63,Modifiability,plugin,plugin,63,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:163,Modifiability,plugin,plugin,163,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:258,Modifiability,plugin,plugin,258,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:73,Performance,load,loaded,73,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:10,Energy Efficiency,adapt,adaptors,10,/// Print adaptors and pass managers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:10,Modifiability,adapt,adaptors,10,/// Print adaptors and pass managers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:9,Testability,log,logging,9,// Debug logging for transformation and analysis passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:751,Energy Efficiency,adapt,adapter,751,// Base class for classes that report changes to the IR.; // It presents an interface for such classes and provides calls; // on various events as the new pass manager transforms the IR.; // It also provides filtering of information based on hidden options; // specifying which functions are interesting.; // Calls are made for the following events/queries:; // 1. The initial IR processed.; // 2. To get the representation of the IR (of type \p T).; // 3. When a pass does not change the IR.; // 4. When a pass changes the IR (given both before and after representations; // of type \p T).; // 5. When an IR is invalidated.; // 6. When a pass is run on an IR that is not interesting (based on options).; // 7. When a pass is ignored (pass manager or adapter pass).; // 8. To compare two IR representations (of type \p T).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:76,Integrability,interface,interface,76,// Base class for classes that report changes to the IR.; // It presents an interface for such classes and provides calls; // on various events as the new pass manager transforms the IR.; // It also provides filtering of information based on hidden options; // specifying which functions are interesting.; // Calls are made for the following events/queries:; // 1. The initial IR processed.; // 2. To get the representation of the IR (of type \p T).; // 3. When a pass does not change the IR.; // 4. When a pass changes the IR (given both before and after representations; // of type \p T).; // 5. When an IR is invalidated.; // 6. When a pass is run on an IR that is not interesting (based on options).; // 7. When a pass is ignored (pass manager or adapter pass).; // 8. To compare two IR representations (of type \p T).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:751,Integrability,adapter,adapter,751,// Base class for classes that report changes to the IR.; // It presents an interface for such classes and provides calls; // on various events as the new pass manager transforms the IR.; // It also provides filtering of information based on hidden options; // specifying which functions are interesting.; // Calls are made for the following events/queries:; // 1. The initial IR processed.; // 2. To get the representation of the IR (of type \p T).; // 3. When a pass does not change the IR.; // 4. When a pass changes the IR (given both before and after representations; // of type \p T).; // 5. When an IR is invalidated.; // 6. When a pass is run on an IR that is not interesting (based on options).; // 7. When a pass is ignored (pass manager or adapter pass).; // 8. To compare two IR representations (of type \p T).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:751,Modifiability,adapt,adapter,751,// Base class for classes that report changes to the IR.; // It presents an interface for such classes and provides calls; // on various events as the new pass manager transforms the IR.; // It also provides filtering of information based on hidden options; // specifying which functions are interesting.; // Calls are made for the following events/queries:; // 1. The initial IR processed.; // 2. To get the representation of the IR (of type \p T).; // 3. When a pass does not change the IR.; // 4. When a pass changes the IR (given both before and after representations; // of type \p T).; // 5. When an IR is invalidated.; // 6. When a pass is run on an IR that is not interesting (based on options).; // 7. When a pass is ignored (pass manager or adapter pass).; // 8. To compare two IR representations (of type \p T).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:8,Testability,test,test,8,// Call test as interesting IR has changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:37,Deployability,patch,patch-style,37,// Do not need extra information for patch-style change reporter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:27,Integrability,interface,interface,27,/// This class provides an interface to register all the standard pass; /// instrumentations and manages their state (if any).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:192,Energy Efficiency,efficient,efficient,192,"/// This class represents a function that is read from a sample profile. It; /// comes with two forms: a string or a hash code. The latter form is the 64-bit; /// MD5 of the function name for efficient storage supported by ExtBinary; /// profile format, and when reading the profile, this class can represent it; /// without converting it to a string first.; /// When representing a hash code, we utilize the LengthOrHashCode field to; /// store it, and Name is set to null. When representing a string, it is same as; /// StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:117,Security,hash,hash,117,"/// This class represents a function that is read from a sample profile. It; /// comes with two forms: a string or a hash code. The latter form is the 64-bit; /// MD5 of the function name for efficient storage supported by ExtBinary; /// profile format, and when reading the profile, this class can represent it; /// without converting it to a string first.; /// When representing a hash code, we utilize the LengthOrHashCode field to; /// store it, and Name is set to null. When representing a string, it is same as; /// StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:383,Security,hash,hash,383,"/// This class represents a function that is read from a sample profile. It; /// comes with two forms: a string or a hash code. The latter form is the 64-bit; /// MD5 of the function name for efficient storage supported by ExtBinary; /// profile format, and when reading the profile, this class can represent it; /// without converting it to a string first.; /// When representing a hash code, we utilize the LengthOrHashCode field to; /// store it, and Name is set to null. When representing a string, it is same as; /// StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:279,Performance,perform,perform,279,"/// Extension to memcmp to handle hash code representation. If both are hash; /// values, Lhs and Rhs are both null, function returns 0 (and needs an extra; /// comparison using getIntValue). If only one is hash code, it is considered; /// less than the StringRef one. Otherwise perform normal string comparison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:34,Security,hash,hash,34,"/// Extension to memcmp to handle hash code representation. If both are hash; /// values, Lhs and Rhs are both null, function returns 0 (and needs an extra; /// comparison using getIntValue). If only one is hash code, it is considered; /// less than the StringRef one. Otherwise perform normal string comparison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:72,Security,hash,hash,72,"/// Extension to memcmp to handle hash code representation. If both are hash; /// values, Lhs and Rhs are both null, function returns 0 (and needs an extra; /// comparison using getIntValue). If only one is hash code, it is considered; /// less than the StringRef one. Otherwise perform normal string comparison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:207,Security,hash,hash,207,"/// Extension to memcmp to handle hash code representation. If both are hash; /// values, Lhs and Rhs are both null, function returns 0 (and needs an extra; /// comparison using getIntValue). If only one is hash code, it is considered; /// less than the StringRef one. Otherwise perform normal string comparison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:23,Security,hash,hash,23,/// Constructor from a hash code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:114,Security,hash,hash,114,"/// Check for equality. Similar to StringRef::equals, but will also cover for; /// the case where one or both are hash codes. Comparing their int values are; /// sufficient. A hash code FunctionId is considered not equal to a StringRef; /// FunctionId regardless of actual contents.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:176,Security,hash,hash,176,"/// Check for equality. Similar to StringRef::equals, but will also cover for; /// the case where one or both are hash codes. Comparing their int values are; /// sufficient. A hash code FunctionId is considered not equal to a StringRef; /// FunctionId regardless of actual contents.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:175,Security,hash,hash,175,"/// Total order comparison. If both FunctionId are StringRef, this is the same; /// as StringRef::compare. If one of them is StringRef, it is considered; /// greater than the hash code FunctionId. Otherwise this is the the same; /// as comparing their int values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:186,Availability,error,error,186,"/// Convert to StringRef. This is only allowed when it is known this object is; /// representing a StringRef, not a hash code. Calling this function on a hash; /// code is considered an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:116,Security,hash,hash,116,"/// Convert to StringRef. This is only allowed when it is known this object is; /// representing a StringRef, not a hash code. Calling this function on a hash; /// code is considered an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:154,Security,hash,hash,154,"/// Convert to StringRef. This is only allowed when it is known this object is; /// representing a StringRef, not a hash code. Calling this function on a hash; /// code is considered an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:8,Security,hash,hash,8,"/// Get hash code of this object. Returns this object's hash code if it is; /// already representing one, otherwise returns the MD5 of its string content.; /// Note that it is not the same as std::hash because we want to keep the; /// consistency that the same sample profile function in string form or MD5; /// form has the same hash code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:56,Security,hash,hash,56,"/// Get hash code of this object. Returns this object's hash code if it is; /// already representing one, otherwise returns the MD5 of its string content.; /// Note that it is not the same as std::hash because we want to keep the; /// consistency that the same sample profile function in string form or MD5; /// form has the same hash code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:197,Security,hash,hash,197,"/// Get hash code of this object. Returns this object's hash code if it is; /// already representing one, otherwise returns the MD5 of its string content.; /// Note that it is not the same as std::hash because we want to keep the; /// consistency that the same sample profile function in string form or MD5; /// form has the same hash code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:330,Security,hash,hash,330,"/// Get hash code of this object. Returns this object's hash code if it is; /// already representing one, otherwise returns the MD5 of its string content.; /// Note that it is not the same as std::hash because we want to keep the; /// consistency that the same sample profile function in string form or MD5; /// form has the same hash code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:54,Security,hash,hash,54,"/// Check if this object represents a StringRef, or a hash code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h:408,Integrability,interface,interface,408,"//===- GCOV.h - LLVM coverage tool ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header provides the interface to read and write coverage files that; // use 'gcov' format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h:42,Integrability,wrap,wrapper,42,// end namespace GCOV; /// GCOVBuffer - A wrapper around MemoryBuffer to provide GCOV specific; /// read operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h:18,Security,checksum,checksum,18,// r173147: split checksum into cfg checksum and line checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h:36,Security,checksum,checksum,36,// r173147: split checksum into cfg checksum and line checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h:54,Security,checksum,checksum,54,// r173147: split checksum into cfg checksum and line checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/GCOV.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:24,Integrability,Wrap,Wrapper,24,"//===--- HashKeyMap.h - Wrapper for maps using hash value key ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Defines HashKeyMap template.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:9,Security,Hash,HashKeyMap,9,"//===--- HashKeyMap.h - Wrapper for maps using hash value key ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Defines HashKeyMap template.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:47,Security,hash,hash,47,"//===--- HashKeyMap.h - Wrapper for maps using hash value key ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Defines HashKeyMap template.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:409,Security,Hash,HashKeyMap,409,"//===--- HashKeyMap.h - Wrapper for maps using hash value key ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Defines HashKeyMap template.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:253,Availability,avail,available,253,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:277,Energy Efficiency,reduce,reduces,277,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:20,Integrability,wrap,wrapper,20,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:165,Performance,perform,performance,165,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:570,Performance,load,loading,570,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:87,Security,hash,hash,87,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:224,Security,hash,hash,224,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:357,Security,hash,hash,357,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:400,Security,hash,hash,400,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:728,Security,hash,hashing,728,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:103,Integrability,depend,depends,103,"/// Return the name of the profile section corresponding to \p IPSK.; ///; /// The name of the section depends on the object format type \p OF. If; /// \p AddSegmentInfo is true, a segment prefix and additional linker hints may; /// be added to the section name (this is the default).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:30,Modifiability,variab,variables,30,/// Return the name prefix of variables containing instrumented function names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:30,Modifiability,variab,variables,30,/// Return the name prefix of variables containing per-function control data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:46,Modifiability,variab,variables,46,/// Return the name prefix of profile counter variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,Modifiability,variab,variables,45,/// Return the name prefix of profile bitmap variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:44,Modifiability,variab,variables,44,/// Return the name prefix of value profile variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:48,Modifiability,variab,variables,48,/// Return the name of value profile node array variables:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:27,Modifiability,variab,variable,27,/// Return the name of the variable holding the strings (possibly compressed); /// of all function's PGO names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:131,Energy Efficiency,allocate,allocated,131,/// Return the name of a covarage mapping variable (internal linkage); /// for each instrumented source module. Such variables are allocated; /// in the __llvm_covmap section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:42,Modifiability,variab,variable,42,/// Return the name of a covarage mapping variable (internal linkage); /// for each instrumented source module. Such variables are allocated; /// in the __llvm_covmap section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:117,Modifiability,variab,variables,117,/// Return the name of a covarage mapping variable (internal linkage); /// for each instrumented source module. Such variables are allocated; /// in the __llvm_covmap section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:36,Modifiability,variab,variable,36,"/// Return the name of the internal variable recording the array; /// of PGO name vars referenced by the coverage mapping. The owning; /// functions of those names are not emitted by FE (e.g, unused inline; /// functions.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:35,Integrability,interface,interface,35,/// Return the name of the runtime interface that registers per-function control; /// data for one instrumented function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:35,Integrability,interface,interface,35,/// Return the name of the runtime interface that registers the PGO name strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:32,Modifiability,variab,variable,32,/// Return the name of the hook variable defined in profile runtime library.; /// A reference to the variable causes the linker to link in the runtime; /// initialization module (which defines the hook variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:101,Modifiability,variab,variable,101,/// Return the name of the hook variable defined in profile runtime library.; /// A reference to the variable causes the linker to link in the runtime; /// initialization module (which defines the hook variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:202,Modifiability,variab,variable,202,/// Return the name of the hook variable defined in profile runtime library.; /// A reference to the variable causes the linker to link in the runtime; /// initialization module (which defines the hook variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:93,Modifiability,variab,variable,93,/// Return the name of the compiler generated function that references the; /// runtime hook variable. The function is a weak global.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:228,Modifiability,Variab,Variable,228,"/// Please use getIRPGOFuncName for LLVM IR instrumentation. This function is; /// for front-end (Clang, etc) instrumentation.; /// Return the modified name for function \c F suitable to be; /// used the key for profile lookup. Variable \c InLTO indicates if this; /// is called in LTO optimization passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:286,Performance,optimiz,optimization,286,"/// Please use getIRPGOFuncName for LLVM IR instrumentation. This function is; /// for front-end (Clang, etc) instrumentation.; /// Return the modified name for function \c F suitable to be; /// used the key for profile lookup. Variable \c InLTO indicates if this; /// is called in LTO optimization passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:161,Performance,optimiz,optimization,161,/// \return the modified name for function \c F suitable to be; /// used as the key for IRPGO profile lookup. \c InLTO indicates if this is; /// called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:34,Modifiability,variab,variable,34,/// Return the name of the global variable used to store a function; /// name in PGO instrumentation. \c FuncName is the IRPGO function name; /// (returned by \c getIRPGOFuncName) for LLVM IR instrumentation and PGO; /// function name (returned by \c getPGOFuncName) for front-end instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:33,Modifiability,variab,variable,33,/// Create and return the global variable for function name used in PGO; /// instrumentation. \c FuncName is the IRPGO function name (returned by; /// \c getIRPGOFuncName) for LLVM IR instrumentation and PGO function name; /// (returned by \c getPGOFuncName) for front-end instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:33,Modifiability,variab,variable,33,/// Create and return the global variable for function name used in PGO; /// instrumentation. \c FuncName is the IRPGO function name (returned by; /// \c getIRPGOFuncName) for LLVM IR instrumentation and PGO function name; /// (returned by \c getPGOFuncName) for front-end instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:113,Modifiability,variab,variables,113,/// Produce \c Result string with the same format described above. The input; /// is vector of PGO function name variables that are referenced.; /// The global variable element in 'NameVars' is a string containing the pgo; /// name of a function. See `createPGOFuncNameVar` that creates these global; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:160,Modifiability,variab,variable,160,/// Produce \c Result string with the same format described above. The input; /// is vector of PGO function name variables that are referenced.; /// The global variable element in 'NameVars' is a string containing the pgo; /// name of a function. See `createPGOFuncNameVar` that creates these global; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:305,Modifiability,variab,variables,305,/// Produce \c Result string with the same format described above. The input; /// is vector of PGO function name variables that are referenced.; /// The global variable element in 'NameVars' is a string containing the pgo; /// name of a function. See `createPGOFuncNameVar` that creates these global; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:173,Modifiability,variab,variable,173,/// Check if we can safely rename this Comdat function. Instances of the same; /// comdat function may have different control flows thus can not share the; /// same counter variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:20,Safety,safe,safely,20,/// Check if we can safely rename this Comdat function. Instances of the same; /// comdat function may have different control flows thus can not share the; /// same counter variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:22,Integrability,interface,interface,22,"/// Same as the above interface but using an ArrayRef, as well as \p Sum.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:43,Modifiability,variab,variables,43,/// Check if we can use Comdat for profile variables. This will eliminate; /// the duplicated profile variables for Comdat functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:102,Modifiability,variab,variables,102,/// Check if we can use Comdat for profile variables. This will eliminate; /// the duplicated profile variables for Comdat functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:184,Availability,fault,faults,184,/// Use a set of temporal profile traces to create a list of balanced; /// partitioning function nodes used by BalancedPartitioning to generate a; /// function order that reduces page faults during startup,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:171,Energy Efficiency,reduce,reduces,171,/// Use a set of temporal profile traces to create a list of balanced; /// partitioning function nodes used by BalancedPartitioning to generate a; /// function order that reduces page faults during startup,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:15,Availability,Error,Error,15,"/// Consume an Error and return the raw enum value contained within it, and; /// the optional error message. The Error must either be a success value, or; /// contain a single InstrProfError.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:94,Availability,error,error,94,"/// Consume an Error and return the raw enum value contained within it, and; /// the optional error message. The Error must either be a success value, or; /// contain a single InstrProfError.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:113,Availability,Error,Error,113,"/// Consume an Error and return the raw enum value contained within it, and; /// the optional error message. The Error must either be a success value, or; /// contain a single InstrProfError.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:100,Integrability,message,message,100,"/// Consume an Error and return the raw enum value contained within it, and; /// the optional error message. The Error must either be a success value, or; /// contain a single InstrProfError.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:60,Security,hash,hash,60,// A map from function runtime address to function name MD5 hash.; // This map is only populated and used by raw instr profile reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:159,Integrability,wrap,wrapper,159,/// \c NameStrings is a string composed of one of more sub-strings; /// encoded in the format described in \c collectPGOFuncNameStrings.; /// This method is a wrapper to \c readPGOFuncNameStrings method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:9,Integrability,interface,interface,9,/// This interface is used by reader of CoverageMapping test; /// format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:56,Testability,test,test,56,/// This interface is used by reader of CoverageMapping test; /// format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:6,Integrability,wrap,wrapper,6,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:14,Integrability,interface,interface,14,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:100,Integrability,interface,interface,100,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:190,Modifiability,Variab,Variable,190,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:250,Performance,optimiz,optimization,250,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:87,Integrability,interface,interface,87,/// Create InstrProfSymtab from a set of names iteratable from; /// \p IterRange. This interface is used by IndexedProfReader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:4,Deployability,Update,Update,4,/// Update the symtab by adding \p FuncName to the table. This interface; /// is used by the raw and text profile readers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:63,Integrability,interface,interface,63,/// Update the symtab by adding \p FuncName to the table. This interface; /// is used by the raw and text profile readers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:56,Integrability,interface,interface,56,/// Map a function address to its name's MD5 hash. This interface; /// is only used by the raw profiler reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,Security,hash,hash,45,/// Map a function address to its name's MD5 hash. This interface; /// is only used by the raw profiler reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:24,Security,hash,hash,24,"/// Return a function's hash, or 0, if the function isn't in this SymTab.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:102,Availability,error,error,102,"/// Return function's PGO name from the function name's symbol; /// address in the object file. If an error occurs, return; /// an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:39,Modifiability,variab,variables,39,"/// Return name of functions or global variables from the name's md5 hash; /// value. If not found, return an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:69,Security,hash,hash,69,"/// Return name of functions or global variables from the name's md5 hash; /// value. If not found, return an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:123,Modifiability,variab,variable,123,"/// Just like getFuncOrVarName, except that it will return literal string; /// 'External Symbol' if the function or global variable is external to; /// this symbol table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:40,Security,hash,hash,40,/// Return function from the name's md5 hash. Return nullptr if not found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:41,Testability,test,test,41,// Sum of the total count values for the test profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:4,Usability,Clear,Clear,4,/// Clear value data entries and edge counters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:4,Usability,Clear,Clear,4,/// Clear value data entries,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:33,Security,hash,hash,33,// Map indirect call target name hash to name string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:247,Security,hash,hash,247,"// The version 2 format supports recording profile data of multiple; // functions which share the same key in one value field. To support this,; // the number block counters is recorded as an uint64_t field right after the; // function structural hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:44,Security,hash,hash,44,"// In this version, the frontend PGO stable hash algorithm defaults to V2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:44,Security,hash,hash,44,"// In this version, the frontend PGO stable hash algorithm got fixed and; // may produce hashes different from Version5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:89,Security,hash,hashes,89,"// In this version, the frontend PGO stable hash algorithm got fixed and; // may produce hashes different from Version5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:41,Testability,log,logical,41,// An additional counter is added around logical operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:102,Deployability,update,update,102,// This structure defines the file header of the LLVM profile; // data file in indexed-format. Please update llvm/docs/InstrProfileFormat.rst; // as appropriate when updating the indexed profile format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:127,Deployability,update,updated,127,// New fields should only be added at the end to ensure that the size; // computation is correct. The methods below need to be updated to ensure that; // the new field is read correctly.; // Reads a header struct from the buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,Modifiability,variab,variable,45,// end namespace RawInstrProf; // Create the variable for the profile file name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:148,Testability,test,tests,148,"// Whether to compress function names in profile records, and filenames in; // code coverage mappings. Used by the Instrumentation library and unit tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h:601,Security,Hash,Hash,601,"/// Iterate over DWARF DIEs to find those that symbolize instrumentation; /// probes and construct the ProfileData vector and Names string.; ///; /// Here is some example DWARF for an instrumentation probe we are looking; /// for:; /// \code; /// DW_TAG_subprogram; /// DW_AT_low_pc	(0x0000000000000000); /// DW_AT_high_pc	(0x0000000000000014); /// DW_AT_name	(""foo""); /// DW_TAG_variable; /// DW_AT_name	(""__profc_foo""); /// DW_AT_location	(DW_OP_addr 0x0); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""Function Name""); /// DW_AT_const_value	(""foo""); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""CFG Hash""); /// DW_AT_const_value	(12345678); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""Num Counters""); /// DW_AT_const_value	(2); /// NULL; /// NULL; /// \endcode; /// \param MaxWarnings the maximum number of warnings to emit (0 = no limit); /// \param Data if provided, populate with the correlation data found",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:10,Availability,error,errors,10,// Handle errors in the reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:19,Integrability,interface,interface,19,/// Base class and interface for reading profiling data of any known instrprof; /// format. Provides an iterator over NamedInstrProfRecords.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:20,Availability,error,error,20,/// Set the current error and return same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:22,Availability,error,error,22,/// Clear the current error and return a successful one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:4,Usability,Clear,Clear,4,/// Clear the current error and return a successful one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:45,Availability,error,error,45,/// Return true if the reader encountered an error reading profiling data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:20,Availability,error,error,20,/// Get the current error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:300,Security,hash,hash,300,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:121,Testability,test,test,121,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:19,Usability,simpl,simple,19,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:82,Usability,simpl,simple,82,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:7,Availability,avail,available,7,"/// If available, this hold the ProfileData array used to correlate raw; /// instrumentation data to their functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:74,Security,hash,hash,74,// end namespace IndexedInstrProf; /// Trait for lookups into the on-disk hash table for the binary instrprof; /// format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:106,Testability,test,testing,106,"// Endianness of the input value profile data.; // It should be LE by default, but can be changed; // for testing purpose.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:12,Testability,test,testing,12,// Used for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:31,Availability,avail,available,31,/// MemProf profile schema (if available).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:108,Availability,error,error,108,"/// Return the NamedInstrProfRecord associated with FuncName and FuncHash.; /// When return a hash_mismatch error and MismatchedFuncSum is not nullptr,; /// the sum of all counters in the mismatched function will be set to; /// MismatchedFuncSum. If there are multiple instances of mismatched; /// functions, MismatchedFuncSum returns the maximum. If \c FuncName is not; /// found, try to lookup \c DeprecatedFuncName to handle profiles built by; /// older compilers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:12,Testability,test,testing,12,// Used for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:43,Integrability,interface,interface,43,// See description in the base class. This interface is designed; // to be used by llvm-profdata (for dumping). Avoid using this when; // the client is the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:112,Safety,Avoid,Avoid,112,// See description in the base class. This interface is designed; // to be used by llvm-profdata (for dumping). Avoid using this when; // the client is the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:88,Security,hash,hash,88,// A map to hold memprof data per function. The lower 64 bits obtained from; // the md5 hash of the function name is used to index into the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:107,Security,hash,hash,107,"/// Add function counts for the given function. If there are already counts; /// for this function and the hash and number of counts match, each counter is; /// summed. Optionally scale counts by \p Weight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:42,Security,hash,hash,42,/// Add a memprof frame identified by the hash of the contents of the frame in; /// \p FrameId.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:51,Testability,test,testing,51,"/// Write the profile, returning the raw data. For testing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:88,Availability,error,error,88,/// Update the attributes of the current profile from the attributes; /// specified. An error is returned if IR and FE profiles are mixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:4,Deployability,Update,Update,4,/// Update the attributes of the current profile from the attributes; /// specified. An error is returned if IR and FE profiles are mixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:10,Deployability,update,update,10,// Now we update the profile type with the bits that are set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:12,Integrability,interface,interface,12,// Internal interface for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:26,Testability,test,testing,26,// Internal interface for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h:483,Availability,avail,available,483,"/// Canonicalizer for mangled names.; ///; /// This class allows specifying a list of ""equivalent"" manglings. For example,; /// you can specify that Ss is equivalent to; /// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE; /// and then manglings that refer to libstdc++'s 'std::string' will be; /// considered equivalent to manglings that are the same except that they refer; /// to libc++'s 'std::string'.; ///; /// This can be used when data (eg, profiling data) is available for a version; /// of a program built in a different configuration, with correspondingly; /// different manglings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h:546,Deployability,configurat,configuration,546,"/// Canonicalizer for mangled names.; ///; /// This class allows specifying a list of ""equivalent"" manglings. For example,; /// you can specify that Ss is equivalent to; /// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE; /// and then manglings that refer to libstdc++'s 'std::string' will be; /// considered equivalent to manglings that are the same except that they refer; /// to libc++'s 'std::string'.; ///; /// This can be used when data (eg, profiling data) is available for a version; /// of a program built in a different configuration, with correspondingly; /// different manglings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h:546,Modifiability,config,configuration,546,"/// Canonicalizer for mangled names.; ///; /// This class allows specifying a list of ""equivalent"" manglings. For example,; /// you can specify that Ss is equivalent to; /// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE; /// and then manglings that refer to libstdc++'s 'std::string' will be; /// considered equivalent to manglings that are the same except that they refer; /// to libc++'s 'std::string'.; ///; /// This can be used when data (eg, profiling data) is available for a version; /// of a program built in a different configuration, with correspondingly; /// different manglings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:43,Security,hash,hashing,43,// A type representing the id generated by hashing the contents of the Frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:34,Safety,avoid,avoid,34,// Ignore the SymbolName field to avoid a string compare. Comparing the; // function hash serves the same purpose.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:85,Security,hash,hash,85,// Ignore the SymbolName field to avoid a string compare. Comparing the; // function hash serves the same purpose.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:65,Deployability,update,update,65,"// If the type of the GlobalValue::GUID changes, then we need to update; // the reader and the writer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:35,Usability,GUID,GUID,35,"// If the type of the GlobalValue::GUID changes, then we need to update; // the reader and the writer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:12,Security,hash,hash,12,"// Return a hash value based on the contents of the frame. Here we don't use; // hashing from llvm ADT since we are going to persist the hash id, the hash; // combine algorithm in ADT uses a new randomized seed each time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:81,Security,hash,hashing,81,"// Return a hash value based on the contents of the frame. Here we don't use; // hashing from llvm ADT since we are going to persist the hash id, the hash; // combine algorithm in ADT uses a new randomized seed each time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:137,Security,hash,hash,137,"// Return a hash value based on the contents of the frame. Here we don't use; // hashing from llvm ADT since we are going to persist the hash id, the hash; // combine algorithm in ADT uses a new randomized seed each time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:150,Security,hash,hash,150,"// Return a hash value based on the contents of the frame. Here we don't use; // hashing from llvm ADT since we are going to persist the hash id, the hash; // combine algorithm in ADT uses a new randomized seed each time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:43,Energy Efficiency,efficient,efficient,43,// Holds allocation information in a space efficient format where frames are; // represented using unique identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:103,Testability,test,test,103,// TODO: Print out the frame on one line with to make it easier for deep; // callstacks once we have a test to check valid YAML is generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:348,Usability,GUID,GUID,348,"// Holds call sites in this function which are part of some memory; // allocation context. We store this as a list of locations, each with its; // list of inline locations in bottom-up order i.e. from leaf to root. The; // inline location list may include additional entries, users should pick; // the last entry in the list with the same function GUID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:15,Usability,GUID,GUID,15,"// Returns the GUID for the function name after canonicalization. For; // memprof, we remove any .llvm suffix added by LTO. MemProfRecords are; // mapped to functions using this GUID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:178,Usability,GUID,GUID,178,"// Returns the GUID for the function name after canonicalization. For; // memprof, we remove any .llvm suffix added by LTO. MemProfRecords are; // mapped to functions using this GUID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:64,Security,hash,hash,64,// Trait for reading IndexedMemProfRecord data from the on-disk hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:62,Security,hash,hash,62,// Trait for writing IndexedMemProfRecord data to the on-disk hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:153,Security,hash,hash,153,"// Clear the IndexedMemProfRecord which results in clearing/freeing its; // vectors of allocs and callsites. This is owned by the associated on-disk; // hash table, but unused after this point. See also the comment added to; // the client which constructs the on-disk hash table for this trait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:268,Security,hash,hash,268,"// Clear the IndexedMemProfRecord which results in clearing/freeing its; // vectors of allocs and callsites. This is owned by the associated on-disk; // hash table, but unused after this point. See also the comment added to; // the client which constructs the on-disk hash table for this trait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:3,Usability,Clear,Clear,3,"// Clear the IndexedMemProfRecord which results in clearing/freeing its; // vectors of allocs and callsites. This is owned by the associated on-disk; // hash table, but unused after this point. See also the comment added to; // the client which constructs the on-disk hash table for this trait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:51,Usability,clear,clearing,51,"// Clear the IndexedMemProfRecord which results in clearing/freeing its; // vectors of allocs and callsites. This is owned by the associated on-disk; // hash table, but unused after this point. See also the comment added to; // the client which constructs the on-disk hash table for this trait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:51,Security,hash,hash,51,// Trait for writing frame mappings to the on-disk hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:53,Security,hash,hash,53,// Trait for reading frame mappings from the on-disk hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:29,Security,hash,hash,29,// A mapping from FrameId (a hash of the contents) to the frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:33,Security,hash,hash,33,"// A mapping from function GUID, hash of the canonical function symbol to the; // memprof profile data for that function, i.e allocation and callsite info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:27,Usability,GUID,GUID,27,"// A mapping from function GUID, hash of the canonical function symbol to the; // memprof profile data for that function, i.e allocation and callsite info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:30,Security,sanitiz,sanitizer,30,// Map from id (recorded from sanitizer stack depot) to virtual addresses for; // each program counter address in the callstack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:35,Safety,sanity check,sanity checking,35,// Create a RawMemProfReader after sanity checking the contents of the file at; // \p Path or the \p Buffer. The binary from which the profile has been; // collected is specified via a path in \p ProfiledBinary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:155,Availability,error,error,155,// We don't call initialize here since there is no raw profile to read. The; // test should pass in the raw profile as structured data.; // If there is an error here then the mock symbolizer has not been; // initialized properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:80,Testability,test,test,80,// We don't call initialize here since there is no raw profile to read. The; // test should pass in the raw profile as structured data.; // If there is an error here then the mock symbolizer has not been; // initialized properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:175,Testability,mock,mock,175,// We don't call initialize here since there is no raw profile to read. The; // test should pass in the raw profile as structured data.; // If there is an error here then the mock symbolizer has not been; // initialized properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:17,Performance,cache,cache,17,"// Symbolize and cache all the virtual addresses we encounter in the; // callstacks from the raw profile. Also prune callstack frames which we can't; // symbolize or those that belong to the runtime. For profile entries where; // the entire callstack is pruned, we drop the entry from the profile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:17,Performance,load,load,17,// The preferred load address of the executable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:3,Performance,Cache,Cached,3,// Cached symbolization from PC to Frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:56,Security,hash,hashing,56,// Whether to keep the symbol name for each frame after hashing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:20,Security,hash,hash,20,"// A mapping of the hash to symbol name, only used if KeepSymbolName is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:16,Availability,error,error,16,// Prefer first error encountered as later errors may be secondary effects of; // the initial problem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:43,Availability,error,errors,43,// Prefer first error encountered as later errors may be secondary effects of; // the initial problem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:3,Safety,Avoid,Avoid,3,// Avoid -Wcovered-switch-default,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:72,Security,access,accessed,72,// Store MD5 in fixed length instead of ULEB128 so NameTable can be; // accessed like an array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:188,Integrability,wrap,wrapping,188,"/// Increment the number of samples for this record by \p S.; /// Optionally scale sample count \p S by \p Weight.; ///; /// Sample counts accumulate using saturating arithmetic, to avoid wrapping; /// around unsigned integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:182,Safety,avoid,avoid,182,"/// Increment the number of samples for this record by \p S.; /// Optionally scale sample count \p S by \p Weight.; ///; /// Sample counts accumulate using saturating arithmetic, to avoid wrapping; /// around unsigned integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:175,Integrability,wrap,wrapping,175,"/// Add called function \p F with samples \p S.; /// Optionally scale sample count \p S by \p Weight.; ///; /// Sample counts accumulate using saturating arithmetic, to avoid wrapping; /// around unsigned integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:169,Safety,avoid,avoid,169,"/// Add called function \p F with samples \p S.; /// Optionally scale sample count \p S by \p Weight.; ///; /// Sample counts accumulate using saturating arithmetic, to avoid wrapping; /// around unsigned integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:18,Integrability,wrap,wrapped,18,"// Note that `[]` wrapped input indicates a full context string, otherwise; // it's treated as context-less function name only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:37,Usability,clear,clear,37,/// Set the name of the function and clear the current context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:41,Deployability,update,update,41,// Accumulate all call target samples to update the body samples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:190,Availability,error,error,190,"/// Return the number of samples collected at the given location.; /// Each location is specified by \p LineOffset and \p Discriminator.; /// If the location is not found in profile, return error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:187,Availability,error,error,187,"/// Returns the call target map collected at a given location.; /// Each location is specified by \p LineOffset and \p Discriminator.; /// If the location is not found in profile, return error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:141,Availability,error,error,141,"/// Returns the call target map collected at a given location specified by \p; /// CallSite. If the location is not found in profile, return error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:20,Security,hash,hash,20,// Set the function hash code for the target profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:48,Security,hash,hash,48,"// The two profiles coming with different valid hash codes indicates; // either:; // 1. They are same-named static functions from different compilation; // units (without using -unique-internal-linkage-names), or; // 2. They are really the same function but from different compilations.; // Let's bail out in either case for now, which means one profile is; // dropped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:158,Usability,GUID,GUID,158,"/// Recursively traverses all children, if the total sample count of the; /// corresponding function is no less than \p Threshold, add its corresponding; /// GUID to \p S. Also traverse the BodySamples to add hot CallTarget's GUID; /// to \p S.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:226,Usability,GUID,GUID,226,"/// Recursively traverses all children, if the total sample count of the; /// corresponding function is no less than \p Threshold, add its corresponding; /// GUID to \p S. Also traverse the BodySamples to add hot CallTarget's GUID; /// to \p S.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:44,Availability,avail,available,44,"// Import hot CallTargets, which may not be available in IR because full; // profile annotation cannot be done until backend compilation in ThinLTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:58,Safety,avoid,avoid,58,/// Name suffixes which canonicalization should handle to avoid; /// profile mismatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:191,Usability,GUID,GUID,191,"/// Translate \p Func into its original name.; /// When profile doesn't use MD5, \p Func needs no translation.; /// When profile uses MD5, \p Func in current FunctionSamples; /// is actually GUID of the original function name. getFuncName will; /// translate \p Func in current FunctionSamples into its original name; /// by looking up in the function map GUIDToFuncNameMap.; /// If the original name doesn't exist in the map, return empty StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:356,Usability,GUID,GUIDToFuncNameMap,356,"/// Translate \p Func into its original name.; /// When profile doesn't use MD5, \p Func needs no translation.; /// When profile uses MD5, \p Func in current FunctionSamples; /// is actually GUID of the original function name. getFuncName will; /// translate \p Func in current FunctionSamples into its original name; /// by looking up in the function map GUIDToFuncNameMap.; /// If the original name doesn't exist in the map, return empty StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:105,Integrability,wrap,wrapper,105,"/// Returns a unique call site identifier for a given debug location of a call; /// instruction. This is wrapper of two scenarios, the probe-based profile and; /// regular profile, to hide implementation details from the sample loader and; /// the context tracker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:228,Performance,load,loader,228,"/// Returns a unique call site identifier for a given debug location of a call; /// instruction. This is wrapper of two scenarios, the probe-based profile and; /// regular profile, to hide implementation details from the sample loader and; /// the context tracker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:21,Security,hash,hash,21,/// Returns a unique hash code for a combination of a callsite location and; /// the callee function name.; /// Guarantee MD5 and non-MD5 representation of the same function results in; /// the same hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:199,Security,hash,hash,199,/// Returns a unique hash code for a combination of a callsite location and; /// the callee function name.; /// Guarantee MD5 and non-MD5 representation of the same function results in; /// the same hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:4,Usability,GUID,GUIDToFuncNameMap,4,"/// GUIDToFuncNameMap saves the mapping from GUID to the symbol name, for; /// all the function symbols defined or declared in current module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:45,Usability,GUID,GUID,45,"/// GUIDToFuncNameMap saves the mapping from GUID to the symbol name, for; /// all the function symbols defined or declared in current module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:91,Security,hash,hash,91,"/// Return the GUID of the context's name. If the context is already using; /// MD5, don't hash it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:15,Usability,GUID,GUID,15,"/// Return the GUID of the context's name. If the context is already using; /// MD5, don't hash it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:8,Security,hash,hash,8,/// CFG hash value for the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:31,Usability,clear,clear,31,// Retain the profile name and clear the full context for each function; // profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:26,Security,checksum,checksum,26,"// To retain the context, checksum, attributes of the original profile, make; // a copy of it if no profile is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:3,Usability,Clear,Clear,3,// Clear nested inlinees' samples for the flattened copy. These inlinees; // will have their own top-level entries after flattening.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:3,Deployability,Update,Update,3,// Update total samples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:94,Modifiability,variab,variable,94,// Determine whether or not to compress the symbol list when; // writing it into profile. The variable is unused when the symbol; // list is read from an existing profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:31,Security,hash,hash,31,"// Prepend ""__uniq"" before the hash for tools like profilers to understand; // that this symbol is of internal linkage type. The ""__uniq"" is the; // pre-determined prefix that is used to tell tools that this symbol was; // created with -funique-internal-linkage-symbols and the tools can strip or; // keep the prefix as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1527,Availability,error,error,1527,"r; // to document them in the Clang documentation at; // tools/clang/docs/UsersManual.rst.; //; // Text format; // -----------; //; // Sample profiles are written as ASCII text. The file is divided into; // sections, which correspond to each of the functions executed at runtime.; // Each section has the following format; //; // function1:total_samples:total_head_samples; // offset1[.discriminator]: number_of_samples [fn1:num fn2:num ... ]; // offset2[.discriminator]: number_of_samples [fn3:num fn4:num ... ]; // ...; // offsetN[.discriminator]: number_of_samples [fn5:num fn6:num ... ]; // offsetA[.discriminator]: fnA:num_of_total_samples; // offsetA1[.discriminator]: number_of_samples [fn7:num fn8:num ... ]; // ...; // !CFGChecksum: num; // !Attribute: flags; //; // This is a nested tree in which the indentation represents the nesting level; // of the inline stack. There are no blank lines in the file. And the spacing; // within a single line is fixed. Additional spaces will result in an error; // while reading the file.; //; // Any line starting with the '#' character is completely ignored.; //; // Inlined calls are represented with indentation. The Inline stack is a; // stack of source locations in which the top of the stack represents the; // leaf function, and the bottom of the stack represents the actual; // symbol to which the instruction belongs.; //; // Function names must be mangled in order for the profile loader to; // match them in the current translation unit. The two numbers in the; // function header specify how many total samples were accumulated in the; // function (first number), and the total number of samples accumulated; // in the prologue of the function (second number). This head sample; // count provides an indicator of how frequently the function is invoked.; //; // There are three types of lines in the function body.; //; // * Sampled line represents the profile information of a source location.; // * Callsite line represents the profile inf",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1964,Performance,load,loader,1964,"m ... ]; // offset2[.discriminator]: number_of_samples [fn3:num fn4:num ... ]; // ...; // offsetN[.discriminator]: number_of_samples [fn5:num fn6:num ... ]; // offsetA[.discriminator]: fnA:num_of_total_samples; // offsetA1[.discriminator]: number_of_samples [fn7:num fn8:num ... ]; // ...; // !CFGChecksum: num; // !Attribute: flags; //; // This is a nested tree in which the indentation represents the nesting level; // of the inline stack. There are no blank lines in the file. And the spacing; // within a single line is fixed. Additional spaces will result in an error; // while reading the file.; //; // Any line starting with the '#' character is completely ignored.; //; // Inlined calls are represented with indentation. The Inline stack is a; // stack of source locations in which the top of the stack represents the; // leaf function, and the bottom of the stack represents the actual; // symbol to which the instruction belongs.; //; // Function names must be mangled in order for the profile loader to; // match them in the current translation unit. The two numbers in the; // function header specify how many total samples were accumulated in the; // function (first number), and the total number of samples accumulated; // in the prologue of the function (second number). This head sample; // count provides an indicator of how frequently the function is invoked.; //; // There are three types of lines in the function body.; //; // * Sampled line represents the profile information of a source location.; // * Callsite line represents the profile information of a callsite.; // * Metadata line represents extra metadata of the function.; //; // Each sampled line may contain several items. Some are optional (marked; // below):; //; // a. Source line offset. This number represents the line number; // in the function where the sample was collected. The line number is; // always relative to the line where symbol of the function is; // defined. So, if the function has its header at l",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:3366,Performance,optimiz,optimizers,3366,"//; // There are three types of lines in the function body.; //; // * Sampled line represents the profile information of a source location.; // * Callsite line represents the profile information of a callsite.; // * Metadata line represents extra metadata of the function.; //; // Each sampled line may contain several items. Some are optional (marked; // below):; //; // a. Source line offset. This number represents the line number; // in the function where the sample was collected. The line number is; // always relative to the line where symbol of the function is; // defined. So, if the function has its header at line 280, the offset; // 13 is at line 293 in the file.; //; // Note that this offset should never be a negative number. This could; // happen in cases like macros. The debug machinery will register the; // line number at the point of macro expansion. So, if the macro was; // expanded in a line before the start of the function, the profile; // converter should emit a 0 as the offset (this means that the optimizers; // will not be able to associate a meaningful weight to the instructions; // in the macro).; //; // b. [OPTIONAL] Discriminator. This is used if the sampled program; // was compiled with DWARF discriminator support; // (http://wiki.dwarfstd.org/index.php?title=Path_Discriminators).; // DWARF discriminators are unsigned integer values that allow the; // compiler to distinguish between multiple execution paths on the; // same source line location.; //; // For example, consider the line of code ``if (cond) foo(); else bar();``.; // If the predicate ``cond`` is true 80% of the time, then the edge; // into function ``foo`` should be considered to be taken most of the; // time. But both calls to ``foo`` and ``bar`` are at the same source; // line, so a sample count at that line is not sufficient. The; // compiler needs to know which part of that line is taken more; // frequently.; //; // This is what discriminators provide. In this case, the calls to; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6110,Security,Checksum,Checksum,6110,"llsite line may contain several items. Some are optional.; //; // a. Source line offset. This number represents the line number of the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMM",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6136,Security,hash,hash,6136,"s. Some are optional.; //; // a. Source line offset. This number represents the line number of the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMMARY; // A list of detailed summary e",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6178,Security,Checksum,Checksum,6178,"the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMMARY; // A list of detailed summary entry. Each entry consists of; // CUTOFF (uint32_t); // Required percentile of total sample coun",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1147,Energy Efficiency,efficient,efficient,1147,"/// Sample-based profile reader.; ///; /// Each profile contains sample counts for all the functions; /// executed. Inside each function, statements are annotated with the; /// collected samples on all the instructions associated with that; /// statement.; ///; /// For this to produce meaningful data, the program needs to be; /// compiled with some debug information (at minimum, line numbers:; /// -gline-tables-only). Otherwise, it will be impossible to match IR; /// instructions to the line numbers collected by the profiler.; ///; /// From the profile file, we are interested in collecting the; /// following information:; ///; /// * A list of functions included in the profile (mangled names).; ///; /// * For each function F:; /// 1. The total number of samples collected in F.; ///; /// 2. The samples collected at each line in F. To provide some; /// protection against source code shuffling, line numbers should; /// be relative to the start of the function.; ///; /// The reader supports two file formats: text and binary. The text format; /// is useful for debugging and testing, while the binary format is more; /// compact and I/O efficient. They can both be used interchangeably.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1085,Testability,test,testing,1085,"/// Sample-based profile reader.; ///; /// Each profile contains sample counts for all the functions; /// executed. Inside each function, statements are annotated with the; /// collected samples on all the instructions associated with that; /// statement.; ///; /// For this to produce meaningful data, the program needs to be; /// compiled with some debug information (at minimum, line numbers:; /// -gline-tables-only). Otherwise, it will be impossible to match IR; /// instructions to the line numbers collected by the profiler.; ///; /// From the profile file, we are interested in collecting the; /// following information:; ///; /// * A list of functions included in the profile (mangled names).; ///; /// * For each function F:; /// 1. The total number of samples collected in F.; ///; /// 2. The samples collected at each line in F. To provide some; /// protection against source code shuffling, line numbers should; /// be relative to the start of the function.; ///; /// The reader supports two file formats: text and binary. The text format; /// is useful for debugging and testing, while the binary format is more; /// compact and I/O efficient. They can both be used interchangeably.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,Security,validat,validate,13,/// Read and validate the file header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:77,Availability,mask,mask,77,"/// Get the bitmask the discriminators: For FS profiles, return the bit; /// mask for this pass. For non FS profiles, return (unsigned) -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:8,Integrability,interface,interface,8,/// The interface to read sample profiles from the associated file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:82,Performance,load,loading,82,"/// Collect functions with definitions in Module M. For reader which; /// support loading function profiles on demand, return true when the; /// reader has been given a module. Always return false for reader; /// which doesn't support loading function profiles on demand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:235,Performance,load,loading,235,"/// Collect functions with definitions in Module M. For reader which; /// support loading function profiles on demand, return true when the; /// reader has been given a module. Always return false for reader; /// which doesn't support loading function profiles on demand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:35,Deployability,update,updated,35,// The function name may have been updated by adding suffix. Call; // a helper to (optionally) strip off suffixes so that we can; // match against the original function name in the profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:19,Availability,error,error,19,/// Report a parse error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:25,Integrability,message,message,25,/// Report a parse error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:52,Availability,Mask,MaskedBitFrom,52,/// Zero out the discriminator bits higher than bit MaskedBitFrom (0 based).; /// The default is to keep all the bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,Security,validat,validate,13,/// Read and validate the file header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,Security,validat,validate,13,/// Read and validate the file header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:69,Availability,error,error,69,"/// Read a numeric value of type T from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:112,Integrability,message,message,112,"/// Read a numeric value of type T from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:52,Availability,error,error,52,"/// Read a string from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:95,Integrability,message,message,95,"/// Read a string from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:138,Security,hash,hash,138,"/// Read a context indirectly via the CSNameTable if the profile has context,; /// otherwise same as readStringFromTable, also return its hash value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,Performance,cache,cache,13,"/// Table to cache MD5 values of sample contexts corresponding to; /// readSampleContextFromTable(), used to index into Profiles or; /// FuncOffsetTable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:156,Security,hash,hashes,156,/// The starting address of the table of MD5 values of sample contexts. For; /// fixed length MD5 non-CS profile it is same as MD5NameMemStart because; /// hashes of non-CS contexts are already in the profile. Otherwise it points; /// to the start of MD5SampleContextTable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:598,Modifiability,extend,extend,598,"/// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase defines; /// the basic structure of the extensible binary format.; /// The format is organized in sections except the magic and version number; /// at the beginning. There is a section table before all the sections, and; /// each entry in the table describes the entry type, start, size and; /// attributes. The format in each section is defined by the section itself.; ///; /// It is easy to add a new section while maintaining the backward; /// compatibility of the profile. Nothing extra needs to be done. If we want; /// to extend an existing section, like add cache misses information in; /// addition to the sample count in the profile body, we can add a new section; /// with the extension and retire the existing section, and we could choose; /// to keep the parser of the old section if we want the reader to be able; /// to read both new and old format profile.; ///; /// SampleProfileReaderExtBinary/SampleProfileWriterExtBinary define the; /// commonly used sections of a profile in extensible binary format. It is; /// possible to define other types of profile inherited from; /// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1144,Modifiability,inherit,inherited,1144,"/// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase defines; /// the basic structure of the extensible binary format.; /// The format is organized in sections except the magic and version number; /// at the beginning. There is a section table before all the sections, and; /// each entry in the table describes the entry type, start, size and; /// attributes. The format in each section is defined by the section itself.; ///; /// It is easy to add a new section while maintaining the backward; /// compatibility of the profile. Nothing extra needs to be done. If we want; /// to extend an existing section, like add cache misses information in; /// addition to the sample count in the profile body, we can add a new section; /// with the extension and retire the existing section, and we could choose; /// to keep the parser of the old section if we want the reader to be able; /// to read both new and old format profile.; ///; /// SampleProfileReaderExtBinary/SampleProfileWriterExtBinary define the; /// commonly used sections of a profile in extensible binary format. It is; /// possible to define other types of profile inherited from; /// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:635,Performance,cache,cache,635,"/// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase defines; /// the basic structure of the extensible binary format.; /// The format is organized in sections except the magic and version number; /// at the beginning. There is a section table before all the sections, and; /// each entry in the table describes the entry type, start, size and; /// attributes. The format in each section is defined by the section itself.; ///; /// It is easy to add a new section while maintaining the backward; /// compatibility of the profile. Nothing extra needs to be done. If we want; /// to extend an existing section, like add cache misses information in; /// addition to the sample count in the profile body, we can add a new section; /// with the extension and retire the existing section, and we could choose; /// to keep the parser of the old section if we want the reader to be able; /// to read both new and old format profile.; ///; /// SampleProfileReaderExtBinary/SampleProfileWriterExtBinary define the; /// commonly used sections of a profile in extensible binary format. It is; /// possible to define other types of profile inherited from; /// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:83,Security,access,accessed,83,/// The list version of FuncOffsetTable. This is used if every entry is; /// being accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:3,Deployability,Update,Update,3,// Update the data reader pointer to the end of the section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,Security,validat,validate,13,/// Read and validate the file header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:164,Performance,load,load,164,"// The layout splits profile with context information from profile without; // context information. When Thinlto is enabled, ThinLTO postlink phase only; // has to load profile with context information and can skip the other part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:94,Energy Efficiency,reduce,reduce,94,"/// When writing a profile with size limit, user may want to use a different; /// strategy to reduce function count other than dropping functions with fewest; /// samples first. In this case a class implementing the same interfaces should; /// be provided to SampleProfileWriter::writeWithSizeLimit().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:221,Integrability,interface,interfaces,221,"/// When writing a profile with size limit, user may want to use a different; /// strategy to reduce function count other than dropping functions with fewest; /// samples first. In this case a class implementing the same interfaces should; /// be provided to SampleProfileWriter::writeWithSizeLimit().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:78,Deployability,update,update,78,/// Write sample profiles in \p S.; ///; /// \returns status code of the file update operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:106,Deployability,update,update,106,/// Write all the sample profiles in the given map of samples.; ///; /// \returns status code of the file update operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:162,Deployability,update,update,162,"/// Write sample profiles up to given size limit, using the pruning strategy; /// to drop some functions if necessary.; ///; /// \returns status code of the file update operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:73,Testability,test,testing,73,/// Create a new stream writer based on the value of \p Format.; /// For testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:51,Modifiability,variab,variable-length,51,// MD5 will be stored as plain uint64_t instead of variable-length; // quantity format in NameTable section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:107,Performance,load,load,107,// FuncOffsetTable maps function context to its profile offset in; // SecLBRProfile section. It is used to load function profile on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:87,Safety,avoid,avoids,87,/// A Counter expression builder is used to construct the counter expressions.; /// It avoids unnecessary duplication and simplifies algebraic expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:122,Usability,simpl,simplifies,122,/// A Counter expression builder is used to construct the counter expressions.; /// It avoids unnecessary duplication and simplifies algebraic expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:204,Usability,simpl,simplified,204,/// Gather the terms of the expression tree for processing.; ///; /// This collects each addition and subtraction referenced by the counter into; /// a sequence that can be sorted and combined to build a simplified counter; /// expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:78,Availability,redundant,redundant,78,/// Simplifies the given expression tree; /// by getting rid of algebraically redundant operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:78,Safety,redund,redundant,78,/// Simplifies the given expression tree; /// by getting rid of algebraically redundant operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:4,Usability,Simpl,Simplifies,4,/// Simplifies the given expression tree; /// by getting rid of algebraically redundant operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:93,Modifiability,variab,variable,93,/// A DecisionRegion represents a top-level boolean expression and is; /// associated with a variable length bitmap index and condition number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:27,Modifiability,extend,extended,27,/// A Branch Region can be extended to include IDs to facilitate MC/DC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:138,Availability,mask,mask,138,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:70,Testability,test,test,70,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:216,Testability,log,logical,216,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:330,Testability,test,test,330,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:303,Security,access,accessing,303,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:86,Testability,test,test,86,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:112,Testability,Test,TestVectorIndex,112,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:331,Testability,Test,TestVectors,331,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:49,Testability,test,test,49,/// Return the Result evaluation for an executed test vector.; /// See MCDCRecordProcessor::RecordTestVector().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:195,Security,access,accessing,195,"/// Determine whether a given condition (indicated by Condition) is covered; /// by an Independence Pair. Because condition IDs are not associated based; /// on their position in the expression, accessing conditions in the; /// TestVectors requires a translation from a ordinal position to actual; /// condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:228,Testability,Test,TestVectors,228,"/// Determine whether a given condition (indicated by Condition) is covered; /// by an Independence Pair. Because condition IDs are not associated based; /// on their position in the expression, accessing conditions in the; /// TestVectors requires a translation from a ordinal position to actual; /// condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:160,Security,access,accessing,160,"/// Return the Independence Pair that covers the given condition. Because; /// condition IDs are not associated based on their position in the; /// expression, accessing conditions in the TestVectors requires a; /// translation from a ordinal position to actual condition ID. This is done; /// via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:188,Testability,Test,TestVectors,188,"/// Return the Independence Pair that covers the given condition. Because; /// condition IDs are not associated based on their position in the; /// expression, accessing conditions in the TestVectors requires a; /// translation from a ordinal position to actual condition ID. This is done; /// via PosToID[].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:50,Testability,test,test,50,/// Return an MCDC record that indicates executed test vectors and condition; /// pairs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:253,Performance,perform,performance,253,/// Mapping from FileID (i.e. vector index) to filename. Used to support; /// macro expansions within a function in which the macro and function are; /// defined in separate files.; ///; /// TODO: Uniquing filenames across all function records may be a performance; /// optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:270,Performance,optimiz,optimization,270,/// Mapping from FileID (i.e. vector index) to filename. Used to support; /// macro expansions within a function in which the macro and function are; /// defined in separate files.; ///; /// TODO: Uniquing filenames across all function records may be a performance; /// optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:164,Usability,simpl,simple,164,/// The execution count information starting at a point in a file.; ///; /// A sequence of CoverageSegments gives execution counts for a file in format; /// that's simple to iterate through for processing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:84,Integrability,interface,interface,84,"/// The mapping of profile information to coverage data.; ///; /// This is the main interface to get coverage information, using a profile to; /// fill out execution counts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:3,Performance,Load,Load,3,// Load coverage records from readers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:3,Performance,Load,Load,3,// Load coverage records from file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:285,Availability,robust,robust,285,/// Look up the indices for function records which are at least partially; /// defined in the specified file. This is guaranteed to return a superset of; /// such records: extra records not in the file may be included if there is; /// a hash collision on the filename. Clients must be robust to collisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:237,Security,hash,hash,237,/// Look up the indices for function records which are at least partially; /// defined in the specified file. This is guaranteed to return a superset of; /// such records: extra records not in the file may be included if there is; /// a hash collision on the filename. Clients must be robust to collisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:4,Performance,Load,Load,4,/// Load the coverage mapping using the given readers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:4,Performance,Load,Load,4,"/// Load the coverage mapping from the given object files and profile. If; /// \p Arches is non-empty, it must specify an architecture for each object.; /// Ignores non-instrumented object files unless all are not instrumented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:6,Security,hash,hash,6,"/// A hash mismatch occurs when a profile record for a symbol does not have; /// the same hash as a coverage mapping record for the same symbol. This; /// returns a list of hash mismatches, where each mismatch is a pair of the; /// symbol name and its coverage mapping hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:90,Security,hash,hash,90,"/// A hash mismatch occurs when a profile record for a symbol does not have; /// the same hash as a coverage mapping record for the same symbol. This; /// returns a list of hash mismatches, where each mismatch is a pair of the; /// symbol name and its coverage mapping hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:173,Security,hash,hash,173,"/// A hash mismatch occurs when a profile record for a symbol does not have; /// the same hash as a coverage mapping record for the same symbol. This; /// returns a list of hash mismatches, where each mismatch is a pair of the; /// symbol name and its coverage mapping hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:269,Security,hash,hash,269,"/// A hash mismatch occurs when a profile record for a symbol does not have; /// the same hash as a coverage mapping record for the same symbol. This; /// returns a list of hash mismatches, where each mismatch is a pair of the; /// symbol name and its coverage mapping hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:781,Security,access,accessors,781,"// Coverage mappping data (V2) has the following layout:; // IPSK_covmap:; // [CoverageMapFileHeader]; // [ArrayStart]; // [CovMapFunctionRecordV2]; // [CovMapFunctionRecordV2]; // ...; // [ArrayEnd]; // [Encoded Filenames and Region Mapping Data]; //; // Coverage mappping data (V3) has the following layout:; // IPSK_covmap:; // [CoverageMapFileHeader]; // [Encoded Filenames]; // IPSK_covfun:; // [ArrayStart]; // odr_name_1: [CovMapFunctionRecordV3]; // odr_name_2: [CovMapFunctionRecordV3]; // ...; // [ArrayEnd]; //; // Both versions of the coverage mapping format encode the same information,; // but the V3 format does so more compactly by taking advantage of linkonce_odr; // semantics (it allows exactly 1 function record per name reference).; /// This namespace defines accessors shared by different versions of coverage; /// mapping records.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:26,Security,hash,hash,26,/// Return the structural hash associated with the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:86,Security,hash,hash,86,/// Return the PGO name of the function. Used for formats in which the name is; /// a hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:17,Security,access,accessors,17,// end namespace accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:18,Modifiability,extend,extended,18,// Branch regions extended and Decision Regions added for MC/DC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:57,Testability,test,testdata,57,"// The first version's number corresponds to the string ""testdata"" in; // little-endian. This is for a historical reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:15,Testability,test,testing,15,// The current testing format version is Version2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h:36,Testability,test,testing,36,/// Writer for the coverage mapping testing format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:24,Integrability,depend,depending,24,"/// The parsed content: depending on the container type, some fields might be; /// empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:38,Availability,avail,available,38,/// Parse the META_BLOCK and fill the available entries.; /// This helper does not check for the validity of the fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:24,Integrability,depend,depending,24,"/// The parsed content: depending on the remark, some fields might be empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:4,Safety,Avoid,Avoid,4,/// Avoid re-allocating a vector every time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:40,Availability,avail,available,40,/// Parse the REMARK_BLOCK and fill the available entries.; /// This helper does not check for the validity of the fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h:185,Deployability,update,update,185,"/// Abbrev IDs initialized in the block info block.; /// Note: depending on the container type, some IDs might be uninitialized.; /// Warning: When adding more abbrev IDs, make sure to update the; /// BlockCodeSize (in the call to EnterSubblock).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h:63,Integrability,depend,depending,63,"/// Abbrev IDs initialized in the block info block.; /// Note: depending on the container type, some IDs might be uninitialized.; /// Warning: When adding more abbrev IDs, make sure to update the; /// BlockCodeSize (in the call to EnterSubblock).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h:419,Usability,simpl,simple,419,"//===- HotnessThresholdParser.h - Parser for hotness threshold --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a simple parser to decode commandline option for; /// remarks hotness threshold that supports both int and a special 'auto' value.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h:5,Usability,simpl,simple,5,// A simple CL parser for '*-remarks-hotness-threshold=',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:30,Availability,avail,available,30,"/// If profile information is available, this is the number of times the; /// corresponding code was executed in a profile instrumentation run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:42,Integrability,interface,interface,42,/// Arguments collected via the streaming interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:13,Integrability,message,message,13,/// Return a message composed from the arguments as a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:16,Safety,avoid,avoid,16,"/// In order to avoid unwanted copies, ""delete"" the copy constructor.; /// If a copy is needed, it should be done through `Remark::clone()`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:48,Integrability,depend,dependent,48,/// Comparison operators for Remark objects and dependent objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h:14,Security,validat,validate,14,/// Parse and validate a string for the remark format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h:14,Security,validat,validate,14,/// Parse and validate a magic number to a remark format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:405,Integrability,interface,interface,405,"//===-- llvm/Remarks/RemarkLinker.h -----------------------------*- C++/-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface to link together multiple remark files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:115,Safety,avoid,avoid,115,/// The main string table for the remarks.; /// Note: all remarks should use the strings from this string table to avoid; /// dangling references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:103,Usability,clear,clears,103,"/// Serialize the linked remarks to the stream \p OS, using the format \p; /// RemarkFormat.; /// This clears internal state such as the string table.; /// Note: this implies that the serialization mode is standalone.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:62,Integrability,depend,depending,62,"/// Returns a buffer with the contents of the remarks section depending on the; /// format of the file. If the section doesn't exist, this returns an empty; /// optional.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:405,Integrability,interface,interface,405,"//===-- llvm/Remarks/Remark.h - The remark type -----------------*- C++/-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for parsing remarks in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:10,Availability,error,error,10,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:71,Availability,error,error,71,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:122,Availability,recover,recover,122,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:186,Availability,error,error,186,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:114,Safety,safe,safe,114,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h:122,Safety,recover,recover,122,"/// If no error occurs, this returns a valid Remark object.; /// If an error of type EndOfFileError occurs, it is safe to recover from it; /// by stopping the parsing.; /// If any other error occurs, it should be propagated to the user.; /// The pointer should never be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h:50,Integrability,interface,interface,50,"//===-- RemarkSerializer.h - Remark serialization interface -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for serializing remarks to different formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h:405,Integrability,interface,interface,405,"//===-- RemarkSerializer.h - Remark serialization interface -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for serializing remarks to different formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h:20,Integrability,interface,interface,20,/// This is just an interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h:20,Integrability,interface,interface,20,/// This is just an interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h:1158,Deployability,pipeline,pipeline,1158,"//===- llvm/Remarks/RemarkStreamer.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the main interface for streaming remarks.; //; // This is used to stream any llvm::remarks::Remark to an open file taking; // advantage of all the serialization capabilities developed for remarks (e.g.; // metadata in a section, bitstream format, etc.).; //; // Typically, a specialized remark emitter should hold a reference to the main; // remark streamer set up in the LLVMContext, and should convert specialized; // diagnostics to llvm::remarks::Remark objects as they get emitted.; //; // Specialized remark emitters can be components like:; // * Remarks from LLVM (M)IR passes; // * Remarks from the frontend; // * Remarks from an intermediate IR; //; // This allows for composition between specialized remark emitters throughout; // the compilation pipeline, that end up in the same file, using the same format; // and serialization techniques.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h:411,Integrability,interface,interface,411,"//===- llvm/Remarks/RemarkStreamer.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the main interface for streaming remarks.; //; // This is used to stream any llvm::remarks::Remark to an open file taking; // advantage of all the serialization capabilities developed for remarks (e.g.; // metadata in a section, bitstream format, etc.).; //; // Typically, a specialized remark emitter should hold a reference to the main; // remark streamer set up in the LLVMContext, and should convert specialized; // diagnostics to llvm::remarks::Remark objects as they get emitted.; //; // Specialized remark emitters can be components like:; // * Remarks from LLVM (M)IR passes; // * Remarks from the frontend; // * Remarks from an intermediate IR; //; // This allows for composition between specialized remark emitters throughout; // the compilation pipeline, that end up in the same file, using the same format; // and serialization techniques.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h:66,Availability,error,error,66,/// Set a pass filter based on a regex \p Filter.; /// Returns an error if the regex is invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/YAMLRemarkSerializer.h:402,Integrability,interface,interface,402,"//===-- YAMLRemarkSerializer.h - YAML Remark serialization ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for serializing remarks to YAML.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Remarks/YAMLRemarkSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/YAMLRemarkSerializer.h
