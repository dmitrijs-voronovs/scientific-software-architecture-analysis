id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html534/THistPainter.html:13112,Usability,clear,cleared,13112,"ifies the type of tick marks on the axis.; If tx = gPad->GetTickx() and ty = gPad->GetTicky() then:. tx = 1; tick marks on top side are drawn (inside); tx = 2; tick marks and labels on top side are drawn; ty = 1; tick marks on right side are drawn (inside); ty = 2; tick marks and labels on right side are drawn. By default only the left Y axis and X bottom axis are drawn; (tx = ty = 0); TPad::SetTicks(tx,ty) allows to set these options.; See also The TAxis functions to set specific axis attributes.; In case multiple color filled histograms are drawn on the same pad, the fill; area may hide the axis tick marks. One can force a redraw of the axis over all; the histograms by calling:. gPad->RedrawAxis();. Giving titles to the X, Y and Z axis. h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");. The histogram title and the axis titles can be any TLatex string.; The titles are part of the persistent histogram.; The option ""SAME""; By default, when an histogram is drawn, the current pad is cleared before; drawing. In order to keep the previous drawing and draw on top of it the; option ""SAME"" should be use. The histogram drawn with the option; ""SAME"" uses the coordinates system available in the current pad. This option can be used alone or combined with any valid drawing option but; some combinations must be use with care.; Limitations. It does not work when; combined with the ""LEGO"" and ""SURF"" options unless the; histogram plotted with the option ""SAME"" has exactly the same; ranges on the X, Y and Z axis as the currently drawn histogram. To superimpose; lego plots histograms' stacks should be used. Superimposing two histograms with different scales in the same pad; The following example creates two histograms, the second histogram is the bins; integral of the first one. It shows a procedure to draw the two histograms in; the same pad and it draws the scale of the second histogram using a new vertical; axis on the right side. See also the tutor",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:21662,Usability,simpl,simple,21662,"3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; 2D histograms can be drawn with error bars as shown is the following example:. Picture; Source. {; TCanvas *c2e = new TCanvas(""c2e"",""c2e"",600,400);; TH2F *h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2e->Fill(px,5*py);; }; h2e->Draw(""E"");; return c2e;; }; The bar chart option; The option ""B"" allows to draw simple vertical bar charts.; The bar width is controlled with TH1::SetBarWidth(),; and the bar offset wihtin the bin, with TH1::SetBarOffset().; These two settings are useful to draw several histograms on the; same plot as shown in the following example:. Picture; Source. {; int i;; const Int_t nx = 8;; char *os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. TCanvas *cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();. gStyle->SetHistMinimumZero();. TH1F *h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMinimum(-5);; h1b->SetMaximum(5);. for (i=1; i<=nx; i++) {; h1b->Fill(os_X[i-1",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:29820,Usability,simpl,simply,29820," ""Z"" allows to; display the color palette defined by gStyle->SetPalette().; In the following example, the histogram has only positive bins; the empty; bins (containing 0) are not drawn. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcol1 = new TH2F(""hcol1"",""Option COLor example "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol1->Fill(px,5*py);; }; gStyle->SetPalette(1);; hcol1->Draw(""COLZ"");; return c1;; }; In the following example, the histogram has some negative bins; the empty; bins (containing 0) are drawn. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcol2 = new TH2F(""hcol2"",""Option COLor example "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol2->Fill(px,5*py);; }; hcol2->Fill(0.,0.,-200.);; gStyle->SetPalette(1);; hcol2->Draw(""COLZ"");; return c1;; }; The CANDLE option; A Candle plot (also known as; a ""box-and whisker plot"" or simply ""box plot"") is a convenient way to describe; graphically a data distribution (D) with only the five numbers. It was invented; in 1977 by John Tukey. With the option CANDLEX five numbers are:. The minimum value of the distribution D (bottom dashed line).; The lower quartile (Q1): 25% of the data points in D are less than; Q1 (bottom of the box).; The median (M): 50% of the data points in D are less than M; (thick line segment inside the box).; The upper quartile (Q3): 75% of the data points in D are less; than Q3 (top of the box).; The maximum value of the distribution D (top dashed line). The mean value of the distribution D is also represented as a circle. In this implementation a TH2 is considered as a collection of TH1 along; X (option CANDLE or CANDLEX) or Y (option CANDLEY).; Each TH1 is represented as a candle plot. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcandle = new TH2F(""hcandle"",""Option CANDLE example "",40,-4,4,40,-20,20);",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:59031,Usability,simpl,simple,59031,"BarOffset(0.5);; h2bh->SetStats(0);; for (i=1;i<=nx;i++) h2bh->Fill(os_X[i-1], d_35_1[i-1]);. h2bh->Draw(""hbar same"");. return cbh;; }; TH2Poly Drawing; The following options are supported:. ""SCAT""; Draw a scatter plot (default). ""COL""; Draw a color plot. All the none empty bins are painted. Empty bins are not; painted. ""COLZ""; Same as ""COL"". In addition the color palette is also drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTN""; Draw bin names as text. ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""L""; Draw the bins boundaries as lines.; The lines attibutes are the TGraphs ones. ""P""; Draw the bins boundaries as markers.; The markers attibutes are the TGraphs ones. ""F""; Draw the bins boundaries as filled polygons.; The filled polygons attibutes are the TGraphs ones. TH2Poly can; be drawn as a color plot (option COL). TH2Poly bins can have any; shapes. The bins are defined as graphs. The following macro is a very simple; example showing how to book a TH2Poly and draw it. Picture; Source. {; TCanvas *ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; TH2Poly *h2p = new TH2Poly();; h2p->SetName(""h2poly_name"");; h2p->SetTitle(""h2poly_title"");; Double_t px1[] = {0, 5, 6};; Double_t py1[] = {0, 0, 5};; Double_t px2[] = {0, -1, -1, 0};; Double_t py2[] = {0, 0, -1, 3};; Double_t px3[] = {4, 3, 0, 1, 2.4};; Double_t py3[] = {4, 3.7, 1, 3.7, 2.5};; h2p->AddBin(3, px1, py1);; h2p->AddBin(4, px2, py2);; h2p->AddBin(5, px3, py3);; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; Double_t fx[] = {0.1, -0.5, -0.7, 1};; Double_t fy[] = {0.01, -0.5, -0.5, 3};; Double_t fw[] = {3, 1, 1, 1.5};; h2p->FillN(4, fx, fy, fw);; gStyle->SetPalette(1);; h2p->Draw(""col"");; return ch2p1;; }; Rectangular bins are a frequent case. The special version of; the AddBin method allows to define them more easily like; shown in the following example. Picture; Source. //This tutorial illustrates h",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:73722,Usability,simpl,simply,73722,"new TH1F(""hst12"", """", 20, -10, 10);; hst12->FillRandom(""gaus"", 500);; hst12->SetFillColor(kBlue);; hst12->SetLineColor(kBlue);. THStack st1(""st1"", ""st1"");; st1.Add(hst11);; st1.Add(hst12);. cst1->cd(1); st1.Draw();; cst1->cd(2); st1.Draw(""hist"");. return cst1;; }; Drawing of 3D implicit functions; 3D implicit functions (TF3) can be drawn as iso-surfaces.; The implicit function f(x,y,z) = 0 is drawn in cartesian coordinates.; In the following example the options ""FB"" and ""BB"" suppress the; ""Front Box"" and ""Back Box"" around the plot. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",600,400);; TF3 *f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,0);; f3->SetFillColor(30);; f3->SetLineColor(15);; f3->Draw(""FBBB"");; return c2;; }; Associated functions drawing; An associated function is created by TH1::Fit. More than on fitted; function can be associated with one histogram (see TH1::Fit).; A TF1 object f1 can be added to the list of associated; functions of an histogram h without calling TH1::Fit; simply doing:. h->GetListOfFunctions()->Add(f1);. or. h->GetListOfFunctions()->Add(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option HIST; should be added to the list of the options used to paint the histogram.; Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with GL keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a l",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:79572,Usability,Clear,Clear,79572,,MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:88153,Usability,simpl,simple,88153,"raph2DPainter object; TH1*fHpointer to histogram to paint; TPainter3dAlgorithms*fLegopointer to a TPainter3dAlgorithms object; Int_tfNcutsNumber of graphical cuts; TPie*fPiepointer to a TPie in case of option PIE; TStringfShowOptionOption to draw the projection; Int_tfShowProjectionTrue if a projection must be drawn; TList*fStackPointer to stack of histograms (if any); TAxis*fXaxispointer to X axis; Double_t*fXbufX buffer coordinates; TAxis*fYaxispointer to Y axis; Double_t*fYbufY buffer coordinates; TAxis*fZaxispointer to Z axis. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THistPainter(). Default constructor.; ; . ~THistPainter(). Default destructor.; ; . Int_t DistancetoPrimitive(Int_t px, Int_t py). Compute the distance from the point px,py to a line.; ; Compute the closest distance of approach from point px,py to elements of; an histogram. The distance is computed in pixels units.; ; Algorithm:; Currently, this simple model computes the distance from the mouse to the; histogram contour only.; ; . void DrawPanel(). Display a panel with all histogram drawing options.; ; . void ExecuteEvent(Int_t event, Int_t px, Int_t py). Execute the actions corresponding to ""event"".; ; This function is called when a histogram is clicked with the locator at; the pixel position px,py.; ; . TList * GetContourList(Double_t contour) const. Get a contour (as a list of TGraphs) using the Delaunay triangulation.; ; . char * GetObjectInfo(Int_t px, Int_t py) const. Display the histogram info (bin number, contents, integral up to bin; corresponding to cursor position px,py.; ; . Bool_t IsInside(Int_t x, Int_t y). Return kTRUE if the cell ix, iy is inside one of the graphical cuts.; ; . Bool_t IsInside(Double_t x, Double_t y). Return kTRUE if the point x,y is inside one of the graphical cuts.; ; . Int_t MakeChopt(Option_t* option). Decode string ""choptin"" and fill Hoption structure.; ; . Int_t MakeCuts(char* cutsopt). Decode string ""choptin"" an",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THistPainter.html:90853,Usability,clear,clear,90853,"ption). Draw a bar char in a rotated pad (X vertical, Y horizontal).; . void PaintBoxes(Option_t* option). Control function to draw a 2D histogram as a box plot.; . void PaintCandlePlot(Option_t* option). Control function to draw a 2D histogram as a candle (box) plot.; . void PaintViolinPlot(Option_t* option). Control function to draw a 2D histogram as a violin plot.; . void PaintColorLevels(Option_t* option). Control function to draw a 2D histogram as a color plot.; . void PaintContour(Option_t* option). Control function to draw a 2D histogram as a contour plot.; . Int_t PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t* xarr, Double_t* yarr, Int_t* itarr, Double_t* levels). Fill the matrix XARR YARR for Contour Plot.; ; . void PaintErrors(Option_t* option). Draw 1D histograms error bars.; . void Paint2DErrors(Option_t* option). Draw 2D histograms errors.; ; . void PaintFrame(). Calculate range and clear pad (canvas).; ; . void PaintFunction(Option_t* option). Paint functions associated to an histogram.; . void PaintHist(Option_t* option). Control routine to draw 1D histograms.; . void PaintH3(Option_t* option = """"). Control function to draw a 3D histograms.; . Int_t PaintInit(). Compute histogram parameters used by the drawing routines.; ; . Int_t PaintInitH(). Compute histogram parameters used by the drawing routines for a rotated pad.; ; . void PaintH3Iso(). Control function to draw a 3D histogram with Iso Surfaces.; . void PaintLego(Option_t* option). Control function to draw a 2D histogram as a lego plot.; . void PaintLegoAxis(TGaxis* axis, Double_t ang). Draw the axis for legos and surface plots.; ; . void PaintPalette(). Paint the color palette on the right side of the pad.; . void PaintScatterPlot(Option_t* option). Control function to draw a 2D histogram as a scatter plot.; . void PaintSpecialObjects(const TObject* obj, Option_t* option). Static function to paint specia",MatchSource.WIKI,root/html534/THistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THistPainter.html
https://root.cern/root/html534/THLimitsFinder.html:1434,Availability,Error,Error,1434," THLimitsFinder(); THLimitsFinder(const THLimitsFinder&); virtual~THLimitsFinder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:1563,Availability,error,error,1563," THLimitsFinder(); THLimitsFinder(const THLimitsFinder&); virtual~THLimitsFinder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:1647,Availability,error,error,1647," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static THLimitsFinder*GetLimitsFinder(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObjec",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:2859,Modifiability,Inherit,InheritsFrom,2859,"); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static THLimitsFinder*GetLimitsFinder(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:2925,Modifiability,Inherit,InheritsFrom,2925,"x, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static THLimitsFinder*GetLimitsFinder(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THLimitsFinder&operator",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:6069,Modifiability,Inherit,Inheritance,6069,"NVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static THLimitsFinder*fgLimitsFinder!Pointer to hist limits finder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THLimitsFinder(). ~THLimitsFinder(). Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); compute the best axis limits for the X axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters; example:; With the input parameters xmin=-1.467 and xmax=2.344, the function; will compute better limits -1.8 and 2.7 and store them in the axis. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); compute the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:6082,Modifiability,Inherit,Inherited,6082,"NVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static THLimitsFinder*fgLimitsFinder!Pointer to hist limits finder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THLimitsFinder(). ~THLimitsFinder(). Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); compute the best axis limits for the X axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters; example:; With the input parameters xmin=-1.467 and xmax=2.344, the function; will compute better limits -1.8 and 2.7 and store them in the axis. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); compute the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:6403,Performance,optimiz,optimized,6403,"har* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static THLimitsFinder*fgLimitsFinder!Pointer to hist limits finder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THLimitsFinder(). ~THLimitsFinder(). Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); compute the best axis limits for the X axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters; example:; With the input parameters xmin=-1.467 and xmax=2.344, the function; will compute better limits -1.8 and 2.7 and store them in the axis. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); compute the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder deri",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:6827,Performance,optimiz,optimized,6827,"CannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static THLimitsFinder*fgLimitsFinder!Pointer to hist limits finder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THLimitsFinder(). ~THLimitsFinder(). Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); compute the best axis limits for the X axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters; example:; With the input parameters xmin=-1.467 and xmax=2.344, the function; will compute better limits -1.8 and 2.7 and store them in the axis. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); compute the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; Bin",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:7138,Performance,optimiz,optimized,7138,"ion documentation; THLimitsFinder(). ~THLimitsFinder(). Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); compute the best axis limits for the X axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters; example:; With the input parameters xmin=-1.467 and xmax=2.344, the function; will compute better limits -1.8 and 2.7 and store them in the axis. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); compute the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time ax",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:7576,Performance,Optimiz,Optimize,7576,"e the best axis limits for the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:7831,Performance,Optimiz,Optimized,7831,"or the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:7970,Performance,Optimiz,Optimized,7970,"or the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:8013,Performance,Optimiz,Optimized,8013,"or the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:8137,Performance,Optimiz,OptimizeLimits,8137,"or the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:8232,Performance,Optimiz,Optimize,8232,"or the X and Y axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. Int_t FindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); compute the best axis limits for the X, Y and Z axis.; If the bit kIsInteger is set, the number of channels is also recomputed.; The axis parameters are replaced by the optimized parameters. THLimitsFinder * GetLimitsFinder(); Return pointer to the current finder.; Create one if none exists; Use SetLimitsFinder to set a user defined finder. void SetLimitsFinder(THLimitsFinder* finder); This static function can be used to specify a finder derived from THLimitsFinder.; The finder may redefine the functions FindGoodLimits.; Note that the redefined functions may call THLimitsFinder::FindGoodLimits. void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static function to compute reasonable axis limits. Input parameters:. A1,A2 : Original axis limits; BinLow,BinHigh : Optimized axis limits. They should be initialized by the; calling method for instance to 0.; nold : Original number of divisions.; nbins : Optimized number of divisions.; BinWidth : Optimized bin width. It should be initialized by the; calling method for instance to 0.; option : ""T"" means Time axis. void OptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); Optimize axis limits.; When isInter=kTRUE, the function makes an integer binwidth; and recompute the number of bins accordingly. THLimitsFinder(). » Author: Rene Brun 30/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:2749,Security,Hash,Hash,2749,"al(const char* method, const char* msgfmt) const; virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static THLimitsFinder*GetLimitsFinder(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:5199,Testability,Test,TestBit,5199," static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THLimitsFinder&operator=(const THLimitsFinder&); static voidOptimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static voidOptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetLimitsFinder(THLimitsFinder* finder); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:5238,Testability,Test,TestBits,5238," static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THLimitsFinder&operator=(const THLimitsFinder&); static voidOptimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static voidOptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetLimitsFinder(THLimitsFinder* finder); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THLimitsFinder.html:894,Usability,Clear,Clear,894," THLimitsFinder(); THLimitsFinder(const THLimitsFinder&); virtual~THLimitsFinder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax); virtual Int_tFindGoodLimits(TH1* h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual Int_tFindGoodLimits(TH1* h, ",MatchSource.WIKI,root/html534/THLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html
https://root.cern/root/html534/THn.html:1634,Availability,error,errors,1634," RAM!. To construct a THn object you must use one of its templated, derived; classes:; THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long_t>): bin content held by a Long_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, min, max);. * Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. * Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call; hn->GetAxis(12)->SetRange(from_bin, to_bin);. * Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THn(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist,",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:2476,Availability,avail,available,2476,"""hn"", 2, bins, min, max);. * Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. * Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call; hn->GetAxis(12)->SetRange(from_bin, to_bin);. * Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THn(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn)",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:4046,Availability,Error,Error,4046,"ct*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Dou",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:4175,Availability,error,error,4175,"ct*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Dou",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:4259,Availability,error,error,4259,"ct*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Dou",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:12937,Availability,error,error,12937,"const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THn&operator=(const THn&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void Fill",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:13125,Availability,error,errors,13125,"const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THn&operator=(const THn&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void Fill",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:13560,Availability,error,errors,13560,"bjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. GetArray(). THn* CreateHn(const char* name, const char* title, const TH1* h1). THn* CreateHn(const char* name, const char* title, const THnBase* hn). Long64_t GetNbins() const; { return GetArray().GetNbins(); }. Long64_t GetBin(const Int_t* idx) const. return GetArray(). Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const char** name) const. Long64_t GetBin(const Int_t* idx, Bool_t = kTRUE). Long64_t GetBin(const Double_t* x, Bool_t = kTRUE). Long64_t GetBin(const char** name, Bool_t = kTRUE). void SetBinContent(const Int_t* idx, Double_t v);",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:12061,Deployability,Update,UpdateXStat,12061,"ethod, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidAllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidInitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THn&operator=(const THn&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPi",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:1721,Energy Efficiency,allocate,allocated,1721,"ved; classes:; THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long_t>): bin content held by a Long_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, min, max);. * Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. * Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call; hn->GetAxis(12)->SetRange(from_bin, to_bin);. * Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THn(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.);",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:1819,Energy Efficiency,reduce,reduced,1819,"t_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long_t>): bin content held by a Long_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, min, max);. * Filling; A THn is filled just like a regular histogram, using; THn::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Storage is allocated when the first bin content is stored. * Projections; The dimensionality of a THn can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THn. See the Projection() members. To only project parts of the; histogram, call; hn->GetAxis(12)->SetRange(from_bin, to_bin);. * Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn; from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The; created THn will have compatble storage type, i.e. calling CreateHn() on; a TH2F will create a THnF. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THn(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2);",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:13502,Integrability,interface,interface,13502,"nBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. GetArray(). THn* CreateHn(const char* name, const char* title, const TH1* h1). THn* CreateHn(const char* name, const char* title, const THnBase* hn). Long64_t GetNbins() const; { return GetArray().GetNbins(); }. Long64_t GetBin(const Int_t* idx) const. return GetArray(). Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const char** name) const. Long64_t GetBin(const Int_t* idx, Bool_t = kTRUE). Long64_t GetBin(const Double_t* x, Bool_t = kTRUE). Long64_t GetBin(const char** name, Bool_t = kTRUE). void SetBinCo",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:6630,Modifiability,Inherit,InheritsFrom,6630,") const; Double_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:6696,Modifiability,Inherit,InheritsFrom,6696,") const; Double_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:13295,Modifiability,Inherit,Inheritance,13295,"UID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. GetArray(). THn* CreateHn(const char* name, const char* title, const TH1* h1). THn* CreateHn(const char* name, const char* title, const THnBase* hn). Long64_t GetNbins() const; { return GetArray().GetNbins(); }. Long64_t GetBin(const Int_t* idx) const. return GetArray(). Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const ",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:13308,Modifiability,Inherit,Inherited,13308,"UID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. GetArray(). THn* CreateHn(const char* name, const char* title, const TH1* h1). THn* CreateHn(const char* name, const char* title, const THnBase* hn). Long64_t GetNbins() const; { return GetArray().GetNbins(); }. Long64_t GetBin(const Int_t* idx) const. return GetArray(). Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const ",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:6520,Security,Hash,Hash,6520,") const; Double_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:10186,Testability,Test,TestBit,10186,"up) const; THn*Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidAllocCoordBuf() ",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:10225,Testability,Test,TestBits,10225,"up) const; THn*Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidAllocCoordBuf() ",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THn.html:3088,Usability,Clear,Clear,3088,", i.e. calling CreateHn() on; a TH2F will create a THnF. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THn(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root/html534/THn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THn.html
https://root.cern/root/html534/THnBase.html:512,Availability,avail,available,512,". THnBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnBase. class THnBase: public TNamed. Multidimensional histogram base. Defines common functionality and interfaces for THn, THnSparse. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnBase(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnBase* h, Double_t c = 1.); voidAdd(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* e",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:1871,Availability,Error,Error,1871,"* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tFill(const Double_t* x, Double_t w = 1.); Long64_tFill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t = kTRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinC",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:2000,Availability,error,error,2000,"* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tFill(const Double_t* x, Double_t w = 1.); Long64_tFill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t = kTRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinC",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:2084,Availability,error,error,2084,"* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tFill(const Double_t* x, Double_t w = 1.); Long64_tFill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t = kTRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinC",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:10060,Availability,error,errors,10060,"ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*RebinBase(Int_t group) const; THnBase*RebinBase(const Int_t* group) const; virtual voidReserve(Long64_t); voidResetBase(Option_t* option = """"); virtual voidSetFilledBins(Long64_t); voidUpdateXStat(const Double_t* x, Double_t w = 1.). private:. THnBase&operator=(const THnBase&). Data Members; public:. enum { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayfAxesaxes of the histogram; TObjArrayfBrowsables! browser-helpers for each axis; Double_tfEntriesnumber of entries, spread over chunks; Double_t*fIntegral! array with bin weight sums; enum THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tfNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase object that is of the same type as *this,; but with dimensions and bins given by axes.; If keepTargetAxis is true, the axes will keep their original xmin / xmax,; else they will be restricted to the range selected (first / last). void Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:11579,Availability,error,error,11579,"tAxis is true, the axes will keep their original xmin / xmax,; else they will be restricted to the range selected (first / last). void Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:12238,Availability,Error,Errors,12238,"kSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""opti",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:13195,Availability,error,errors,13195,"t is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. void Scale(Double_t c); Scale contents and errors of this histogram by c:; this = this * c; It does not modify the histogram's number of entries. void AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Add() implementation for both rebinned histograms and those with identical; binning. See THnBase::Add(). void Add(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:13427,Availability,error,errors,13427," the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. void Scale(Double_t c); Scale contents and errors of this histogram by c:; this = this * c; It does not modify the histogram's number of entries. void AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Add() implementation for both rebinned histograms and those with identical; binning. See THnBase::Add(). void Add(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply t",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:14678,Availability,error,errors,14678,". See THnBase::Add(). void Add(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:14698,Availability,error,errors,14698,". See THnBase::Add(). void Add(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:14822,Availability,error,errors,14822,"et, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnBase* h, const char* tag) const; Consistency check on (some of) the parameters of",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:15171,Availability,error,errors,15171,"ing of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnBase* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:15537,Availability,error,errors,15537," called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnBase* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnBase* RebinBase(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:15638,Availability,error,errors,15638," c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnBase* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnBase* RebinBase(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* gr",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:17377,Availability,error,error,17377,"const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnBase& operator=(const THnBase& ). void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",. void InitStorage(Int_t* nbins, Int_t ch",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:19115,Availability,error,errors,19115,"rowsable) for each; dimension. THnBase& operator=(const THnBase& ). void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",. void InitStorage(Int_t* nbins, Int_t chunkSize). void Reserve(Long64_t ); {}. void SetFilledBins(Long64_t ); {}. Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const. TObjArray* GetListOfAxes(); { return &fAxes; }. const TObjArray* GetListOfAxes() const; { return &fAxes; }. TAxis* GetAxis(Int_t dim) const; { return (TAxis*)fAxes[dim]; }. TList* GetListOfFunctions(); { return 0; }. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const. Long64_t GetNbins() const. Double_t GetEntries() const; { return fEntries; }. Double_t GetWeightSum() const; { return fTsumw; }. Int_t GetNdimensions() const; { return fNdimensions; }. Bool_t GetCalculateErrors() const; { return fTsumw2 >= 0.; }. void CalculateErrors(Bool_t calc = kTRUE); Calculate errors (or not if ""calc"" == kFALSE). Long64_t Fill(const Double_t* x, Double_t w = 1.). Long64_t Fill(const char** name, Double_t w = 1.). Double_t GetBinError(const Int_t* idx) const; { return GetBinError(GetBin(idx)); }. Double_t GetBinError(Long64_t linidx) const; { return TMath::Sqrt(GetBinError2(linidx)); }. void SetBinError(const Int_t* idx, Double_t e); { SetBinError(GetBin(idx), e); }. void SetBinError(Long64_t bin, Double_t e); { SetBinError2(bin, e*e); }. void AddBinContent(const Int_t* x, Double_t v = 1.); { AddBinContent(GetBin(x), v); }. void SetEntries(Double_t entries); { fEntries = entries; }. Double_t GetBinContent(const Int_t* idx) const; { return GetBinContent(GetBin(idx)); }. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const. Double_t GetBinError2(Long64_t linidx) const. Long64_t GetBin(const Int_t* idx) const. Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const char** name) const. Long64_t GetBin(const Int_t* idx, Bool_t = kTRUE). Long",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:20862,Availability,error,errors,20862,"t* idx = 0) const. Double_t GetBinError2(Long64_t linidx) const. Long64_t GetBin(const Int_t* idx) const. Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const char** name) const. Long64_t GetBin(const Int_t* idx, Bool_t = kTRUE). Long64_t GetBin(const Double_t* x, Bool_t = kTRUE). Long64_t GetBin(const char** name, Bool_t = kTRUE). void SetBinContent(const Int_t* idx, Double_t v); { SetBinContent(GetBin(idx), v); }. void SetBinContent(Long64_t bin, Double_t v). void SetBinError2(Long64_t bin, Double_t e2). void AddBinError2(Long64_t bin, Double_t e2). void AddBinContent(Long64_t bin, Double_t v = 1.). Double_t GetSumw() const; { return fTsumw; }. Double_t GetSumw2() const; { return fTsumw2; }. Double_t GetSumwx(Int_t dim) const; { return fTsumwx[dim]; }. Double_t GetSumwx2(Int_t dim) const; { return fTsumwx2[dim]; }. TH1D* Projection(Int_t xDim, Option_t* option = """") const; Project all bins into a 1-dimensional histogram,; keeping only axis ""xDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. TH2D* Projection(Int_t yDim, Int_t xDim, Option_t* option = """") const; Project all bins into a 2-dimensional histogram,; keeping only axes ""xDim"" and ""yDim"". WARNING: just like TH3::Project3D(""yx"") and TTree::Draw(""y:x""),; Projection(y,x) uses the first argument to define the y-axis and the; second for the x-axis!. If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored. {xDim, yDim}. TH3D* Projection(Int_t xDim, Int_t yDim, Int_t zDim, Option_t* option = """") const; Project all bins into a 3-dimensional histogram,; keeping only axes ""xDim"", ""yDim"", and ""zDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; wil",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:21393,Availability,error,errors,21393,"AddBinError2(Long64_t bin, Double_t e2). void AddBinContent(Long64_t bin, Double_t v = 1.). Double_t GetSumw() const; { return fTsumw; }. Double_t GetSumw2() const; { return fTsumw2; }. Double_t GetSumwx(Int_t dim) const; { return fTsumwx[dim]; }. Double_t GetSumwx2(Int_t dim) const; { return fTsumwx2[dim]; }. TH1D* Projection(Int_t xDim, Option_t* option = """") const; Project all bins into a 1-dimensional histogram,; keeping only axis ""xDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. TH2D* Projection(Int_t yDim, Int_t xDim, Option_t* option = """") const; Project all bins into a 2-dimensional histogram,; keeping only axes ""xDim"" and ""yDim"". WARNING: just like TH3::Project3D(""yx"") and TTree::Draw(""y:x""),; Projection(y,x) uses the first argument to define the y-axis and the; second for the x-axis!. If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored. {xDim, yDim}. TH3D* Projection(Int_t xDim, Int_t yDim, Int_t zDim, Option_t* option = """") const; Project all bins into a 3-dimensional histogram,; keeping only axes ""xDim"", ""yDim"", and ""zDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. {xDim, yDim, zDim}. THnBase* ProjectionND(Int_t ndim, const Int_t* dim, Option_t* option = """") const. void Reset(Option_t* option = """"). void Sumw2(). Bool_t IsFolder() const; { return kTRUE; }. » Author: Axel Naumann (2011-12-20) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:21686,Availability,error,errors,21686,"AddBinError2(Long64_t bin, Double_t e2). void AddBinContent(Long64_t bin, Double_t v = 1.). Double_t GetSumw() const; { return fTsumw; }. Double_t GetSumw2() const; { return fTsumw2; }. Double_t GetSumwx(Int_t dim) const; { return fTsumwx[dim]; }. Double_t GetSumwx2(Int_t dim) const; { return fTsumwx2[dim]; }. TH1D* Projection(Int_t xDim, Option_t* option = """") const; Project all bins into a 1-dimensional histogram,; keeping only axis ""xDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. TH2D* Projection(Int_t yDim, Int_t xDim, Option_t* option = """") const; Project all bins into a 2-dimensional histogram,; keeping only axes ""xDim"" and ""yDim"". WARNING: just like TH3::Project3D(""yx"") and TTree::Draw(""y:x""),; Projection(y,x) uses the first argument to define the y-axis and the; second for the x-axis!. If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored. {xDim, yDim}. TH3D* Projection(Int_t xDim, Int_t yDim, Int_t zDim, Option_t* option = """") const; Project all bins into a 3-dimensional histogram,; keeping only axes ""xDim"", ""yDim"", and ""zDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. {xDim, yDim, zDim}. THnBase* ProjectionND(Int_t ndim, const Int_t* dim, Option_t* option = """") const. void Reset(Option_t* option = """"). void Sumw2(). Bool_t IsFolder() const; { return kTRUE; }. » Author: Axel Naumann (2011-12-20) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:18179,Deployability,Update,UpdateXStat,18179,"t; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnBase& operator=(const THnBase& ). void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",. void InitStorage(Int_t* nbins, Int_t chunkSize). void Reserve(Long64_t ); {}. void SetFilledBins(Long64_t ); {}. Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const. TObjArray* GetListOfAxes(); { return &fAxes; }. const TObjArray* GetListOfAxes() const; { return &fAxes; }. TAxis* GetAxis(Int_t dim) const; { return (TAxis*)fAxes[dim]; }. TList* GetListOfFunctions(); { return 0; }. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const. Long64_t GetNbins() const. Double_t GetEntries() const; { return fEntries; }. Double_t GetWeightSum() const; { return fTsumw; }. Int_t GetNdimensions() const; { return fNdimensions; }. Bool_t GetCalculateErrors() const; { return fTsumw2 >= 0.; }. void CalculateErrors(Bool_t calc = kTRUE); Calculate errors (or not if ""calc"" == kFALSE). Long64_t Fill(const Double_t* x, Double_t w = 1",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:347,Integrability,interface,interfaces,347,". THnBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnBase. class THnBase: public TNamed. Multidimensional histogram base. Defines common functionality and interfaces for THn, THnSparse. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnBase(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnBase* h, Double_t c = 1.); voidAdd(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* e",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:11033,Integrability,depend,depending,11033,"squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase object that is of the same type as *this,; but with dimensions and bins given by axes.; If keepTargetAxis is true, the axes will keep their original xmin / xmax,; else they will be restricted to the range selected (first / last). void Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (defaul",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:17436,Integrability,depend,depends,17436,"const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnBase& operator=(const THnBase& ). void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",. void InitStorage(Int_t* nbins, Int_t ch",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:4223,Modifiability,Inherit,InheritsFrom,4223,"TRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinContent(const Int_t* idx) const; virtual Double_tGetBinContent(Long64_t bin, Int_t* idx = 0) const; Double_tGetBinError(const Int_t* idx) const; Double_tGetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tGetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*GetListOfAxes(); const TObjArray*GetListOfAxes() const; TList*GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSumw() const; Double_tGetSumw2() const; Double_tGetSumwx(Int_t dim) const; Double_tGetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tIsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); voidMultiply(const THnBase* h); voidMultiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:4289,Modifiability,Inherit,InheritsFrom,4289,"TRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinContent(const Int_t* idx) const; virtual Double_tGetBinContent(Long64_t bin, Int_t* idx = 0) const; Double_tGetBinError(const Int_t* idx) const; Double_tGetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tGetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*GetListOfAxes(); const TObjArray*GetListOfAxes() const; TList*GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSumw() const; Double_tGetSumw2() const; Double_tGetSumwx(Int_t dim) const; Double_tGetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tIsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); voidMultiply(const THnBase* h); voidMultiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:10212,Modifiability,Inherit,Inheritance,10212,"private:. THnBase&operator=(const THnBase&). Data Members; public:. enum { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayfAxesaxes of the histogram; TObjArrayfBrowsables! browser-helpers for each axis; Double_tfEntriesnumber of entries, spread over chunks; Double_t*fIntegral! array with bin weight sums; enum THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tfNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase object that is of the same type as *this,; but with dimensions and bins given by axes.; If keepTargetAxis is true, the axes will keep their original xmin / xmax,; else they will be restricted to the range selected (first / last). void Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a hist",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:10225,Modifiability,Inherit,Inherited,10225,"private:. THnBase&operator=(const THnBase&). Data Members; public:. enum { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayfAxesaxes of the histogram; TObjArrayfBrowsables! browser-helpers for each axis; Double_tfEntriesnumber of entries, spread over chunks; Double_t*fIntegral! array with bin weight sums; enum THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tfNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase object that is of the same type as *this,; but with dimensions and bins given by axes.; If keepTargetAxis is true, the axes will keep their original xmin / xmax,; else they will be restricted to the range selected (first / last). void Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a hist",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:11755,Performance,perform,performed,11755,"Axis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribu",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:11817,Performance,perform,performance,11817,"Axis, Int_t chunkSize = 1024*16); Initialize axes and name. TH1* CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create an empty histogram with name and title with a given; set of axes. Create a TH1D/TH2D/TH3D, depending on the number; of elements in axes. THnBase* CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribu",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:12223,Performance,Perform,Perform,12223,"kSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""opti",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:14633,Performance,Perform,Performs,14633,". See THnBase::Add(). void Add(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnBase* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set.; In contrast to Add(), RebinnedAdd() does not require consistent binning of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:4113,Security,Hash,Hash,4113,"TRUE); virtual Long64_tGetBin(const char** name, Bool_t = kTRUE); Double_tGetBinContent(const Int_t* idx) const; virtual Double_tGetBinContent(Long64_t bin, Int_t* idx = 0) const; Double_tGetBinError(const Int_t* idx) const; Double_tGetBinError(Long64_t linidx) const; virtual Double_tGetBinError2(Long64_t linidx) const; Bool_tGetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*GetListOfAxes(); const TObjArray*GetListOfAxes() const; TList*GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSumw() const; Double_tGetSumw2() const; Double_tGetSumwx(Int_t dim) const; Double_tGetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tIsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); voidMultiply(const THnBase* h); voidMultiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:7484,Testability,Test,TestBit,7484,"t* dim, Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidScale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidSetBinEdges(Int_t idim, const Double_t* bins); voidSetBinError(const Int_t* idx, Double_t e); voidSetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tCheckConsistency(const THnBase* h, const char* tag",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:7523,Testability,Test,TestBits,7523,"t* dim, Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidScale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidSetBinEdges(Int_t idim, const Double_t* bins); voidSetBinError(const Int_t* idx, Double_t e); voidSetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tCheckConsistency(const THnBase* h, const char* tag",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:12048,Testability,log,log-likelihood,12048,"kSize = 1024*16); Create a THn / THnSparse object from a histogram deriving from TH1. THnBase* CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly; converting THn <-> THnSparse. void Add(const TH1* hist, Double_t c = 1.); Fill the THnBase with the bins of hist that have content; or error != 0. TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); Fit a THnSparse with function f. since the data is sparse by default a likelihood fit is performed; merging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange(). TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; Project all bins into a ndim-dimensional THn / THnSparse (whatever; *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram,; keeping only axes in dim (specifying ndim dimensions).; If ""opti",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:1090,Usability,Clear,Clear,1090,"ss charts. ROOT; » HIST; » HIST; » THnBase. class THnBase: public TNamed. Multidimensional histogram base. Defines common functionality and interfaces for THn, THnSparse. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnBase(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnBase* h, Double_t c = 1.); voidAdd(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnBase* h); voidDivide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* metho",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnBase.html:16876,Usability,Clear,Clear,16876,"rations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnBase* RebinBase(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; ",MatchSource.WIKI,root/html534/THnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnBase.html
https://root.cern/root/html534/THnIter.html:1238,Availability,Error,Error,1238," THnIter(const THnIter&); THnIter(const THnBase* hist, Bool_t respectAxisRange = kFALSE); virtual~THnIter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) cons",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:1367,Availability,error,error,1367,"; THnIter(const THnBase* hist, Bool_t respectAxisRange = kFALSE); virtual~THnIter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveSkippedBin() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:1451,Availability,error,error,1451," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveSkippedBin() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObj",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:2393,Modifiability,Inherit,InheritsFrom,2393,":Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveSkippedBin() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tNext(Int_t* coord = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::ope",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:2459,Modifiability,Inherit,InheritsFrom,2459,"rtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveSkippedBin() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tNext(Int_t* coord = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, vo",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:5305,Modifiability,Inherit,Inheritance,5305,"Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. ROOT::THnBaseBinIter*fIter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnIter(); Destruct a bin iterator. THnBase& operator=(const THnIter& ). Bool_t HaveSkippedBin() const; { return fHaveSkippedBin; }. Bool_t RespectsAxisRange() const; { return fRespectAxisRange; }. Int_t GetCoord(Int_t dim) const. Long64_t Next(Int_t* coord = 0). THnIter(const THnBase* hist, Bool_t respectAxisRange = kFALSE); {}. » Author: Axel Naumann (2011-12-20) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:5318,Modifiability,Inherit,Inherited,5318,"Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. ROOT::THnBaseBinIter*fIter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnIter(); Destruct a bin iterator. THnBase& operator=(const THnIter& ). Bool_t HaveSkippedBin() const; { return fHaveSkippedBin; }. Bool_t RespectsAxisRange() const; { return fRespectAxisRange; }. Int_t GetCoord(Int_t dim) const. Long64_t Next(Int_t* coord = 0). THnIter(const THnBase* hist, Bool_t respectAxisRange = kFALSE); {}. » Author: Axel Naumann (2011-12-20) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:2253,Security,Hash,Hash,2253," method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveSkippedBin() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tNext(Int_t* coord = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::o",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:4477,Testability,Test,TestBit,4477,"on_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tNext(Int_t* coord = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THnIter&operator=(const THnIter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Bool_tRespectsAxisRange() const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:4516,Testability,Test,TestBits,4516,"on_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tNext(Int_t* coord = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THnIter&operator=(const THnIter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Bool_tRespectsAxisRange() const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnIter.html:698,Usability,Clear,Clear,698," THnIter(const THnIter&); THnIter(const THnBase* hist, Bool_t respectAxisRange = kFALSE); virtual~THnIter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetCoord(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) cons",MatchSource.WIKI,root/html534/THnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnIter.html
https://root.cern/root/html534/THnSparse.html:1772,Availability,error,errors,1772,"; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; cout << hs.GetBinContent(0, coord);; cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4880,Availability,avail,available,4880,"THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, con",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:6530,Availability,Error,Error,6530,"pare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t allocate = kTRUE); virtual Long64_tGetBin(co",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:6659,Availability,error,error,6659,"pare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t allocate = kTRUE); virtual Long64_tGetBin(co",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:6743,Availability,error,error,6743,"pare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t allocate = kTRUE); virtual Long64_tGetBin(co",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:15818,Availability,error,errors,15818,"tion = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidReserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THnSparse&operator=(const THnSparse&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nb",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17661,Availability,error,error,17661," chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17701,Availability,error,errors,17701,"e have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18580,Availability,error,error,18580,"to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18625,Availability,error,errors,18625,"to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18700,Availability,error,error,18700,"If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18738,Availability,error,errors,18738,"If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18792,Availability,error,errors,18792,"Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t GetBin(const Double_t* x) const; { return const_cast<THnSparse*>(this)->GetBin",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:14851,Deployability,Update,UpdateXStat,14851," 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidFillExMap(); virtual TArray*GenerateArray() const; Long64_tGetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*GetChunk(Int_t idx) const; THnSparseCompactBinCoord*GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidInitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidReserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THnSparse&operator=(const THnSparse&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObje",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:288,Energy Efficiency,Efficient,Efficient,288,". THnSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparse. class THnSparse: public THnBase. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:584,Energy Efficiency,allocate,allocates,584,". THnSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparse. class THnSparse: public THnBase. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:1857,Energy Efficiency,allocate,allocated,1857,"nSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; cout << hs.GetBinContent(0, coord);; cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSp",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:3057,Energy Efficiency,reduce,reduced,3057,"sing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; cout << hs.GetBinContent(0, coord);; cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. * Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call; THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate i",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:3725,Energy Efficiency,allocate,allocated,3725,"torial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. * Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call; THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Functio",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:7504,Energy Efficiency,allocate,allocate,7504,,MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:7572,Energy Efficiency,allocate,allocate,7572,,MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:7640,Energy Efficiency,allocate,allocate,7640,,MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:14147,Energy Efficiency,allocate,allocate,14147," 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidFillExMap(); virtual TArray*GenerateArray() const; Long64_tGetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*GetChunk(Int_t idx) const; THnSparseCompactBinCoord*GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidInitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidReserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THnSparse&operator=(const THnSparse&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObje",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16874,Energy Efficiency,allocate,allocate,16874,"ase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16943,Energy Efficiency,allocate,allocate,16943,"ase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16985,Energy Efficiency,allocate,allocate,16985,"ase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17047,Energy Efficiency,allocate,allocate,17047,"-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of fil",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17140,Energy Efficiency,allocate,allocate,17140,"-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of fil",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17182,Energy Efficiency,allocate,allocate,17182,"-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of fil",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17242,Energy Efficiency,allocate,allocate,17242,"insnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approxi",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17321,Energy Efficiency,allocate,allocate,17321,"insnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approxi",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17363,Energy Efficiency,allocate,allocate,17363,"insnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approxi",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17818,Energy Efficiency,allocate,allocate,17818,"for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* o",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17908,Energy Efficiency,allocate,allocate,17908,"ndex for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseA",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:17930,Energy Efficiency,allocate,allocate,17930,"ndex for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseA",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:9200,Modifiability,Inherit,InheritsFrom,9200,"e_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; Int_tGetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSparseFractionBins() const; Double_tGetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:9266,Modifiability,Inherit,InheritsFrom,9266,"e_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; Int_tGetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSparseFractionBins() const; Double_tGetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16330,Modifiability,Inherit,Inheritance,16330,"HnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist ye",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16343,Modifiability,Inherit,Inherited,16343,"HnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist ye",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:707,Security,access,access,707,". THnSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparse. class THnSparse: public THnBase. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:1995,Security,Access,Access,1995,"; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; cout << hs.GetBinContent(0, coord);; cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. * Projections; The dimensionality o",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4015,Security,hash,hash,4015," 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call; THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c =",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4061,Security,hash,hash,4061," 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call; THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c =",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4183,Security,hash,hash,4183,"GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); vi",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4408,Security,hash,hash,4408,"e compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:4610,Security,hash,hash,4610,"esentation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* new",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:9090,Security,Hash,Hash,9090,"e_tGetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; Int_tGetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tGetNbins() const; Int_tGetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tGetSparseFractionBins() const; Double_tGetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:16109,Security,hash,hashes,16109,"tMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. private:. TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Long64_tfFilledBinsnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:12817,Testability,Test,TestBit,12817,"const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidSetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THnBase* ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:12856,Testability,Test,TestBits,12856,"const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidSetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THnBase* ",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:5498,Usability,Clear,Clear,5498,"matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* para",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparse.html:18835,Usability,Clear,Clear,18835,"; Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t GetBin(const Double_t* x) const; { return const_cast<THnSparse*>(this)->GetBin(x, kFALSE); }. Long64_t GetBin(const char** name)",MatchSource.WIKI,root/html534/THnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparse.html
https://root.cern/root/html534/THnSparseArrayChunk.html:466,Availability,error,errors,466,". THnSparseArrayChunk. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseArrayChunk. class THnSparseArrayChunk: public TObject. THnSparseArrayChunk is used internally by THnSparse. THnSparse stores its (dynamic size) array of bin coordinates and their; contents (and possibly errors) in a TObjArray of THnSparseArrayChunk. Each; of the chunks holds an array of THnSparseCompactBinCoord and the content; (a TArray*), which is created outside (by the templated derived classes of; THnSparse) and passed in at construction time. Function Members (Methods); public:. THnSparseArrayChunk(); THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); virtual~THnSparseArrayChunk(); voidTObject::AbstractMethod(const char* method) const; voidAddBin(Int_t idx, const Char_t* idxbuf); voidAddBinContent(Int_t idx, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:818,Availability,error,errors,818,". THnSparseArrayChunk. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseArrayChunk. class THnSparseArrayChunk: public TObject. THnSparseArrayChunk is used internally by THnSparse. THnSparse stores its (dynamic size) array of bin coordinates and their; contents (and possibly errors) in a TObjArray of THnSparseArrayChunk. Each; of the chunks holds an array of THnSparseCompactBinCoord and the content; (a TArray*), which is created outside (by the templated derived classes of; THnSparse) and passed in at construction time. Function Members (Methods); public:. THnSparseArrayChunk(); THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); virtual~THnSparseArrayChunk(); voidTObject::AbstractMethod(const char* method) const; voidAddBin(Int_t idx, const Char_t* idxbuf); voidAddBinContent(Int_t idx, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:1747,Availability,Error,Error,1747,"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:1876,Availability,error,error,1876,"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:1960,Availability,error,error,1960,"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6157,Availability,error,errors,6157,"idTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6298,Availability,error,errors,6298," virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automat",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6436,Availability,error,errors,6436,"Zombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6447,Availability,error,errors,6447,"Zombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6611,Availability,error,errors,6611,"ate:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:5891,Energy Efficiency,allocate,allocated,5891,"idTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:2865,Modifiability,Inherit,InheritsFrom,2865,"t_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; Bool_tMatches(Int_t idx, const Char_t* idxbuf) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:2931,Modifiability,Inherit,InheritsFrom,2931,"jArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; Bool_tMatches(Int_t idx, const Char_t* idxbuf) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operat",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6179,Modifiability,Inherit,Inheritance,6179,"t::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:6192,Modifiability,Inherit,Inherited,6192,"t::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:2755,Security,Hash,Hash,2755,"t char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; Bool_tMatches(Int_t idx, const Char_t* idxbuf) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator ",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:4916,Testability,Test,TestBit,4916,"nst; virtual voidTObject::ls(Option_t* option = """") const; Bool_tMatches(Int_t idx, const Char_t* idxbuf) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:4955,Testability,Test,TestBits,4955,"nst; virtual voidTObject::ls(Option_t* option = """") const; Bool_tMatches(Int_t idx, const Char_t* idxbuf) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseArrayChunk.html:1207,Usability,Clear,Clear,1207,"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root/html534/THnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseArrayChunk.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayC>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayC>. class THnSparseT<TArrayC>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseC. Function Members (Methods); public:. THnSparseT<TArrayC>(); THnSparseT<TArrayC>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayC_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayC_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayD>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayD>. class THnSparseT<TArrayD>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseD. Function Members (Methods); public:. THnSparseT<TArrayD>(); THnSparseT<TArrayD>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayD_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayD_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayF>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayF>. class THnSparseT<TArrayF>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseF. Function Members (Methods); public:. THnSparseT<TArrayF>(); THnSparseT<TArrayF>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayF_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayF_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayI>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayI>. class THnSparseT<TArrayI>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseI. Function Members (Methods); public:. THnSparseT<TArrayI>(); THnSparseT<TArrayI>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayI_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayI_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayL>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayL>. class THnSparseT<TArrayL>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseL. Function Members (Methods); public:. THnSparseT<TArrayL>(); THnSparseT<TArrayL>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayL_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayL_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:3547,Availability,Error,Error,3547,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:3676,Availability,error,error,3676,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:3760,Availability,error,error,3760,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:13205,Availability,error,errors,13205,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:12287,Deployability,Update,UpdateXStat,12287,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:4603,Energy Efficiency,allocate,allocate,4603,,MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:4682,Energy Efficiency,allocate,allocate,4682,,MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:4761,Energy Efficiency,allocate,allocate,4761,,MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:11539,Energy Efficiency,allocate,allocate,11539,"_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk(); voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHnSparse::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnSparse::FillExMap(); Long64_tTHnSparse::GetBinIndexForCurrentBin(Bool_t allocate); THnSparseArrayChunk*THnSparse::GetChunk(Int_t idx) const; THnSparseCompactBinCoord*THnSparse::GetCompactCoord() const; voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDe",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:380,Integrability,interface,interfaces,380,". THnSparseT<TArrayS>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnSparseT<TArrayS>. class THnSparseT<TArrayS>: public THnSparse. Templated implementation of the abstract base THnSparse.; All functionality and the interfaces to be used are in THnSparse!. THnSparse does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. In fact it even defines the array; itself; possible implementations probably derive from TArray. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnSparseT<TArrayC> THnSparseC Char_t; THnSparseT<TArrayS> THnSparseS Short_t; THnSparseT<TArrayI> THnSparseI Int_t; THnSparseT<TArrayL> THnSparseL Long_t; THnSparseT<TArrayF> THnSparseF Float_t; THnSparseT<TArrayD> THnSparseD Double_t. We recommend to use THnSparseC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnSparseS or even THnSparseF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseS. Function Members (Methods); public:. THnSparseT<TArrayS>(); THnSparseT<TArrayS>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHn",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:6409,Modifiability,Inherit,InheritsFrom,6409,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:6475,Modifiability,Inherit,InheritsFrom,6475,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:13375,Modifiability,Inherit,Inheritance,13375,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:13388,Modifiability,Inherit,Inherited,13388,"ual voidTHnSparse::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnSparse::Reserve(Long64_t nbins); voidTHnBase::ResetBase(Option_t* option = """"); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArray* GenerateArray() const. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:6299,Security,Hash,Hash,6299,"GetCalculateErrors() const; Int_tTHnSparse::GetChunkSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHnSparse::GetNbins() const; Int_tTHnSparse::GetNChunks() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnSparse::GetSparseFractionBins() const; Double_tTHnSparse::GetSparseFractionMem() const; Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:10203,Testability,Test,TestBit,10203,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:10242,Testability,Test,TestBits,10242,"nBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHnSparse::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHnSparse::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHnSparse::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHnSparse::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTHnSparse::SetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHnSparse::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*THnSparse::AddChunk",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnSparseT_TArrayS_.html:2482,Usability,Clear,Clear,2482,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root/html534/THnSparseT_TArrayS_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html
https://root.cern/root/html534/THnT_char_.html:3192,Availability,Error,Error,3192,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:3321,Availability,error,error,3321,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:3405,Availability,error,error,3405,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:12255,Availability,error,error,12255,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<char>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:12443,Availability,error,errors,12443,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<char>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:11372,Deployability,Update,UpdateXStat,11372,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:341,Integrability,interface,interfaces,341,". THnT<char>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<char>. class THnT<char>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnC, THnT<Char_t>. Function Members (Methods); public:. THnT<char>(); THnT<char>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<char>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject:",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:5826,Modifiability,Inherit,InheritsFrom,5826,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:5892,Modifiability,Inherit,InheritsFrom,5892,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:12613,Modifiability,Inherit,Inheritance,12613,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<char>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:12626,Modifiability,Inherit,Inherited,12626,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<char>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:5716,Security,Hash,Hash,5716,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:9482,Testability,Test,TestBit,9482,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:9521,Testability,Test,TestBits,9521,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_char_.html:2219,Usability,Clear,Clear,2219,"his class)THnC, THnT<Char_t>. Function Members (Methods); public:. THnT<char>(); THnT<char>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<char>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_char_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_char_.html
https://root.cern/root/html534/THnT_double_.html:3206,Availability,Error,Error,3206,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:3335,Availability,error,error,3335,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:3419,Availability,error,error,3419,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:12271,Availability,error,error,12271,"option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<double>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:12459,Availability,error,errors,12459,"option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<double>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:11386,Deployability,Update,UpdateXStat,11386,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:347,Integrability,interface,interfaces,347,". THnT<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<double>. class THnT<double>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnD, THnT<Double_t>. Function Members (Methods); public:. THnT<double>(); THnT<double>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<double>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtua",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:5840,Modifiability,Inherit,InheritsFrom,5840,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:5906,Modifiability,Inherit,InheritsFrom,5906,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:12629,Modifiability,Inherit,Inheritance,12629,"option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<double>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:12642,Modifiability,Inherit,Inherited,12642,"option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<double>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:5730,Security,Hash,Hash,5730,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:9496,Testability,Test,TestBit,9496,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:9535,Testability,Test,TestBits,9535,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_double_.html:2233,Usability,Clear,Clear,2233,"s)THnD, THnT<Double_t>. Function Members (Methods); public:. THnT<double>(); THnT<double>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<double>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_double_.html
https://root.cern/root/html534/THnT_float_.html:3199,Availability,Error,Error,3199,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:3328,Availability,error,error,3328,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:3412,Availability,error,error,3412,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:12263,Availability,error,error,12263," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<float>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:12451,Availability,error,errors,12451," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<float>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:11379,Deployability,Update,UpdateXStat,11379,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:344,Integrability,interface,interfaces,344,". THnT<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<float>. class THnT<float>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnF, THnT<Float_t>. Function Members (Methods); public:. THnT<float>(); THnT<float>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<float>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidT",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:5833,Modifiability,Inherit,InheritsFrom,5833,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:5899,Modifiability,Inherit,InheritsFrom,5899,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:12621,Modifiability,Inherit,Inheritance,12621," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<float>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:12634,Modifiability,Inherit,Inherited,12634," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<float>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:5723,Security,Hash,Hash,5723,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:9489,Testability,Test,TestBit,9489,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:9528,Testability,Test,TestBits,9528,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_float_.html:2226,Usability,Clear,Clear,2226,"class)THnF, THnT<Float_t>. Function Members (Methods); public:. THnT<float>(); THnT<float>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<float>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_float_.html
https://root.cern/root/html534/THnT_int_.html:3185,Availability,Error,Error,3185,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:3314,Availability,error,error,3314,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:3398,Availability,error,error,3398,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:12247,Availability,error,error,12247,"t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:12435,Availability,error,errors,12435,"t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:11365,Deployability,Update,UpdateXStat,11365,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:338,Integrability,interface,interfaces,338,". THnT<int>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<int>. class THnT<int>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnT<Int_t>, THnI. Function Members (Methods); public:. THnT<int>(); THnT<int>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::Append",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:5819,Modifiability,Inherit,InheritsFrom,5819,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:5885,Modifiability,Inherit,InheritsFrom,5885,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:12605,Modifiability,Inherit,Inheritance,12605,"t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:12618,Modifiability,Inherit,Inherited,12618,"t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:5709,Security,Hash,Hash,5709,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:9475,Testability,Test,TestBit,9475,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:9514,Testability,Test,TestBits,9514,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_int_.html:2212,Usability,Clear,Clear,2212,"to this class)THnT<Int_t>, THnI. Function Members (Methods); public:. THnT<int>(); THnT<int>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_int_.html
https://root.cern/root/html534/THnT_Long64_t_.html:2999,Availability,Error,Error,2999,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:3128,Availability,error,error,3128,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:3212,Availability,error,error,3212,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:12215,Availability,error,error,12215,"ion = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:12403,Availability,error,errors,12403,"ion = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:11327,Deployability,Update,UpdateXStat,11327,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:353,Integrability,interface,interfaces,353,". THnT<Long64_t>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<Long64_t>. class THnT<Long64_t>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. Function Members (Methods); public:. ~THnT<long long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() co",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:5633,Modifiability,Inherit,InheritsFrom,5633,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:5699,Modifiability,Inherit,InheritsFrom,5699,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:12573,Modifiability,Inherit,Inheritance,12573,"ion = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:12586,Modifiability,Inherit,Inherited,12586,"ion = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:5523,Security,Hash,Hash,5523,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:9289,Testability,Test,TestBit,9289,"* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<long long>(); THnT<long long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHn",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:9328,Testability,Test,TestBits,9328,"* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<long long>(); THnT<long long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHn",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_Long64_t_.html:2026,Usability,Clear,Clear,2026,"t extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. Function Members (Methods); public:. ~THnT<long long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_Long64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_Long64_t_.html
https://root.cern/root/html534/THnT_long_.html:3192,Availability,Error,Error,3192,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:3321,Availability,error,error,3321,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:3405,Availability,error,error,3405,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:12255,Availability,error,error,12255,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:12443,Availability,error,errors,12443,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:11372,Deployability,Update,UpdateXStat,11372,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:341,Integrability,interface,interfaces,341,". THnT<long>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<long>. class THnT<long>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnL, THnT<Long_t>. Function Members (Methods); public:. THnT<long>(); THnT<long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject:",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:5826,Modifiability,Inherit,InheritsFrom,5826,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:5892,Modifiability,Inherit,InheritsFrom,5892,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:12613,Modifiability,Inherit,Inheritance,12613,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:12626,Modifiability,Inherit,Inherited,12626,"* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:5716,Security,Hash,Hash,5716,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:9482,Testability,Test,TestBit,9482,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:9521,Testability,Test,TestBits,9521,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_long_.html:2219,Usability,Clear,Clear,2219,"his class)THnL, THnT<Long_t>. Function Members (Methods); public:. THnT<long>(); THnT<long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_long_.html
https://root.cern/root/html534/THnT_short_.html:3199,Availability,Error,Error,3199,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:3328,Availability,error,error,3328,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:3412,Availability,error,error,3412,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:12263,Availability,error,error,12263," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:12451,Availability,error,errors,12451," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:11379,Deployability,Update,UpdateXStat,11379,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:344,Integrability,interface,interfaces,344,". THnT<short>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<short>. class THnT<short>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnT<Short_t>, THnS. Function Members (Methods); public:. THnT<short>(); THnT<short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidT",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:5833,Modifiability,Inherit,InheritsFrom,5833,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:5899,Modifiability,Inherit,InheritsFrom,5899,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:12621,Modifiability,Inherit,Inheritance,12621," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:12634,Modifiability,Inherit,Inherited,12634," option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:5723,Security,Hash,Hash,5723,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:9489,Testability,Test,TestBit,9489,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:9528,Testability,Test,TestBits,9528,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_short_.html:2226,Usability,Clear,Clear,2226,"class)THnT<Short_t>, THnS. Function Members (Methods); public:. THnT<short>(); THnT<short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_short_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:3011,Availability,Error,Error,3011,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:3140,Availability,error,error,3140,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:3224,Availability,error,error,3224,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:12254,Availability,error,error,12254," const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:12442,Availability,error,errors,12442," const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:11357,Deployability,Update,UpdateXStat,11357,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:356,Integrability,interface,interfaces,356,". THnT<ULong64_t>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<ULong64_t>. class THnT<ULong64_t>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. Function Members (Methods); public:. ~THnT<unsigned long long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::Cl",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:5645,Modifiability,Inherit,InheritsFrom,5645,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:5711,Modifiability,Inherit,InheritsFrom,5711,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:12612,Modifiability,Inherit,Inheritance,12612," const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:12625,Modifiability,Inherit,Inherited,12625," const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:5535,Security,Hash,Hash,5535,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:9301,Testability,Test,TestBit,9301,"le_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<unsigned long long>(); THnT<unsigned long long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:9340,Testability,Test,TestBits,9340,"le_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<unsigned long long>(); THnT<unsigned long long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_ULong64_t_.html:2038,Usability,Clear,Clear,2038,"ly small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. Function Members (Methods); public:. ~THnT<unsigned long long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_ULong64_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_ULong64_t_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:3234,Availability,Error,Error,3234,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:3363,Availability,error,error,3363,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:3447,Availability,error,error,3447,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:12305,Availability,error,error,12305," = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:12493,Availability,error,errors,12493," = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:11414,Deployability,Update,UpdateXStat,11414,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:365,Integrability,interface,interfaces,365,". THnT<unsigned int>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<unsigned int>. class THnT<unsigned int>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnT<UInt_t>. Function Members (Methods); public:. THnT<unsigned int>(); THnT<unsigned int>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:5868,Modifiability,Inherit,InheritsFrom,5868,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:5934,Modifiability,Inherit,InheritsFrom,5934,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:12663,Modifiability,Inherit,Inheritance,12663," = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:12676,Modifiability,Inherit,Inherited,12676," = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:5758,Security,Hash,Hash,5758,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:9524,Testability,Test,TestBit,9524,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:9563,Testability,Test,TestBits,9563,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_int_.html:2261,Usability,Clear,Clear,2261,"t_t>. Function Members (Methods); public:. THnT<unsigned int>(); THnT<unsigned int>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_unsigned_int_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_int_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:3241,Availability,Error,Error,3241,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:3370,Availability,error,error,3370,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:3454,Availability,error,error,3454,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:12313,Availability,error,error,12313,"= """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:12501,Availability,error,errors,12501,"= """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:11421,Deployability,Update,UpdateXStat,11421,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:368,Integrability,interface,interfaces,368,". THnT<unsigned long>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<unsigned long>. class THnT<unsigned long>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnT<ULong_t>. Function Members (Methods); public:. THnT<unsigned long>(); THnT<unsigned long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:5875,Modifiability,Inherit,InheritsFrom,5875,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:5941,Modifiability,Inherit,InheritsFrom,5941,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:12671,Modifiability,Inherit,Inheritance,12671,"= """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:12684,Modifiability,Inherit,Inherited,12684,"= """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:5765,Security,Hash,Hash,5765,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:9531,Testability,Test,TestBit,9531,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:9570,Testability,Test,TestBits,9570,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_long_.html:2268,Usability,Clear,Clear,2268,">. Function Members (Methods); public:. THnT<unsigned long>(); THnT<unsigned long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_unsigned_long_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:3248,Availability,Error,Error,3248,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:3377,Availability,error,error,3377,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:3461,Availability,error,error,3461,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:12321,Availability,error,error,12321," """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:12509,Availability,error,errors,12509," """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:11428,Deployability,Update,UpdateXStat,11428,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn::AllocCoordBuf() const; Bool_tTHnBase::CheckConsistency(const THnBase* h, const char* tag) const; THnBase*THnBase::CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; TH1*THnBase::CreateHist(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const TH1* h1, Bool_t sparse, Int_t chunkSize = 1024*16); static THnBase*THnBase::CreateHnAny(const char* name, const char* title, const THnBase* hn, Bool_t sparse, Int_t chunkSize = 1024*16); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTHn::FillBin(Long64_t bin, Double_t w); voidTHnBase::FillBinBase(Double_t w); voidTHnBase::Init(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis, Int_t chunkSize = 1024*16); virtual voidTHn::InitStorage(Int_t* nbins, Int_t chunkSize); voidTObject::MakeZombie(); Bool_tTHnBase::PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; TObject*THnBase::ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantNDim, Option_t* option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidO",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:371,Integrability,interface,interfaces,371,". THnT<unsigned short>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THnT<unsigned short>. class THnT<unsigned short>: public THn. Templated implementation of the abstract base THn.; All functionality and the interfaces to be used are in THn!. THn does not know how to store any bin content itself. Instead, this; is delegated to the derived, templated class: the template parameter decides; what the format for the bin content is. The actual storage is delegated to; TNDArrayT<T>. Typedefs exist for template parematers with ROOT's generic types:. Templated name Typedef Bin content type; THnT<Char_t> THnC Char_t; THnT<Short_t> THnS Short_t; THnT<Int_t> THnI Int_t; THnT<Long_t> THnL Long_t; THnT<Float_t> THnF Float_t; THnT<Double_t> THnD Double_t. We recommend to use THnC wherever possible, and to map its value space; of 256 possible values to e.g. float values outside the class. This saves an; enourmous amount of memory. Only if more than 256 values need to be; distinguished should e.g. THnS or even THnF be chosen. Implementation detail: the derived, templated class is kept extremely small; on purpose. That way the (templated thus inlined) uses of this class will; only create a small amount of machine code, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnT<UShort_t>. Function Members (Methods); public:. THnT<unsigned short>(); THnT<unsigned short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBi",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:5882,Modifiability,Inherit,InheritsFrom,5882,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:5948,Modifiability,Inherit,InheritsFrom,5948,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:12679,Modifiability,Inherit,Inheritance,12679," """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:12692,Modifiability,Inherit,Inherited,12692," """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:5772,Security,Hash,Hash,5772,"ouble_tTHnBase::GetBinError(const Int_t* idx) const; Double_tTHnBase::GetBinError(Long64_t linidx) const; virtual Double_tTHn::GetBinError2(Long64_t linidx) const; Bool_tTHnBase::GetCalculateErrors() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTHnBase::GetEntries() const; virtual const char*TObject::GetIconName() const; TObjArray*THnBase::GetListOfAxes(); const TObjArray*THnBase::GetListOfAxes() const; TList*THnBase::GetListOfFunctions(); virtual const char*TNamed::GetName() const; virtual Long64_tTHn::GetNbins() const; Int_tTHnBase::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTHnBase::GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Double_tTHnBase::GetSumw() const; Double_tTHnBase::GetSumw2() const; Double_tTHnBase::GetSumwx(Int_t dim) const; Double_tTHnBase::GetSumwx2(Int_t dim) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTHnBase::GetWeightSum() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTHnBase::IsFolder() const; Bool_tTHnBase::IsInRange(Int_t* coord) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tTHnBase::Merge(TCollection* list); voidTHnBase::Multiply(const THnBase* h); voidTHnBase::Multiply(TF1* f, Double_t c = 1.",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:9538,Testability,Test,TestBit,9538,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:9577,Testability,Test,TestBits,9577,"n::Rebin(const Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTHnBase::AddInternal(const THnBase* h, Double_t c, Bool_t rebinned); voidTHn:",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THnT_unsigned_short_.html:2275,Usability,Clear,Clear,2275,"Function Members (Methods); public:. THnT<unsigned short>(); THnT<unsigned short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root/html534/THnT_unsigned_short_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html
https://root.cern/root/html534/THostAuth.html:2171,Availability,Error,Error,2171,"ption = """"); voidAsString(TString& out) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; TList*Established() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::G",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:2327,Availability,error,error,2327,"t; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; TList*Established() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:2411,Availability,error,error,2411,"char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; TList*Established() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* tim",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:10778,Availability,failure,failures,10778," Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local list; Return pointer to it to be stored in TAuthenticate. void AsString(TString& out) const; Return a static string with all info in a serialized form. Int_t NumMethods() const; { return fNumMethods; }. Int_t GetMethod(Int_t idx) const; { return fMethods[idx]; }. Int_t GetFailure(Int_t idx) const; { return fFailure[idx]; }. Int_t GetSuccess(Int_t idx) const; { return fSuccess[idx]; }. Bool_t IsActive() const; { return fActive; }. void DeActivate(); { fActive = kFALSE; }. void Activate(); { fActive = kTRUE; }. const char * GetDetailsByIdx(Int_t idx) const; { return fDetails[idx]; }. const char * GetHost() const; { return fHost; }. Int_t GetServer() const; { return (Int_t)fServer; }. const char * GetUser() const; { r",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:10182,Deployability,Update,Update,10182,"Auth& ha); Copy ctor ... void AddMethod(Int_t level, const char* details = 0); Add method to the list. If already there, change its; details to 'details'. void RemoveMethod(Int_t level); Remove method 'meth' from the list, if there ... void Reset(); Remove all methods, leaving Active status and; list of associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local list; Return pointer to it to be stored in TAuthenticate. void AsString(TString& out) const; Return a static string with all info in a serialized form. Int_t NumMethods() const; { retu",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:10205,Deployability,Update,Update,10205,"Auth& ha); Copy ctor ... void AddMethod(Int_t level, const char* details = 0); Add method to the list. If already there, change its; details to 'details'. void RemoveMethod(Int_t level); Remove method 'meth' from the list, if there ... void Reset(); Remove all methods, leaving Active status and; list of associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local list; Return pointer to it to be stored in TAuthenticate. void AsString(TString& out) const; Return a static string with all info in a serialized form. Int_t NumMethods() const; { retu",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:3599,Modifiability,Inherit,InheritsFrom,3599,"t char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHasMethod(Int_t level, Int_t* pos = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumMethods() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:3665,Modifiability,Inherit,InheritsFrom,3665,"ject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHasMethod(Int_t level, Int_t* pos = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumMethods() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:7358,Modifiability,Inherit,Inheritance,7358,"onst. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCreate(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfActiveFlag used in cleaning/reset; TStringfDetails[6]AuthDetails; Int_tfFailure[6]Statistics of failed attempts / per method; TStringfHostHost; Int_tfMethods[6]AuthMethods; Int_tfNumMethodsNumber of AuthMethods; TList*fSecContextsList of TSecContexts related to this THostAuth; Char_tfServerServer (kSOCKD,kROOTD,kPROOFD); Int_tfSuccess[6]Statistics of successful attempts / per method; TStringfUserUsername. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THostAuth(); Default constructor. THostAuth(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); Create hostauth object.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* host, Int_t server, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); Create hostauth object.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* host, const char* user, Int_t authmeth, const char* details); Create hostauth object with one method only.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://hos",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:7371,Modifiability,Inherit,Inherited,7371,"onst. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCreate(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfActiveFlag used in cleaning/reset; TStringfDetails[6]AuthDetails; Int_tfFailure[6]Statistics of failed attempts / per method; TStringfHostHost; Int_tfMethods[6]AuthMethods; Int_tfNumMethodsNumber of AuthMethods; TList*fSecContextsList of TSecContexts related to this THostAuth; Char_tfServerServer (kSOCKD,kROOTD,kPROOFD); Int_tfSuccess[6]Statistics of successful attempts / per method; TStringfUserUsername. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THostAuth(); Default constructor. THostAuth(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); Create hostauth object.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* host, Int_t server, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); Create hostauth object.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* host, const char* user, Int_t authmeth, const char* details); Create hostauth object with one method only.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://hos",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:335,Security,authenticat,authentication,335,". THostAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » THostAuth. class THostAuth: public TObject. THostAuth. Contains details about host-specific authentication methods and the; result of their application.; Used by TAuthenticate. Function Members (Methods); public:. THostAuth(); THostAuth(const char* asstring); THostAuth(THostAuth& ha); THostAuth(const char* host, const char* user, Int_t authmeth, const char* details); THostAuth(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); THostAuth(const char* host, Int_t server, const char* user, Int_t authmeth, const char* details); THostAuth(const char* host, Int_t server, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); virtual~THostAuth(); voidTObject::AbstractMethod(const char* method) const; voidActivate(); voidAddFirst(Int_t level, const char* details = 0); voidAddMethod(Int_t level, const char* details = 0); virtual voidTObject::AppendPad(Option_t* option = """"); voidAsString(TString& out) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtua",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:3443,Security,Hash,Hash,3443,"xecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHasMethod(Int_t level, Int_t* pos = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumMethods() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:9637,Security,authenticat,authentication,9637,"nst char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); Create hostauth object.; 'host' may contain also the server for whicb these directives; are valid in the form 'host:server' or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* asstring); Create hostauth object from directives given as a compact string; See THostAuth::AsString().; Used in proof context only; fServer not set; to be set by hand; with SetServer() method if really needed. THostAuth(THostAuth& ha); Copy ctor ... void AddMethod(Int_t level, const char* details = 0); Add method to the list. If already there, change its; details to 'details'. void RemoveMethod(Int_t level); Remove method 'meth' from the list, if there ... void Reset(); Remove all methods, leaving Active status and; list of associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFi",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:9889,Security,authenticat,authentication,9889,"or 'server://host'; with server either ""sock[d]"", ""root[d]"", ""proof[d]"" or; 0, 1, 2, respectively. THostAuth(const char* asstring); Create hostauth object from directives given as a compact string; See THostAuth::AsString().; Used in proof context only; fServer not set; to be set by hand; with SetServer() method if really needed. THostAuth(THostAuth& ha); Copy ctor ... void AddMethod(Int_t level, const char* details = 0); Add method to the list. If already there, change its; details to 'details'. void RemoveMethod(Int_t level); Remove method 'meth' from the list, if there ... void Reset(); Remove all methods, leaving Active status and; list of associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth,",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:10056,Security,authenticat,authentication,10056,"rectives given as a compact string; See THostAuth::AsString().; Used in proof context only; fServer not set; to be set by hand; with SetServer() method if really needed. THostAuth(THostAuth& ha); Copy ctor ... void AddMethod(Int_t level, const char* details = 0); Add method to the list. If already there, change its; details to 'details'. void RemoveMethod(Int_t level); Remove method 'meth' from the list, if there ... void Reset(); Remove all methods, leaving Active status and; list of associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:10595,Security,authenticat,authentication,10595,"associted TSceContexts unchanged. ~THostAuth(); The dtor. const char * GetDetails(Int_t level); Return authentication details for specified level; or """" if the specified level does not exist for this host. Bool_t HasMethod(Int_t level, Int_t* pos = 0); Return kTRUE if method 'level' is in the list. void SetDetails(Int_t level, const char* details); Set authentication details for specified level. void Print(Option_t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local list; Return pointer to it to be stored in TAuthenticate. void AsString(TString& out) const; Return a static string with all info in a serialized form. Int_t NumMethods() const; { return fNumMethods; }. Int_t GetMethod(Int_t idx) const; { return fMethods[idx]; }. Int_t GetFailure(Int_t idx) const; { return fFailure[idx]; }. Int_t GetSuccess(Int_t idx) const; { return fSuccess[idx]; }. Bool_t IsActive() const; { return fActive; }. void DeActivate(); { fActive = kFALSE; }. void Activate",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:11009,Security,Secur,Security,11009,"t* option = """") const; Print object content. void PrintEstablished() const; Print info about established authentication vis-a-vis of this Host. void ReOrder(Int_t nmet, Int_t* fmet); Reorder nmet methods according fmet[nmet]. void Update(THostAuth* ha); Update info with the one in ha; Remaining methods, if any, get lower priority. void SetFirst(Int_t level); Set 'method' to be the first used (if in the list ...). void SetLast(Int_t level); Set 'method' to be the last used (if in the list ...). void AddFirst(Int_t level, const char* details = 0); Add new method in first position; If already in the list, set as first method 'level' with; authentication 'details'.; Faster then AddMethod(method,details)+SetFirst(method). void CountSuccess(Int_t level); Count successes for 'method'. void CountFailure(Int_t level); Count failures for 'method'. TRootSecContext * CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); Create a Security context and add it to local list; Return pointer to it to be stored in TAuthenticate. void AsString(TString& out) const; Return a static string with all info in a serialized form. Int_t NumMethods() const; { return fNumMethods; }. Int_t GetMethod(Int_t idx) const; { return fMethods[idx]; }. Int_t GetFailure(Int_t idx) const; { return fFailure[idx]; }. Int_t GetSuccess(Int_t idx) const; { return fSuccess[idx]; }. Bool_t IsActive() const; { return fActive; }. void DeActivate(); { fActive = kFALSE; }. void Activate(); { fActive = kTRUE; }. const char * GetDetailsByIdx(Int_t idx) const; { return fDetails[idx]; }. const char * GetHost() const; { return fHost; }. Int_t GetServer() const; { return (Int_t)fServer; }. const char * GetUser() const; { return fUser; }. void SetHost(const char* host); { fHost = host; }. void SetServer(Int_t server); { fServer = (Char_t)server; }. void SetUser(const char* user); { fUser = user; }. TLi",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:5999,Testability,Test,TestBit,5999,"oid* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THostAuth&operator=(const THostAuth&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; voidPrintEstablished() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemoveMethod(Int_t level); voidReOrder(Int_t nmet, Int_t* fmet); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDetails(Int_t level, const char* details); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEstablished(TList* nl); voidSetFirst(Int_t level); voidSetHost(const char* host); voidSetLast(Int_t level); static voidTObject::SetObjectStat(Bool_t stat); voidSetServer(Int_t server); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUser(const char* user); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdate(THostAuth* ha); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:6038,Testability,Test,TestBits,6038,"oid* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THostAuth&operator=(const THostAuth&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; voidPrintEstablished() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemoveMethod(Int_t level); voidReOrder(Int_t nmet, Int_t* fmet); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDetails(Int_t level, const char* details); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEstablished(TList* nl); voidSetFirst(Int_t level); voidSetHost(const char* host); voidSetLast(Int_t level); static voidTObject::SetObjectStat(Bool_t stat); voidSetServer(Int_t server); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUser(const char* user); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdate(THostAuth* ha); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THostAuth.html:1354,Usability,Clear,Clear,1354," THostAuth(); THostAuth(const char* asstring); THostAuth(THostAuth& ha); THostAuth(const char* host, const char* user, Int_t authmeth, const char* details); THostAuth(const char* host, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); THostAuth(const char* host, Int_t server, const char* user, Int_t authmeth, const char* details); THostAuth(const char* host, Int_t server, const char* user, Int_t nmeth = 0, Int_t* authmeth = 0, char** details = 0); virtual~THostAuth(); voidTObject::AbstractMethod(const char* method) const; voidActivate(); voidAddFirst(Int_t level, const char* details = 0); voidAddMethod(Int_t level, const char* details = 0); virtual voidTObject::AppendPad(Option_t* option = """"); voidAsString(TString& out) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtua",MatchSource.WIKI,root/html534/THostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THostAuth.html
https://root.cern/root/html534/THStack.html:2387,Availability,Error,Error,2387," name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual ",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:2516,Availability,error,error,2516,"j_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetStack(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::Ge",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:2600,Availability,error,error,2600,"Method(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetStack(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TAxis*GetXaxis() const; TAxis*GetYaxis() const; virtual Bool_tTOb",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:11133,Availability,error,error,11133,"m of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoid this behaviour. This is useful; when drawing a THStack on top of an other plot. If the patterns used to; draw the histograms in the stack are transparents, then the plot behind; will be visible. See THistPainter::Paint for a list of valid options. void Print(Option_t* chopt = """") const; Print the list of histograms. void",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:9998,Integrability,depend,depends,9998,"tion = """"); add a new histogram to the list; Only 1-d and 2-d histograms currently supported.; A drawing option may be specified. void Browse(TBrowser* b); Browse. void BuildStack(); build sum of all histograms; Build a separate list fStack containing the running sum of all histograms. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to each graph. void Draw(Option_t* chopt = """"); Draw this multihist with its current attributes. Options to draw histograms are described in THistPainter::Paint; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other. TH1 * GetHistogram() const; Returns a pointer to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in THStack::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* ",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:10645,Integrability,depend,depends,10645,"istogram() const; Returns a pointer to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in THStack::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a s",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:10850,Integrability,depend,depends,10850,"TPad::DrawFrame. return pointer to hframe histogram. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoid this behaviour. This is useful; when drawing a THStack on top of an other plot.",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:3770,Modifiability,Inherit,InheritsFrom,3770,"llBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetStack(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TAxis*GetXaxis() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Long64_tMerge(TCollection* li, TFileMergeInfo* info); virtual voidModified(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:3836,Modifiability,Inherit,InheritsFrom,3836," char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetStack(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TAxis*GetXaxis() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Long64_tMerge(TCollection* li, TFileMergeInfo* info); virtual voidModified(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz)",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:7343,Modifiability,Inherit,Inheritance,7343,"t char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBuildStack(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THStack&operator=(const THStack&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TH1*fHistogramPointer to histogram used for drawing axis; TList*fHistsPointer to array of TH1; Double_tfMaximumMaximum value for plotting along y; Double_tfMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; TObjArray*fStack!Pointer to array of sums of TH1; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THStack(); THStack default constructor. THStack(const char* name, const char* title); constructor with name and title. THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); Creates a new THStack from a TH2 or TH3; It is filled with the 1D histograms from GetProjectionX or GetProjectionY; for each bin of the histogram. It illustrates the differences and total; sum along an axis. Parameters:; - hist: the histogram used for the projections. Can be an object deriving; from TH2 or TH3.; - axis: for TH2: ""x"" for ProjectionX, ""y"" for ProjectionY.; for TH3: see TH3::Project3D.; - name: fName is set to name if given, otherwise to histo's name with; ""_stack_<axis>"" appended, where <axis> is the value of the; parameter axis.; - title: fTitle is set to title if given, other",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:7356,Modifiability,Inherit,Inherited,7356,"t char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBuildStack(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THStack&operator=(const THStack&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TH1*fHistogramPointer to histogram used for drawing axis; TList*fHistsPointer to array of TH1; Double_tfMaximumMaximum value for plotting along y; Double_tfMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; TObjArray*fStack!Pointer to array of sums of TH1; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THStack(); THStack default constructor. THStack(const char* name, const char* title); constructor with name and title. THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); Creates a new THStack from a TH2 or TH3; It is filled with the 1D histograms from GetProjectionX or GetProjectionY; for each bin of the histogram. It illustrates the differences and total; sum along an axis. Parameters:; - hist: the histogram used for the projections. Can be an object deriving; from TH2 or TH3.; - axis: for TH2: ""x"" for ProjectionX, ""y"" for ProjectionY.; for TH3: see TH3::Project3D.; - name: fName is set to name if given, otherwise to histo's name with; ""_stack_<axis>"" appended, where <axis> is the value of the; parameter axis.; - title: fTitle is set to title if given, other",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:11771,Safety,avoid,avoid,11771," NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoid this behaviour. This is useful; when drawing a THStack on top of an other plot. If the patterns used to; draw the histograms in the stack are transparents, then the plot behind; will be visible. See THistPainter::Paint for a list of valid options. void Print(Option_t* chopt = """") const; Print the list of histograms. void RecursiveRemove(TObject* obj); Recursively remove object from the list of histograms. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetMaximum(Double_t maximum = -1111); Set maximum. void SetMinimum(Double_t minimum = -1111); Set minimum. THStack& operator=(const THStack& ). TList * GetHists() const; { return fHists; }. void SetHistogram(TH1* h); {fHistogram = h;}. » Author: Rene Brun 10/12/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestio",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:3660,Security,Hash,Hash,3660,"_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; TList*GetHists() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMaximum(Option_t* option = """"); virtual Double_tGetMinimum(Option_t* option = """"); virtual const char*TNamed::GetName() const; Int_tGetNhists() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetStack(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TAxis*GetXaxis() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Long64_tMerge(TCollection* li, TFileMergeInfo* info); virtual voidModified(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static ",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:576,Testability,test,test,576,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:630,Testability,test,test,630,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:750,Testability,test,test,750,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:871,Testability,test,test,871,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:6155,Testability,Test,TestBit,6155,"ct::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* chopt = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* chopt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetHistogram(TH1* h); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:6194,Testability,Test,TestBits,6194,"ct::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* chopt = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* chopt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetHistogram(TH1* h); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THStack.html:1863,Usability,Clear,Clear,1863," THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root/html534/THStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THStack.html
https://root.cern/root/html534/THtml.html:18197,Availability,Error,Error,18197,,MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:18326,Availability,error,error,18326,,MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:18410,Availability,error,error,18410,,MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27533,Availability,error,error,27533,"tml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive is run on. void CreateAuxiliaryFiles() const; copy CSS, javascript file, etc to the output dir. const char* GetEtcDir() const; Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html). TClassDocInfo * GetNextClass(); Return the next class to be generated for MakeClassThreaded. const char* GetURL(const char* lib = 0) const; Get the documentation URL for library lib.; If lib == 0 or no documentation URL has been set for lib, return the ROOT; documentation URL. The return value is always != 0. Bool_t HaveDot(); Check whether dot is available in $PATH or in the directory set; by SetDotPath(). void HelperDeleted(THtml::THelperBase* who); Inform the THtml object that ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:28410,Availability,avail,available,28410,"; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive is run on. void CreateAuxiliaryFiles() const; copy CSS, javascript file, etc to the output dir. const char* GetEtcDir() const; Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html). TClassDocInfo * GetNextClass(); Return the next class to be generated for MakeClassThreaded. const char* GetURL(const char* lib = 0) const; Get the documentation URL for library lib.; If lib == 0 or no documentation URL has been set for lib, return the ROOT; documentation URL. The return value is always != 0. Bool_t HaveDot(); Check whether dot is available in $PATH or in the directory set; by SetDotPath(). void HelperDeleted(THtml::THelperBase* who); Inform the THtml object that one of its helper objects was deleted.; Called by THtml::HelperBase::~HelperBase(). void Convert(const char* filename, const char* title, const char* dirname = """", const char* relpath = ""../"", Int_t includeOutput = kNoOutput, const char* context = """"); It converts a single text file to HTML. Input: filename - name of the file to convert; title - title which will be placed at the top of the HTML file; dirname - optional parameter, if it's not specified, output will; be placed in htmldoc/examples directory.; relpath - optional parameter pointing to the THtml generated doc; on the server, relative to the current page.; includeOutput - if != kNoOutput, run the script passed as filename and; store all created canvases in PNG files that are; shown next to the converted source. Bitwise-ORing with; kForceOutput re-runs the script even if output PNGs exist; that are newer",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:33041,Availability,avail,available,33041,"n for all the classes specified in the filter (by default ""*""); To process all classes having a name starting with XX, do:; html.MakeAll(kFALSE,""XX*"");; If force=kFALSE (default), only the classes that have been modified since; the previous call to this function will be generated.; If force=kTRUE, all classes passing the filter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the number of CPUs. void MakeClass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) THtmlThreadInfo object containing the current; THtml object, and whether ""force"" was passed to MakeAll().; The thread will poll GetNextClass() until no further class is available. void MakeIndex(const char* filter = ""*""); Create the index files for the product, modules, all types, etc.; By default all classes are indexed (if filter=""*"");; to generate an index for all classes starting with ""XX"", do; html.MakeIndex(""XX*"");. void MakeTree(const char* className, Bool_t force = kFALSE); Make an inheritance tree. Input: className - name of the class to process. void SetFoundDot(Bool_t found = kTRUE); Set whether ""dot"" (a GraphViz utility) is available. void SetLocalFiles() const; Fill the files available in the file system below fPathInfo.fInputPath. void SetModuleDefinition(const THtml::TModuleDefinition& md); Set the module defining object to be used; can also be a user derived; object (a la traits). void SetFileDefinition(const THtml::TFileDefinition& fd); Set the file defining object to be used; can also be a user derived; object (a la traits). void SetPathDefinition(const THtml::TPathDefinition& pd); Set the path defining obj",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:33516,Availability,avail,available,33516,"ass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) THtmlThreadInfo object containing the current; THtml object, and whether ""force"" was passed to MakeAll().; The thread will poll GetNextClass() until no further class is available. void MakeIndex(const char* filter = ""*""); Create the index files for the product, modules, all types, etc.; By default all classes are indexed (if filter=""*"");; to generate an index for all classes starting with ""XX"", do; html.MakeIndex(""XX*"");. void MakeTree(const char* className, Bool_t force = kFALSE); Make an inheritance tree. Input: className - name of the class to process. void SetFoundDot(Bool_t found = kTRUE); Set whether ""dot"" (a GraphViz utility) is available. void SetLocalFiles() const; Fill the files available in the file system below fPathInfo.fInputPath. void SetModuleDefinition(const THtml::TModuleDefinition& md); Set the module defining object to be used; can also be a user derived; object (a la traits). void SetFileDefinition(const THtml::TFileDefinition& fd); Set the file defining object to be used; can also be a user derived; object (a la traits). void SetPathDefinition(const THtml::TPathDefinition& pd); Set the path defining object to be used; can also be a user derived; object (a la traits). void SetInputDir(const char* dir); Set the directory containing the source files.; The source file for a class MyClass will be searched; by prepending dir to the value of; MyClass::Class()->GetImplFileName() - which can contain; directory information!; Also resets the class structure, in case new files can; be found after this call. void SetOutputDir(const char* dir); Set the directory where the H",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:33570,Availability,avail,available,33570,"t: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) THtmlThreadInfo object containing the current; THtml object, and whether ""force"" was passed to MakeAll().; The thread will poll GetNextClass() until no further class is available. void MakeIndex(const char* filter = ""*""); Create the index files for the product, modules, all types, etc.; By default all classes are indexed (if filter=""*"");; to generate an index for all classes starting with ""XX"", do; html.MakeIndex(""XX*"");. void MakeTree(const char* className, Bool_t force = kFALSE); Make an inheritance tree. Input: className - name of the class to process. void SetFoundDot(Bool_t found = kTRUE); Set whether ""dot"" (a GraphViz utility) is available. void SetLocalFiles() const; Fill the files available in the file system below fPathInfo.fInputPath. void SetModuleDefinition(const THtml::TModuleDefinition& md); Set the module defining object to be used; can also be a user derived; object (a la traits). void SetFileDefinition(const THtml::TFileDefinition& fd); Set the file defining object to be used; can also be a user derived; object (a la traits). void SetPathDefinition(const THtml::TPathDefinition& pd); Set the path defining object to be used; can also be a user derived; object (a la traits). void SetInputDir(const char* dir); Set the directory containing the source files.; The source file for a class MyClass will be searched; by prepending dir to the value of; MyClass::Class()->GetImplFileName() - which can contain; directory information!; Also resets the class structure, in case new files can; be found after this call. void SetOutputDir(const char* dir); Set the directory where the HTML pages shuold be written to.; If the directory does not exist it will be created when ne",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:792,Deployability,Configurat,Configuration,792,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:1370,Deployability,Configurat,Configuration,1370,"ted text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.So",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:1994,Deployability,Configurat,Configuration,1994,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2014,Deployability,configurat,configuration,2014,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2508,Deployability,configurat,configuration,2508,"l.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2945,Deployability,configurat,configuration,2945,"se:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentatio",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:3621,Deployability,update,updated,3621,"tputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; documentation syntax for further details.; Example:; Root.Html.Description: //____________________; The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file,",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:5343,Deployability,configurat,configuration,5343,"name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; THtml::MakeAll()'s; default option force=kFALSE, in which case; THtml generates; documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has; one of the following two formats; Name (non-alpha).; THtml will generate an; HTML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Foote",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:6306,Deployability,configurat,configuration,6306,"TML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Footer, or by calling SetHeader(), SetFooter().; Both variables default to """", using the standard Root; versions. If it has a ""+"" appended, THtml will; write both versions (user and root) to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:7514,Deployability,update,update,7514,"to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by TClass::GetImplFileName(),; TClass::GetDeclFileName()).; If the header is not generated for a class, they will be replaced by """".; Root's footer starts with the tag <!--SIGNATURE-->. It includes the; author(s), last update, copyright, the links to the Root home page, to the; user home page, to the index file (ClassIndex.html), to the top of the page; and this page is automatically generated infomation. It ends with the; tags </body></html>. If you want to replace it,; THtml will search for some; tags in your footer: Occurrences of the strings %AUTHOR%, %UPDATE%, and; %COPYRIGHT% are replaced by their; corresponding values before writing the html file. The %AUTHOR% tag will be; replaced by the exact string that follows Root.Html.Author, no link; generation will occur.; II.7 Links to searches, home page, ViewVC; Additional parameters can be set by Root.Html.Homepage (address of the; user's home page), Root.Html.SearchEngine (search engine for the class; documentation), Root.Html.Search (search URL, where %u is replaced by the; referer and %s by the escaped search expression), and a ViewVC base URL; Root.Html.ViewCVS. For the latter, the file name is appended or, if; the URL contains %f, %f is replaced by the file name.; All values def",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:7858,Deployability,UPDATE,UPDATE,7858,"nd ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by TClass::GetImplFileName(),; TClass::GetDeclFileName()).; If the header is not generated for a class, they will be replaced by """".; Root's footer starts with the tag <!--SIGNATURE-->. It includes the; author(s), last update, copyright, the links to the Root home page, to the; user home page, to the index file (ClassIndex.html), to the top of the page; and this page is automatically generated infomation. It ends with the; tags </body></html>. If you want to replace it,; THtml will search for some; tags in your footer: Occurrences of the strings %AUTHOR%, %UPDATE%, and; %COPYRIGHT% are replaced by their; corresponding values before writing the html file. The %AUTHOR% tag will be; replaced by the exact string that follows Root.Html.Author, no link; generation will occur.; II.7 Links to searches, home page, ViewVC; Additional parameters can be set by Root.Html.Homepage (address of the; user's home page), Root.Html.SearchEngine (search engine for the class; documentation), Root.Html.Search (search URL, where %u is replaced by the; referer and %s by the escaped search expression), and a ViewVC base URL; Root.Html.ViewCVS. For the latter, the file name is appended or, if; the URL contains %f, %f is replaced by the file name.; All values default to """".; Examples:; Root.Html.Homepage: http://www.enricos-home.it; Root.Html.SearchEngine: http://root.cern.ch/root/Search.phtml; Root.Html.Search: http://www.google.com/search?q=%s+site%3A%u; II.8 HTML Charset; XHTML 1.0 transitional recommends the specification of the charset in the; content ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15424,Deployability,install,install,15424,"asses.; A filename starting with ""index."" will be included in the index page;; all other files will be linked.; Only files ending on .html or .txt will be taken into account;; the text files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15568,Deployability,Configurat,Configuration,15568,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15615,Deployability,configurat,configuration,15615,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15928,Deployability,update,update,15928," javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set. IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known; classes, and forwards API invocations to the ""work horses"".; TDocOutput; generates the output by letting a; TDocP",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:26582,Deployability,configurat,configuration,26582,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:26766,Deployability,configurat,configuration,26766,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27037,Deployability,configurat,configuration,27037,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27158,Deployability,configurat,configuration,27158,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:36821,Deployability,Configurat,Configuration,36821,; { fCounterFormat = format; }. void SetClassDocTag(const char* tag); { fDocSyntax.fClassDocTag = tag; }. void SetAuthorTag(const char* tag); { fDocSyntax.fAuthorTag = tag; }. void SetLastUpdateTag(const char* tag); { fDocSyntax.fLastUpdateTag = tag; }. void SetCopyrightTag(const char* tag); { fDocSyntax.fCopyrightTag = tag; }. void SetHeader(const char* file); { fOutputStyle.fHeader = file; }. void SetFooter(const char* file); { fOutputStyle.fFooter = file; }. void SetHomepage(const char* url); { fLinkInfo.fHomepage = url; }. void SetSearchStemURL(const char* url); { fLinkInfo.fSearchStemURL = url; }. void SetSearchEngine(const char* url); { fLinkInfo.fSearchEngine = url; }. void SetViewCVS(const char* url); { fLinkInfo.fViewCVS = url; }. void SetWikiURL(const char* url); { fLinkInfo.fWikiURL = url; }. void SetCharset(const char* charset); { fOutputStyle.fCharset = charset; }. void SetDocStyle(const char* style); { fDocSyntax.fDocStyle = style; }. const TModuleDefinition& GetModuleDefinition() const; Configuration getters. const TFileDefinition& GetFileDefinition() const. const TPathDefinition& GetPathDefinition() const. const TString& GetProductName() const; { return fProductName; }. const TString& GetInputPath() const; { return fPathInfo.fInputPath; }. const TString& GetModuleDocPath() const; { return fPathInfo.fDocPath; }. const TString& GetDotDir() const; { return fPathInfo.fDotDir; }. const TString& GetXwho() const; { return fLinkInfo.fXwho; }. const char* GetCounterFormat() const; { return fCounterFormat; }. const TString& GetClassDocTag() const; { return fDocSyntax.fClassDocTag; }. const TString& GetAuthorTag() const; { return fDocSyntax.fAuthorTag; }. const TString& GetLastUpdateTag() const; { return fDocSyntax.fLastUpdateTag; }. const TString& GetCopyrightTag() const; { return fDocSyntax.fCopyrightTag; }. const TString& GetHeader() const; { return fOutputStyle.fHeader; }. const TString& GetFooter() const; { return fOutputStyle.fFooter; }. const TString& Get,MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:3684,Integrability,depend,dependencies,3684,"tputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; documentation syntax for further details.; Example:; Root.Html.Description: //____________________; The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file,",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15345,Integrability,depend,dependencies,15345,"index,; either by linking it or by including it.; The files for modules are searched based on the source file directory of the; module's classes.; A filename starting with ""index."" will be included in the index page;; all other files will be linked.; Only files ending on .html or .txt will be taken into account;; the text files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:31528,Integrability,depend,depending,31528,"d) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html file name for a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return implementation file name. bool GetDeclImplFileName(TClass* cl, bool filesys, bool decl, TString& out_name) const; Combined implementation for GetDeclFileName(), GetImplFileName():; Return declaration / implementation file name (depending on decl);; return the full path if filesys is true. const TString& GetOutputDir(Bool_t createDir = kTRUE) const; Return the output directory as set by SetOutputDir().; Create it if it doesn't exist and if createDir is kTRUE. Bool_t IsNamespace(const TClass* cl); Check whether cl is a namespace. void LoadAllLibs(); Load all libraries known to ROOT via the rootmap system. void MakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); Produce documentation for all the classes specified in the filter (by default ""*""); To process all classes having a name starting with XX, do:; html.MakeAll(kFALSE,""XX*"");; If force=kFALSE (default), only the classes that have been modified since; the previous call to this function will be generated.; If force=kTRUE, all classes passing the filter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the numbe",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:792,Modifiability,Config,Configuration,792,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:1370,Modifiability,Config,Configuration,1370,"ted text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.So",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:1384,Modifiability,variab,variables,1384,"ted text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.So",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:1994,Modifiability,Config,Configuration,1994,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2014,Modifiability,config,configuration,2014,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2080,Modifiability,variab,variable,2080,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2508,Modifiability,config,configuration,2508,"l.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2522,Modifiability,variab,variable,2522,"l.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2945,Modifiability,config,configuration,2945,"se:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentatio",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:2959,Modifiability,variab,variable,2959,"se:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc; contains; Root.Html.MyLib: ../mylib/; THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentatio",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:4784,Modifiability,variab,variables,4784,"LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; documentation syntax for further details.; Example:; Root.Html.Description: //____________________; The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; THtml::MakeAll()'s; default option force=kFALSE, in which case; THtml generates; documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has; one of the following two formats; Name (non-alpha).; THtml will generate an; HTML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:5343,Modifiability,config,configuration,5343,"name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; THtml::MakeAll()'s; default option force=kFALSE, in which case; THtml generates; documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has; one of the following two formats; Name (non-alpha).; THtml will generate an; HTML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Foote",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:5358,Modifiability,variab,variable,5358,"name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; THtml::MakeAll()'s; default option force=kFALSE, in which case; THtml generates; documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has; one of the following two formats; Name (non-alpha).; THtml will generate an; HTML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Foote",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:6306,Modifiability,config,configuration,6306,"TML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Footer, or by calling SetHeader(), SetFooter().; Both variables default to """", using the standard Root; versions. If it has a ""+"" appended, THtml will; write both versions (user and root) to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:6320,Modifiability,variab,variables,6320,"TML link for Name, taking the Root.Html.XWho configuration; variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding; all parts of the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Footer, or by calling SetHeader(), SetFooter().; Both variables default to """", using the standard Root; versions. If it has a ""+"" appended, THtml will; write both versions (user and root) to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:6416,Modifiability,variab,variables,6416,"f the name with spaces replaces by '+'. Non-alphanumerical; characters are printed out behind Name.; Example:; // Author: Enrico Fermi appears in the source file.; THtml will generate the link; http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for; people at CERN.; Name <link> Info.; THtml will generate; an HTML link for Name as specified by link and print; Info behind Name.; Example:; // Author: Enrico Fermi <http://www.enricos-home.it> or; // Author: Enrico Fermi <mailto:enrico@fnal.gov> in the; source file. That's world compatible. Example (with defaults given):; Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?; II.6 Header and footer; THtml generates; a default header and footer for all pages. You can; specify your own versions with the configuration variables Root.Html.Header; and Root.Html.Footer, or by calling SetHeader(), SetFooter().; Both variables default to """", using the standard Root; versions. If it has a ""+"" appended, THtml will; write both versions (user and root) to a file, for the header in the order; 1st root, 2nd user, and for the footer 1st user, 2nd root (the root; versions containing ""<html>"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing; all HTML elements necessary starting with the <doctype> tag and ending with; (and including) the <body> tag. If you add your header it will be added; directly after Root's <body> tag. Any occurrence of the string %TITLE%; in the user's header file will be replaced by; a sensible, automatically generated title. If the header is generated for a; class, occurrences of %CLASS% will be replaced by the current class's name,; %SRCFILE% and %INCFILE% by the name of the source and header file, resp.; (as given by TClass::GetImplFileName(),; TClass::GetDeclFileName()).; If the header is not generated for a class, they will be replaced by """".; Root's footer",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:9459,Modifiability,variab,variable,9459,"ame is appended or, if; the URL contains %f, %f is replaced by the file name.; All values default to """".; Examples:; Root.Html.Homepage: http://www.enricos-home.it; Root.Html.SearchEngine: http://root.cern.ch/root/Search.phtml; Root.Html.Search: http://www.google.com/search?q=%s+site%3A%u; II.8 HTML Charset; XHTML 1.0 transitional recommends the specification of the charset in the; content type meta tag, see e.g. http://www.w3.org/TR/2002/REC-xhtml1-20020801/; THtml generates it for the HTML output files. It defaults to ISO-8859-1, and; can be changed using Root.Html.Charset.; Example:; Root.Html.Charset: EUC-JP; III. Documentation syntax; III.1 Class description; A class description block, which must be placed before the first; member function, has a following form:. ////////////////////////////////////////////////////////////////; // //; // TMyClass //; // //; // This is the description block. //; // //; ////////////////////////////////////////////////////////////////. The environment variable Root.Html.Description; (see: TEnv) contains; the delimiter string (default value: //_________________). It means; that you can also write your class description block like this:. //_____________________________________________________________; // A description of the class starts with the line above, and; // will take place here !; //. Note that everything until the first non-commented line is considered; as a valid class description block.; III.2 Class index; All classes to be documented will have an entry in the ClassIndex.html,; showing their name with a link to their documentation page and a miniature; description. This discription for e.g. the class MyClass has to be given; in MyClass's header as a comment right after ClassDef(MyClass, n).; III.3 Method documentation; A member function description block starts immediately after '{'; and looks like this:. void TWorld::HelloWorldFunc(string *text); {; // This is an example of description for the; // TWorld member function;",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:10647,Modifiability,variab,variable,10647," //_____________________________________________________________; // A description of the class starts with the line above, and; // will take place here !; //. Note that everything until the first non-commented line is considered; as a valid class description block.; III.2 Class index; All classes to be documented will have an entry in the ClassIndex.html,; showing their name with a link to their documentation page and a miniature; description. This discription for e.g. the class MyClass has to be given; in MyClass's header as a comment right after ClassDef(MyClass, n).; III.3 Method documentation; A member function description block starts immediately after '{'; and looks like this:. void TWorld::HelloWorldFunc(string *text); {; // This is an example of description for the; // TWorld member function; helloWorld.Print( text );; }. Like in a class description block, everything until the first; non-commented line is considered as a valid member function; description block.; If the rootrc variable Root.Html.DescriptionStyle is set to; Doc++ THtml will also look for method documentation in front of; the function implementation. This feature is not recommended; source code; making use of this does not comply to the ROOT documentation standards, which; means future versions of THtml might not support it anymore.; III.4 Data member documentation; Data members are documented by putting a C++ comment behind their; declaration in the header file, e.g. int fIAmADataMember; // this is a data member. IV. Documentation directives; NOTE that THtml does not yet support nested directives; (i.e. latex inside html etc)!; IV.1 BEGIN_HTML END_HTML: include 'raw' HTML; You can insert pure html code into your documentation comments. During the; generation of the documentation, this code will be inserted as is; into the html file.; Pure html code must be surrounded by the keywords; BEGIN_HTML and END_HTML, where the; case is ignored.; An example of pure html code is this class description ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15249,Modifiability,inherit,inheritance,15249,"index,; either by linking it or by including it.; The files for modules are searched based on the source file directory of the; module's classes.; A filename starting with ""index."" will be included in the index page;; all other files will be linked.; Only files ending on .html or .txt will be taken into account;; the text files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15262,Modifiability,inherit,inherited,15262,"index,; either by linking it or by including it.; The files for modules are searched based on the source file directory of the; module's classes.; A filename starting with ""index."" will be included in the index page;; all other files will be linked.; Only files ending on .html or .txt will be taken into account;; the text files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15568,Modifiability,Config,Configuration,15568,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15582,Modifiability,variab,variables,15582,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15615,Modifiability,config,configuration,15615,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:15629,Modifiability,variab,variables,15629,"xt files will first be run through; THtml::Convert().; You can see an example here;; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing; the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They; are generated automatically when running MakeAll();; they can be generated on; demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which; are displayed as a tabbed set of imaged ontop of the class description.; It can show the inheritance, inherited and hidden members, directly and; indirectly included files, and library dependencies.; These graphs are generated using the Graphviz; package. You can install it from http://www.graphviz.org.; You can either put it into your $PATH, or tell THtml where to find it by calling; SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml.; You can set them in your .rootrc file, see; TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/peopl",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:21253,Modifiability,Inherit,InheritsFrom,21253,"rClass(TString& module, TClass* cl) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&GetOutputDir(Bool_t createDir = kTRUE) const; const THtml::TPathDefinition&GetPathDefinition() const; const THtml::PathInfo_t&GetPathInfo() const; const TString&GetProductName() const; const TString&GetSearchEngine() const; const TString&GetSearchStemURL() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetURL(const char* lib = 0) const; const TString&GetViewCVS() const; const TString&GetWikiURL() const; const TString&GetXwho() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveDot(); voidHelperDeleted(THtml::THelperBase* who); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNamespace(const TClass* cl); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidLoadAllLibs(); virtual voidTObject::ls(Option_t* option = """") const; voidMakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); voidMakeClass(const char* className, Bool_t force = kFALSE); voidMakeIndex(const char* filter = ""*""); voidMakeTree(const char* className, Bool_t force = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObje",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:21319,Modifiability,Inherit,InheritsFrom,21319,"ect::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&GetOutputDir(Bool_t createDir = kTRUE) const; const THtml::TPathDefinition&GetPathDefinition() const; const THtml::PathInfo_t&GetPathInfo() const; const TString&GetProductName() const; const TString&GetSearchEngine() const; const TString&GetSearchStemURL() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetURL(const char* lib = 0) const; const TString&GetViewCVS() const; const TString&GetWikiURL() const; const TString&GetXwho() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveDot(); voidHelperDeleted(THtml::THelperBase* who); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNamespace(const TClass* cl); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidLoadAllLibs(); virtual voidTObject::ls(Option_t* option = """") const; voidMakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); voidMakeClass(const char* className, Bool_t force = kFALSE); voidMakeIndex(const char* filter = ""*""); voidMakeTree(const char* className, Bool_t force = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delet",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:26582,Modifiability,config,configuration,26582,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:26766,Modifiability,config,configuration,26766,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27037,Modifiability,config,configuration,27037,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27158,Modifiability,config,configuration,27158,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27380,Modifiability,Inherit,Inheritance,27380,"Countercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive is run on. void CreateAuxiliaryFiles() const; copy CSS, javascript file, etc to the output dir. const char* GetEtcDir() const; Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html). TClassDocInfo * GetNextClass(); Return the next class to be generated for MakeClassThreaded. const char* GetURL(const char* lib = 0) const; Get the documentation URL for library lib.; If lib == 0 or no documentation URL has been set for lib, return the ROOT; documentation URL. The return value is always != 0. Bool_t HaveDot(); Check whether dot",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:27393,Modifiability,Inherit,Inherited,27393,"Countercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive is run on. void CreateAuxiliaryFiles() const; copy CSS, javascript file, etc to the output dir. const char* GetEtcDir() const; Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html). TClassDocInfo * GetNextClass(); Return the next class to be generated for MakeClassThreaded. const char* GetURL(const char* lib = 0) const; Get the documentation URL for library lib.; If lib == 0 or no documentation URL has been set for lib, return the ROOT; documentation URL. The return value is always != 0. Bool_t HaveDot(); Check whether dot",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:30215,Modifiability,inherit,inheritance,30215,"sed as filename and; store all created canvases in PNG files that are; shown next to the converted source. Bitwise-ORing with; kForceOutput re-runs the script even if output PNGs exist; that are newer than the script. If kCompiledOutput is; passed, the script is run through ACLiC (.x filename+); context - line shown verbatim at the top of the page; e.g. for links.; If context is non-empty it is expected to also print the; title. NOTE: Output file name is the same as filename, but with extension .html. void GetModuleNameForClass(TString& module, TClass* cl) const; Return the module name for a given class.; Use the cached information from fDocEntityInfo.fClasses. void CreateListOfClasses(const char* filter); Create the list of all known classes. void CreateListOfTypes(); Create index of all data types and a page for each typedef-to-class. Bool_t CopyFileFromEtcDir(const char* filename) const; Copy a file from $ROOTSYS/etc/html into GetOutputDir(). void CreateHierarchy(); Create the inheritance hierarchy diagram for all classes. void CreateJavascript() const; Write the default ROOT style sheet. void CreateStyleSheet() const; Write the default ROOT style sheet. void GetDerivedClasses(TClass* cl, map<TClass*,Int_t>& derived) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html file name for a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bo",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:30497,Modifiability,inherit,inheriting,30497,"cript is run through ACLiC (.x filename+); context - line shown verbatim at the top of the page; e.g. for links.; If context is non-empty it is expected to also print the; title. NOTE: Output file name is the same as filename, but with extension .html. void GetModuleNameForClass(TString& module, TClass* cl) const; Return the module name for a given class.; Use the cached information from fDocEntityInfo.fClasses. void CreateListOfClasses(const char* filter); Create the list of all known classes. void CreateListOfTypes(); Create index of all data types and a page for each typedef-to-class. Bool_t CopyFileFromEtcDir(const char* filename) const; Copy a file from $ROOTSYS/etc/html into GetOutputDir(). void CreateHierarchy(); Create the inheritance hierarchy diagram for all classes. void CreateJavascript() const; Write the default ROOT style sheet. void CreateStyleSheet() const; Write the default ROOT style sheet. void GetDerivedClasses(TClass* cl, map<TClass*,Int_t>& derived) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html file name for a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return implementation file name. bool GetDeclImplFileName(TClass* cl, bool filesys, bool decl, TString& out_name) const; Combined implementation for GetDeclFileName(), GetImplFileNam",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:30526,Modifiability,inherit,inheritance,30526,"cript is run through ACLiC (.x filename+); context - line shown verbatim at the top of the page; e.g. for links.; If context is non-empty it is expected to also print the; title. NOTE: Output file name is the same as filename, but with extension .html. void GetModuleNameForClass(TString& module, TClass* cl) const; Return the module name for a given class.; Use the cached information from fDocEntityInfo.fClasses. void CreateListOfClasses(const char* filter); Create the list of all known classes. void CreateListOfTypes(); Create index of all data types and a page for each typedef-to-class. Bool_t CopyFileFromEtcDir(const char* filename) const; Copy a file from $ROOTSYS/etc/html into GetOutputDir(). void CreateHierarchy(); Create the inheritance hierarchy diagram for all classes. void CreateJavascript() const; Write the default ROOT style sheet. void CreateStyleSheet() const; Write the default ROOT style sheet. void GetDerivedClasses(TClass* cl, map<TClass*,Int_t>& derived) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html file name for a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return implementation file name. bool GetDeclImplFileName(TClass* cl, bool filesys, bool decl, TString& out_name) const; Combined implementation for GetDeclFileName(), GetImplFileNam",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:33367,Modifiability,inherit,inheritance,33367,"ter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the number of CPUs. void MakeClass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) THtmlThreadInfo object containing the current; THtml object, and whether ""force"" was passed to MakeAll().; The thread will poll GetNextClass() until no further class is available. void MakeIndex(const char* filter = ""*""); Create the index files for the product, modules, all types, etc.; By default all classes are indexed (if filter=""*"");; to generate an index for all classes starting with ""XX"", do; html.MakeIndex(""XX*"");. void MakeTree(const char* className, Bool_t force = kFALSE); Make an inheritance tree. Input: className - name of the class to process. void SetFoundDot(Bool_t found = kTRUE); Set whether ""dot"" (a GraphViz utility) is available. void SetLocalFiles() const; Fill the files available in the file system below fPathInfo.fInputPath. void SetModuleDefinition(const THtml::TModuleDefinition& md); Set the module defining object to be used; can also be a user derived; object (a la traits). void SetFileDefinition(const THtml::TFileDefinition& fd); Set the file defining object to be used; can also be a user derived; object (a la traits). void SetPathDefinition(const THtml::TPathDefinition& pd); Set the path defining object to be used; can also be a user derived; object (a la traits). void SetInputDir(const char* dir); Set the directory containing the source files.; The source file for a class MyClass will be searched; by prepending dir to the value of; MyClass::Class()->GetImplFileName() - which can contain; directory information!; Also res",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:36821,Modifiability,Config,Configuration,36821,; { fCounterFormat = format; }. void SetClassDocTag(const char* tag); { fDocSyntax.fClassDocTag = tag; }. void SetAuthorTag(const char* tag); { fDocSyntax.fAuthorTag = tag; }. void SetLastUpdateTag(const char* tag); { fDocSyntax.fLastUpdateTag = tag; }. void SetCopyrightTag(const char* tag); { fDocSyntax.fCopyrightTag = tag; }. void SetHeader(const char* file); { fOutputStyle.fHeader = file; }. void SetFooter(const char* file); { fOutputStyle.fFooter = file; }. void SetHomepage(const char* url); { fLinkInfo.fHomepage = url; }. void SetSearchStemURL(const char* url); { fLinkInfo.fSearchStemURL = url; }. void SetSearchEngine(const char* url); { fLinkInfo.fSearchEngine = url; }. void SetViewCVS(const char* url); { fLinkInfo.fViewCVS = url; }. void SetWikiURL(const char* url); { fLinkInfo.fWikiURL = url; }. void SetCharset(const char* charset); { fOutputStyle.fCharset = charset; }. void SetDocStyle(const char* style); { fDocSyntax.fDocStyle = style; }. const TModuleDefinition& GetModuleDefinition() const; Configuration getters. const TFileDefinition& GetFileDefinition() const. const TPathDefinition& GetPathDefinition() const. const TString& GetProductName() const; { return fProductName; }. const TString& GetInputPath() const; { return fPathInfo.fInputPath; }. const TString& GetModuleDocPath() const; { return fPathInfo.fDocPath; }. const TString& GetDotDir() const; { return fPathInfo.fDotDir; }. const TString& GetXwho() const; { return fLinkInfo.fXwho; }. const char* GetCounterFormat() const; { return fCounterFormat; }. const TString& GetClassDocTag() const; { return fDocSyntax.fClassDocTag; }. const TString& GetAuthorTag() const; { return fDocSyntax.fAuthorTag; }. const TString& GetLastUpdateTag() const; { return fDocSyntax.fLastUpdateTag; }. const TString& GetCopyrightTag() const; { return fDocSyntax.fCopyrightTag; }. const TString& GetHeader() const; { return fOutputStyle.fHeader; }. const TString& GetFooter() const; { return fOutputStyle.fFooter; }. const TString& Get,MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:26696,Performance,cache,cached,26696,"tatic void*MakeClassThreaded(void* info); voidTObject::MakeZombie(); voidSetLocalFiles() const. Data Members; public:. enum EConvertOutput { kNoOutput; kInterpretedOutput; kCompiledOutput; kForceOutput; kSeparateProcessOutput; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tfBatchWhether to enable GUI output; TStringfCountercounter string; TStringfCounterFormatcounter printf-like format; THtml::DocEntityInfo_tfDocEntityInfodata for documented entities; THtml::DocSyntax_tfDocSyntaxdoc syntax configuration; THtml::TFileDefinition*fFileDefobject translating classes to file names; TGClient*fGClientgClient, cached and queried through CINT; THtml::LinkInfo_tfLinkInfolink (URL) configuration; THtml::TFileSysDB*fLocalFilesfiles found locally for a given source path; TVirtualMutex*fMakeClassMutexMutex for MakeClassThreaded; THtml::TModuleDefinition*fModuleDefobject translating classes to module names; THtml::OutputStyle_tfOutputStyleoutput style configuration; THtml::TPathDefinition*fPathDefobject translating classes to module names; THtml::PathInfo_tfPathInfopath configuration; TStringfProductNamename of the product to document; Int_tfThreadedClassCountcounter of processed classes for MakeClassThreaded; TIter*fThreadedClassIterfClasses iterator for MakeClassThreaded. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THtml(); Create a THtml object.; In case output directory does not exist an error; will be printed and gHtml stays 0 also zombie bit will be set. ~THtml(); Default destructor. void AddMacroPath(const char* path); Add path to the directories to be searched for macro files; that are to be executed via the TDocMacroDirective; (""Begin_Macro""/""End_Macro""); relative to the source file; that the directive i",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:29841,Performance,cache,cached,29841," name of the file to convert; title - title which will be placed at the top of the HTML file; dirname - optional parameter, if it's not specified, output will; be placed in htmldoc/examples directory.; relpath - optional parameter pointing to the THtml generated doc; on the server, relative to the current page.; includeOutput - if != kNoOutput, run the script passed as filename and; store all created canvases in PNG files that are; shown next to the converted source. Bitwise-ORing with; kForceOutput re-runs the script even if output PNGs exist; that are newer than the script. If kCompiledOutput is; passed, the script is run through ACLiC (.x filename+); context - line shown verbatim at the top of the page; e.g. for links.; If context is non-empty it is expected to also print the; title. NOTE: Output file name is the same as filename, but with extension .html. void GetModuleNameForClass(TString& module, TClass* cl) const; Return the module name for a given class.; Use the cached information from fDocEntityInfo.fClasses. void CreateListOfClasses(const char* filter); Create the list of all known classes. void CreateListOfTypes(); Create index of all data types and a page for each typedef-to-class. Bool_t CopyFileFromEtcDir(const char* filename) const; Copy a file from $ROOTSYS/etc/html into GetOutputDir(). void CreateHierarchy(); Create the inheritance hierarchy diagram for all classes. void CreateJavascript() const; Write the default ROOT style sheet. void CreateStyleSheet() const; Write the default ROOT style sheet. void GetDerivedClasses(TClass* cl, map<TClass*,Int_t>& derived) const; fill derived with all classes inheriting from cl and their inheritance; distance to cl. void GetHtmlFileName(TClass* classPtr, TString& filename) const; Return real HTML filename. Input: classPtr - pointer to a class; filename - string containing a full name; of the corresponding HTML file after the function returns. const char* GetHtmlFileName(const char* classname) const; Get the html",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:31839,Performance,Load,LoadAllLibs,31839,"a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return implementation file name. bool GetDeclImplFileName(TClass* cl, bool filesys, bool decl, TString& out_name) const; Combined implementation for GetDeclFileName(), GetImplFileName():; Return declaration / implementation file name (depending on decl);; return the full path if filesys is true. const TString& GetOutputDir(Bool_t createDir = kTRUE) const; Return the output directory as set by SetOutputDir().; Create it if it doesn't exist and if createDir is kTRUE. Bool_t IsNamespace(const TClass* cl); Check whether cl is a namespace. void LoadAllLibs(); Load all libraries known to ROOT via the rootmap system. void MakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); Produce documentation for all the classes specified in the filter (by default ""*""); To process all classes having a name starting with XX, do:; html.MakeAll(kFALSE,""XX*"");; If force=kFALSE (default), only the classes that have been modified since; the previous call to this function will be generated.; If force=kTRUE, all classes passing the filter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the number of CPUs. void MakeClass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:31854,Performance,Load,Load,31854,"a class named classname.; Returns 0 if the class is not documented. TClass * GetClass(const char* name) const; Return pointer to class with name*-*-*-*-*-*-*-*-; *-* =================================. bool GetDeclFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return declaration file name; return the full path if filesys is true. bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name) const; Return implementation file name. bool GetDeclImplFileName(TClass* cl, bool filesys, bool decl, TString& out_name) const; Combined implementation for GetDeclFileName(), GetImplFileName():; Return declaration / implementation file name (depending on decl);; return the full path if filesys is true. const TString& GetOutputDir(Bool_t createDir = kTRUE) const; Return the output directory as set by SetOutputDir().; Create it if it doesn't exist and if createDir is kTRUE. Bool_t IsNamespace(const TClass* cl); Check whether cl is a namespace. void LoadAllLibs(); Load all libraries known to ROOT via the rootmap system. void MakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); Produce documentation for all the classes specified in the filter (by default ""*""); To process all classes having a name starting with XX, do:; html.MakeAll(kFALSE,""XX*"");; If force=kFALSE (default), only the classes that have been modified since; the previous call to this function will be generated.; If force=kTRUE, all classes passing the filter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the number of CPUs. void MakeClass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) ",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:32816,Performance,multi-thread,multi-threaded,32816,"ss* cl); Check whether cl is a namespace. void LoadAllLibs(); Load all libraries known to ROOT via the rootmap system. void MakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); Produce documentation for all the classes specified in the filter (by default ""*""); To process all classes having a name starting with XX, do:; html.MakeAll(kFALSE,""XX*"");; If force=kFALSE (default), only the classes that have been modified since; the previous call to this function will be generated.; If force=kTRUE, all classes passing the filter will be processed.; If numthreads is != -1, use numthreads threads, else decide automatically; based on the number of CPUs. void MakeClass(const char* className, Bool_t force = kFALSE); Make HTML files for a single class. Input: className - name of the class to process. void MakeClass(void* cdi, Bool_t force = kFALSE); Make HTML files for a single class. Input: cdi - doc info for class to process. void* MakeClassThreaded(void* info); Entry point of worker threads for multi-threaded MakeAll().; info points to an (internal) THtmlThreadInfo object containing the current; THtml object, and whether ""force"" was passed to MakeAll().; The thread will poll GetNextClass() until no further class is available. void MakeIndex(const char* filter = ""*""); Create the index files for the product, modules, all types, etc.; By default all classes are indexed (if filter=""*"");; to generate an index for all classes starting with ""XX"", do; html.MakeIndex(""XX*"");. void MakeTree(const char* className, Bool_t force = kFALSE); Make an inheritance tree. Input: className - name of the class to process. void SetFoundDot(Bool_t found = kTRUE); Set whether ""dot"" (a GraphViz utility) is available. void SetLocalFiles() const; Fill the files available in the file system below fPathInfo.fInputPath. void SetModuleDefinition(const THtml::TModuleDefinition& md); Set the module defining object to be used; can also be a user derived; object (a la traits). void SetFil",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:4338,Security,access,access,4338,"brary name association can be set up using the rootmap facility.; For the library in the example above, which contains a dictionary; generated from the linkdef MyLinkdef.h, the command to generate the; rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h; Here, -r specifies that the entries for libMyLib should be updated,; -l specifies the library we're dealing with, -d its; dependencies, and -c its linkdef. The rootmap file must be within; one of the LD_LIBRARY_PATH (or PATH for Windows) directories; when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; documentation syntax for further details.; Example:; Root.Html.Description: //____________________; The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via. TClass::GetDeclFileName();; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion,; THtml will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; THtml::MakeAll()'s; default option force=kFALSE, in which case; THtml generates; documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has; one of the following two formats; Name (non-alph",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:21082,Security,Hash,Hash,21082,"nition&GetModuleDefinition() const; const TString&GetModuleDocPath() const; voidGetModuleMacroPath(const TString& module, TString& out_path) const; virtual voidGetModuleNameForClass(TString& module, TClass* cl) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&GetOutputDir(Bool_t createDir = kTRUE) const; const THtml::TPathDefinition&GetPathDefinition() const; const THtml::PathInfo_t&GetPathInfo() const; const TString&GetProductName() const; const TString&GetSearchEngine() const; const TString&GetSearchStemURL() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetURL(const char* lib = 0) const; const TString&GetViewCVS() const; const TString&GetWikiURL() const; const TString&GetXwho() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHaveDot(); voidHelperDeleted(THtml::THelperBase* who); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNamespace(const TClass* cl); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidLoadAllLibs(); virtual voidTObject::ls(Option_t* option = """") const; voidMakeAll(Bool_t force = kFALSE, const char* filter = ""*"", int numthreads = 1); voidMakeClass(const char* className, Bool_t force = kFALSE); voidMakeIndex(const char* filter = ""*""); voidMakeTree(const char* className, Bool_t force = kFALSE); voidTObject::MayNotUse(c",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:372,Testability,log,logs,372,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:25065,Testability,Test,TestBit,25065,"dSetCounterFormat(const char* format); voidSetDeclFileName(TClass* cl, const char* filename); voidSetDocPath(const char* path); voidSetDocStyle(const char* style); voidSetDotDir(const char* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEscape(char = '\\'); voidSetEtcDir(const char* dir); voidSetFileDefinition(const THtml::TFileDefinition& fd); voidSetFooter(const char* file); voidSetFoundDot(Bool_t found = kTRUE); voidSetHeader(const char* file); voidSetHomepage(const char* url); voidSetImplFileName(TClass* cl, const char* filename); voidSetIncludePath(const char* dir); voidSetInputDir(const char* dir); voidSetLastUpdateTag(const char* tag); voidSetLibURL(const char* lib, const char* url); voidSetMacroPath(const char* path); voidSetModuleDefinition(const THtml::TModuleDefinition& md); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutputDir(const char* dir); voidSetPathDefinition(const THtml::TPathDefinition& pd); voidSetProductName(const char* product); voidSetRootURL(const char* url); voidSetSearchEngine(const char* url); voidSetSearchStemURL(const char* url); voidSetSourceDir(const char* dir); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetViewCVS(const char* url); voidSetWikiURL(const char* url); voidSetXwho(const char* xwho); const char*ShortType(const char* name) const; virtual voidShowMembers(TMemberInspector&); voidSortListOfModules(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:25104,Testability,Test,TestBits,25104,"dSetCounterFormat(const char* format); voidSetDeclFileName(TClass* cl, const char* filename); voidSetDocPath(const char* path); voidSetDocStyle(const char* style); voidSetDotDir(const char* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEscape(char = '\\'); voidSetEtcDir(const char* dir); voidSetFileDefinition(const THtml::TFileDefinition& fd); voidSetFooter(const char* file); voidSetFoundDot(Bool_t found = kTRUE); voidSetHeader(const char* file); voidSetHomepage(const char* url); voidSetImplFileName(TClass* cl, const char* filename); voidSetIncludePath(const char* dir); voidSetInputDir(const char* dir); voidSetLastUpdateTag(const char* tag); voidSetLibURL(const char* lib, const char* url); voidSetMacroPath(const char* path); voidSetModuleDefinition(const THtml::TModuleDefinition& md); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutputDir(const char* dir); voidSetPathDefinition(const THtml::TPathDefinition& pd); voidSetProductName(const char* product); voidSetRootURL(const char* url); voidSetSearchEngine(const char* url); voidSetSearchStemURL(const char* url); voidSetSourceDir(const char* dir); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetViewCVS(const char* url); voidSetWikiURL(const char* url); voidSetXwho(const char* xwho); const char*ShortType(const char* name) const; virtual voidShowMembers(TMemberInspector&); voidSortListOfModules(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:514,Usability,guid,guide,514,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml.html:17370,Usability,Clear,Clear,17370,"ass documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set. IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known; classes, and forwards API invocations to the ""work horses"".; TDocOutput; generates the output by letting a; TDocParser; object parse the sources, which in turn invokes objects deriving from; TDocDirective; to process directives.; . Function Members (Methods); public:. THtml(); virtual~THtml(); voidTObject::AbstractMethod(const char* method) const; voidAddMacroPath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(const char* filename, const char* title, const char* dirname = """", const char* relpath = ""../"", Int_t includeOutput = kNoOutput, const char* context = """"); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyFileFromEtcDir(const char* filename) const; virtual voidCreateAuxiliaryFiles() const; voidCreateHierarchy(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); vir",MatchSource.WIKI,root/html534/THtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml.html
https://root.cern/root/html534/THtml__TFileDefinition.html:1234,Availability,Error,Error,1234," ~TFileDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGe",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:1363,Availability,error,error,1363," ~TFileDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGe",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:1447,Availability,error,error,1447," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetImplFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bo",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:2625,Modifiability,Inherit,InheritsFrom,2625,"bject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetImplFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:2691,Modifiability,Inherit,InheritsFrom,2691,"(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetImplFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileDefinition&",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:6141,Modifiability,Inherit,Inheritance,6141,", const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidExpandSearchPath(TString& path) const; virtual boolGetFileName(const TClass* cl, bool decl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; voidTObject::MakeZombie(); TStringMatchFileSysName(TString& filename, THtml::TFileSysEntry** fse = 0) const; voidNormalizePath(TString& path) const; voidSplitClassIntoDirFile(const TString& clname, TString& dir, TString& filename) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const. bool GetFileName(const TClass* cl, bool decl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const. void SplitClassIntoDirFile(const TString& clname, TString& dir, TString& filename) const. void NormalizePath(TString& path) const. void ExpandSearchPath(TString& path) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:6154,Modifiability,Inherit,Inherited,6154,", const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidExpandSearchPath(TString& path) const; virtual boolGetFileName(const TClass* cl, bool decl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; voidTObject::MakeZombie(); TStringMatchFileSysName(TString& filename, THtml::TFileSysEntry** fse = 0) const; voidNormalizePath(TString& path) const; voidSplitClassIntoDirFile(const TString& clname, TString& dir, TString& filename) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const. bool GetFileName(const TClass* cl, bool decl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const. void SplitClassIntoDirFile(const TString& clname, TString& dir, TString& filename) const. void NormalizePath(TString& path) const. void ExpandSearchPath(TString& path) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). bool GetImplFileName(TClass* cl, Bool_t filesys, TString& out_name). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:2515,Security,Hash,Hash,2515,"nt_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetImplFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:4721,Testability,Test,TestBit,4721,"); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileDefinition&operator=(const THtml::TFileDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileDefinitionTFileDefinition(); THtml::TFileDefinitionTFileDefinition(const THtml::TFileDefinition&); THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:4760,Testability,Test,TestBits,4760,"); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileDefinition&operator=(const THtml::TFileDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileDefinitionTFileDefinition(); THtml::TFileDefinitionTFileDefinition(const THtml::TFileDefinition&); THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileDefinition.html:694,Usability,Clear,Clear,694," ~TFileDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDeclFileName(const TClass* cl, TString& out_filename, TString& out_fsys, THtml::TFileSysEntry** fse = 0) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGe",MatchSource.WIKI,root/html534/THtml__TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileDefinition.html
https://root.cern/root/html534/THtml__TFileSysDB.html:1214,Availability,Error,Error,1214," ~TFileSysDB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() co",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:1343,Availability,error,error,1343," ~TFileSysDB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() co",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:1427,Availability,error,error,1427," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; const TString&GetIgnore() const; Int_tTHtml::TFileSysEntry::GetLevel() const; TExMap&GetMapIno(); Int_tGetMaxLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::Get",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:2735,Modifiability,Inherit,InheritsFrom,2735,"ion() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; const TString&GetIgnore() const; Int_tTHtml::TFileSysEntry::GetLevel() const; TExMap&GetMapIno(); Int_tGetMaxLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:2801,Modifiability,Inherit,InheritsFrom,2801,"tries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; const TString&GetIgnore() const; Int_tTHtml::TFileSysEntry::GetLevel() const; TExMap&GetMapIno(); Int_tGetMaxLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&TH",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:6548,Modifiability,Inherit,Inheritance,6548,"TObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidFill(); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListTHtml::TFileSysDir::fDirs; TListTHtml::TFileSysDir::fFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. private:. THashTablefEntrieshash map of all filenames without paths; TStringfIgnorePathregexp of path to ignore while building entry tree; TExMapfMapInoinode to TFileSysDir map, to detect softlinks; Int_tfMaxLevelmaximum level of directory nesting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysDB(const char* path, const char* ignr, Int_t maxdirlevel); { Fill(); }. TExMap& GetMapIno(); { return fMapIno; }. THashTable& GetEntries(); { return fEntries; }. const TString& GetIgnore() const; { return fIgnorePath; }. Int_t GetMaxLevel() const; { return fMaxLevel; }. void Fill(). TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:6561,Modifiability,Inherit,Inherited,6561,"TObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidFill(); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListTHtml::TFileSysDir::fDirs; TListTHtml::TFileSysDir::fFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. private:. THashTablefEntrieshash map of all filenames without paths; TStringfIgnorePathregexp of path to ignore while building entry tree; TExMapfMapInoinode to TFileSysDir map, to detect softlinks; Int_tfMaxLevelmaximum level of directory nesting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysDB(const char* path, const char* ignr, Int_t maxdirlevel); { Fill(); }. TExMap& GetMapIno(); { return fMapIno; }. THashTable& GetEntries(); { return fEntries; }. const TString& GetIgnore() const; { return fIgnorePath; }. Int_t GetMaxLevel() const; { return fMaxLevel; }. void Fill(). TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:6466,Safety,detect,detect,6466,"TObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidFill(); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListTHtml::TFileSysDir::fDirs; TListTHtml::TFileSysDir::fFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. private:. THashTablefEntrieshash map of all filenames without paths; TStringfIgnorePathregexp of path to ignore while building entry tree; TExMapfMapInoinode to TFileSysDir map, to detect softlinks; Int_tfMaxLevelmaximum level of directory nesting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysDB(const char* path, const char* ignr, Int_t maxdirlevel); { Fill(); }. TExMap& GetMapIno(); { return fMapIno; }. THashTable& GetEntries(); { return fEntries; }. const TString& GetIgnore() const; { return fIgnorePath; }. Int_t GetMaxLevel() const; { return fMaxLevel; }. void Fill(). TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:2625,Security,Hash,Hash,2625,"* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; const TString&GetIgnore() const; Int_tTHtml::TFileSysEntry::GetLevel() const; TExMap&GetMapIno(); Int_tGetMaxLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:4876,Testability,Test,TestBit,4876,"id*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidTHtml::TFileSysDir::Recurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDBTFileSysDB(const char* path, const char* ignr, Int_t maxdirlevel); THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:4915,Testability,Test,TestBits,4915,"id*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidTHtml::TFileSysDir::Recurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDBTFileSysDB(const char* path, const char* ignr, Int_t maxdirlevel); THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDB.html:674,Usability,Clear,Clear,674," ~TFileSysDB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); THashTable&GetEntries(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() co",MatchSource.WIKI,root/html534/THtml__TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDB.html
https://root.cern/root/html534/THtml__TFileSysDir.html:1220,Availability,Error,Error,1220," ~TFileSysDir(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:1349,Availability,error,error,1349," ~TFileSysDir(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:1433,Availability,error,error,1433," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TT",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:2597,Modifiability,Inherit,InheritsFrom,2597,"TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:2663,Modifiability,Inherit,InheritsFrom,2663,"ct::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&TH",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:5985,Modifiability,Inherit,Inheritance,5985,"t_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfDirs; TListfFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysDir(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. const TList* GetFiles() const; { return &fFiles; }. const TList* GetSubDirs() const; { return &fDirs; }. void Recurse(THtml::TFileSysDB* db, const char* path). TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:5998,Modifiability,Inherit,Inherited,5998,"t_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfDirs; TListfFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysDir(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. const TList* GetFiles() const; { return &fFiles; }. const TList* GetSubDirs() const; { return &fDirs; }. void Recurse(THtml::TFileSysDB* db, const char* path). TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:2487,Security,Hash,Hash,2487,"t, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:4718,Testability,Test,TestBit,4718," void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRecurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:4757,Testability,Test,TestBits,4757," void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRecurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysDir.html:680,Usability,Clear,Clear,680," ~TFileSysDir(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetFiles() const; virtual voidTHtml::TFileSysEntry::GetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysDir.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:1215,Availability,Error,Error,1215," ~TFileSysEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectI",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:1344,Availability,error,error,1344," ~TFileSysEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectI",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:1428,Availability,error,error,1428," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*GetParent() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFro",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:2420,Modifiability,Inherit,InheritsFrom,2420,"* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*GetParent() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:2486,Modifiability,Inherit,InheritsFrom,2486," px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*GetParent() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&op",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:5520,Modifiability,Inherit,Inheritance,5520,"st char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfLevellevel of directory; TStringfNamename of the element; THtml::TFileSysDir*fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysEntry(const char* name, THtml::TFileSysDir* parent); {}. const char* GetName() const; { return fName; }. ULong_t Hash() const; { return fName.Hash(); }. void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysDir* GetParent() const; { return fParent; }. Int_t GetLevel() const; { return fLevel; }. TFileSysEntry(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:5533,Modifiability,Inherit,Inherited,5533,"st char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfLevellevel of directory; TStringfNamename of the element; THtml::TFileSysDir*fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysEntry(const char* name, THtml::TFileSysDir* parent); {}. const char* GetName() const; { return fName; }. ULong_t Hash() const; { return fName.Hash(); }. void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysDir* GetParent() const; { return fParent; }. Int_t GetLevel() const; { return fLevel; }. TFileSysEntry(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:5718,Security,Hash,Hash,5718,"st char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfLevellevel of directory; TStringfNamename of the element; THtml::TFileSysDir*fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysEntry(const char* name, THtml::TFileSysDir* parent); {}. const char* GetName() const; { return fName; }. ULong_t Hash() const; { return fName.Hash(); }. void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysDir* GetParent() const; { return fParent; }. Int_t GetLevel() const; { return fLevel; }. TFileSysEntry(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:5747,Security,Hash,Hash,5747,"st char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfLevellevel of directory; TStringfNamename of the element; THtml::TFileSysDir*fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileSysEntry(const char* name, THtml::TFileSysDir* parent); {}. const char* GetName() const; { return fName; }. ULong_t Hash() const; { return fName.Hash(); }. void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysDir* GetParent() const; { return fParent; }. Int_t GetLevel() const; { return fLevel; }. TFileSysEntry(const char* name, THtml::TFileSysDir* parent); { fFiles.SetOwner(); fDirs.SetOwner(); }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:4465,Testability,Test,TestBit,4465,"); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:4504,Testability,Test,TestBits,4504,"); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysEntry.html:675,Usability,Clear,Clear,675," ~TFileSysEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tGetLevel() const; virtual const char*GetName() const; virtual char*TObject::GetObjectI",MatchSource.WIKI,root/html534/THtml__TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysEntry.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:1222,Availability,Error,Error,1222," ~TFileSysRoot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:1351,Availability,error,error,1351," ~TFileSysRoot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:1435,Availability,error,error,1435," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObje",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:2617,Modifiability,Inherit,InheritsFrom,2617,"t(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:2683,Modifiability,Inherit,InheritsFrom,2683,"st TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&TH",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:6163,Modifiability,Inherit,Inheritance,6163,"t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysRootTFileSysRoot(const char* name, THtml::TFileSysDB* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListTHtml::TFileSysDir::fDirs; TListTHtml::TFileSysDir::fFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysRoot(const char* name, THtml::TFileSysDB* parent); {}. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:6176,Modifiability,Inherit,Inherited,6176,"t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysRootTFileSysRoot(const char* name, THtml::TFileSysDB* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListTHtml::TFileSysDir::fDirs; TListTHtml::TFileSysDir::fFiles; Int_tTHtml::TFileSysEntry::fLevellevel of directory; TStringTHtml::TFileSysEntry::fNamename of the element; THtml::TFileSysDir*THtml::TFileSysEntry::fParentparent directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void GetFullName(TString& fullname, Bool_t asIncluded) const. TFileSysRoot(const char* name, THtml::TFileSysDB* parent); {}. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:2507,Security,Hash,Hash,2507," py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLevel() const; virtual const char*THtml::TFileSysEntry::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml::TFileSysDir*THtml::TFileSysEntry::GetParent() const; const TList*THtml::TFileSysDir::GetSubDirs() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTHtml::TFileSysEntry::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:4758,Testability,Test,TestBit,4758,"p); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidTHtml::TFileSysDir::Recurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysRootTFileSysRoot(const char* name, THtml::TFileSysDB* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:4797,Testability,Test,TestBits,4797,"p); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&THtml::TFileSysEntry::operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidTHtml::TFileSysDir::Recurse(THtml::TFileSysDB* db, const char* path); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysDirTHtml::TFileSysDir::TFileSysDir(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTHtml::TFileSysEntry::TFileSysEntry(const char* name, THtml::TFileSysDir* parent); THtml::TFileSysRootTFileSysRoot(const char* name, THtml::TFileSysDB* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__TFileSysRoot.html:682,Usability,Clear,Clear,682," ~TFileSysRoot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*THtml::TFileSysDir::GetFiles() const; virtual voidGetFullName(TString& fullname, Bool_t asIncluded) const; virtual const char*TObject::GetIconName() const; Int_tTHtml::TFileSysEntry::GetLeve",MatchSource.WIKI,root/html534/THtml__TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TFileSysRoot.html
https://root.cern/root/html534/THtml__THelperBase.html:1214,Availability,Error,Error,1214," virtual~THelperBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:1343,Availability,error,error,1343," virtual~THelperBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:1427,Availability,error,error,1427," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) co",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:2331,Modifiability,Inherit,InheritsFrom,2331,"nt_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:2397,Modifiability,Inherit,InheritsFrom,2397,"bjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::THelperBase&oper",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:5327,Modifiability,Inherit,Inheritance,5327," f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHelperBase(); THtml::THelperBaseTHelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. THtml*fHtmlobject owning the helper. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THelperBase(); {}. virtual ~THelperBase(). void SetOwner(THtml* html). THtml* GetOwner() const; { return fHtml; }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:5340,Modifiability,Inherit,Inherited,5340," f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHelperBase(); THtml::THelperBaseTHelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. THtml*fHtmlobject owning the helper. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THelperBase(); {}. virtual ~THelperBase(). void SetOwner(THtml* html). THtml* GetOwner() const; { return fHtml; }. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:2221,Security,Hash,Hash,2221,"st char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:4399,Testability,Test,TestBit,4399," virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::THelperBase&operator=(const THtml::THelperBase&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHelperBase(); THtml::THelperBaseTHelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:4438,Testability,Test,TestBits,4438," virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::THelperBase&operator=(const THtml::THelperBase&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHelperBase(); THtml::THelperBaseTHelperBase(const THtml::THelperBase&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__THelperBase.html:674,Usability,Clear,Clear,674," virtual~THelperBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option",MatchSource.WIKI,root/html534/THtml__THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__THelperBase.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:1242,Availability,Error,Error,1242," ~TModuleDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() co",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:1371,Availability,error,error,1371," ~TModuleDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() co",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:1455,Availability,error,error,1455," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:2472,Modifiability,Inherit,InheritsFrom,2472,"dTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:2538,Modifiability,Inherit,InheritsFrom,2538,"oidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TModuleDefinitio",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:5614,Modifiability,Inherit,Inheritance,5614,"torOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TModuleDefinitionTModuleDefinition(); THtml::TModuleDefinitionTModuleDefinition(const THtml::TModuleDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:5627,Modifiability,Inherit,Inherited,5627,"torOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TModuleDefinitionTModuleDefinition(); THtml::TModuleDefinitionTModuleDefinition(const THtml::TModuleDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:2362,Security,Hash,Hash,2362,"Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:4572,Testability,Test,TestBit,4572,"TObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TModuleDefinition&operator=(const THtml::TModuleDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TModuleDefinitionTModuleDefinition(); THtml::TModuleDefinitionTModuleDefinition(const THtml::TModuleDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:4611,Testability,Test,TestBits,4611,"TObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TModuleDefinition&operator=(const THtml::TModuleDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TModuleDefinitionTModuleDefinition(); THtml::TModuleDefinitionTModuleDefinition(const THtml::TModuleDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TModuleDefinition.html:702,Usability,Clear,Clear,702," ~TModuleDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual boolGetModule(TClass* cl, THtml::TFileSysEntry* fse, TString& out_modulename) const; virtual const char*TObject::GetName() co",MatchSource.WIKI,root/html534/THtml__TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TModuleDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:1234,Availability,Error,Error,1234," ~TPathDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIcon",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:1363,Availability,error,error,1363," ~TPathDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIcon",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:1447,Availability,error,error,1447," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIconName() const; virtual boolGetIncludeAs(TClass* cl, TString& out_include_as) const; virtual boolGetMacroPath(const TString& module, TString& out_dir) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UIn",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:2668,Modifiability,Inherit,InheritsFrom,2668,"ect*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIconName() const; virtual boolGetIncludeAs(TClass* cl, TString& out_include_as) const; virtual boolGetMacroPath(const TString& module, TString& out_dir) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:2734,Modifiability,Inherit,InheritsFrom,2734,"DocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIconName() const; virtual boolGetIncludeAs(TClass* cl, TString& out_include_as) const; virtual boolGetMacroPath(const TString& module, TString& out_dir) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TPathDefinition&",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:5796,Modifiability,Inherit,Inheritance,5796,"ShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TPathDefinitionTPathDefinition(); THtml::TPathDefinitionTPathDefinition(const THtml::TPathDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetMacroPath(const TString& module, TString& out_dir) const. bool GetIncludeAs(TClass* cl, TString& out_include_as) const. bool GetFileNameFromInclude(const char* included, TString& out_fsname) const. bool GetDocDir(const TString& module, TString& doc_dir) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:5809,Modifiability,Inherit,Inherited,5809,"ShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TPathDefinitionTPathDefinition(); THtml::TPathDefinitionTPathDefinition(const THtml::TPathDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool GetMacroPath(const TString& module, TString& out_dir) const. bool GetIncludeAs(TClass* cl, TString& out_include_as) const. bool GetFileNameFromInclude(const char* included, TString& out_fsname) const. bool GetDocDir(const TString& module, TString& doc_dir) const. TString fInputPath; // directories to look for classes; prepended to Decl/ ImplFileName(). » Author: Nenad Buncic 18/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:2558,Security,Hash,Hash,2558,"char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIconName() const; virtual boolGetIncludeAs(TClass* cl, TString& out_include_as) const; virtual boolGetMacroPath(const TString& module, TString& out_dir) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THtml*THtml::THelperBase::GetOwner() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:4764,Testability,Test,TestBit,4764,"); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TPathDefinition&operator=(const THtml::TPathDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TPathDefinitionTPathDefinition(); THtml::TPathDefinitionTPathDefinition(const THtml::TPathDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:4803,Testability,Test,TestBits,4803,"); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TPathDefinition&operator=(const THtml::TPathDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TPathDefinitionTPathDefinition(); THtml::TPathDefinitionTPathDefinition(const THtml::TPathDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THtml__TPathDefinition.html:694,Usability,Clear,Clear,694," ~TPathDefinition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual boolGetDocDir(const TString& module, TString& doc_dir) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual boolGetFileNameFromInclude(const char* included, TString& out_fsname) const; virtual const char*TObject::GetIcon",MatchSource.WIKI,root/html534/THtml__TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THtml__TPathDefinition.html
https://root.cern/root/html534/THttpCallArg.html:1352,Availability,Error,Error,1352," THttpCallArg(); virtual~THttpCallArg(); voidTObject::AbstractMethod(const char* method) const; voidAddHeader(const char* name, const char* value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tCompressWithGzip(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillHttpHeader(TString& buf, const char* header = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const void*GetContent() const; Long_tGetContentLength() const; const char*GetContentType() const; vi",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:1481,Availability,error,error,1481,"Arg(); voidTObject::AbstractMethod(const char* method) const; voidAddHeader(const char* name, const char* value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tCompressWithGzip(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillHttpHeader(TString& buf, const char* header = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const void*GetContent() const; Long_tGetContentLength() const; const char*GetContentType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFileName() const; TStringGetHeader(const char* name); TStringGetHeaderName(Int_t number) const; virtual const char*TObject::GetIconName() const; const char*GetMethod() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:1565,Availability,error,error,1565,"ar* name, const char* value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tCompressWithGzip(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillHttpHeader(TString& buf, const char* header = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const void*GetContent() const; Long_tGetContentLength() const; const char*GetContentType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFileName() const; TStringGetHeader(const char* name); TStringGetHeaderName(Int_t number) const; virtual const char*TObject::GetIconName() const; const char*GetMethod() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPathName() const; void*GetPostData() const; Long_tGetPostDataLength() const; const char*",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:10765,Availability,error,error,10765,"uest header. TString GetRequestHeaderName(Int_t number) const; returns field name in request header. TString GetRequestHeader(const char* name); get named field from request header. const char * GetTopName() const; returns engine-specific top-name. const char * GetMethod() const; returns request method like GET or POST. Bool_t IsPostMethod() const; returns kTRUE if post method is used. void* GetPostData() const; return pointer on posted with request data. Long_t GetPostDataLength() const; return length of posted with request data. const char * GetPathName() const; returns path name from request URL. const char * GetFileName() const; returns file name from request URL. const char * GetUserName() const; return authenticated user name (0 - when no authentication). const char * GetQuery() const; returns request query (string after ? in request URL). void SetContentType(const char* typ); these methods used in THttpServer to set results of request processing. void Set404(); mark reply as 404 error - page/request not exists. void SetFile(const char* filename = 0); indicate that http request should response with file content. void SetXml(); set content type as JSON. void SetJson(); set content type as JSON. Int_t NumHeader() const; returns number of fields in header. TString GetHeaderName(Int_t number) const; returns field name in header. void SetEncoding(const char* typ); Set Content-Encoding header like gzip. void SetContent(const char* c); Set content directly. void SetZipping(Int_t kind); Set kind of content zipping; 0 - none; 1 - only when supported in request header; 2 - if supported and content size bigger than 10K; 3 - always. Int_t GetZipping() const; return kind of content zipping. void SetExtraHeader(const char* name, const char* value). Bool_t IsContentType(const char* typ) const; these methods used to return results of http request processing. Bool_t Is404() const. Bool_t IsFile() const. const char * GetContentType() const. Long_t GetContentLength() const. cons",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:8308,Energy Efficiency,allocate,allocated,8308,"post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, Long_t length); set data, posted with the request; buffer should be allocated with malloc(length+1) call,; while last byte will be set to 0; Than one could use post data as null-terminated string. void SetBinData(void* data, Long_t length); set binary data, which will be returned as reply body. void SetPathAndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/folder/subfolder/get.bin""; Here ""/folder/subfolder/"" is element path and ""get.bin"" requested file.; One could set path and file name separately. TString GetHeader(const char* name); return specified header. void AddHeader(const char* name, const char* value); Set name: value pair to reply header; Content-Type field handled separately - one should use SetContentType() method; Content-Length field cannot be set at all;. void FillHttpHeader(TString& buf, const char* header = 0); fill HTTP header. Bool_t CompressWithGzip(); compress reply data with gzip compression. Bool_t IsBinData() const. void SetMethod(const char* method); these methods used to set http reque",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:3041,Modifiability,Inherit,InheritsFrom,3041," static Long_tTObject::GetDtorOnly(); const char*GetFileName() const; TStringGetHeader(const char* name); TStringGetHeaderName(Int_t number) const; virtual const char*TObject::GetIconName() const; const char*GetMethod() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPathName() const; void*GetPostData() const; Long_tGetPostDataLength() const; const char*GetQuery() const; TStringGetRequestHeader(const char* name); TStringGetRequestHeaderName(Int_t number) const; virtual const char*TObject::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUserName() const; Int_tGetZipping() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); Bool_tIs404() const; virtual TClass*IsA() const; Bool_tIsContentType(const char* typ) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFile() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPostMethod() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumHeader() const; Int_tNumRequestHeader() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operato",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:3107,Modifiability,Inherit,InheritsFrom,3107,"st; TStringGetHeader(const char* name); TStringGetHeaderName(Int_t number) const; virtual const char*TObject::GetIconName() const; const char*GetMethod() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPathName() const; void*GetPostData() const; Long_tGetPostDataLength() const; const char*GetQuery() const; TStringGetRequestHeader(const char* name); TStringGetRequestHeaderName(Int_t number) const; virtual const char*TObject::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUserName() const; Int_tGetZipping() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); Bool_tIs404() const; virtual TClass*IsA() const; Bool_tIsContentType(const char* typ) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFile() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPostMethod() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumHeader() const; Int_tNumRequestHeader() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:7634,Modifiability,Inherit,Inheritance,7634,"anvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fBinData! binary data, assigned with http call; Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, Long_t length); set data, posted with the request; buffer should be allocated with malloc(length+1) call,; while last byte will be set to 0; Than one could use post data as null-terminated string. void SetBinData(void* data, Long_t length); set binary data, which will be returned as reply body. void SetPathAndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/fold",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:7647,Modifiability,Inherit,Inherited,7647,"anvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fBinData! binary data, assigned with http call; Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, Long_t length); set data, posted with the request; buffer should be allocated with malloc(length+1) call,; while last byte will be set to 0; Than one could use post data as null-terminated string. void SetBinData(void* data, Long_t length); set binary data, which will be returned as reply body. void SetPathAndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/fold",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:7178,Performance,Cache,Cache-Control,7178,". protected:. TStringAccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); TStringCountHeader(const TString& buf, Int_t number = -1111) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tIsBinData() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fBinData! binary data, assigned with http call; Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, L",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:2931,Security,Hash,Hash,2931,"ong_tGetContentLength() const; const char*GetContentType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFileName() const; TStringGetHeader(const char* name); TStringGetHeaderName(Int_t number) const; virtual const char*TObject::GetIconName() const; const char*GetMethod() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPathName() const; void*GetPostData() const; Long_tGetPostDataLength() const; const char*GetQuery() const; TStringGetRequestHeader(const char* name); TStringGetRequestHeaderName(Int_t number) const; virtual const char*TObject::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUserName() const; Int_tGetZipping() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); Bool_tIs404() const; virtual TClass*IsA() const; Bool_tIsContentType(const char* typ) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFile() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPostMethod() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumHeader() const; Int_tNumRequestHeader() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::o",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:7533,Security,authenticat,authenticated,7533,". protected:. TStringAccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); TStringCountHeader(const TString& buf, Int_t number = -1111) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tIsBinData() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fBinData! binary data, assigned with http call; Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, L",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:7777,Security,Access,AccessHeader,7777," Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, Long_t length); set data, posted with the request; buffer should be allocated with malloc(length+1) call,; while last byte will be set to 0; Than one could use post data as null-terminated string. void SetBinData(void* data, Long_t length); set binary data, which will be returned as reply body. void SetPathAndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/folder/subfolder/get.bin""; Here ""/folder/subfolder/"" is element path and ""get.bin"" requested file.; One could set path and file name separately. TString GetHeader(const char* name); return specified header. void AddHeader(const char* name, const char* value); ",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:9562,Security,authenticat,authenticated,9562,"AndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/folder/subfolder/get.bin""; Here ""/folder/subfolder/"" is element path and ""get.bin"" requested file.; One could set path and file name separately. TString GetHeader(const char* name); return specified header. void AddHeader(const char* name, const char* value); Set name: value pair to reply header; Content-Type field handled separately - one should use SetContentType() method; Content-Length field cannot be set at all;. void FillHttpHeader(TString& buf, const char* header = 0); fill HTTP header. Bool_t CompressWithGzip(); compress reply data with gzip compression. Bool_t IsBinData() const. void SetMethod(const char* method); these methods used to set http request arguments. void SetTopName(const char* topname); set engine-specific top-name. void SetPathName(const char* p); set request path name. void SetFileName(const char* f); set request file name. void SetUserName(const char* n); set name of authenticated user. void SetQuery(const char* q); set request query. void SetRequestHeader(const char* h); set full set of request header. Int_t NumRequestHeader() const; returns number of fields in request header. TString GetRequestHeaderName(Int_t number) const; returns field name in request header. TString GetRequestHeader(const char* name); get named field from request header. const char * GetTopName() const; returns engine-specific top-name. const char * GetMethod() const; returns request method like GET or POST. Bool_t IsPostMethod() const; returns kTRUE if post method is used. void* GetPostData() const; return pointer on posted with request data. Long_t GetPostDataLength() const; return length of posted with request data. const char * GetPathName() const; returns path name from request URL. const char * GetFileName() const; returns file name from request URL. const char * GetUserName() const; return authenticated user name (0 - when no authentication). const char * ",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:10482,Security,authenticat,authenticated,10482,r* f); set request file name. void SetUserName(const char* n); set name of authenticated user. void SetQuery(const char* q); set request query. void SetRequestHeader(const char* h); set full set of request header. Int_t NumRequestHeader() const; returns number of fields in request header. TString GetRequestHeaderName(Int_t number) const; returns field name in request header. TString GetRequestHeader(const char* name); get named field from request header. const char * GetTopName() const; returns engine-specific top-name. const char * GetMethod() const; returns request method like GET or POST. Bool_t IsPostMethod() const; returns kTRUE if post method is used. void* GetPostData() const; return pointer on posted with request data. Long_t GetPostDataLength() const; return length of posted with request data. const char * GetPathName() const; returns path name from request URL. const char * GetFileName() const; returns file name from request URL. const char * GetUserName() const; return authenticated user name (0 - when no authentication). const char * GetQuery() const; returns request query (string after ? in request URL). void SetContentType(const char* typ); these methods used in THttpServer to set results of request processing. void Set404(); mark reply as 404 error - page/request not exists. void SetFile(const char* filename = 0); indicate that http request should response with file content. void SetXml(); set content type as JSON. void SetJson(); set content type as JSON. Int_t NumHeader() const; returns number of fields in header. TString GetHeaderName(Int_t number) const; returns field name in header. void SetEncoding(const char* typ); Set Content-Encoding header like gzip. void SetContent(const char* c); Set content directly. void SetZipping(Int_t kind); Set kind of content zipping; 0 - none; 1 - only when supported in request header; 2 - if supported and content size bigger than 10K; 3 - always. Int_t GetZipping() const; return kind of content zipping. void SetExt,MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:10519,Security,authenticat,authentication,10519,r* f); set request file name. void SetUserName(const char* n); set name of authenticated user. void SetQuery(const char* q); set request query. void SetRequestHeader(const char* h); set full set of request header. Int_t NumRequestHeader() const; returns number of fields in request header. TString GetRequestHeaderName(Int_t number) const; returns field name in request header. TString GetRequestHeader(const char* name); get named field from request header. const char * GetTopName() const; returns engine-specific top-name. const char * GetMethod() const; returns request method like GET or POST. Bool_t IsPostMethod() const; returns kTRUE if post method is used. void* GetPostData() const; return pointer on posted with request data. Long_t GetPostDataLength() const; return length of posted with request data. const char * GetPathName() const; returns path name from request URL. const char * GetFileName() const; returns file name from request URL. const char * GetUserName() const; return authenticated user name (0 - when no authentication). const char * GetQuery() const; returns request query (string after ? in request URL). void SetContentType(const char* typ); these methods used in THttpServer to set results of request processing. void Set404(); mark reply as 404 error - page/request not exists. void SetFile(const char* filename = 0); indicate that http request should response with file content. void SetXml(); set content type as JSON. void SetJson(); set content type as JSON. Int_t NumHeader() const; returns number of fields in header. TString GetHeaderName(Int_t number) const; returns field name in header. void SetEncoding(const char* typ); Set Content-Encoding header like gzip. void SetContent(const char* c); Set content directly. void SetZipping(Int_t kind); Set kind of content zipping; 0 - none; 1 - only when supported in request header; 2 - if supported and content size bigger than 10K; 3 - always. Int_t GetZipping() const; return kind of content zipping. void SetExt,MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:5879,Testability,Test,TestBit,5879,"ize_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSet404(); voidSetBinData(void* data, Long_t length); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetContent(const char* c); voidSetContentType(const char* typ); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEncoding(const char* typ); voidSetExtraHeader(const char* name, const char* value); voidSetFile(const char* filename = 0); voidSetFileName(const char* f); voidSetJson(); voidSetMethod(const char* method); static voidTObject::SetObjectStat(Bool_t stat); voidSetPathAndFileName(const char* fullpath); voidSetPathName(const char* p); voidSetPostData(void* data, Long_t length); voidSetQuery(const char* q); voidSetRequestHeader(const char* h); voidSetTopName(const char* topname); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* n); voidSetXml(); voidSetZipping(Int_t kind); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:5918,Testability,Test,TestBits,5918,"ize_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSet404(); voidSetBinData(void* data, Long_t length); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetContent(const char* c); voidSetContentType(const char* typ); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEncoding(const char* typ); voidSetExtraHeader(const char* name, const char* value); voidSetFile(const char* filename = 0); voidSetFileName(const char* f); voidSetJson(); voidSetMethod(const char* method); static voidTObject::SetObjectStat(Bool_t stat); voidSetPathAndFileName(const char* fullpath); voidSetPathName(const char* p); voidSetPostData(void* data, Long_t length); voidSetQuery(const char* q); voidSetRequestHeader(const char* h); voidSetTopName(const char* topname); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* n); voidSetXml(); voidSetZipping(Int_t kind); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpCallArg.html:786,Usability,Clear,Clear,786," THttpCallArg(); virtual~THttpCallArg(); voidTObject::AbstractMethod(const char* method) const; voidAddHeader(const char* name, const char* value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tCompressWithGzip(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillHttpHeader(TString& buf, const char* header = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const void*GetContent() const; Long_tGetContentLength() const; const char*GetContentType() const; vi",MatchSource.WIKI,root/html534/THttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpCallArg.html
https://root.cern/root/html534/THttpEngine.html:1281,Availability,Error,Error,1281," THttpEngine(const THttpEngine&); virtual~THttpEngine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; vir",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:1410,Availability,error,error,1410,"ine(const THttpEngine&); virtual~THttpEngine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* ms",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:1494,Availability,error,error,1494,"ar* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtu",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:342,Integrability,protocol,protocol,342,". THttpEngine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpEngine. class THttpEngine: public TNamed. THttpEngine. Abstract class for implementing http protocol for THttpServer. Function Members (Methods); public:. THttpEngine(const THttpEngine&); virtual~THttpEngine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; vir",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:2449,Modifiability,Inherit,InheritsFrom,2449,"hod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:2515,Modifiability,Inherit,InheritsFrom,2515,"ject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THttpEngine&operator=(con",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:5711,Modifiability,Inherit,Inheritance,5711,"queID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THttpEngine(const char* name, const char* title); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidProcess(); voidSetServer(THttpServer* serv). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; THttpServer*fServer! object server; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpEngine(const char* name, const char* title); normal constructor. ~THttpEngine(); destructor. THttpEngine(const char* name, const char* title). void SetServer(THttpServer* serv). void Process(); Method regularly called in main ROOT context . {}. Bool_t Create(const char* ); Method to create all components of engine. Called once from by the server . THttpServer * GetServer() const. » Last changed: Tue Jun 23 16:39:21 2015 » Last generated: 2015-06-23 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:5724,Modifiability,Inherit,Inherited,5724,"queID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THttpEngine(const char* name, const char* title); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidProcess(); voidSetServer(THttpServer* serv). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; THttpServer*fServer! object server; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpEngine(const char* name, const char* title); normal constructor. ~THttpEngine(); destructor. THttpEngine(const char* name, const char* title). void SetServer(THttpServer* serv). void Process(); Method regularly called in main ROOT context . {}. Bool_t Create(const char* ); Method to create all components of engine. Called once from by the server . THttpServer * GetServer() const. » Last changed: Tue Jun 23 16:39:21 2015 » Last generated: 2015-06-23 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:2339,Security,Hash,Hash,2339," voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:4692,Testability,Test,TestBit,4692,"* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THttpEngine&operator=(const THttpEngine&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:4731,Testability,Test,TestBits,4731,"* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THttpEngine&operator=(const THttpEngine&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpEngine.html:703,Usability,Clear,Clear,703," THttpEngine(const THttpEngine&); virtual~THttpEngine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; vir",MatchSource.WIKI,root/html534/THttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpEngine.html
https://root.cern/root/html534/THttpServer.html:2649,Availability,Error,Error,2649,"t char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); Bool_tExecuteHttp(THttpCallArg* arg); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOpt",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:2778,Availability,error,error,2778,"const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); Bool_tExecuteHttp(THttpCallArg* arg); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:2862,Availability,error,error,2862,"on = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); Bool_tExecuteHttp(THttpCallArg* arg); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* time",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11112,Availability,avail,available,11112,"new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains pr",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11227,Availability,avail,available,11227,"new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains pr",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:1524,Deployability,update,updated,1524,"pt user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t*",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11132,Deployability,install,installed,11132,"new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains pr",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11247,Deployability,install,installed,11247,"new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains pr",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:1454,Energy Efficiency,monitor,monitoring,1454,"pt user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t*",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:10031,Energy Efficiency,reduce,reduce,10031," SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address like:; https://root.cern.ch/js/3.3; http://web-docs.gsi.de/~linev/js/3.3; This allows to get new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:466,Integrability,interface,interface,466,". THttpServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:607,Integrability,interface,interface,607,". THttpServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:693,Integrability,interface,interface,693,". THttpServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:12701,Integrability,Depend,Depending,12701,"nst char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains prefix like ""jsrootsys/""; If true, method returns real name of the file,; which should be delivered to the client; Method is thread safe and can be called from any thread. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObject* obj); Unregister object in folders hierarchy. See TRootSniffer::UnregisterObject() for more details. void Restrict(const char* path, const char* options); Restrict access to specified object. See TRootSniffer::Restrict() for more details. Bool_t RegisterCommand(const char* cmdname, const char* method, const char* icon = 0); Register command which can be executed from web interface. As method one typically specifies string, which is executed with; gROOT->ProcessLine() method. For instance; serv->RegisterCommand(""Invoke"",""InvokeFunction()"");. Or one could specify any method of the object which is already registered; to the server. For instance:; serv->Register(""/"", hpx);; serv->Regist",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:13389,Integrability,interface,interface,13389,"one in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObject* obj); Unregister object in folders hierarchy. See TRootSniffer::UnregisterObject() for more details. void Restrict(const char* path, const char* options); Restrict access to specified object. See TRootSniffer::Restrict() for more details. Bool_t RegisterCommand(const char* cmdname, const char* method, const char* icon = 0); Register command which can be executed from web interface. As method one typically specifies string, which is executed with; gROOT->ProcessLine() method. For instance; serv->RegisterCommand(""Invoke"",""InvokeFunction()"");. Or one could specify any method of the object which is already registered; to the server. For instance:; serv->Register(""/"", hpx);; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->Reset()"");; Here symbols '/->' separates item name from method to be executed. One could specify additional arguments in the command with; syntax like %arg1%, %arg2% and so on. For example:; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->SetTitle(\""%arg1%\"")"");; serv->RegisterCommand(""/RebinHPXPY"", ""/hpxpy/->Rebin2D(%arg1%,%arg2%)"");; Such parameter(s) will be requested when command clicked in the browser. Once command is registered, one could specify icon which will appear in the browser:; serv->SetIcon(""/ResetHPX"", ""rootsys/icons/ed_execute.png"");. One also can set extra property '_fa",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:4057,Modifiability,Inherit,InheritsFrom,4057,"oidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Bool_tHide(const char* fullname, Bool_t hide = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAnyEngine() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFileRequested(const char* uri, TString& res) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:4123,Modifiability,Inherit,InheritsFrom,4123,"dObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Bool_tHide(const char* fullname, Bool_t hide = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAnyEngine() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFileRequested(const char* uri, TString& res) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:8873,Modifiability,Inherit,Inheritance,8873," };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:8886,Modifiability,Inherit,Inherited,8886," };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:10038,Performance,load,load,10038," SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address like:; https://root.cern.ch/js/3.3; http://web-docs.gsi.de/~linev/js/3.3; This allows to get new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11411,Performance,perform,perform,11411,"ilename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains prefix like ""jsrootsys/""; If true, method returns real name of the file,; which should be delivered to the client; Method is thread safe and can be called from any thread. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Pro",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:12770,Performance,perform,performed,12770,"nst char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains prefix like ""jsrootsys/""; If true, method returns real name of the file,; which should be delivered to the client; Method is thread safe and can be called from any thread. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObject* obj); Unregister object in folders hierarchy. See TRootSniffer::UnregisterObject() for more details. void Restrict(const char* path, const char* options); Restrict access to specified object. See TRootSniffer::Restrict() for more details. Bool_t RegisterCommand(const char* cmdname, const char* method, const char* icon = 0); Register command which can be executed from web interface. As method one typically specifies string, which is executed with; gROOT->ProcessLine() method. For instance; serv->RegisterCommand(""Invoke"",""InvokeFunction()"");. Or one could specify any method of the object which is already registered; to the server. For instance:; serv->Register(""/"", hpx);; serv->Regist",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:12123,Safety,safe,safe,12123,":9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains prefix like ""jsrootsys/""; If true, method returns real name of the file,; which should be delivered to the client; Method is thread safe and can be called from any thread. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObj",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:398,Security,access,access,398,". THttpServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:673,Security,access,access,673,". THttpServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:1114,Security,access,access,1114," viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » THttpServer. class THttpServer: public TNamed. THttpServer. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(co",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:3892,Security,Hash,Hash,3892,":ExecuteEvent(Int_t event, Int_t px, Int_t py); Bool_tExecuteHttp(THttpCallArg* arg); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Bool_tHide(const char* fullname, Bool_t hide = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAnyEngine() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsFileRequested(const char* uri, TString& res) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::opera",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:8482,Security,access,accessed,8482,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidProcessRequest(THttpCallArg* arg); static Bool_tVerifyFilePath(const char* fname). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:8682,Security,access,access,8682,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidProcessRequest(THttpCallArg* arg); static Bool_tVerifyFilePath(const char* fname). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:8749,Security,access,access,8749,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidProcessRequest(THttpCallArg* arg); static Bool_tVerifyFilePath(const char* fname). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:11818,Security,access,access,11818," factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains prefix like ""jsrootsys/""; If true, method returns real name of the file,; which should be delivered to the client; Method is thread safe and can be called from any thread. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:13179,Security,access,access,13179,"d. Bool_t ExecuteHttp(THttpCallArg* arg); Executes http request, specified in THttpCallArg structure; Method can be called from any thread; Actual execution will be done in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObject* obj); Unregister object in folders hierarchy. See TRootSniffer::UnregisterObject() for more details. void Restrict(const char* path, const char* options); Restrict access to specified object. See TRootSniffer::Restrict() for more details. Bool_t RegisterCommand(const char* cmdname, const char* method, const char* icon = 0); Register command which can be executed from web interface. As method one typically specifies string, which is executed with; gROOT->ProcessLine() method. For instance; serv->RegisterCommand(""Invoke"",""InvokeFunction()"");. Or one could specify any method of the object which is already registered; to the server. For instance:; serv->Register(""/"", hpx);; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->Reset()"");; Here symbols '/->' separates item name from method to be executed. One could specify additional arguments in the command with; syntax like %arg1%, %arg2% and so on. For example:; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->SetTitle(\""%arg1%\"")"");; serv->RegisterCommand(""/RebinHPXPY"", ""/hpxpy/->Rebin2D(%arg1%,%arg2%)"");; Such parameter(s) will be requested when command clicked in the browser. Once command is re",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:7111,Testability,Test,TestBit,7111,"r* filename, Int_t& len); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegister(const char* subfolder, TObject* obj); Bool_tRegisterCommand(const char* cmdname, const char* method, const char* icon = 0); voidTObject::ResetBit(UInt_t f); voidRestrict(const char* path, const char* options); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDefaultPage(const char* filename); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; voidSetDrawPage(const char* filename); static voidTObject::SetDtorOnly(void* obj); Bool_tSetIcon(const char* fullname, const char* iconname); Bool_tSetItemField(const char* fullname, const char* name, const char* value); voidSetJSROOT(const char* location); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t readonly); voidSetSniffer(TRootSniffer* sniff); voidSetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTopName(const char* top); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tUnregister(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:7150,Testability,Test,TestBits,7150,"r* filename, Int_t& len); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegister(const char* subfolder, TObject* obj); Bool_tRegisterCommand(const char* cmdname, const char* method, const char* icon = 0); voidTObject::ResetBit(UInt_t f); voidRestrict(const char* path, const char* options); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDefaultPage(const char* filename); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; voidSetDrawPage(const char* filename); static voidTObject::SetDtorOnly(void* obj); Bool_tSetIcon(const char* fullname, const char* iconname); Bool_tSetItemField(const char* fullname, const char* name, const char* value); voidSetJSROOT(const char* location); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t readonly); voidSetSniffer(TRootSniffer* sniff); voidSetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTopName(const char* top); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tUnregister(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:1592,Usability,guid,guide,1592,"roach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constME",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THttpServer.html:2007,Usability,Clear,Clear,2007," THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTN",MatchSource.WIKI,root/html534/THttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THttpServer.html
https://root.cern/root/html534/THYPE.html:1642,Availability,Error,Error,1642," char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi); virtual~THYPE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:1771,Availability,error,error,1771,"ethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetNam",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:1855,Availability,error,error,1855,"""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() con",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:3477,Modifiability,Inherit,InheritsFrom,3477,"tFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhi() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:3543,Modifiability,Inherit,InheritsFrom,3543,"me() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhi() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:8905,Modifiability,Inherit,Inheritance,8905,"rtual voidTTUBE::SetPoints(Double_t* points) const; virtual voidTTUBE::SetSegsAndPols(TBuffer3D& buffer) const; Int_tTShape::ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhistereo angle; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THYPE(); HYPE shape default constructor. THYPE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi); HYPE shape normal constructor. ~THYPE(); HYPE shape default destructor. THYPE(). Float_t GetPhi() const; {return fPhi;}. » Author: Rene Brun 08/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:8918,Modifiability,Inherit,Inherited,8918,"rtual voidTTUBE::SetPoints(Double_t* points) const; virtual voidTTUBE::SetSegsAndPols(TBuffer3D& buffer) const; Int_tTShape::ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhistereo angle; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THYPE(); HYPE shape default constructor. THYPE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi); HYPE shape normal constructor. ~THYPE(); HYPE shape default destructor. THYPE(). Float_t GetPhi() const; {return fPhi;}. » Author: Rene Brun 08/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:3367,Security,Hash,Hash,3367,"DtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhi() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:6807,Testability,Test,TestBit,6807,"am& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBE::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:6846,Testability,Test,TestBits,6846,"am& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBE::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/THYPE.html:994,Usability,Clear,Clear,994," THYPE(); THYPE(const THYPE&); THYPE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi); virtual~THYPE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt)",MatchSource.WIKI,root/html534/THYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/THYPE.html
https://root.cern/root/html534/TImage.html:3756,Availability,Error,Error,3756,"oidDrawFillArea(UInt_t, TPoint*, TImage*); virtual voidDrawFillArea(UInt_t, TPoint*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual voidDrawLine(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawPolyLine(UInt_t, TPoint*, const char* = ""#000000"", UInt_t = 1, TImage::ECoordMode = kCoordModeOrigin); virtual voidDrawRectangle(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawSegments(UInt_t, Segment_t*, const char* = ""#000000"", UInt_t = 1); virtual voidDrawStraightEllips(Int_t, Int_t, Int_t, Int_t, const char* = ""#000000"", Int_t = 1); virtual voidDrawText(TText*, Int_t = 0, Int_t = 0); virtual voidDrawText(Int_t = 0, Int_t = 0, const char* = """", Int_t = 12, const char* = 0, const char* = ""fixed"", TImage::EText3DType = TImage::kPlain, const char* = 0, Float_t = 0); virtual voidTObject::Dump() constMENU ; virtual voidTAttImage::EditorClosed(); virtual voidEndPaint(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(UInt_t, TPoint*, TImage*); virtual voidFillPolygon(UInt_t, TPoint*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual voidFillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, TImage*); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFlip(Int_t = 180); virtual ",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:3885,Availability,error,error,3885,"nt_t = 16, UInt_t = 16); virtual voidDrawLine(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawPolyLine(UInt_t, TPoint*, const char* = ""#000000"", UInt_t = 1, TImage::ECoordMode = kCoordModeOrigin); virtual voidDrawRectangle(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawSegments(UInt_t, Segment_t*, const char* = ""#000000"", UInt_t = 1); virtual voidDrawStraightEllips(Int_t, Int_t, Int_t, Int_t, const char* = ""#000000"", Int_t = 1); virtual voidDrawText(TText*, Int_t = 0, Int_t = 0); virtual voidDrawText(Int_t = 0, Int_t = 0, const char* = """", Int_t = 12, const char* = 0, const char* = ""fixed"", TImage::EText3DType = TImage::kPlain, const char* = 0, Float_t = 0); virtual voidTObject::Dump() constMENU ; virtual voidTAttImage::EditorClosed(); virtual voidEndPaint(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(UInt_t, TPoint*, TImage*); virtual voidFillPolygon(UInt_t, TPoint*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual voidFillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, TImage*); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFlip(Int_t = 180); virtual voidFloodFill(Int_t, Int_t, const char*, const char*, const char* = 0); virtual voidFromGLBuffer(UChar_t*, UInt_t, UInt_t); virtu",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:3969,Availability,error,error,3969,"char* = ""#000000"", UInt_t = 1); virtual voidDrawPolyLine(UInt_t, TPoint*, const char* = ""#000000"", UInt_t = 1, TImage::ECoordMode = kCoordModeOrigin); virtual voidDrawRectangle(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawSegments(UInt_t, Segment_t*, const char* = ""#000000"", UInt_t = 1); virtual voidDrawStraightEllips(Int_t, Int_t, Int_t, Int_t, const char* = ""#000000"", Int_t = 1); virtual voidDrawText(TText*, Int_t = 0, Int_t = 0); virtual voidDrawText(Int_t = 0, Int_t = 0, const char* = """", Int_t = 12, const char* = 0, const char* = ""fixed"", TImage::EText3DType = TImage::kPlain, const char* = 0, Float_t = 0); virtual voidTObject::Dump() constMENU ; virtual voidTAttImage::EditorClosed(); virtual voidEndPaint(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(UInt_t, TPoint*, TImage*); virtual voidFillPolygon(UInt_t, TPoint*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual voidFillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, TImage*); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFlip(Int_t = 180); virtual voidFloodFill(Int_t, Int_t, const char*, const char*, const char* = 0); virtual voidFromGLBuffer(UChar_t*, UInt_t, UInt_t); virtual voidFromPad(TVirtualPad*, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual ",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:9887,Deployability,TOGGLE,TOGGLE,9887,"nt*, const char* = ""#000000"", TImage::ECoordMode = kCoordModeOrigin); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPutPixel(Int_t, Int_t, const char* = ""#000000""); virtual Int_tTObject::Read(const char* name); virtual voidReadImage(const char*, TImage::EImageFileTypes = TImage::kUnknown); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttImage::ResetAttImage(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttImage::SaveImageAttributes(ostream& out, const char* name, TAttImage::EImageQuality qualdef = kImgDefault, UInt_t comprdef = 0, Bool_t constRatiodef = kTRUE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidScale(UInt_t, UInt_t); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTAttImage::SetConstRatio(Bool_t constRatio = kTRUE)TOGGLE ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t = kTRUE); virtual voidSetImage(Pixmap_t, Pixmap_t = 0); virtual voidSetImage(const TArrayD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const TVectorD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const Double_t*, UInt_t, UInt_t, TImagePalette* = 0); virtual Bool_tSetImageBuffer(char**, TImage::EImageFileTypes = TImage::kPng); virtual voidTAttImage::SetImageCompression(UInt_t lcompression)MENU ; virtual voidTAttImage::SetImageQuality(TAttImage::EImageQuality lquality); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttImage::SetPalette(const TImagePalette* palette); virtual voidTAttImage::SetPaletteEnabled(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidT",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:16394,Energy Efficiency,Reduce,Reduces,16394,"id UnZoom(); Restore the image original size. (See TASImage::UnZoom). {}. void Zoom(UInt_t , UInt_t , UInt_t , UInt_t ); Zoom the image. (See TASImage::Zoom). {}. void Flip(Int_t = 180); Flip the image by a multiple of 90 degrees. (See TASImage::Flip). {}. void Gray(Bool_t = kTRUE); Converts image to Gray. (See TASImage::Gray). {}. Bool_t IsGray() const; { return kFALSE; }. void Mirror(Bool_t = kTRUE); Mirror the image. (See TASImage::Mirror). {}. void Scale(UInt_t , UInt_t ); Scale the image. (See TASImage::Scale). {}. void Slice(UInt_t , UInt_t , UInt_t , UInt_t , UInt_t , UInt_t ); Slice the image. (See TASImage::Slice). {}. void Crop(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); Tile the image. (See TASImage::Tile); Crop the image. (See TASImage::Crop). {}. void Pad(const char* = ""#FFFFFFFF"", UInt_t = 0, UInt_t = 0, UInt_t = 0, UInt_t = 0); Enlarge image. (See TASImage::Pad). { }. Double_t * Vectorize(UInt_t = 256, UInt_t = 4, Int_t = 0); Gaussian blurr. (See TASImage::Blur); Reduces colordepth of an image. (See TASImage::Vectorize). { return 0; }. void HSV(UInt_t = 0, UInt_t = 360, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); (See TASImage::HSV). {}. void Merge(const TImage* , const char* = ""alphablend"", Int_t = 0, Int_t = 0); Render multipoint gradient inside a rectangle. (See TASImage::Gradient); Merge two images. (See TASImage::Merge). {}. void Append(const TImage* , const char* = ""+"", const char* = ""#00000000""); Append image. (See TASImage::Append). {}. void Bevel(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0, const char* = ""#ffdddddd"", const char* = ""#ff555555"", UShort_t = 1, Bool_t = kFALSE); Bevel effect. (See TASImage::Bevel). {}. void EndPaint(); {}. void DrawLine(UInt_t , UInt_t , UInt_t , UInt_t , const char* = ""#000000"", UInt_t = 1); {}. void DrawBox(Int_t , Int_t , Int_t , Int_t , const char* = ""#000000"", UInt_t = 1, Int_t = 0); {}. void FillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0);",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:333,Integrability,interface,interface,333,". TImage. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImage. class TImage: public TNamed, public TAttImage. Image class; TImage is an abstract interface to image processing library.; It allows for the reading and writing of images in different formats, several; image manipulations (scaling, tiling, merging, etc.) and displaying in pads. The concrete implementation of this class is done by the; TASImage class. The ; methods are documented in that class.; . Function Members (Methods); public:. TImage(const TImage& img); TImage(UInt_t, UInt_t); virtual~TImage(); voidTObject::AbstractMethod(const char* method) const; virtual voidAppend(const TImage*, const char* = ""+"", const char* = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t = kTRUE); virtual voidBevel(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0, const char* = ""#ffdddddd"", const char* = ""#ff555555"", UShort_t = 1, Bool_t = kFALSE); virtual voidBlur(Double_t = 3, Double_t = 3); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char*) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(TImage*, Int_t, Int_t, UInt_t, UInt_t, Int_t = 0, Int_t = 0, Int_t = 3, TImage::EColorChan = kAllChan); static TImage*Create(); virtual voidCrop(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidCropPolygon(UInt_t, TPoint*); virtual voidCropSpans(UInt_t, TPoint*, UInt_t*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Int_t, Int_t, In",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:6743,Modifiability,Inherit,InheritsFrom,6743,"x, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const TImagePalette&TAttImage::GetPalette() const; virtual TArrayL*GetPixels(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual Pixmap_tGetPixmap(); virtual UInt_t*GetRgbaArray(); virtual TImage*GetScaledImage() const; virtual UInt_t*GetScanline(UInt_t); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetVecArray(); virtual UInt_tGetWidth() const; virtual voidGradient(UInt_t = 0, const char* = ""#FFFFFF #000000"", const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidGray(Bool_t = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidHSV(UInt_t = 0, UInt_t = 360, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGray() const; Bool_tTObject::IsOnHeap() const; Bool_tTAttImage::IsPaletteEnabled() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMerge(const TImage*, const char* = ""alphablend"", Int_t = 0, Int_t = 0); virtual voidMirror(Bool_t = kTRUE); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TImage*Open(char** data); static TImage*Open(const char* file, TImage::EImageFileTypes typ",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:6809,Modifiability,Inherit,InheritsFrom,6809," Option_t*TObject::GetOption() const; virtual const TImagePalette&TAttImage::GetPalette() const; virtual TArrayL*GetPixels(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual Pixmap_tGetPixmap(); virtual UInt_t*GetRgbaArray(); virtual TImage*GetScaledImage() const; virtual UInt_t*GetScanline(UInt_t); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetVecArray(); virtual UInt_tGetWidth() const; virtual voidGradient(UInt_t = 0, const char* = ""#FFFFFF #000000"", const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidGray(Bool_t = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidHSV(UInt_t = 0, UInt_t = 360, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGray() const; Bool_tTObject::IsOnHeap() const; Bool_tTAttImage::IsPaletteEnabled() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMerge(const TImage*, const char* = ""alphablend"", Int_t = 0, Int_t = 0); virtual voidMirror(Bool_t = kTRUE); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TImage*Open(char** data); static TImage*Open(const char* file, TImage::EImageFileTypes type = kUnknown); static TImage*Open(const char* name, const TArrayD&",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:13716,Modifiability,Inherit,Inheritance,13716,"leanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TAttImage::EImageQuality { kImgDefault; kImgPoor; kImgFast; kImgGood; kImgBest; };. protected:. Bool_tTAttImage::fConstRatiokeep aspect ratio of image on the screen; UInt_tTAttImage::fImageCompressioncompression [0 .. 100] 0: no compression; TAttImage::EImageQualityTAttImage::fImageQuality*OPTION={GetMethod=""GetImageQuality"";SetMethod=""SetImageQuality"";Items=(kImgDefault=""Default"",kImgPoor=""Poor"",kImgFast=""Fast"",kImgGood=""Good"",kImgBest=""Best"")}*; TStringTNamed::fNameobject identifier; TImagePaletteTAttImage::fPalettecolor palette for value -> color conversion; TPaletteEditor*TAttImage::fPaletteEditor! GUI to edit the color palette; Bool_tTAttImage::fPaletteEnabled! kTRUE - palette is drawn on the image; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImage * Create(); Create an image.; Use ReadImage() or SetImage() to initialize the image. TImage * Open(const char* file, TImage::EImageFileTypes type = kUnknown); Open a specified image file. TImage * Open(const char* name, const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette); Open an image with the specified data in a Double_t array. TImage * Open(const char* name, const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); Open an image with the specified data in a TArrayD. TImage * Open(const char* name, const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); Open an image with the specified data in a TVectorD. TImage * Open(char** data); Create image from XPM data array. TImage(const char* file); { }. TImage(); { }. TImage(const TImage& img); { }. TImage & operator=(const TImage& img); { TNamed::operator=(img); TAttImage::operator=(img); return *this; }. TImage(UInt_t , UInt_t );",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:13729,Modifiability,Inherit,Inherited,13729,"leanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TAttImage::EImageQuality { kImgDefault; kImgPoor; kImgFast; kImgGood; kImgBest; };. protected:. Bool_tTAttImage::fConstRatiokeep aspect ratio of image on the screen; UInt_tTAttImage::fImageCompressioncompression [0 .. 100] 0: no compression; TAttImage::EImageQualityTAttImage::fImageQuality*OPTION={GetMethod=""GetImageQuality"";SetMethod=""SetImageQuality"";Items=(kImgDefault=""Default"",kImgPoor=""Poor"",kImgFast=""Fast"",kImgGood=""Good"",kImgBest=""Best"")}*; TStringTNamed::fNameobject identifier; TImagePaletteTAttImage::fPalettecolor palette for value -> color conversion; TPaletteEditor*TAttImage::fPaletteEditor! GUI to edit the color palette; Bool_tTAttImage::fPaletteEnabled! kTRUE - palette is drawn on the image; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImage * Create(); Create an image.; Use ReadImage() or SetImage() to initialize the image. TImage * Open(const char* file, TImage::EImageFileTypes type = kUnknown); Open a specified image file. TImage * Open(const char* name, const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette); Open an image with the specified data in a Double_t array. TImage * Open(const char* name, const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); Open an image with the specified data in a TArrayD. TImage * Open(const char* name, const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); Open an image with the specified data in a TVectorD. TImage * Open(char** data); Create image from XPM data array. TImage(const char* file); { }. TImage(); { }. TImage(const TImage& img); { }. TImage & operator=(const TImage& img); { TNamed::operator=(img); TAttImage::operator=(img); return *this; }. TImage(UInt_t , UInt_t );",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:6511,Security,Hash,Hash,6511,"EImageFileTypesGetImageFileTypeFromFilename(const char* opt); TAttImage::EImageQualityTAttImage::GetImageQuality() const; virtual Pixmap_tGetMask(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const TImagePalette&TAttImage::GetPalette() const; virtual TArrayL*GetPixels(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual Pixmap_tGetPixmap(); virtual UInt_t*GetRgbaArray(); virtual TImage*GetScaledImage() const; virtual UInt_t*GetScanline(UInt_t); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetVecArray(); virtual UInt_tGetWidth() const; virtual voidGradient(UInt_t = 0, const char* = ""#FFFFFF #000000"", const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidGray(Bool_t = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidHSV(UInt_t = 0, UInt_t = 360, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGray() const; Bool_tTObject::IsOnHeap() const; Bool_tTAttImage::IsPaletteEnabled() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMerge(const TImage*, const char* = ""alphablend"", Int_t = 0, Int_t = 0); virtual voidMirror(Bool_t = kT",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:11306,Testability,Test,TestBit,11306,"tDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t = kTRUE); virtual voidSetImage(Pixmap_t, Pixmap_t = 0); virtual voidSetImage(const TArrayD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const TVectorD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const Double_t*, UInt_t, UInt_t, TImagePalette* = 0); virtual Bool_tSetImageBuffer(char**, TImage::EImageFileTypes = TImage::kPng); virtual voidTAttImage::SetImageCompression(UInt_t lcompression)MENU ; virtual voidTAttImage::SetImageQuality(TAttImage::EImageQuality lquality); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttImage::SetPalette(const TImagePalette* palette); virtual voidTAttImage::SetPaletteEnabled(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSlice(UInt_t, UInt_t, UInt_t, UInt_t, UInt_t, UInt_t); virtual voidTAttImage::StartPaletteEditor()MENU ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTile(UInt_t, UInt_t); virtual voidUnZoom(); virtual voidTObject::UseCurrentStyle(); virtual Double_t*Vectorize(UInt_t = 256, UInt_t = 4, Int_t = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteImage(const char*, TImage::EImageFileTypes = TImage::kUnknown); virtual voidZoom(UInt_t, UInt_t, UInt_t, UInt_t).",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:11345,Testability,Test,TestBits,11345,"tDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t = kTRUE); virtual voidSetImage(Pixmap_t, Pixmap_t = 0); virtual voidSetImage(const TArrayD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const TVectorD&, UInt_t, TImagePalette* = 0); virtual voidSetImage(const Double_t*, UInt_t, UInt_t, TImagePalette* = 0); virtual Bool_tSetImageBuffer(char**, TImage::EImageFileTypes = TImage::kPng); virtual voidTAttImage::SetImageCompression(UInt_t lcompression)MENU ; virtual voidTAttImage::SetImageQuality(TAttImage::EImageQuality lquality); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttImage::SetPalette(const TImagePalette* palette); virtual voidTAttImage::SetPaletteEnabled(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSlice(UInt_t, UInt_t, UInt_t, UInt_t, UInt_t, UInt_t); virtual voidTAttImage::StartPaletteEditor()MENU ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTile(UInt_t, UInt_t); virtual voidUnZoom(); virtual voidTObject::UseCurrentStyle(); virtual Double_t*Vectorize(UInt_t = 256, UInt_t = 4, Int_t = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteImage(const char*, TImage::EImageFileTypes = TImage::kUnknown); virtual voidZoom(UInt_t, UInt_t, UInt_t, UInt_t).",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImage.html:1315,Usability,Clear,Clear,1315," TImage(const TImage& img); TImage(UInt_t, UInt_t); virtual~TImage(); voidTObject::AbstractMethod(const char* method) const; virtual voidAppend(const TImage*, const char* = ""+"", const char* = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t = kTRUE); virtual voidBevel(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0, const char* = ""#ffdddddd"", const char* = ""#ff555555"", UShort_t = 1, Bool_t = kFALSE); virtual voidBlur(Double_t = 3, Double_t = 3); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char*) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(TImage*, Int_t, Int_t, UInt_t, UInt_t, Int_t = 0, Int_t = 0, Int_t = 3, TImage::EColorChan = kAllChan); static TImage*Create(); virtual voidCrop(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidCropPolygon(UInt_t, TPoint*); virtual voidCropSpans(UInt_t, TPoint*, UInt_t*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Int_t, Int_t, In",MatchSource.WIKI,root/html534/TImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImage.html
https://root.cern/root/html534/TImageDump.html:2300,Availability,Error,Error,2300,"""""); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; TImage*GetImage() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttM",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:2429,Availability,error,error,2429,":Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; TImage*GetImage() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virt",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:2513,Availability,error,error,2513,"y, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; TImage*GetImage() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::Get",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:13339,Energy Efficiency,green,green,13339,"s it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed dark is the; color for the dark part of the frame light is the color for the light; part of the frame. void DrawPolyMarker(Int_t n, Float_t* x, Float_t* y); not used. void DrawPolyMarker(Int_t n, Double_t* x, Double_t* y); draw polymarker. void DrawPS(Int_t n, Double_t* xw, Double_t* yw); This function defines a path with xw and yw and draw it according the; value of nn:. If nn > 0 a line is drawn.; If nn < 0 a closed polygon is drawn. void DrawPS(Int_t n, Float_t* xw, Float_t* yw); not used. void DrawDashPolyLine(Int_t npoints, TPoint* pt, UInt_t nDash, const char* pDash, const char* col, UInt_t thick); draw dashed polyline. void NewPage(); new page. void Text(Double_t x, Double_t y, const char* string); Draw text. x: x position of the text; y: y position of the text. void Text(Double_t x, Double_t y, const wchar_t* string); Draw text. x: x position of the text; y: y position of the text. void CellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); cell array begin. void CellArrayFill(Int_t r, Int_t g, Int_t b); Cell array fill. void CellArrayEnd(); Cell array end. void SetColor(Float_t r, Float_t g, Float_t b); Set color with its R G B components. r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1]. Int_t XtoPixel(Double_t x); x to pixel. Int_t YtoPixel(Double_t y); y to pixel. void * GetStream() const; { return (void*)fImage; }. void SetType(Int_t type = -111); { fType = type; }. Int_t GetType() const; { return fType; }. TImage * GetImage() const; { return fImage; }. » Author: Valeriy Onuchin 29/04/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/postscript:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:11417,Integrability,interface,interface,11417,"irtualPS::fLenBufferBuffer length; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypePostScript workstation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImageDump(); Default SVG constructor. TImageDump(const char* filename, Int_t type = -111); Initialize batch image interface. fname : image file name. The possible workstation types are:; 111 - Portrait; 112 - Landscape; 114 - preview, keep in memory (do not write on delete). void Open(const char* filename, Int_t type = -111); Open a image file. ~TImageDump(); destructor. void Close(Option_t* opt = """"); Close a image file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed dark is the; color for the dark part of the frame light is the color for the light; part of the frame. void DrawPolyMarker(Int_t n, Float_t* x, Float_t* y); not used. void DrawPolyMarker(Int_t n, Double_t* x, Double_t* y); draw polymarker. void DrawPS(Int_t n, Double_t* xw",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:4142,Modifiability,Inherit,InheritsFrom,4142,"tyle_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOpen(const char* filename, Int_t type = -111); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:4208,Modifiability,Inherit,InheritsFrom,4208,"LineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOpen(const char* filename, Int_t type = -111); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:11225,Modifiability,Inherit,Inheritance,11225,"::fFillStylefill area style; TImage*fImageimage; const char*TVirtualPS::fImplicitCREscEscape symbol before enforced new line; Int_tTVirtualPS::fLenBufferBuffer length; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypePostScript workstation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImageDump(); Default SVG constructor. TImageDump(const char* filename, Int_t type = -111); Initialize batch image interface. fname : image file name. The possible workstation types are:; 111 - Portrait; 112 - Landscape; 114 - preview, keep in memory (do not write on delete). void Open(const char* filename, Int_t type = -111); Open a image file. ~TImageDump(); destructor. void Close(Option_t* opt = """"); Close a image file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed dark is the; color for the dark part of the frame light is the color for the light; part of the frame. void DrawPolyMarker(Int_t n, Float_t*",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:11238,Modifiability,Inherit,Inherited,11238,"::fFillStylefill area style; TImage*fImageimage; const char*TVirtualPS::fImplicitCREscEscape symbol before enforced new line; Int_tTVirtualPS::fLenBufferBuffer length; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypePostScript workstation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImageDump(); Default SVG constructor. TImageDump(const char* filename, Int_t type = -111); Initialize batch image interface. fname : image file name. The possible workstation types are:; 111 - Portrait; 112 - Landscape; 114 - preview, keep in memory (do not write on delete). void Open(const char* filename, Int_t type = -111); Open a image file. ~TImageDump(); destructor. void Close(Option_t* opt = """"); Close a image file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed dark is the; color for the dark part of the frame light is the color for the light; part of the frame. void DrawPolyMarker(Int_t n, Float_t*",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:4032,Security,Hash,Hash,4032,"ar*TObject::GetIconName() const; TImage*GetImage() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOpen(const char* filename, Int_t type = -111); static voidTObject::operator delete(void* ptr); static voidTObject::operator del",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:582,Testability,test,test,582,". TImageDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TImageDump. class TImageDump: public TVirtualPS. TImageDump. save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.); in batch mode. Example:. $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");. TImageDump can be used in any mode (batch, interactive) as follows. TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();. Function Members (Methods); public:. TImageDump(); TImageDump(const char* filename, Int_t type = -111); virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:8935,Testability,Test,TestBit,8935,"ker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(Int_t type = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); virtual voidText(Double_t x, Double_t y, const wchar_t* string); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidTVirtualPS::WriteReal(Float_t r, Bool_t space = kTRUE).",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:8974,Testability,Test,TestBits,8974,"ker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(Int_t type = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); virtual voidText(Double_t x, Double_t y, const wchar_t* string); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidTVirtualPS::WriteReal(Float_t r, Bool_t space = kTRUE).",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImageDump.html:1176,Usability,Clear,Clear,1176," TImageDump(); TImageDump(const char* filename, Int_t type = -111); virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)",MatchSource.WIKI,root/html534/TImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImageDump.html
https://root.cern/root/html534/TImagePalette.html:3654,Availability,Error,Error,3654,,MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:3783,Availability,error,error,3783,"_t numPoints); TImagePalette(Int_t ncolors, Int_t* colors); virtual~TImagePalette(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindColor(UShort_t r, UShort_t g, UShort_t b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_t*GetRootColors(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:3867,Availability,error,error,3867," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindColor(UShort_t r, UShort_t g, UShort_t b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_t*GetRootColors(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classna",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:1414,Energy Efficiency,allocate,allocated,1414,"rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : ",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:1767,Energy Efficiency,monitor,monitors,1767,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. TImagePalette(); TImagePalette(const TImagePalette& palett",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:1823,Energy Efficiency,monitor,monitors,1823,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. TImagePalette(); TImagePalette(const TImagePalette& palett",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:7821,Energy Efficiency,green,green,7821,"t char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:8269,Energy Efficiency,allocate,allocates,8269,"ar* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:507,Integrability,depend,depends,507,". TImagePalette. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImagePalette. class TImagePalette: public TObject. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolor",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:751,Integrability,depend,depends,751,". TImagePalette. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImagePalette. class TImagePalette: public TObject. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolor",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:901,Modifiability,inherit,inheritance,901,". TImagePalette. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImagePalette. class TImagePalette: public TObject. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolor",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:1241,Modifiability,variab,variables,1241,"te. class TImagePalette: public TObject. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::C",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:4838,Modifiability,Inherit,InheritsFrom,4838,"jArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindColor(UShort_t r, UShort_t g, UShort_t b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_t*GetRootColors(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:4904,Modifiability,Inherit,InheritsFrom,4904,"nt(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindColor(UShort_t r, UShort_t g, UShort_t b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_t*GetRootColors(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePalette&operator=",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:8037,Modifiability,Inherit,Inheritance,8037,"ual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically gen",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:8050,Modifiability,Inherit,Inherited,8050,"ual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically gen",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:4728,Security,Hash,Hash,4728,"ecute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFindColor(UShort_t r, UShort_t g, UShort_t b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_t*GetRootColors(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:6877,Testability,Test,TestBit,6877,"sZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePalette&operator=(const TImagePalette& palette); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:6916,Testability,Test,TestBits,6916,"sZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePalette&operator=(const TImagePalette& palette); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePalette.html:3114,Usability,Clear,Clear,3114,,MatchSource.WIKI,root/html534/TImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePalette.html
https://root.cern/root/html534/TImagePlugin.html:423,Availability,avail,available,423,". TImagePlugin. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImagePlugin. class TImagePlugin: public TObject. TImagePlugin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TImagePlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:1264,Availability,Error,Error,1264," virtual~TImagePlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:1393,Availability,error,error,1393," virtual~TImagePlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:1477,Availability,error,error,1477," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:2348,Modifiability,Inherit,InheritsFrom,2348,"ar* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:2414,Modifiability,Inherit,InheritsFrom,2414,"ject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePlugin&operator=(",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:5376,Modifiability,Inherit,Inheritance,5376,"t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfExtensionfile extension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TImagePlugin(); { }. unsigned char * ReadFile(const char* filename, UInt_t& w, UInt_t& h). Bool_t WriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). ULong_t Hash() const; { return fExtension.Hash(); }. » Author: Valeriy Onuchin 23/06/05 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:5389,Modifiability,Inherit,Inherited,5389,"t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfExtensionfile extension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TImagePlugin(); { }. unsigned char * ReadFile(const char* filename, UInt_t& w, UInt_t& h). Bool_t WriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). ULong_t Hash() const; { return fExtension.Hash(); }. » Author: Valeriy Onuchin 23/06/05 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:5642,Security,Hash,Hash,5642,"t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfExtensionfile extension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TImagePlugin(); { }. unsigned char * ReadFile(const char* filename, UInt_t& w, UInt_t& h). Bool_t WriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). ULong_t Hash() const; { return fExtension.Hash(); }. » Author: Valeriy Onuchin 23/06/05 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:5676,Security,Hash,Hash,5676,"t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfExtensionfile extension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TImagePlugin(); { }. unsigned char * ReadFile(const char* filename, UInt_t& w, UInt_t& h). Bool_t WriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h). ULong_t Hash() const; { return fExtension.Hash(); }. » Author: Valeriy Onuchin 23/06/05 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:4453,Testability,Test,TestBit,4453,"voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePlugin&operator=(const TImagePlugin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual unsigned char*ReadFile(const char* filename, UInt_t& w, UInt_t& h); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h).",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:4492,Testability,Test,TestBits,4492,"voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TImagePlugin&operator=(const TImagePlugin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual unsigned char*ReadFile(const char* filename, UInt_t& w, UInt_t& h); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteFile(const char* filename, unsigned char* argb, UInt_t w, UInt_t h).",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/TImagePlugin.html:724,Usability,Clear,Clear,724," virtual~TImagePlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root/html534/TImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TImagePlugin.html
https://root.cern/root/html534/timespec.html:306,Modifiability,extend,extends,306,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/timespec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/timespec.html
https://root.cern/root/html534/timespec.html:1286,Modifiability,Inherit,Inheritance,1286,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/timespec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/timespec.html
https://root.cern/root/html534/timespec.html:1299,Modifiability,Inherit,Inherited,1299,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/timespec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/timespec.html
https://root.cern/root/html534/timespec.html:698,Usability,simpl,simply,698,". timespec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » timespec. class timespec. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; struct timespec; {; time_t tv_sec; /* seconds *; long tv_nsec; /* nanoseconds *; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC. No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; Jan 18, 19:14:07, 2038.; If this experiment is still going when it becomes significant; someone will have to deal with it. This class is also known as (typedefs to this class)timespec_t. Function Members (Methods); public:. timespec(); timespec(const timespec&); ~timespec(); timespec&operator=(const timespec&). Data Members; public:. longtv_nsecnanoseconds; time_ttv_secseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: R. Hatcher 30/9/2001 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/timespec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/timespec.html
https://root.cern/root/html534/TIndArray.html:709,Modifiability,Inherit,Inheritance,709,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html534/TIndArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndArray.html
https://root.cern/root/html534/TIndArray.html:722,Modifiability,Inherit,Inherited,722,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html534/TIndArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndArray.html
https://root.cern/root/html534/TIndArray.html:830,Usability,Clear,ClearAndResize,830,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html534/TIndArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndArray.html
https://root.cern/root/html534/TIndArray.html:1051,Usability,Clear,Clear,1051,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html534/TIndArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndArray.html
https://root.cern/root/html534/TIndexTable.html:3540,Availability,Error,Error,3540,":Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTTable::CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TIndexTable::iteratorend(); TIndexTable::iteratorend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = ",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:3669,Availability,error,error,3669," named) const; Int_tTTable::CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TIndexTable::iteratorend(); TIndexTable::iteratorend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*TTable::GetArray",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:3753,Availability,error,error,3753,"_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TIndexTable::iteratorend(); TIndexTable::iteratorend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*TTable::GetArray() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual const Char",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:12072,Deployability,Update,Update,12072,"t idx); virtual voidTTable::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTTable::ResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector&); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*Table() const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:12102,Deployability,Update,Update,12102,"t idx); virtual voidTTable::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTTable::ResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector&); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*Table() const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:7242,Modifiability,Inherit,InheritsFrom,7242,"taSet::GetParent() const; virtual TClass*TTable::GetRowClass() const; virtual TTableDescriptor*TTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; int*GetTable(Int_t i = 0); const int*GetTable(Int_t i = 0) const; virtual TTableDescriptor*TTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*TTable::MakeExpression(const Ch",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:7308,Modifiability,Inherit,InheritsFrom,7308,"st; virtual TTableDescriptor*TTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; int*GetTable(Int_t i = 0); const int*GetTable(Int_t i = 0) const; virtual TTableDescriptor*TTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*TTable::MakeExpression(const Char_t** expressions, Int_t nExpressions); voidTDataSet::Mark()MENU ",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:15217,Modifiability,Inherit,Inheritance,15217,"num TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. static const char*TTable::fgTypeName[13]. protected:. TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; Long_tTTable::fMaxIndexThe used capacity of this array; Int_tTTable::fNNumber of array elements; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; const TTable*fRefTable; Long_tTTable::fSizeSize of the one element (row) of the table; Char_t*TTable::fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TTableDescriptor*fgColDescriptors; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dictionary(); to be documented. TIndexTable(const TTable* table); to be documented. TTableDescriptor * CreateDescriptor(); to be documented. TTableDescriptor * GetDescriptorPointer() const; return column descriptor. void SetDescriptorPointer(TTableDescriptor* list); set table descriptor. const TTable * Table() const; to be documented. int * GetTable(Int_t i = 0). { return ((int *)GetArray())+i;}. const int * GetTable(Int_t i = 0) const. { return ((int *)GetArray())+i;}. Bool_t IsValid() const. void push_back(Long_t next). { AddAt(&next); }. TIndexTable(const TTable* table). TIndexTable(const TIndexTable& indx); {}. iterator begin(); { return ((const TIndexTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*Table(),*GetTable(0)):end();}. iterator end(); { return ((const TIndexTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*Table(), *GetTable(i)):iterator(*this",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:15230,Modifiability,Inherit,Inherited,15230,"num TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. static const char*TTable::fgTypeName[13]. protected:. TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; Long_tTTable::fMaxIndexThe used capacity of this array; Int_tTTable::fNNumber of array elements; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; const TTable*fRefTable; Long_tTTable::fSizeSize of the one element (row) of the table; Char_t*TTable::fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TTableDescriptor*fgColDescriptors; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dictionary(); to be documented. TIndexTable(const TTable* table); to be documented. TTableDescriptor * CreateDescriptor(); to be documented. TTableDescriptor * GetDescriptorPointer() const; return column descriptor. void SetDescriptorPointer(TTableDescriptor* list); set table descriptor. const TTable * Table() const; to be documented. int * GetTable(Int_t i = 0). { return ((int *)GetArray())+i;}. const int * GetTable(Int_t i = 0) const. { return ((int *)GetArray())+i;}. Bool_t IsValid() const. void push_back(Long_t next). { AddAt(&next); }. TIndexTable(const TTable* table). TIndexTable(const TIndexTable& indx); {}. iterator begin(); { return ((const TIndexTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*Table(),*GetTable(0)):end();}. iterator end(); { return ((const TIndexTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*Table(), *GetTable(i)):iterator(*this",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:7132,Security,Hash,Hash,7132,"::GetOffset(const Char_t* columnName = 0) const; virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*TTable::GetRowClass() const; virtual TTableDescriptor*TTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; int*GetTable(Int_t i = 0); const int*GetTable(Int_t i = 0) const; virtual TTableDescriptor*TTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:11926,Testability,Test,TestBit,11926,"t idx); virtual voidTTable::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTTable::ResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector&); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*Table() const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:11965,Testability,Test,TestBits,11965,"t idx); virtual voidTTable::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTTable::ResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector&); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*Table() const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:16430,Testability,assert,assert,16430,"nst TTable*fRefTable; Long_tTTable::fSizeSize of the one element (row) of the table; Char_t*TTable::fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TTableDescriptor*fgColDescriptors; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dictionary(); to be documented. TIndexTable(const TTable* table); to be documented. TTableDescriptor * CreateDescriptor(); to be documented. TTableDescriptor * GetDescriptorPointer() const; return column descriptor. void SetDescriptorPointer(TTableDescriptor* list); set table descriptor. const TTable * Table() const; to be documented. int * GetTable(Int_t i = 0). { return ((int *)GetArray())+i;}. const int * GetTable(Int_t i = 0) const. { return ((int *)GetArray())+i;}. Bool_t IsValid() const. void push_back(Long_t next). { AddAt(&next); }. TIndexTable(const TTable* table). TIndexTable(const TIndexTable& indx); {}. iterator begin(); { return ((const TIndexTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*Table(),*GetTable(0)):end();}. iterator end(); { return ((const TIndexTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*Table(), *GetTable(i)):iterator(*this);}. TIndexTable(); {SetType(""int"");}. TIndexTable(const char* name); {SetType(""int"");}. TIndexTable(Int_t n); {SetType(""int"");}. virtual ~TIndexTable(); {}. int & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const int & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const int *)(GetTable(i))); }. » Author: Valery Fine(fine@bnl.gov) 01/03/2001 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:16527,Testability,assert,assert,16527,"nst TTable*fRefTable; Long_tTTable::fSizeSize of the one element (row) of the table; Char_t*TTable::fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TTableDescriptor*fgColDescriptors; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dictionary(); to be documented. TIndexTable(const TTable* table); to be documented. TTableDescriptor * CreateDescriptor(); to be documented. TTableDescriptor * GetDescriptorPointer() const; return column descriptor. void SetDescriptorPointer(TTableDescriptor* list); set table descriptor. const TTable * Table() const; to be documented. int * GetTable(Int_t i = 0). { return ((int *)GetArray())+i;}. const int * GetTable(Int_t i = 0) const. { return ((int *)GetArray())+i;}. Bool_t IsValid() const. void push_back(Long_t next). { AddAt(&next); }. TIndexTable(const TTable* table). TIndexTable(const TIndexTable& indx); {}. iterator begin(); { return ((const TIndexTable *)this)->begin();}. iterator begin() const; { return GetNRows() ? iterator(*Table(),*GetTable(0)):end();}. iterator end(); { return ((const TIndexTable *)this)->end(); }. iterator end() const; {Long_t i = GetNRows(); return i? iterator(*Table(), *GetTable(i)):iterator(*this);}. TIndexTable(); {SetType(""int"");}. TIndexTable(const char* name); {SetType(""int"");}. TIndexTable(Int_t n); {SetType(""int"");}. virtual ~TIndexTable(); {}. int & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const int & operator[](Int_t i) const; { assert(i>=0 && i < GetNRows()); return *((const int *)(GetTable(i))); }. » Author: Valery Fine(fine@bnl.gov) 01/03/2001 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable.html:12570,Usability,Clear,Clear,12570,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTDataSet::AddMain(TDataSet* set); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); static TTableDescriptor*CreateDescriptor(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidSetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char *const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. enum TTable::EColumnType { kNAN; kFloat; kInt; kLong; kShort; kDouble; kUInt; kULong; kUShort; kUChar; kChar; kPtr; kBool; kEndColumnType; };; enum TTable::ETableBits { kIsNotOwn; };; enum TDataSet::EDataSetPass { kContinue; kPrune; k",MatchSource.WIKI,root/html534/TIndexTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable.html
https://root.cern/root/html534/TIndexTable__iterator.html:1184,Modifiability,Inherit,Inheritance,1184,"OOT; » MISC; » TABLE; » TIndexTable::iterator. class TIndexTable::iterator. Class TIndexTable; Iterator of the table with extra index array. Function Members (Methods); public:. ~iterator(); TIndexTable::iteratoriterator(const TTable& t); TIndexTable::iteratoriterator(const TIndexTable::iterator& iter); TIndexTable::iteratoriterator(const TTable& t, const int& rowPtr); intoperator int(); Bool_toperator!=(const TIndexTable::iterator& t) const; void*operator*(); TIndexTable::iterator&operator+(Int_t idx); TIndexTable::iterator&operator++(); voidoperator++(int); TIndexTable::iterator&operator-(Int_t idx); Int_toperator-(const TIndexTable::iterator& it) const; TIndexTable::iterator&operator--(); voidoperator--(int); TIndexTable::iterator&operator=(const TIndexTable::iterator& iter); Bool_toperator==(const TIndexTable::iterator& t) const. protected:. TIndexTable::iteratoriterator(). Data Members; protected:. const int*fCurrentRow; const TTable*fTable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; iterator(); {}. iterator(const TTable& t, const int& rowPtr); {}. iterator(const TTable& t); {}. iterator(const TIndexTable::iterator& iter); {}. iterator & operator=(const TIndexTable::iterator& iter); {fTable = iter.fTable; fCurrentRow = iter.fCurrentRow; return *this;}. iterator & operator++(); { if (fCurrentRow) ++fCurrentRow; return *this;}. void operator++(int ); { if (fCurrentRow) fCurrentRow++;}. iterator & operator--(); { if (fCurrentRow) --fCurrentRow; return *this;}. void operator--(int ); { if (fCurrentRow) fCurrentRow--;}. iterator & operator+(Int_t idx); { if (fCurrentRow) fCurrentRow+=idx; return *this;}. iterator & operator-(Int_t idx); { if (fCurrentRow) fCurrentRow-=idx; return *this;}. Int_t operator-(const TIndexTable::iterator& it) const; { return fCurrentRow-it.fCurrentRow; }. operator int(); { return *fCurrentRow;}. Bool_t operator==(const TIndexTable::iterator& t) const; { return (fCurrentRow == t.fCurrentRow); ",MatchSource.WIKI,root/html534/TIndexTable__iterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable__iterator.html
https://root.cern/root/html534/TIndexTable__iterator.html:1197,Modifiability,Inherit,Inherited,1197,"OOT; » MISC; » TABLE; » TIndexTable::iterator. class TIndexTable::iterator. Class TIndexTable; Iterator of the table with extra index array. Function Members (Methods); public:. ~iterator(); TIndexTable::iteratoriterator(const TTable& t); TIndexTable::iteratoriterator(const TIndexTable::iterator& iter); TIndexTable::iteratoriterator(const TTable& t, const int& rowPtr); intoperator int(); Bool_toperator!=(const TIndexTable::iterator& t) const; void*operator*(); TIndexTable::iterator&operator+(Int_t idx); TIndexTable::iterator&operator++(); voidoperator++(int); TIndexTable::iterator&operator-(Int_t idx); Int_toperator-(const TIndexTable::iterator& it) const; TIndexTable::iterator&operator--(); voidoperator--(int); TIndexTable::iterator&operator=(const TIndexTable::iterator& iter); Bool_toperator==(const TIndexTable::iterator& t) const. protected:. TIndexTable::iteratoriterator(). Data Members; protected:. const int*fCurrentRow; const TTable*fTable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; iterator(); {}. iterator(const TTable& t, const int& rowPtr); {}. iterator(const TTable& t); {}. iterator(const TIndexTable::iterator& iter); {}. iterator & operator=(const TIndexTable::iterator& iter); {fTable = iter.fTable; fCurrentRow = iter.fCurrentRow; return *this;}. iterator & operator++(); { if (fCurrentRow) ++fCurrentRow; return *this;}. void operator++(int ); { if (fCurrentRow) fCurrentRow++;}. iterator & operator--(); { if (fCurrentRow) --fCurrentRow; return *this;}. void operator--(int ); { if (fCurrentRow) fCurrentRow--;}. iterator & operator+(Int_t idx); { if (fCurrentRow) fCurrentRow+=idx; return *this;}. iterator & operator-(Int_t idx); { if (fCurrentRow) fCurrentRow-=idx; return *this;}. Int_t operator-(const TIndexTable::iterator& it) const; { return fCurrentRow-it.fCurrentRow; }. operator int(); { return *fCurrentRow;}. Bool_t operator==(const TIndexTable::iterator& t) const; { return (fCurrentRow == t.fCurrentRow); ",MatchSource.WIKI,root/html534/TIndexTable__iterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIndexTable__iterator.html
https://root.cern/root/html534/TInetAddress.html:1267,Availability,Error,Error,1267," TInetAddress(); TInetAddress(const TInetAddress& adr); virtual~TInetAddress(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDt",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:1396,Availability,error,error,1396," TInetAddress(); TInetAddress(const TInetAddress& adr); virtual~TInetAddress(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDt",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:1480,Availability,error,error,1480," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFamily() const; const char*GetHostAddress() const; static const char*GetHostAddress(UInt_t addr); const char*GetHostName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::Ge",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:6717,Energy Efficiency,allocate,allocated,6717,"resses in host byte order; vector<TString>fAliaseslist of aliases; Int_tfFamilyaddress family; TStringfHostnamefully qualified hostname; Int_tfPortport through which we are connected. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInetAddress(); Default ctor. Used in case of unknown host. Not a valid address. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); Create TInetAddress. Private ctor. TInetAddress objects can only; be created via the friend classes TSystem, TServerSocket and TSocket.; Use the IsValid() method to check the validity of a TInetAddress. TInetAddress(const TInetAddress& adr); TInetAddress copy ctor. TInetAddress& operator=(const TInetAddress& rhs); TInetAddress assignment operator. UChar_t * GetAddressBytes() const; Returns the raw IP address in host byte order. The highest; order byte position is in addr[0]. To be prepared for 64-bit; IP addresses an array of bytes is returned.; User must delete allocated memory. const char * GetHostAddress(UInt_t addr); Returns the IP address string ""%d.%d.%d.%d"", use it to convert; alternative addresses obtained via GetAddresses().; Copy string immediately, it will be reused. Static function. const char * GetHostAddress() const; Returns the IP address string ""%d.%d.%d.%d"".; Copy string immediately, it will be reused. void Print(Option_t* option = """") const; Print internet address as string. void AddAddress(UInt_t addr); Add alternative address to list of addresses. void AddAlias(const char* alias); Add alias to list of aliases. void Streamer(TBuffer& ); Stream an object of class TInetAddress. virtual ~TInetAddress(); { }. UInt_t GetAddress() const; { return fAddresses[0]; }. const char * GetHostName() const; { return (const char *) fHostname; }. Int_t GetFamily() const; { return fFamily; }. Int_t GetPort() const; { return fPort; }. const AddressList_t & GetAddresses() const; { return fAddresses; }. const AliasList_t & GetAliases() const; { ",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:345,Integrability,Protocol,Protocol,345,". TInetAddress. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInetAddress. class TInetAddress: public TObject. TInetAddress. This class represents an Internet Protocol (IP) address. Function Members (Methods); public:. TInetAddress(); TInetAddress(const TInetAddress& adr); virtual~TInetAddress(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDt",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:2687,Modifiability,Inherit,InheritsFrom,2687,"; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFamily() const; const char*GetHostAddress() const; static const char*GetHostAddress(UInt_t addr); const char*GetHostName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:2753,Modifiability,Inherit,InheritsFrom,2753,"Int_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFamily() const; const char*GetHostAddress() const; static const char*GetHostAddress(UInt_t addr); const char*GetHostName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:5914,Modifiability,Inherit,Inheritance,5914,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); voidAddAddress(UInt_t addr); voidAddAlias(const char* alias). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. vector<unsigned int>fAddresseslist of all IP addresses in host byte order; vector<TString>fAliaseslist of aliases; Int_tfFamilyaddress family; TStringfHostnamefully qualified hostname; Int_tfPortport through which we are connected. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInetAddress(); Default ctor. Used in case of unknown host. Not a valid address. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); Create TInetAddress. Private ctor. TInetAddress objects can only; be created via the friend classes TSystem, TServerSocket and TSocket.; Use the IsValid() method to check the validity of a TInetAddress. TInetAddress(const TInetAddress& adr); TInetAddress copy ctor. TInetAddress& operator=(const TInetAddress& rhs); TInetAddress assignment operator. UChar_t * GetAddressBytes() const; Returns the raw IP address in host byte order. The highest; order byte position is in addr[0]. To be prepared for 64-bit; IP addresses an array of bytes is returned.; User must delete allocated memory. const char * GetHostAddress(UInt_t addr); Returns the IP address string ""%d.%d.%d.%d"", use it to convert; alternative addresses obtained via GetAddresses().; Copy string immediately, it will be reused. Sta",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:5927,Modifiability,Inherit,Inherited,5927,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); voidAddAddress(UInt_t addr); voidAddAlias(const char* alias). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. vector<unsigned int>fAddresseslist of all IP addresses in host byte order; vector<TString>fAliaseslist of aliases; Int_tfFamilyaddress family; TStringfHostnamefully qualified hostname; Int_tfPortport through which we are connected. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInetAddress(); Default ctor. Used in case of unknown host. Not a valid address. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); Create TInetAddress. Private ctor. TInetAddress objects can only; be created via the friend classes TSystem, TServerSocket and TSocket.; Use the IsValid() method to check the validity of a TInetAddress. TInetAddress(const TInetAddress& adr); TInetAddress copy ctor. TInetAddress& operator=(const TInetAddress& rhs); TInetAddress assignment operator. UChar_t * GetAddressBytes() const; Returns the raw IP address in host byte order. The highest; order byte position is in addr[0]. To be prepared for 64-bit; IP addresses an array of bytes is returned.; User must delete allocated memory. const char * GetHostAddress(UInt_t addr); Returns the IP address string ""%d.%d.%d.%d"", use it to convert; alternative addresses obtained via GetAddresses().; Copy string immediately, it will be reused. Sta",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:2577,Security,Hash,Hash,2577,"::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFamily() const; const char*GetHostAddress() const; static const char*GetHostAddress(UInt_t addr); const char*GetHostName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); ",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:4734,Testability,Test,TestBit,4734,"ool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInetAddress&operator=(const TInetAddress& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:4773,Testability,Test,TestBits,4773,"ool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInetAddress&operator=(const TInetAddress& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInetAddress.html:727,Usability,Clear,Clear,727," TInetAddress(); TInetAddress(const TInetAddress& adr); virtual~TInetAddress(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAddress() const; UChar_t*GetAddressBytes() const; const TInetAddress::AddressList_t&GetAddresses() const; const TInetAddress::AliasList_t&GetAliases() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDt",MatchSource.WIKI,root/html534/TInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInetAddress.html
https://root.cern/root/html534/TInspectCanvas.html:6008,Availability,Error,Error,6008,"g_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad:",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:6175,Availability,error,error,6175,"al, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargi",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:6259,Availability,error,error,6259,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasI",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:29110,Availability,down,down,29110,,MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:20869,Deployability,TOGGLE,TOGGLE,20869,"TextPS(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize); virtual voidTCanvas::SetBatch(Bool_t batch = kTRUE); virtual voidTPad::SetBBoxCenter(const TPoint& p); virtual voidTPad::SetBBoxCenterX(const Int_t x); virtual voidTPad::SetBBoxCenterY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTPad::SetBorderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTCanvas::SetCanvasSize(UInt_t ww, UInt_t wh)MENU ; voidTCanvas::SetClickSelected(TObject* obj); voidTCanvas::SetClickSelectedPad(TPad* pad); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTCanvas::SetCursor(ECursor cursor); virtual voidTCanvas::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTCanvas::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; static voidTCanvas::SetFolder(Bool_t isfolder = kTRUE); voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:21130,Deployability,TOGGLE,TOGGLE,21130,"erY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTPad::SetBorderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTCanvas::SetCanvasSize(UInt_t ww, UInt_t wh)MENU ; voidTCanvas::SetClickSelected(TObject* obj); voidTCanvas::SetClickSelectedPad(TPad* pad); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTCanvas::SetCursor(ECursor cursor); virtual voidTCanvas::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTCanvas::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; static voidTCanvas::SetFolder(Bool_t isfolder = kTRUE); voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); voidTCanvas::SetGrayscale(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidSetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidSetGridx(Int_t value = 1); virtual voidSetGridy(Int_t value = 1); voidTCanvas::SetHighLightColor(Color_t col); virtual voi",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:21422,Deployability,TOGGLE,TOGGLE,21422,"orderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTCanvas::SetCanvasSize(UInt_t ww, UInt_t wh)MENU ; voidTCanvas::SetClickSelected(TObject* obj); voidTCanvas::SetClickSelectedPad(TPad* pad); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTCanvas::SetCursor(ECursor cursor); virtual voidTCanvas::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTCanvas::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; static voidTCanvas::SetFolder(Bool_t isfolder = kTRUE); voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); voidTCanvas::SetGrayscale(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidSetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidSetGridx(Int_t value = 1); virtual voidSetGridy(Int_t value = 1); voidTCanvas::SetHighLightColor(Color_t col); virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:21927,Deployability,TOGGLE,TOGGLE,21927,"ual voidTCanvas::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTCanvas::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; static voidTCanvas::SetFolder(Bool_t isfolder = kTRUE); voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); voidTCanvas::SetGrayscale(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidSetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidSetGridx(Int_t value = 1); virtual voidSetGridy(Int_t value = 1); voidTCanvas::SetHighLightColor(Color_t col); virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetLogx(Int_t value = 1); virtual voidSetLogy(Int_t value = 1); virtual voidSetLogz(Int_t value = 1); virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Doubl",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25375,Deployability,Toggle,ToggleAutoExec,25375," virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtua",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25414,Deployability,Toggle,ToggleEditor,25414," = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, D",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25451,Deployability,Toggle,ToggleEventStatus,25451,"rtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25493,Deployability,Toggle,ToggleToolBar,25493,"etWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Dou",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25531,Deployability,Toggle,ToggleToolTips,25531,"idTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25570,Deployability,Update,Update,25570," UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual Int_tTPa",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:13993,Integrability,Message,Message,13993,"oidTObject::Inspect() constMENU ; virtual voidInspectObject(TObject* obj); static voidInspector(TObject* obj); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTCanvas::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCanvas::IsFolder() const; Bool_tTCanvas::IsGrayscale(); virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTCanvas::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTCanvas::ls(Option_t* option = """") const; static TCanvas*TCanvas::MakeDefCanvas(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voidTAttLine::Modify(); voidTCanvas::MoveOpaque(Int_t set = 1); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Bool_tTCanvas::OpaqueMoving() const; virtual Bool_tTCanvas::OpaqueResizing() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); static TVirtualPad*&TVirtualPad::Pad(); virtual Bool_tTVirtualPad::PadInHighli",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:36915,Integrability,interface,interface,36915," fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Bool_tTCanvas::fgIsFolderIndicates if canvas can be browsed as a folder; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectCanvas(); InspectCanvas default constructor. TInspectCanvas(UInt_t ww, UInt_t wh); InspectCanvas constructor. ~TInspectCanvas(); InspectCanvas default destructor. void InspectObject(TObject* obj); Dump contents of obj in a graphics canvas.; Same action as TObject::Dump but in a graphical form.; In addition pointers to other objects can be followed. The following picture is the Inspect of a histogram object:. /*; ; */. void GoBackward(); static function , inspect previous object. void GoForward(); static function , inspect next object. void Inspector(TObject* obj); static function , interface to InspectObject.; Create the InspectCanvas if it does not exist yet. void RecursiveRemove(TObject* obj); Recursively remove object from the list of objects. void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0); { }. void SetGrid(Int_t valuex = 1, Int_t valuey = 1); { }. void SetGridx(Int_t value = 1); { }. void SetGridy(Int_t value = 1); { }. void SetLogx(Int_t value = 1); { }. void SetLogy(Int_t value = 1); { }. void SetLogz(Int_t value = 1); { }. void SetTickx(Int_t value = 1); { }. void SetTicky(Int_t value = 1); { }. void x3d(Option_t* option = """"); { }. TButton * GetBackward() const; {return fBackward;}. TButton * GetForward() const; {return fForward;}. TObject * GetCurObject() const; {return fCurObject;}. TList * GetObjects() const; {return fObjects;}. » Author: Rene Brun 08/01/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-03-14 16:42",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:12884,Modifiability,Inherit,InheritsFrom,12884,"tXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Size_tTCanvas::GetYsizeReal() const; Size_tTCanvas::GetYsizeUser() const; Float_tTAttPad::GetYstat() const; static voidGoBackward(); static voidGoForward(); virtual voidTCanvas::HandleInput(EEventType button, Int_t x, Int_t y); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; Bool_tTCanvas::HasMenuBar() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTCanvas::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInspectObject(TObject* obj); static voidInspector(TObject* obj); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTCanvas::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCanvas::IsFolder() const; Bool_tTCanvas::IsGrayscale(); virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTCanvas::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTCanvas::ls(Option_t* option = """") const; static TCan",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:12950,Modifiability,Inherit,InheritsFrom,12950,"e_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Size_tTCanvas::GetYsizeReal() const; Size_tTCanvas::GetYsizeUser() const; Float_tTAttPad::GetYstat() const; static voidGoBackward(); static voidGoForward(); virtual voidTCanvas::HandleInput(EEventType button, Int_t x, Int_t y); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; Bool_tTCanvas::HasMenuBar() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTCanvas::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInspectObject(TObject* obj); static voidInspector(TObject* obj); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTCanvas::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCanvas::IsFolder() const; Bool_tTCanvas::IsGrayscale(); virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTCanvas::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTCanvas::ls(Option_t* option = """") const; static TCanvas*TCanvas::MakeDefCanvas(); voidTObject::MayNotUse(const char* m",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:36241,Modifiability,Inherit,Inheritance,36241,"oPixelk + fXtoPixel*xworld; Double_tTPad::fXtoPixelkConversion coefficient for X World to pixel; Double_tTPad::fY1Y of lower Y coordinate; Double_tTPad::fY2Y of upper Y coordinate; Double_tTPad::fYUpNDC; Float_tTAttPad::fYfileY position where to draw the file name; Double_tTPad::fYlowNDCY bottom left corner of pad in NDC [0,1]; Size_tTCanvas::fYsizeRealCurrent size of canvas along Y in CM; Size_tTCanvas::fYsizeUserUser specified size of canvas along Y in CM; Float_tTAttPad::fYstatY position where to draw the statistics; Double_tTPad::fYtoAbsPixelkConversion coefficient for Y World to absolute pixel; Double_tTPad::fYtoPixelypixel = fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Bool_tTCanvas::fgIsFolderIndicates if canvas can be browsed as a folder; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectCanvas(); InspectCanvas default constructor. TInspectCanvas(UInt_t ww, UInt_t wh); InspectCanvas constructor. ~TInspectCanvas(); InspectCanvas default destructor. void InspectObject(TObject* obj); Dump contents of obj in a graphics canvas.; Same action as TObject::Dump but in a graphical form.; In addition pointers to other objects can be followed. The following picture is the Inspect of a histogram object:. /*; ; */. void GoBackward(); static function , inspect previous object. void GoForward(); static function , inspect next object. void Inspector(TObject* obj); static function , interface to InspectObject.; Create the InspectCanvas if it does not exist yet. void RecursiveRemove(TObject* obj); Recursively remove object from the list of objects. void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0); { }. void SetGrid(Int_t valuex = 1, Int_t valuey = 1); { }. void SetGridx(Int_",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:36254,Modifiability,Inherit,Inherited,36254,"oPixelk + fXtoPixel*xworld; Double_tTPad::fXtoPixelkConversion coefficient for X World to pixel; Double_tTPad::fY1Y of lower Y coordinate; Double_tTPad::fY2Y of upper Y coordinate; Double_tTPad::fYUpNDC; Float_tTAttPad::fYfileY position where to draw the file name; Double_tTPad::fYlowNDCY bottom left corner of pad in NDC [0,1]; Size_tTCanvas::fYsizeRealCurrent size of canvas along Y in CM; Size_tTCanvas::fYsizeUserUser specified size of canvas along Y in CM; Float_tTAttPad::fYstatY position where to draw the statistics; Double_tTPad::fYtoAbsPixelkConversion coefficient for Y World to absolute pixel; Double_tTPad::fYtoPixelypixel = fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Bool_tTCanvas::fgIsFolderIndicates if canvas can be browsed as a folder; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectCanvas(); InspectCanvas default constructor. TInspectCanvas(UInt_t ww, UInt_t wh); InspectCanvas constructor. ~TInspectCanvas(); InspectCanvas default destructor. void InspectObject(TObject* obj); Dump contents of obj in a graphics canvas.; Same action as TObject::Dump but in a graphical form.; In addition pointers to other objects can be followed. The following picture is the Inspect of a histogram object:. /*; ; */. void GoBackward(); static function , inspect previous object. void GoForward(); static function , inspect next object. void Inspector(TObject* obj); static function , interface to InspectObject.; Create the InspectCanvas if it does not exist yet. void RecursiveRemove(TObject* obj); Recursively remove object from the list of objects. void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0); { }. void SetGrid(Int_t valuex = 1, Int_t valuey = 1); { }. void SetGridx(Int_",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:12517,Security,Hash,Hash,12517,"indowTopY(); UInt_tTCanvas::GetWindowWidth() const; virtual Double_tTPad::GetWNDC() const; virtual UInt_tTCanvas::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Size_tTCanvas::GetXsizeReal() const; Size_tTCanvas::GetXsizeUser() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Size_tTCanvas::GetYsizeReal() const; Size_tTCanvas::GetYsizeUser() const; Float_tTAttPad::GetYstat() const; static voidGoBackward(); static voidGoForward(); virtual voidTCanvas::HandleInput(EEventType button, Int_t x, Int_t y); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; Bool_tTCanvas::HasMenuBar() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTCanvas::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInspectObject(TObject* obj); static voidInspector(TObject* obj); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTCanvas::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCanvas::IsFolder() const; Bool_tTCanvas::IsGrayscale(); virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTCanvas::Is",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25289,Testability,Test,TestBit,25289,"voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Dou",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:25328,Testability,Test,TestBits,25328,"irtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; vir",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:31613,Testability,log,log,31613,":fEventX!Last X mouse position in canvas; Int_tTCanvas::fEventY!Last Y mouse position in canvas; TList*TPad::fExecsList of commands to be executed when a pad event occurs; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tTPad::fFixedAspectRatioTrue if fixed aspect ratio; TButton*fForwardPointer to the Forward button; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Color_tTCanvas::fHighLightColorHighlight color of active pad; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TList*fObjectsList of objects inspected; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TPad*TCanvas::fPadSave!Pointer to saved pad in HandleInput; TObject*TPad::fPadView3D! 3D View of this TPad; TVirtualPadPainter*TCanvas::fPainter!Canvas (pad) painter.",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:31670,Testability,log,log,31670,":fEventX!Last X mouse position in canvas; Int_tTCanvas::fEventY!Last Y mouse position in canvas; TList*TPad::fExecsList of commands to be executed when a pad event occurs; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tTPad::fFixedAspectRatioTrue if fixed aspect ratio; TButton*fForwardPointer to the Forward button; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Color_tTCanvas::fHighLightColorHighlight color of active pad; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TList*fObjectsList of objects inspected; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TPad*TCanvas::fPadSave!Pointer to saved pad in HandleInput; TObject*TPad::fPadView3D! 3D View of this TPad; TVirtualPadPainter*TCanvas::fPainter!Canvas (pad) painter.",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:31727,Testability,log,log,31727,":fEventX!Last X mouse position in canvas; Int_tTCanvas::fEventY!Last Y mouse position in canvas; TList*TPad::fExecsList of commands to be executed when a pad event occurs; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tTPad::fFixedAspectRatioTrue if fixed aspect ratio; TButton*fForwardPointer to the Forward button; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Color_tTCanvas::fHighLightColorHighlight color of active pad; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TList*fObjectsList of objects inspected; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TPad*TCanvas::fPadSave!Pointer to saved pad in HandleInput; TObject*TPad::fPadView3D! 3D View of this TPad; TVirtualPadPainter*TCanvas::fPainter!Canvas (pad) painter.",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:1460,Usability,Clear,Clear,1460,"88, const char* title = """")MENU ; virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Do",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:1511,Usability,Clear,Cleared,1511,"88, const char* title = """")MENU ; virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Do",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:1558,Usability,Clear,ClearPadSave,1558,"88, const char* title = """")MENU ; virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Do",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectCanvas.html:6440,Usability,Feedback,FeedbackMode,6440," signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadPainter*TCanvas::GetCanvasPainter(); virtual voidTCanvas::GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UI",MatchSource.WIKI,root/html534/TInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html
https://root.cern/root/html534/TInspectorImp.html:891,Modifiability,Inherit,Inheritance,891,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t); virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TInspectorImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectorImp.html
https://root.cern/root/html534/TInspectorImp.html:904,Modifiability,Inherit,Inherited,904,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t); virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TInspectorImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInspectorImp.html
https://root.cern/root/html534/TInterpreter.html:525,Availability,avail,available,525,". TInterpreter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TInterpreter. class TInterpreter: public TNamed. TInterpreter. This class defines an abstract interface to a generic command line; interpreter. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TInterpreter(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddIncludePath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tAutoLoad(const char* classname); virtual voidBaseClassInfo_Delete(BaseClassInfo_t*) const; virtual BaseClassInfo_t*BaseClassInfo_Factory(ClassInfo_t*) const; virtual const char*BaseClassInfo_FullName(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_Name(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*, int) const; virtual Long_tBaseClassInfo_Offset(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Property(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Tagnum(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_TmpltName(BaseClassInfo_t*) const; virtual voidTObject::Browse(TBrowser* b); virtual Long_tCalc(const char* line, TInterpreter::EErrorCode* error = 0); virtual voidCallFunc_Delete(void*) const; virtual voidCallFunc_Exec(CallFunc_t*, void*) const; virtual Double_tCallFunc_ExecDouble(CallFunc_t*, void*) const; virtual Long_tCallFunc_ExecInt(CallFunc_t*, void*) const; virtual Long64_tCallFunc_ExecInt64(CallFunc_t*, void*) const; virtual CallFunc_t*CallFunc_Factory() const; virtual CallFunc_t*CallFunc_FactoryCopy(CallFunc_t*) const; virtual MethodInfo_t*CallFunc_FactoryMethod(CallFunc_t*) const; virtual voidCallFunc_Init(CallFu",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:1510,Availability,error,error,1510," virtual~TInterpreter(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddIncludePath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tAutoLoad(const char* classname); virtual voidBaseClassInfo_Delete(BaseClassInfo_t*) const; virtual BaseClassInfo_t*BaseClassInfo_Factory(ClassInfo_t*) const; virtual const char*BaseClassInfo_FullName(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_Name(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*, int) const; virtual Long_tBaseClassInfo_Offset(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Property(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Tagnum(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_TmpltName(BaseClassInfo_t*) const; virtual voidTObject::Browse(TBrowser* b); virtual Long_tCalc(const char* line, TInterpreter::EErrorCode* error = 0); virtual voidCallFunc_Delete(void*) const; virtual voidCallFunc_Exec(CallFunc_t*, void*) const; virtual Double_tCallFunc_ExecDouble(CallFunc_t*, void*) const; virtual Long_tCallFunc_ExecInt(CallFunc_t*, void*) const; virtual Long64_tCallFunc_ExecInt64(CallFunc_t*, void*) const; virtual CallFunc_t*CallFunc_Factory() const; virtual CallFunc_t*CallFunc_FactoryCopy(CallFunc_t*) const; virtual MethodInfo_t*CallFunc_FactoryMethod(CallFunc_t*) const; virtual voidCallFunc_Init(CallFu",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:6926,Availability,Error,Error,6926,"nst char*DataMemberInfo_Title(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeName(DataMemberInfo_t*) const; virtual Long_tDataMemberInfo_TypeProperty(DataMemberInfo_t*) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*Get",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:7046,Availability,error,error,7046,"nst; virtual Long_tDataMemberInfo_TypeProperty(DataMemberInfo_t*) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual ",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:7149,Availability,error,error,7149,"Size(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGetgvp() const; virtual ",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:7248,Availability,error,error,7248,"nst; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGetgvp() const; virtual const char*TObject::GetIconName() const; virtual const char*GetIncludePath(); virtual void*GetInter",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:7403,Availability,error,error,7403,"teGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGetgvp() const; virtual const char*TObject::GetIconName() const; virtual const char*GetIncludePath(); virtual void*GetInterfaceMethod(TClass* cl, const char* method, const char* params); virtual void*GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* pr",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:10401,Availability,error,error,10401,"); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char*) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText(const char*) const; virtual voidTNamed::ls(Option_t* option = """") const; virtual const char*MapCppName(const char*) const; voidTObject::MayNotUse(const char* method) const; virtual const char*MethodArgInfo_DefaultValue(MethodArgInfo_t*) const; virtual voidMethodArgInfo_Delete(MethodArgInfo_t*) const; virtual MethodArgInfo_t*MethodArgInfo_Factory() const; virtual MethodArgInfo_t*MethodArgInfo_Factory(MethodInfo_t*) const; virtual MethodArgInfo_t*MethodArgInfo_FactoryCopy(MethodArgInfo_t*) const; virtual Bool_tMethodArgInfo_IsValid(MethodArgInfo_t*) const; virtual const char*MethodArgInfo_Name(MethodArgInfo_t*) const; virtual intMethodArgInfo_Next(MethodArgInfo_t*) const; virtual Long_tMethodArgInfo_Property(MethodArgInfo_t*) const; virtual const char*MethodArgInfo_TypeName(MethodArgInfo_t*) const; virtual stringMethodArgInfo_TypeNormalizedName(MethodArgInfo_t*) const; virtual voidMethodInfo_CreateSignature(MethodInfo_t*, TString&) const; virtual voidMethodI",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:13184,Availability,error,error,13184," const; virtual TypeInfo_t*MethodInfo_Type(MethodInfo_t*) const; virtual const char*MethodInfo_TypeName(MethodInfo_t*) const; virtual stringMethodInfo_TypeNormalizedName(MethodInfo_t*) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInterpreter&operator=(const TInterpreter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual Int_tSetClassSharedLibs(const char* cls, con",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:13271,Availability,error,error,13271,"hodInfo_TypeName(MethodInfo_t*) const; virtual stringMethodInfo_TypeNormalizedName(MethodInfo_t*) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInterpreter&operator=(const TInterpreter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual Int_tSetClassSharedLibs(const char* cls, const char* libs); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static ",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:17336,Availability,error,error,17336,"virtual const char*TypeInfo_Name(TypeInfo_t*) const; virtual Long_tTypeInfo_Property(TypeInfo_t*) const; virtual intTypeInfo_RefType(TypeInfo_t*) const; virtual intTypeInfo_Size(TypeInfo_t*) const; virtual const char*TypeInfo_TrueName(TypeInfo_t*) const; virtual const char*TypeName(const char* s); virtual Int_tUnloadAllSharedLibraryMaps(); virtual intUnloadFile(const char*) const; virtual Int_tUnloadLibraryMap(const char* library); virtual voidUpdateListOfGlobalFunctions(); virtual voidUpdateListOfGlobals(); virtual voidUpdateListOfMethods(TClass* cl); virtual voidUpdateListOfTypes(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile()",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18018,Availability,error,error,18018,"TObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllShar",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18888,Availability,error,error,18888," Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Lon",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19157,Availability,error,error,19157,"sname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). T",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19237,Availability,error,error,19237,"d EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TS",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19915,Availability,error,error,19915,"r = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsEr",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:20601,Availability,error,error,20601,"iable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. cons",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:20697,Availability,error,error,20697,"istOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroNa",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:20789,Availability,error,error,20789,"o(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurit",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:20869,Availability,error,error,20869,"autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadT",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19653,Deployability,Update,UpdateListOfGlobals,19653,"ay * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const cha",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19681,Deployability,Update,UpdateListOfGlobalFunctions,19681,"t_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, i",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:19717,Deployability,Update,UpdateListOfTypes,19717,"ool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TO",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:20097,Deployability,Update,UpdateListOfMethods,20097,"ne(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE*",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:341,Integrability,interface,interface,341,". TInterpreter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TInterpreter. class TInterpreter: public TNamed. TInterpreter. This class defines an abstract interface to a generic command line; interpreter. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TInterpreter(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddIncludePath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tAutoLoad(const char* classname); virtual voidBaseClassInfo_Delete(BaseClassInfo_t*) const; virtual BaseClassInfo_t*BaseClassInfo_Factory(ClassInfo_t*) const; virtual const char*BaseClassInfo_FullName(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_Name(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*) const; virtual intBaseClassInfo_Next(BaseClassInfo_t*, int) const; virtual Long_tBaseClassInfo_Offset(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Property(BaseClassInfo_t*) const; virtual Long_tBaseClassInfo_Tagnum(BaseClassInfo_t*) const; virtual const char*BaseClassInfo_TmpltName(BaseClassInfo_t*) const; virtual voidTObject::Browse(TBrowser* b); virtual Long_tCalc(const char* line, TInterpreter::EErrorCode* error = 0); virtual voidCallFunc_Delete(void*) const; virtual voidCallFunc_Exec(CallFunc_t*, void*) const; virtual Double_tCallFunc_ExecDouble(CallFunc_t*, void*) const; virtual Long_tCallFunc_ExecInt(CallFunc_t*, void*) const; virtual Long64_tCallFunc_ExecInt64(CallFunc_t*, void*) const; virtual CallFunc_t*CallFunc_Factory() const; virtual CallFunc_t*CallFunc_FactoryCopy(CallFunc_t*) const; virtual MethodInfo_t*CallFunc_FactoryMethod(CallFunc_t*) const; virtual voidCallFunc_Init(CallFu",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:22346,Integrability,interface,interface,22346,"; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadText(const char* ) const; {;}. const char * MapCppName(const char* ) const; {return 0;}. void SetAlloclockfunc(void (*)() ) const; {;}. void SetAllocunlockfunc(void (*)() ) const; {;}. int SetClassAutoloading(int ) const; {return 0;}. void SetErrmsgcallback(void* ) const; {;}. void Setgvp(Long_t ) const; {;}. void SetRTLD_NOW() const; {;}. void SetRTLD_LAZY() const; {;}. void SetTempLevel(int ) const; {;}. int UnloadFile(const char* ) const; {return 0;}. void CallFunc_Delete(void* ) const; G__CallFunc interface. {;}. void CallFunc_Exec(CallFunc_t* , void* ) const; {;}. Long_t CallFunc_ExecInt(CallFunc_t* , void* ) const; {return 0;}. Long64_t CallFunc_ExecInt64(CallFunc_t* , void* ) const; {return 0;}. Double_t CallFunc_ExecDouble(CallFunc_t* , void* ) const; {return 0;}. CallFunc_t * CallFunc_Factory() const; {return 0;}. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* ) const; {return 0;}. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* ) const; {return 0;}. void CallFunc_Init(CallFunc_t* ) const; {;}. Bool_t CallFunc_IsValid(CallFunc_t* ) const; {return 0;}. void CallFunc_ResetArg(CallFunc_t* ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Long_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Double_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Long64_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , ULong64_t ) const; {;}. void CallFunc_SetArgArray(CallFunc_t* , Long_t* , Int_t ) const; {;}. void CallFunc_SetArgs(CallFunc_t* , const char* ) const; {;}",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:23666,Integrability,interface,interface,23666,"llFunc_Factory() const; {return 0;}. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* ) const; {return 0;}. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* ) const; {return 0;}. void CallFunc_Init(CallFunc_t* ) const; {;}. Bool_t CallFunc_IsValid(CallFunc_t* ) const; {return 0;}. void CallFunc_ResetArg(CallFunc_t* ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Long_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Double_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , Long64_t ) const; {;}. void CallFunc_SetArg(CallFunc_t* , ULong64_t ) const; {;}. void CallFunc_SetArgArray(CallFunc_t* , Long_t* , Int_t ) const; {;}. void CallFunc_SetArgs(CallFunc_t* , const char* ) const; {;}. void CallFunc_SetFunc(CallFunc_t* , ClassInfo_t* , const char* , const char* , Long_t* ) const; {;}. void CallFunc_SetFunc(CallFunc_t* , MethodInfo_t* ) const; {;}. void CallFunc_SetFuncProto(CallFunc_t* , ClassInfo_t* , const char* , const char* , Long_t* ) const; {;}. Long_t ClassInfo_ClassProperty(ClassInfo_t* ) const; G__ClassInfo interface. {return 0;}. void ClassInfo_Delete(ClassInfo_t* ) const; {;}. void ClassInfo_Delete(ClassInfo_t* , void* ) const; {;}. void ClassInfo_DeleteArray(ClassInfo_t* , void* , bool ) const; {;}. void ClassInfo_Destruct(ClassInfo_t* , void* ) const; {;}. ClassInfo_t * ClassInfo_Factory() const; {return 0;}. ClassInfo_t * ClassInfo_Factory(G__value* ) const; {return 0;}. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* ) const; {return 0;}. ClassInfo_t * ClassInfo_Factory(const char* ) const; {return 0;}. int ClassInfo_GetMethodNArg(ClassInfo_t* , const char* , const char* ) const; {return 0;}. Bool_t ClassInfo_HasDefaultConstructor(ClassInfo_t* ) const; {return 0;}. Bool_t ClassInfo_HasMethod(ClassInfo_t* , const char* ) const; {return 0;}. void ClassInfo_Init(ClassInfo_t* , const char* ) const; {;}. void ClassInfo_Init(ClassInfo_t* , int ) const; {;}. Bool_t ClassInfo_IsBase(ClassInfo_t* , const char* ) const; {return 0;}. Bool_t ClassInfo_IsEnum(const char*",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:25822,Integrability,interface,interface,25822,"ssInfo_IsValidMethod(ClassInfo_t* , const char* , const char* , Long_t* ) const; {return 0;}. int ClassInfo_Next(ClassInfo_t* ) const; {return 0;}. void * ClassInfo_New(ClassInfo_t* ) const; {return 0;}. void * ClassInfo_New(ClassInfo_t* , int ) const; {return 0;}. void * ClassInfo_New(ClassInfo_t* , int , void* ) const; {return 0;}. void * ClassInfo_New(ClassInfo_t* , void* ) const; {return 0;}. Long_t ClassInfo_Property(ClassInfo_t* ) const; {return 0;}. int ClassInfo_RootFlag(ClassInfo_t* ) const; {return 0;}. int ClassInfo_Size(ClassInfo_t* ) const; {return 0;}. Long_t ClassInfo_Tagnum(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_FileName(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_FullName(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_Name(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_Title(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_TmpltName(ClassInfo_t* ) const; {return 0;}. void BaseClassInfo_Delete(BaseClassInfo_t* ) const; G__BaseClassInfo interface. {;}. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* ) const; {return 0;}. int BaseClassInfo_Next(BaseClassInfo_t* ) const; {return 0;}. int BaseClassInfo_Next(BaseClassInfo_t* , int ) const; {return 0;}. Long_t BaseClassInfo_Offset(BaseClassInfo_t* ) const; {return 0;}. Long_t BaseClassInfo_Property(BaseClassInfo_t* ) const; {return 0;}. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_FullName(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_Name(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* ) const; {return 0;}. int DataMemberInfo_ArrayDim(DataMemberInfo_t* ) const; G__DataMemberInfo interface. {return 0;}. void DataMemberInfo_Delete(DataMemberInfo_t* ) const; {;}. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* = 0) const; {return 0;}. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* ) const; {return 0;}. Bo",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:26541,Integrability,interface,interface,26541,"Info_FullName(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_Name(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_Title(ClassInfo_t* ) const; {return 0;}. const char * ClassInfo_TmpltName(ClassInfo_t* ) const; {return 0;}. void BaseClassInfo_Delete(BaseClassInfo_t* ) const; G__BaseClassInfo interface. {;}. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* ) const; {return 0;}. int BaseClassInfo_Next(BaseClassInfo_t* ) const; {return 0;}. int BaseClassInfo_Next(BaseClassInfo_t* , int ) const; {return 0;}. Long_t BaseClassInfo_Offset(BaseClassInfo_t* ) const; {return 0;}. Long_t BaseClassInfo_Property(BaseClassInfo_t* ) const; {return 0;}. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_FullName(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_Name(BaseClassInfo_t* ) const; {return 0;}. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* ) const; {return 0;}. int DataMemberInfo_ArrayDim(DataMemberInfo_t* ) const; G__DataMemberInfo interface. {return 0;}. void DataMemberInfo_Delete(DataMemberInfo_t* ) const; {;}. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* = 0) const; {return 0;}. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* ) const; {return 0;}. Bool_t DataMemberInfo_IsValid(DataMemberInfo_t* ) const; {return 0;}. int DataMemberInfo_MaxIndex(DataMemberInfo_t* , Int_t ) const; {return 0;}. int DataMemberInfo_Next(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_Offset(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_Property(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* ) const; {return 0;}. int DataMemberInfo_TypeSize(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_TypeName(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_Name(DataMemberInfo_t* ) const; {return ",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:27752,Integrability,interface,interface,27752,"fo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* ) const; {return 0;}. Bool_t DataMemberInfo_IsValid(DataMemberInfo_t* ) const; {return 0;}. int DataMemberInfo_MaxIndex(DataMemberInfo_t* , Int_t ) const; {return 0;}. int DataMemberInfo_Next(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_Offset(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_Property(DataMemberInfo_t* ) const; {return 0;}. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* ) const; {return 0;}. int DataMemberInfo_TypeSize(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_TypeName(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_Name(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_Title(DataMemberInfo_t* ) const; {return 0;}. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* ) const; {return 0;}. void MethodInfo_CreateSignature(MethodInfo_t* , TString& ) const; G__MethodInfo interface. {;}. void MethodInfo_Delete(MethodInfo_t* ) const; {;}. MethodInfo_t * MethodInfo_Factory() const; {return 0;}. MethodInfo_t * MethodInfo_Factory(ClassInfo_t* ) const; {return 0;}. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* ) const; {return 0;}. MethodInfo_t * MethodInfo_InterfaceMethod(MethodInfo_t* ) const; {return 0;}. Bool_t MethodInfo_IsValid(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NDefaultArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_Next(MethodInfo_t* ) const; {return 0;}. Long_t MethodInfo_Property(MethodInfo_t* ) const; {return 0;}. TypeInfo_t * MethodInfo_Type(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetMangledName(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetPrototype(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_Name(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_TypeName(MethodInfo",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:28957,Integrability,interface,interface,28957,"st; {return 0;}. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* ) const; {return 0;}. MethodInfo_t * MethodInfo_InterfaceMethod(MethodInfo_t* ) const; {return 0;}. Bool_t MethodInfo_IsValid(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NDefaultArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_Next(MethodInfo_t* ) const; {return 0;}. Long_t MethodInfo_Property(MethodInfo_t* ) const; {return 0;}. TypeInfo_t * MethodInfo_Type(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetMangledName(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetPrototype(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_Name(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_TypeName(MethodInfo_t* ) const; {return 0;}. std::string MethodInfo_TypeNormalizedName(MethodInfo_t* ) const; {return """";}. const char * MethodInfo_Title(MethodInfo_t* ) const; {return 0;}. void MethodArgInfo_Delete(MethodArgInfo_t* ) const; G__MethodArgInfo interface. {;}. MethodArgInfo_t * MethodArgInfo_Factory() const; {return 0;}. MethodArgInfo_t * MethodArgInfo_Factory(MethodInfo_t* ) const; {return 0;}. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* ) const; {return 0;}. Bool_t MethodArgInfo_IsValid(MethodArgInfo_t* ) const; {return 0;}. int MethodArgInfo_Next(MethodArgInfo_t* ) const; {return 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInf",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:29756,Integrability,interface,interface,29756,"turn 0;}. std::string MethodInfo_TypeNormalizedName(MethodInfo_t* ) const; {return """";}. const char * MethodInfo_Title(MethodInfo_t* ) const; {return 0;}. void MethodArgInfo_Delete(MethodArgInfo_t* ) const; G__MethodArgInfo interface. {;}. MethodArgInfo_t * MethodArgInfo_Factory() const; {return 0;}. MethodArgInfo_t * MethodArgInfo_Factory(MethodInfo_t* ) const; {return 0;}. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* ) const; {return 0;}. Bool_t MethodArgInfo_IsValid(MethodArgInfo_t* ) const; {return 0;}. int MethodArgInfo_Next(MethodArgInfo_t* ) const; {return 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. Bool_t TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; G__TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. Bool_t TypedefInfo_IsValid(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Next(Typedef",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:30426,Integrability,interface,interface,30426,"char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. Bool_t TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; G__TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. Bool_t TypedefInfo_IsValid(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Next(TypedefInfo_t* ) const; {return 0;}. Long_t TypedefInfo_Property(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Size(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_TrueName(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Name(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Title(TypedefInfo_t* ) const; {return 0;}. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to RO",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:9540,Modifiability,Inherit,InheritsFrom,9540,"r* method, const char* params); virtual TStringGetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void*) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char*) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText(const char*) const; virtual voidTNamed::ls(Option_t* option = """") const; virtual const char*MapCppName(const char",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:9606,Modifiability,Inherit,InheritsFrom,9606,"rototype(TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void*) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char*) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText(const char*) const; virtual voidTNamed::ls(Option_t* option = """") const; virtual const char*MapCppName(const char*) const; voidTObject::MayNotUse(const char* method) const; virtua",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:17830,Modifiability,Inherit,Inheritance,17830,"tOfTypes(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* file",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:17843,Modifiability,Inherit,Inherited,17843,"tOfTypes(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* file",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18774,Performance,Load,Load,18774,":fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Boo",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18830,Performance,Load,LoadMacro,18830," Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Lon",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18906,Performance,Load,LoadLibraryMap,18906,"nstance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0)",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:21787,Performance,Load,LoadFile,21787,"_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadText(const char* ) const; {;}. const char * MapCppName(const char* ) const; {return 0;}. void SetAlloclockfunc(void (*)() ) const; {;}. void SetAllocunlockfunc(void (*)() ) const; {;}. int SetClassAutoloading(int ) const; {return 0;}. void SetErrmsgcallback(void* ) const; {;}. void Setgvp(Long_t ) const; {;}. void SetRTLD_NOW() const; {;}. void SetRTLD_LAZY() const; {;}. void SetTempLevel(int ) const; {;}. int UnloadFile(const char* ) const; {return 0;}. void CallFunc_Delete(void* ) const; G__CallFunc interface. {;}. void CallFunc_Exec(CallFunc_t* , void* ) const; {;}. Long_t CallFunc_ExecInt(CallFunc_t* , void* ) const; {return 0;}. Long64_t CallFunc_ExecInt64(CallFunc_t* , void* ) const; {return 0;}. Double_t CallFunc_ExecDouble(CallFunc_t* , void* ) const; {return 0;}. CallFunc_t * CallFunc_Factory() const; {return 0;}. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* ) const; {return 0;}. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* ) const; {retu",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:21835,Performance,Load,LoadText,21835,"preter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadText(const char* ) const; {;}. const char * MapCppName(const char* ) const; {return 0;}. void SetAlloclockfunc(void (*)() ) const; {;}. void SetAllocunlockfunc(void (*)() ) const; {;}. int SetClassAutoloading(int ) const; {return 0;}. void SetErrmsgcallback(void* ) const; {;}. void Setgvp(Long_t ) const; {;}. void SetRTLD_NOW() const; {;}. void SetRTLD_LAZY() const; {;}. void SetTempLevel(int ) const; {;}. int UnloadFile(const char* ) const; {return 0;}. void CallFunc_Delete(void* ) const; G__CallFunc interface. {;}. void CallFunc_Exec(CallFunc_t* , void* ) const; {;}. Long_t CallFunc_ExecInt(CallFunc_t* , void* ) const; {return 0;}. Long64_t CallFunc_ExecInt64(CallFunc_t* , void* ) const; {return 0;}. Double_t CallFunc_ExecDouble(CallFunc_t* , void* ) const; {return 0;}. CallFunc_t * CallFunc_Factory() const; {return 0;}. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* ) const; {return 0;}. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* ) const; {return 0;}. void CallFunc_Init(CallFunc_t* ) co",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:21275,Safety,avoid,avoids,21275,"o). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadText(const char* ) const; {;}. const char * MapCppName(const char* ) const; {return 0;}. void SetAlloclockfunc(void (*)() ) const; {;}. void SetAllocunlockfunc(void (*)() ) const; {;}. int SetClassAutoloading(int ) const; {return 0;}. void SetErrmsgcallback(void* ) const; {;}. void Setgvp(Long_t ) const; {;}. void SetRTLD_NOW() const; {;}. void SetRTLD_LAZY() const; {;}. void SetTempLevel(int ) const; {;}. int UnloadFile(const char* ) const; {retur",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:9430,Security,Hash,Hash,9430,"etInterpreterTypeName(const char* name, Bool_t full = kFALSE); virtual TStringGetMangledName(TClass* cl, const char* method, const char* params); virtual TStringGetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void*) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char*) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:15255,Testability,Test,TestBit,15255,")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void*) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t*) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t*) const; virtual voidTypedefInfo_Init(TypedefInfo_t*, const char*) const; virtual Bool_tTypedefInfo_IsValid(TypedefInfo_t*) const; virtual const char*TypedefInfo_Name(TypedefInfo_t*) const; virtual intTypedefInfo_Next(TypedefInfo_t*) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t*) const; virtual intTypedefInfo_Size(TypedefInfo_t*) const; virtual const char*TypedefInfo_Title(TypedefInfo_t*) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t*) const; virtual voidTypeInfo_Delete(TypeInfo_t*) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t*, const char*) const; virtual Bool_tTypeInfo_IsValid(Type",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:15294,Testability,Test,TestBits,15294,"(void* obj); virtual voidSetErrmsgcallback(void*) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t*) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t*) const; virtual voidTypedefInfo_Init(TypedefInfo_t*, const char*) const; virtual Bool_tTypedefInfo_IsValid(TypedefInfo_t*) const; virtual const char*TypedefInfo_Name(TypedefInfo_t*) const; virtual intTypedefInfo_Next(TypedefInfo_t*) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t*) const; virtual intTypedefInfo_Size(TypedefInfo_t*) const; virtual const char*TypedefInfo_Title(TypedefInfo_t*) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t*) const; virtual voidTypeInfo_Delete(TypeInfo_t*) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t*, const char*) const; virtual Bool_tTypeInfo_IsValid(TypeInfo_t*) const; virtual const char*TypeI",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:4823,Usability,Clear,Clear,4823,"sBase(ClassInfo_t*, const char*) const; virtual Bool_tClassInfo_IsEnum(const char*) const; virtual Bool_tClassInfo_IsLoaded(ClassInfo_t*) const; virtual Bool_tClassInfo_IsValid(ClassInfo_t*) const; virtual Bool_tClassInfo_IsValidMethod(ClassInfo_t*, const char*, const char*, Long_t*) const; virtual const char*ClassInfo_Name(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*, int) const; virtual void*ClassInfo_New(ClassInfo_t*, void*) const; virtual void*ClassInfo_New(ClassInfo_t*, int, void*) const; virtual intClassInfo_Next(ClassInfo_t*) const; virtual Long_tClassInfo_Property(ClassInfo_t*) const; virtual intClassInfo_RootFlag(ClassInfo_t*) const; virtual intClassInfo_Size(ClassInfo_t*) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t*) const; virtual const char*ClassInfo_Title(ClassInfo_t*) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t*) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreateListOfBaseClasses(TClass* cl); virtual voidCreateListOfDataMembers(TClass* cl); virtual voidCreateListOfMethodArgs(TFunction* m); virtual voidCreateListOfMethods(TClass* cl); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t*) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t*) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* = 0) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t*) const; virtual Bool_tDataMemberInfo_IsValid(DataMemberInfo_t*) const; virtual intDataMemberInfo_MaxIndex(DataMemberInfo_t*, Int_t) const; virtual const char*DataMemberInfo_Name(DataMemberInfo_t*) const; virtual intDataMemberInfo_Next(DataMemberInfo_t*) const; virtual Long_tDataMemberInfo_Offs",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18143,Usability,Clear,ClearFileBusy,18143,"size = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EEr",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TInterpreter.html:18165,Usability,Clear,ClearStack,18165,"tected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidExecute(TMethod* method, TObjArray* params, int* error = 0); voidTObject::MakeZombie(). Data Members; public:. enum EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). ",MatchSource.WIKI,root/html534/TInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TInterpreter.html
https://root.cern/root/html534/TIsAProxy.html:914,Modifiability,Inherit,Inheritance,914,". TIsAProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TIsAProxy. class TIsAProxy: public TVirtualIsAProxy. TIsAProxy implementation class. Function Members (Methods); public:. TIsAProxy(const type_info& typ, void* ctxt = 0); virtual~TIsAProxy(); virtual TClass*operator()(const void* obj); virtual voidSetClass(TClass* cl). protected:. TIsAProxy(const TIsAProxy&); TIsAProxy&operator=(const TIsAProxy&). Data Members; private:. TClass*fClassActual TClass; void*fContextOptional user contex; Bool_tfInitInitialization flag; TClass*fLastClassLast used TClass; const type_info*fLastTypeLast used subtype; Char_tfSubTypes[72]map of known sub-types; const type_info*fTypeActual typeid of the proxy; Bool_tfVirtualFlag if class is virtual. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIsAProxy(const TIsAProxy& ). TIsAProxy& operator=(const TIsAProxy& ). TIsAProxy(const type_info& typ, void* ctxt = 0); Standard initializing constructor. virtual ~TIsAProxy(); Standard destructor. void SetClass(TClass* cl); Callbacl to set the class. TClass* operator()(const void* obj); IsA callback. » Author: Markus Frank 20/05/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TIsAProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIsAProxy.html
https://root.cern/root/html534/TIsAProxy.html:927,Modifiability,Inherit,Inherited,927,". TIsAProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TIsAProxy. class TIsAProxy: public TVirtualIsAProxy. TIsAProxy implementation class. Function Members (Methods); public:. TIsAProxy(const type_info& typ, void* ctxt = 0); virtual~TIsAProxy(); virtual TClass*operator()(const void* obj); virtual voidSetClass(TClass* cl). protected:. TIsAProxy(const TIsAProxy&); TIsAProxy&operator=(const TIsAProxy&). Data Members; private:. TClass*fClassActual TClass; void*fContextOptional user contex; Bool_tfInitInitialization flag; TClass*fLastClassLast used TClass; const type_info*fLastTypeLast used subtype; Char_tfSubTypes[72]map of known sub-types; const type_info*fTypeActual typeid of the proxy; Bool_tfVirtualFlag if class is virtual. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIsAProxy(const TIsAProxy& ). TIsAProxy& operator=(const TIsAProxy& ). TIsAProxy(const type_info& typ, void* ctxt = 0); Standard initializing constructor. virtual ~TIsAProxy(); Standard destructor. void SetClass(TClass* cl); Callbacl to set the class. TClass* operator()(const void* obj); IsA callback. » Author: Markus Frank 20/05/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TIsAProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIsAProxy.html
https://root.cern/root/html534/TIter.html:1120,Deployability,release,release,1120,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assign",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:323,Integrability,protocol,protocol,323,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fu",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:891,Integrability,Depend,Depending,891,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fu",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:441,Modifiability,inherit,inherit,441,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fu",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:1025,Modifiability,inherit,inherits,1025,"rarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIte",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:1946,Modifiability,Inherit,Inheritance,1946," of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); Assigning an TIter to another. This involves allocatiing a new TIterator; of the right sub class and assigning it with the original. TIter & Begin(); Pointing to the first element of the container. TIter End(); Pointing to the element after the last - to a nullptr value in our case. TObject * operator()(const char *name). TIter(); { }. TIter(const TCollection* col, Bool_t dir = kIterForward); { }. TIter(TIterator* it); { }. virtual ~TIter(); { SafeDelete(fIterator); }. TObject * Next(); { return fIterator ? fIterator->Next() : nullptr; }. const TCollection * GetCollection() const; { return fIterator ? fIterator->GetCollection() : nullptr; }. Option_t * GetOption() const; { return fIterator ? fIterator->GetOption() : """"; }. void Reset(); { if (fIterator) fIterat",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:1959,Modifiability,Inherit,Inherited,1959," of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); Assigning an TIter to another. This involves allocatiing a new TIterator; of the right sub class and assigning it with the original. TIter & Begin(); Pointing to the first element of the container. TIter End(); Pointing to the element after the last - to a nullptr value in our case. TObject * operator()(const char *name). TIter(); { }. TIter(const TCollection* col, Bool_t dir = kIterForward); { }. TIter(TIterator* it); { }. virtual ~TIter(); { SafeDelete(fIterator); }. TObject * Next(); { return fIterator ? fIterator->Next() : nullptr; }. const TCollection * GetCollection() const; { return fIterator ? fIterator->GetCollection() : nullptr; }. Option_t * GetOption() const; { return fIterator ? fIterator->GetOption() : """"; }. void Reset(); { if (fIterator) fIterat",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIter.html:2649,Safety,Safe,SafeDelete,2649,"(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); Assigning an TIter to another. This involves allocatiing a new TIterator; of the right sub class and assigning it with the original. TIter & Begin(); Pointing to the first element of the container. TIter End(); Pointing to the element after the last - to a nullptr value in our case. TObject * operator()(const char *name). TIter(); { }. TIter(const TCollection* col, Bool_t dir = kIterForward); { }. TIter(TIterator* it); { }. virtual ~TIter(); { SafeDelete(fIterator); }. TObject * Next(); { return fIterator ? fIterator->Next() : nullptr; }. const TCollection * GetCollection() const; { return fIterator ? fIterator->GetCollection() : nullptr; }. Option_t * GetOption() const; { return fIterator ? fIterator->GetOption() : """"; }. void Reset(); { if (fIterator) fIterator->Reset(); }. TIter & operator++(); { Next(); return *this; }. Bool_t operator==(const TIter& aIter) const. Bool_t operator!=(const TIter& aIter) const. TObject * operator*() const; { return fIterator ? *(*fIterator): nullptr; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIter.html
https://root.cern/root/html534/TIterator.html:513,Availability,avail,available,513,". TIterator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIterator. class TIterator. TIterator. Iterator abstract base class. This base class provides the interface; for collection iterators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TIterator(); static TClass*Class(); virtual const TCollection*GetCollection() const; virtual Option_t*GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator&) const; TObject*operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator&); Bool_toperator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator!=(const TIterator& ) const; Compare two iterator objects.; For backward compatibility reasons we have to provide this; default implementation. TObject * operator*() const; Return current object or nullptr.; For backward compatibility reasons we have to provide this; default implementation. TIterator & operator=(const TIterator& ); { return *this; }. virtual ~TIterator(); { }. const TCollection * GetCollection() const. Option_t * GetOption() const; { return """"; }. TObject * Next(). void Reset(). TObject * operator()(); { return Next(); }. Bool_t operator==(const TIterator& other) const; { return !(*this != other); }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been a",MatchSource.WIKI,root/html534/TIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIterator.html
https://root.cern/root/html534/TIterator.html:342,Integrability,interface,interface,342,". TIterator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIterator. class TIterator. TIterator. Iterator abstract base class. This base class provides the interface; for collection iterators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TIterator(); static TClass*Class(); virtual const TCollection*GetCollection() const; virtual Option_t*GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator&) const; TObject*operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator&); Bool_toperator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator!=(const TIterator& ) const; Compare two iterator objects.; For backward compatibility reasons we have to provide this; default implementation. TObject * operator*() const; Return current object or nullptr.; For backward compatibility reasons we have to provide this; default implementation. TIterator & operator=(const TIterator& ); { return *this; }. virtual ~TIterator(); { }. const TCollection * GetCollection() const. Option_t * GetOption() const; { return """"; }. TObject * Next(). void Reset(). TObject * operator()(); { return Next(); }. Bool_t operator==(const TIterator& other) const; { return !(*this != other); }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been a",MatchSource.WIKI,root/html534/TIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIterator.html
https://root.cern/root/html534/TIterator.html:1101,Modifiability,Inherit,Inheritance,1101,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIterator. class TIterator. TIterator. Iterator abstract base class. This base class provides the interface; for collection iterators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TIterator(); static TClass*Class(); virtual const TCollection*GetCollection() const; virtual Option_t*GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator&) const; TObject*operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator&); Bool_toperator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator!=(const TIterator& ) const; Compare two iterator objects.; For backward compatibility reasons we have to provide this; default implementation. TObject * operator*() const; Return current object or nullptr.; For backward compatibility reasons we have to provide this; default implementation. TIterator & operator=(const TIterator& ); { return *this; }. virtual ~TIterator(); { }. const TCollection * GetCollection() const. Option_t * GetOption() const; { return """"; }. TObject * Next(). void Reset(). TObject * operator()(); { return Next(); }. Bool_t operator==(const TIterator& other) const; { return !(*this != other); }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT ",MatchSource.WIKI,root/html534/TIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIterator.html
https://root.cern/root/html534/TIterator.html:1114,Modifiability,Inherit,Inherited,1114,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIterator. class TIterator. TIterator. Iterator abstract base class. This base class provides the interface; for collection iterators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TIterator(); static TClass*Class(); virtual const TCollection*GetCollection() const; virtual Option_t*GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator&) const; TObject*operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator&); Bool_toperator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator!=(const TIterator& ) const; Compare two iterator objects.; For backward compatibility reasons we have to provide this; default implementation. TObject * operator*() const; Return current object or nullptr.; For backward compatibility reasons we have to provide this; default implementation. TIterator & operator=(const TIterator& ); { return *this; }. virtual ~TIterator(); { }. const TCollection * GetCollection() const. Option_t * GetOption() const; { return """"; }. TObject * Next(). void Reset(). TObject * operator()(); { return Next(); }. Bool_t operator==(const TIterator& other) const; { return !(*this != other); }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT ",MatchSource.WIKI,root/html534/TIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TIterator.html
https://root.cern/root/html534/TKDE.html:1314,Availability,Error,Error,1314,"ss TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Double_tGetBias(Double_t x) const; TF1*GetDrawnFunction(); TGraphErrors*GetDrawnGraph(); TF1*GetDrawnLowerFunction(); TF1*GetDrawnUpperFunction(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetE",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:1443,Availability,error,error,1443,"ss TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Double_tGetBias(Double_t x) const; TF1*GetDrawnFunction(); TGraphErrors*GetDrawnGraph(); TF1*GetDrawnLowerFunction(); TF1*GetDrawnUpperFunction(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetE",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:1527,Availability,error,error,1527,"ss TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Double_tGetBias(Double_t x) const; TF1*GetDrawnFunction(); TGraphErrors*GetDrawnGraph(); TF1*GetDrawnLowerFunction(); TF1*GetDrawnUpperFunction(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetE",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:9688,Availability,error,errors,9688,"nnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; ROOT::Math::IBaseFunctionOneDim*fKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:10394,Availability,robust,robust,10394,"nnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; ROOT::Math::IBaseFunctionOneDim*fKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:14930,Availability,Error,Error,14930,"ction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF upper estimate (upper confidence interval limit). TF1* GetLowerFunction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF lower estimate (lower confidence interval limit). TF1* GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF estimate bias. void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString&",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:15301,Availability,error,errors,15301,". void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Retur",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:15399,Availability,Error,Errors,15399,". void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Retur",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:15446,Availability,error,errors,15446,". void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Retur",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:15971,Availability,error,errors,15971,"rding to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integral, mu = 0 and",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:14911,Deployability,Integrat,Integrated,14911,"ction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF upper estimate (upper confidence interval limit). TF1* GetLowerFunction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF lower estimate (lower confidence interval limit). TF1* GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF estimate bias. void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString&",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:451,Energy Efficiency,Adapt,Adaptive,451,". TKDE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TKDE. class TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:9314,Energy Efficiency,adapt,adaptive,9314,"nnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; ROOT::Math::IBaseFunctionOneDim*fKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:11070,Energy Efficiency,Adapt,Adaptive,11070,"n; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring ",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:11991,Energy Efficiency,adapt,adaptive,11991,"_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring the data. void SetBinning(TKDE::EBinning ); Sets User option for binning the weights. void SetNBins(UInt_t nbins); Sets User option for number of bins. void SetUseBinsNEvents(UInt_t nEvents); Sets User option for the minimum number of events for allowing automatic binning. void SetTuneFactor(Double_t rho); Factor which can be used to tune the smoothing.; It is used as multiplicative factor for the fixed and adaptive bandwidth.; A value < 1 will reproduce better the tails but oversmooth the peak; while a factor > 1 will overestimate the tail. void SetRange(Double_t xMin, Double_t xMax); Sets minimum range value and maximum range value. void SetUseBins(); Sets User option for using binned weights. void SetMirror(); Sets the mirroring. void SetData(const Double_t* data); Sets the data events input sample or bin centres for binned option and computes basic estimators. void InitF",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:12488,Energy Efficiency,adapt,adaptive,12488,"tDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring the data. void SetBinning(TKDE::EBinning ); Sets User option for binning the weights. void SetNBins(UInt_t nbins); Sets User option for number of bins. void SetUseBinsNEvents(UInt_t nEvents); Sets User option for the minimum number of events for allowing automatic binning. void SetTuneFactor(Double_t rho); Factor which can be used to tune the smoothing.; It is used as multiplicative factor for the fixed and adaptive bandwidth.; A value < 1 will reproduce better the tails but oversmooth the peak; while a factor > 1 will overestimate the tail. void SetRange(Double_t xMin, Double_t xMax); Sets minimum range value and maximum range value. void SetUseBins(); Sets User option for using binned weights. void SetMirror(); Sets the mirroring. void SetData(const Double_t* data); Sets the data events input sample or bin centres for binned option and computes basic estimators. void InitFromNewData(); re-initialize when new data have been filled in TKDE; re-compute kernel quantities and mean and sigma. void SetMirroredEvents(); Mirrors the data. void SetMean(); Computes input data's mean. void SetSigma(Double_t R); Computes input data's sigma. void SetKernel(); Sets the kernel density estimator. void SetKernelFunction(TKDE::KernelFunction_Ptr kernfunc = 0); Sets kernel estimator. void SetCanonicalBandwidths(); Sets the canonical bandwidths according to the kernel type. void SetKernelS",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:16248,Energy Efficiency,adapt,adaptive,16248," option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integral, mu = 0 and positive finite sigma conditions. Double_t ComputeKernelL2Norm() const; Computes the kernel's L2 norm. Double_t ComputeKernelSigma2() const; Computes the kernel's sigma squared. Double_t ComputeKernelMu() const; Computes the kernel's mu. Double_t ComputeKernelIntegral() const; Co",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:16338,Energy Efficiency,adapt,adaptive,16338,"s; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integral, mu = 0 and positive finite sigma conditions. Double_t ComputeKernelL2Norm() const; Computes the kernel's L2 norm. Double_t ComputeKernelSigma2() const; Computes the kernel's sigma squared. Double_t ComputeKernelMu() const; Computes the kernel's mu. Double_t ComputeKernelIntegral() const; Computes the kernel's integral which ought to be unity. Double_t ComputeMidspread(); Co",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:18233,Energy Efficiency,Adapt,Adaptive,18233," integral which ought to be unity. Double_t ComputeMidspread(); Computes the inter-quartile range from the data. void SetCanonicalBandwidth(); Computes the user's input kernel function canonical bandwidth. void SetKernelSigma2(); Computes the user's input kernel function sigma2. TF1* GetKDEFunction(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the estimated density. TF1* GetPDFUpperConfidenceInterval(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the upper estimated density. TF1* GetPDFLowerConfidenceInterval(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the upper estimated density. TF1* GetKDEApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the approximate bias. explicit TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0). Double_t GetValue(Double_t x) const; { return (*this)(x); }. TF1 * GetDrawnFunction(); get the drawn object to chanage settings; These objects are managed by TKDE and should not be deleted by the user. { return fPDF;}. TF1 * GetDrawnUpperFunction(); { return fUpperPDF;}. TF1 * GetDrawnLowerFunction(); { return fLowerPDF;}. TGraphErrors * GetDrawnGraph(); { return fGraph;}. TKDE operator=(TKDE& kde). Double_t GaussianKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t EpanechnikovKernel(Double_t x) const. Double_t BiweightKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t CosineArchKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t ApproximateBias(const Double_t* x, const Double_t* ) const; { return GetBias(*x); }. void SetHistogram(). » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or sugge",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:14911,Integrability,Integrat,Integrated,14911,"ction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF upper estimate (upper confidence interval limit). TF1* GetLowerFunction(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF lower estimate (lower confidence interval limit). TF1* GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the PDF estimate bias. void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString&",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:451,Modifiability,Adapt,Adaptive,451,". TKDE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TKDE. class TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:3332,Modifiability,Inherit,InheritsFrom,3332,,MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:3398,Modifiability,Inherit,InheritsFrom,3398,,MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:9314,Modifiability,adapt,adaptive,9314,"nnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; ROOT::Math::IBaseFunctionOneDim*fKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:10851,Modifiability,Inherit,Inheritance,10851,"t Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User o",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:10864,Modifiability,Inherit,Inherited,10864,"t Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User o",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:11070,Modifiability,Adapt,Adaptive,11070,"n; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring ",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:11991,Modifiability,adapt,adaptive,11991,"_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring the data. void SetBinning(TKDE::EBinning ); Sets User option for binning the weights. void SetNBins(UInt_t nbins); Sets User option for number of bins. void SetUseBinsNEvents(UInt_t nEvents); Sets User option for the minimum number of events for allowing automatic binning. void SetTuneFactor(Double_t rho); Factor which can be used to tune the smoothing.; It is used as multiplicative factor for the fixed and adaptive bandwidth.; A value < 1 will reproduce better the tails but oversmooth the peak; while a factor > 1 will overestimate the tail. void SetRange(Double_t xMin, Double_t xMax); Sets minimum range value and maximum range value. void SetUseBins(); Sets User option for using binned weights. void SetMirror(); Sets the mirroring. void SetData(const Double_t* data); Sets the data events input sample or bin centres for binned option and computes basic estimators. void InitF",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:12488,Modifiability,adapt,adaptive,12488,"tDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring the data. void SetBinning(TKDE::EBinning ); Sets User option for binning the weights. void SetNBins(UInt_t nbins); Sets User option for number of bins. void SetUseBinsNEvents(UInt_t nEvents); Sets User option for the minimum number of events for allowing automatic binning. void SetTuneFactor(Double_t rho); Factor which can be used to tune the smoothing.; It is used as multiplicative factor for the fixed and adaptive bandwidth.; A value < 1 will reproduce better the tails but oversmooth the peak; while a factor > 1 will overestimate the tail. void SetRange(Double_t xMin, Double_t xMax); Sets minimum range value and maximum range value. void SetUseBins(); Sets User option for using binned weights. void SetMirror(); Sets the mirroring. void SetData(const Double_t* data); Sets the data events input sample or bin centres for binned option and computes basic estimators. void InitFromNewData(); re-initialize when new data have been filled in TKDE; re-compute kernel quantities and mean and sigma. void SetMirroredEvents(); Mirrors the data. void SetMean(); Computes input data's mean. void SetSigma(Double_t R); Computes input data's sigma. void SetKernel(); Sets the kernel density estimator. void SetKernelFunction(TKDE::KernelFunction_Ptr kernfunc = 0); Sets kernel estimator. void SetCanonicalBandwidths(); Sets the canonical bandwidths according to the kernel type. void SetKernelS",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:16248,Modifiability,adapt,adaptive,16248," option. void Draw(Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integral, mu = 0 and positive finite sigma conditions. Double_t ComputeKernelL2Norm() const; Computes the kernel's L2 norm. Double_t ComputeKernelSigma2() const; Computes the kernel's sigma squared. Double_t ComputeKernelMu() const; Computes the kernel's mu. Double_t ComputeKernelIntegral() const; Co",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:16338,Modifiability,adapt,adaptive,16338,"s; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.95); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integral, mu = 0 and positive finite sigma conditions. Double_t ComputeKernelL2Norm() const; Computes the kernel's L2 norm. Double_t ComputeKernelSigma2() const; Computes the kernel's sigma squared. Double_t ComputeKernelMu() const; Computes the kernel's mu. Double_t ComputeKernelIntegral() const; Computes the kernel's integral which ought to be unity. Double_t ComputeMidspread(); Co",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:18233,Modifiability,Adapt,Adaptive,18233," integral which ought to be unity. Double_t ComputeMidspread(); Computes the inter-quartile range from the data. void SetCanonicalBandwidth(); Computes the user's input kernel function canonical bandwidth. void SetKernelSigma2(); Computes the user's input kernel function sigma2. TF1* GetKDEFunction(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the estimated density. TF1* GetPDFUpperConfidenceInterval(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the upper estimated density. TF1* GetPDFLowerConfidenceInterval(Double_t confidenceLevel = 0.95, UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the upper estimated density. TF1* GetKDEApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Returns the approximate bias. explicit TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0). Double_t GetValue(Double_t x) const; { return (*this)(x); }. TF1 * GetDrawnFunction(); get the drawn object to chanage settings; These objects are managed by TKDE and should not be deleted by the user. { return fPDF;}. TF1 * GetDrawnUpperFunction(); { return fUpperPDF;}. TF1 * GetDrawnLowerFunction(); { return fLowerPDF;}. TGraphErrors * GetDrawnGraph(); { return fGraph;}. TKDE operator=(TKDE& kde). Double_t GaussianKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t EpanechnikovKernel(Double_t x) const. Double_t BiweightKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t CosineArchKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t ApproximateBias(const Double_t* x, const Double_t* ) const; { return GetBias(*x); }. void SetHistogram(). » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or sugge",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:12413,Performance,tune,tune,12413,"tion_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring the data. void SetBinning(TKDE::EBinning ); Sets User option for binning the weights. void SetNBins(UInt_t nbins); Sets User option for number of bins. void SetUseBinsNEvents(UInt_t nEvents); Sets User option for the minimum number of events for allowing automatic binning. void SetTuneFactor(Double_t rho); Factor which can be used to tune the smoothing.; It is used as multiplicative factor for the fixed and adaptive bandwidth.; A value < 1 will reproduce better the tails but oversmooth the peak; while a factor > 1 will overestimate the tail. void SetRange(Double_t xMin, Double_t xMax); Sets minimum range value and maximum range value. void SetUseBins(); Sets User option for using binned weights. void SetMirror(); Sets the mirroring. void SetData(const Double_t* data); Sets the data events input sample or bin centres for binned option and computes basic estimators. void InitFromNewData(); re-initialize when new data have been filled in TKDE; re-compute kernel quantities and mean and sigma. void SetMirroredEvents(); Mirrors the data. void SetMean(); Computes input data's mean. void SetSigma(Double_t R); Computes input data's sigma. void SetKernel(); Sets the kernel density estimator. void SetKernelFunction(TKDE::KernelFunction_Ptr kernfunc = 0); Sets kernel estimator. void SetCanonicalBandwidths",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:3222,Security,Hash,Hash,3222,,MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:5932,Testability,Test,TestBit,5932,"TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x, const Double_t* p = 0) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBinning(TKDE::EBinning); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetIteration(TKDE::EIteration iter); voidSetKernelType(TKDE::EKernelType kern); voidSetMirror(TKDE::EMirror mir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNBins(UInt_t nbins); static voidTObject::SetObjectStat(Bool_t stat); voidSetRange(Double_t xMin, Double_t xMax); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTuneFactor(Double_t rho); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseBinsNEvents(UInt_t nEvents); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:5971,Testability,Test,TestBits,5971,"TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x, const Double_t* p = 0) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBinning(TKDE::EBinning); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetIteration(TKDE::EIteration iter); voidSetKernelType(TKDE::EKernelType kern); voidSetMirror(TKDE::EMirror mir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNBins(UInt_t nbins); static voidTObject::SetObjectStat(Bool_t stat); voidSetRange(Double_t xMin, Double_t xMax); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTuneFactor(Double_t rho); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseBinsNEvents(UInt_t nEvents); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDE.html:780,Usability,Clear,Clear,780,"ss TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0); Double_tGetBias(Double_t x) const; TF1*GetDrawnFunction(); TGraphErrors*GetDrawnGraph(); TF1*GetDrawnLowerFunction(); TF1*GetDrawnUpperFunction(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetE",MatchSource.WIKI,root/html534/TKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDE.html
https://root.cern/root/html534/TKDTreeBinning.html:2264,Availability,Error,Error,2264," TKDTreeBinning(UInt_t dataSize, UInt_t dataDim, Double_t* data, UInt_t nBins = 100, bool adjustBinEdges = false); virtual~TKDTreeBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::Dist",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:2393,Availability,error,error,2393,"t* data, UInt_t nBins = 100, bool adjustBinEdges = false); virtual~TKDTreeBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinData(ROOT::Fit::BinData& data) const; UInt_tFindBin(const Double_t* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetBinCenter(UInt_t bin) const; UInt_tGetBinContent(UInt_t bin) const; Double_tGetBinDensity(UInt_t bin) const; pair<const Double_t*,const Double_t*>GetBinEdges(UInt_t bin) const; UInt_tGetBinMaxDensity() const; const Double_t*GetBinMaxEdges(UInt_t bin) const; UInt_tGetBinMinDensity() const; const Double_t*GetBinMinEdges(UInt_t bin) const; pair<const Double_t*,const Double_t*>GetBinsEdges() const; const Double_t*GetBinsMaxEdges() const; const Double_t*GetBinsMinEdges() const; Double_tGetBinVolume(UInt_t bin) const; const Double",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:2477,Availability,error,error,2477," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinData(ROOT::Fit::BinData& data) const; UInt_tFindBin(const Double_t* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetBinCenter(UInt_t bin) const; UInt_tGetBinContent(UInt_t bin) const; Double_tGetBinDensity(UInt_t bin) const; pair<const Double_t*,const Double_t*>GetBinEdges(UInt_t bin) const; UInt_tGetBinMaxDensity() const; const Double_t*GetBinMaxEdges(UInt_t bin) const; UInt_tGetBinMinDensity() const; const Double_t*GetBinMinEdges(UInt_t bin) const; pair<const Double_t*,const Double_t*>GetBinsEdges() const; const Double_t*GetBinsMaxEdges() const; const Double_t*GetBinsMinEdges() const; Double_tGetBinVolume(UInt_t bin) const; const Double_t*GetBinWidth(UInt_t bin) const; Double_tGetDataMax(UInt_t dim) const; Double_tGetD",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:4268,Modifiability,Inherit,InheritsFrom,4268,"le_t*GetBinsMaxEdges() const; const Double_t*GetBinsMinEdges() const; Double_tGetBinVolume(UInt_t bin) const; const Double_t*GetBinWidth(UInt_t bin) const; Double_tGetDataMax(UInt_t dim) const; Double_tGetDataMin(UInt_t dim) const; UInt_tGetDim() const; const Double_t*GetDimData(UInt_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; UInt_tGetNBins() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); const Double_t*GetOneDimBinEdges() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; TKDTreeID*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:4334,Modifiability,Inherit,InheritsFrom,4334,"st; Double_tGetBinVolume(UInt_t bin) const; const Double_t*GetBinWidth(UInt_t bin) const; Double_tGetDataMax(UInt_t dim) const; Double_tGetDataMin(UInt_t dim) const; UInt_tGetDim() const; const Double_t*GetDimData(UInt_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; UInt_tGetNBins() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); const Double_t*GetOneDimBinEdges() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; TKDTreeID*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Pa",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:8720,Modifiability,Inherit,Inheritance,8720,"_t>fBinsContentHolds the contents of the bins; vector<std::vector<std::pair<Bool_t,Bool_t> > >fCheckedBinEdgesAuxiliary structure for readjusting the bin edges. Flags if the bin edge was processed in the algorithm; vector<std::map<Double_t,std::vector<UInt_t> > >fCommonBinEdgesAuxiliary structure for readjusting the bin edges. Keeps the common bin boundaries; Double_t**fDataThe data from which a KDTree partition is computed for binning; TKDTreeID*fDataBinsThe binning inner structure.; UInt_tfDataSizeThe data size; vector<std::pair<Double_t,Double_t> >fDataThresholdsMinimum and maximum data values.; UInt_tfDimThe data dimension; vector<UInt_t>fIndicesIndex of the bins in the kd-tree (needed when bins are sorted); Bool_tfIsSortedFlags if the bin edges are sorted densitywise (or by bin endges in case of 1-dim ); Bool_tfIsSortedAscFlags if the bin edges are sorted densitywise (or by bin-edge for 1D) in ascending order; UInt_tfNBinsThe number of bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDTreeBinning(UInt_t dataSize, UInt_t dataDim, Double_t* data, UInt_t nBins = 100, bool adjustBinEdges = false); Class's constructor taking the size of the data points, dimension, a data array and the number; of bins (default = 100). It is reccomended to have the number of bins as an exact divider of; the data size.; The data array must be organized with a stride=1 for the points and = N (the dataSize) for the dimension. Thus data[] = x1,x2,x3,......xN, y1,y2,y3......yN, z1,z2,...........zN,.... Note that the passed dataSize is not the size of the array but is the number of points (N); The size of the array must be at least dataDim*dataSize. ~TKDTreeBinning(); Class's destructor. void SetNBins(UInt_t bins); Sets binning inner structure. void SortBinsByDensity(Bool_t sortAsc = kTRUE); Sorts bins by their density. void SetData(Double_t* data); Sets the data and finds minimum and maximum by dimensional coordinate. void SetTreeData(); Set",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:8733,Modifiability,Inherit,Inherited,8733,"_t>fBinsContentHolds the contents of the bins; vector<std::vector<std::pair<Bool_t,Bool_t> > >fCheckedBinEdgesAuxiliary structure for readjusting the bin edges. Flags if the bin edge was processed in the algorithm; vector<std::map<Double_t,std::vector<UInt_t> > >fCommonBinEdgesAuxiliary structure for readjusting the bin edges. Keeps the common bin boundaries; Double_t**fDataThe data from which a KDTree partition is computed for binning; TKDTreeID*fDataBinsThe binning inner structure.; UInt_tfDataSizeThe data size; vector<std::pair<Double_t,Double_t> >fDataThresholdsMinimum and maximum data values.; UInt_tfDimThe data dimension; vector<UInt_t>fIndicesIndex of the bins in the kd-tree (needed when bins are sorted); Bool_tfIsSortedFlags if the bin edges are sorted densitywise (or by bin endges in case of 1-dim ); Bool_tfIsSortedAscFlags if the bin edges are sorted densitywise (or by bin-edge for 1D) in ascending order; UInt_tfNBinsThe number of bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDTreeBinning(UInt_t dataSize, UInt_t dataDim, Double_t* data, UInt_t nBins = 100, bool adjustBinEdges = false); Class's constructor taking the size of the data points, dimension, a data array and the number; of bins (default = 100). It is reccomended to have the number of bins as an exact divider of; the data size.; The data array must be organized with a stride=1 for the points and = N (the dataSize) for the dimension. Thus data[] = x1,x2,x3,......xN, y1,y2,y3......yN, z1,z2,...........zN,.... Note that the passed dataSize is not the size of the array but is the number of points (N); The size of the array must be at least dataDim*dataSize. ~TKDTreeBinning(); Class's destructor. void SetNBins(UInt_t bins); Sets binning inner structure. void SortBinsByDensity(Bool_t sortAsc = kTRUE); Sorts bins by their density. void SetData(Double_t* data); Sets the data and finds minimum and maximum by dimensional coordinate. void SetTreeData(); Set",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:10259,Safety,avoid,avoid,10259,"ion. Thus data[] = x1,x2,x3,......xN, y1,y2,y3......yN, z1,z2,...........zN,.... Note that the passed dataSize is not the size of the array but is the number of points (N); The size of the array must be at least dataDim*dataSize. ~TKDTreeBinning(); Class's destructor. void SetNBins(UInt_t bins); Sets binning inner structure. void SortBinsByDensity(Bool_t sortAsc = kTRUE); Sorts bins by their density. void SetData(Double_t* data); Sets the data and finds minimum and maximum by dimensional coordinate. void SetTreeData(); Sets the data for constructing the kD-tree. void SetBinsContent(); Sets the bins' content. void SetBinsEdges(); Sets the bins' edges; Double_t* rawBinEdges = fDataBins->GetBoundaryExact(fDataBins->GetNNodes());. void SetBinMinMaxEdges(Double_t* binEdges); Sets the bins' minimum and maximum edges. void SetCommonBinEdges(Double_t* binEdges); Sets indexing on the bin edges which have common boundaries. void ReadjustMinBinEdges(Double_t* binEdges); Readjusts the bins' minimum edge by shifting it slightly lower; to avoid overlapping with the data. void ReadjustMaxBinEdges(Double_t* binEdges); Readjusts the bins' maximum edge; and shift it sligtly higher. const Double_t* GetBinsMinEdges() const; Returns the bins' minimum edges. const Double_t* GetBinsMaxEdges() const; Returns the bins' maximum edges. std::pair<const Double_t*, const Double_t*> GetBinsEdges() const; Returns the bins' edges. const Double_t* GetBinMinEdges(UInt_t bin) const; Returns the bin's minimum edges. 'bin' is between 0 and fNBins - 1. const Double_t* GetBinMaxEdges(UInt_t bin) const; Returns the bin's maximum edges. 'bin' is between 0 and fNBins - 1. std::pair<const Double_t*, const Double_t*> GetBinEdges(UInt_t bin) const; Returns the bin's edges. 'bin' is between 0 and fNBins - 1. UInt_t GetNBins() const; Returns the number of bins. UInt_t GetDim() const; Returns the number of dimensions. UInt_t GetBinContent(UInt_t bin) const; Returns the number of points in bin. 'bin' is between 0 a",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:4158,Security,Hash,Hash,4158,"t Double_t*GetBinMinEdges(UInt_t bin) const; pair<const Double_t*,const Double_t*>GetBinsEdges() const; const Double_t*GetBinsMaxEdges() const; const Double_t*GetBinsMinEdges() const; Double_tGetBinVolume(UInt_t bin) const; const Double_t*GetBinWidth(UInt_t bin) const; Double_tGetDataMax(UInt_t dim) const; Double_tGetDataMin(UInt_t dim) const; UInt_tGetDim() const; const Double_t*GetDimData(UInt_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; UInt_tGetNBins() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); const Double_t*GetOneDimBinEdges() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; TKDTreeID*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:6385,Testability,Test,TestBit,6385,"ject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNBins(UInt_t bins); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSortBinsByDensity(Bool_t sortAsc = kTRUE); const Double_t*SortOneDimBinEdges(Bool_t sortAsc = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:6424,Testability,Test,TestBits,6424,"ject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNBins(UInt_t bins); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSortBinsByDensity(Bool_t sortAsc = kTRUE); const Double_t*SortOneDimBinEdges(Bool_t sortAsc = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTreeBinning.html:1724,Usability,Clear,Clear,1724," TKDTreeBinning(UInt_t dataSize, UInt_t dataDim, Double_t* data, UInt_t nBins = 100, bool adjustBinEdges = false); virtual~TKDTreeBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::Dist",MatchSource.WIKI,root/html534/TKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTreeBinning.html
https://root.cern/root/html534/TKDTree_int_double_.html:1960,Availability,down,down,1960,"ng a multidimensional search key (e.g. range searches and; nearest neighbour searches). kd-trees are a special case of BSP trees. A kd-tree uses only splitting planes that are perpendicular to one of the coordinate system axes.; This differs from BSP trees, in which arbitrary splitting planes can be used.; In addition, in the typical definition every node of a kd-tree, from the root to the leaves, stores a point.; This differs from BSP trees, in which leaves are typically the only nodes that contain points; (or other geometric primitives). As a consequence, each splitting plane must go through one of; the points in the kd-tree. kd-trees are a variant that store data only in leaf nodes. 2. Constructing a classical kd-tree ( Pseudo code). Since there are many possible ways to choose axis-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return n",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:11334,Availability,Error,Error,11334,"ata); virtual~TKDTree<int,double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const double* point, int ind, Int_t type = 2) const; voidDistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(double* point, double* delta, Int_t& inode); voidFindInRange(double* point, double range, vector<int>& res); voidFindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); intFindNode(const double* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(double* point, int& index, Int_t& iter); double*GetBoundaries(); double*GetBoundariesExact(); double*GetBoundary(const Int_t node); double*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOptio",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:11463,Availability,error,error,11463,"_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const double* point, int ind, Int_t type = 2) const; voidDistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(double* point, double* delta, Int_t& inode); voidFindInRange(double* point, double range, vector<int>& res); voidFindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); intFindNode(const double* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(double* point, int& index, Int_t& iter); double*GetBoundaries(); double*GetBoundariesExact(); double*GetBoundary(const Int_t node); double*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:11547,Availability,error,error,11547,"ss*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const double* point, int ind, Int_t type = 2) const; voidDistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(double* point, double* delta, Int_t& inode); voidFindInRange(double* point, double range, vector<int>& res); voidFindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); intFindNode(const double* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(double* point, int& index, Int_t& iter); double*GetBoundaries(); double*GetBoundariesExact(); double*GetBoundary(const Int_t node); double*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:18321,Availability,failure,failure,18321,"tfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; double*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); double*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const double* point) const; returns the in",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:19389,Availability,failure,failure,19389,"turns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const double* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(double* point, int& index, Int_t& iter). find the index of point; works only if we keep fData pointers. void TKDTree<Index, Value> FindInRange(double* point, double range, vector<int>& res); Find all points in the sphere of a given radius ""range"" around the given point; 1st argument - the point; 2nd argument - radius of the shere; 3rd argument - a vector, in which the results will be returned. void TKDTree<Index, Value> UpdateRange(int inode, double* point, double range, vector<int>& res); Internal recursive function with the implementation of range searches. Index* TKDTree<Index, Value> GetPointsIndexes(Int_t node) const; return the indices of the points in that terminal node; for all the nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize. void TKDTree<Index, Value> GetNodePointsIndexes(Int_t node, Int_t& first1, ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:18452,Deployability,Update,UpdateNearestNeighbors,18452,"ange of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); double*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const double* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(double* point, int& index, Int_t& iter). find the index of point; works only if w",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:18543,Deployability,Update,Update,18543,"ange of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); double*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const double* point, int inode, double& min, double& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const double* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(double* point, int& index, Int_t& iter). find the index of point; works only if w",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:19859,Deployability,Update,UpdateRange,19859,"uble* point, int inode, double& min, double& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const double* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(double* point, int& index, Int_t& iter). find the index of point; works only if we keep fData pointers. void TKDTree<Index, Value> FindInRange(double* point, double range, vector<int>& res); Find all points in the sphere of a given radius ""range"" around the given point; 1st argument - the point; 2nd argument - radius of the shere; 3rd argument - a vector, in which the results will be returned. void TKDTree<Index, Value> UpdateRange(int inode, double* point, double range, vector<int>& res); Internal recursive function with the implementation of range searches. Index* TKDTree<Index, Value> GetPointsIndexes(Int_t node) const; return the indices of the points in that terminal node; for all the nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize. void TKDTree<Index, Value> GetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; Return the indices of points in that node; Indices are returned as the first and last value of the part of indices array, that belong to this node; Sometimes points are in 2 intervals, then the first and last value for the second one are returned in; third and fourth parameter, otherwise first2 is set to 0 and last2 is set to -1; To iterate over all the points of the node #inode, one can do, for example:; Index *indices = kdtree->GetPointsIndexes();; Int_t first1, last1, first2, last2;; kdtree->GetPointsIndexes(inode, first1, last1, first2, last2);; for (Int_t ip",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:6589,Energy Efficiency,consumption,consumption,6589," the kd-tree don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:4038,Integrability,interface,interface,4038,"r int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npo",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:4348,Modifiability,variab,variables,4348,"ave memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npoints; i++){; data0[i]=gRandom->Uniform(xmin, xmax);; data1[i]=gRandom->Uniform(xmin, xmax);; data2[i]=gRandom->Uniform(xmin, xmax);; }; TKDTreeID *kdtree = new TKDTreeID(npoints, ndim, bsize);; kdtree->SetData(0, data0);; kdtree->SetData(1, data1);; kdtree->SetData(2, data2);; kdtree->Build();; }. By default, the kd-tree doesn't own the data and doesn't delete it with itself. If you want the; data to ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:13392,Modifiability,Inherit,InheritsFrom,13392," char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; doubleGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; doubleKOrdStat(int ntotal, double* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(double* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTOb",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:13458,Modifiability,Inherit,InheritsFrom,13458,"ft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; doubleGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; doubleKOrdStat(int ntotal, double* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(double* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operat",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:17749,Modifiability,Inherit,Inheritance,17749,"um TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAxis[fNNodes] nodes cutting axis; double*fBoundaries! nodes boundaries; intfBucketSizesize of the terminal nodes; Int_tfCrossNode! cross node - node that begins the last row (with terminal nodes only); double**fData! data points; Int_tfDataOwner! 0 - not owner, 2 - owner of the pointer array, 1 - owner of the whole 2-d array; int*fIndPoints! array of points indexes; intfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; double*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); double*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at ind",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:17762,Modifiability,Inherit,Inherited,17762,"um TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAxis[fNNodes] nodes cutting axis; double*fBoundaries! nodes boundaries; intfBucketSizesize of the terminal nodes; Int_tfCrossNode! cross node - node that begins the last row (with terminal nodes only); double**fData! data points; Int_tfDataOwner! 0 - not owner, 2 - owner of the pointer array, 1 - owner of the whole 2-d array; int*fIndPoints! array of points indexes; intfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; double*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); double*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const double* point, Int_t k, int* ind, double* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const double* point, Int_t kNN, int* ind, double* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const double* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at ind",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:24373,Modifiability,variab,variables,24373," node with just one point minimum and maximum for each; dimension are the same.; Boundaries can be retrieved by calling GetBoundaryExact(inode) function that would; return an array of boundaries for the specified node, or GetBoundaries() function; that would return the complete array. void TKDTree<Index, Value> FindBNodeA(double* point, double* delta, Int_t& inode). find the smallest node covering the full range - start. Value* TKDTree<Index, Value> GetBoundaries(); Get the boundaries. Value* TKDTree<Index, Value> GetBoundariesExact(); Get the boundaries. Value* TKDTree<Index, Value> GetBoundary(const Int_t node); Get a boundary. Value* TKDTree<Index, Value> GetBoundaryExact(const Int_t node); Get a boundary. Int_t GetLeft(Int_t inode) const; Get indexes of left and right daughter nodes. {return inode*2+1;}. Int_t GetRight(Int_t inode) const; {return (inode+1)*2;}. Int_t GetParent(Int_t inode) const. Other getters. {return (inode-1)/2;}. UChar_t GetNodeAxis(Int_t id) const; {return (id < 0 || id >= fNNodes) ? 0 : fAxis[id];}. Value GetNodeValue(Int_t id) const; {return (id < 0 || id >= fNNodes) ? 0 : fValue[id];}. Int_t GetNNodes() const; {return fNNodes;}. Int_t GetTotalNodes() const; {return fTotalNodes;}. Index GetNPoints(); { return fNPoints; }. Index GetNDim(); { return fNDim; }. Int_t GetRowT0(); Getters for internal variables. {return fRowT0;}. Int_t GetCrossNode(); {return fCrossNode;}. Int_t GetOffset(); {return fOffset;}. Index* GetIndPoints(); {return fIndPoints;}. Index GetBucketSize(); {return fBucketSize;}. Bool_t IsTerminal(int inode) const; {return (inode>=fNNodes);}. Int_t IsOwner(); { return fDataOwner; }. void SetOwner(Int_t owner); { fDataOwner = owner; }. TKDTree<Index, Value>& operator=(const TKDTree<int,double>& ). » Last changed: Sat Mar 14 16:42:48 2015 » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:3473,Performance,optimiz,optimized,3473,"is method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtre",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:6560,Performance,optimiz,optimized,6560," the kd-tree don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:8725,Performance,perform,performed,8725,"Right child index = (inode+1)*2; Suppose, that the child node is stored under the index inode. Then:; Parent index = inode/2. Number of division nodes and number of terminals :; fNNodes = (fNPoints/fBucketSize). The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; The TKDTree looks the following way:; Ideal case:; Number of _terminal_ nodes = 2^N, N=3. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 4 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes. Non ideal case:; Number of _terminal_ nodes = 2^N+k, N=3 k=1. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 3 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes; irow 4 15 16 - 2 inodes. 3b. The division algorithm:. As described above, the kd-tree is built by repeatingly dividing the given set of points into; 2 smaller sets. The cut is made on the axis with the biggest spread, and the value on the axis,; on which the cut is performed, is chosen based on the following formula:; Suppose, we want to divide n nodes into 2 groups, left and right. Then the left and right; will have the following number of nodes:. n=2^k+rest. Left = 2^k-1 + ((rest>2^k-2) ? 2^k-2 : rest); Right = 2^k-1 + ((rest>2^k-2) ? rest-2^k-2 : 0). For example, let n_nodes=67. Then, the closest 2^k=64, 2^k-1=32, 2^k-2=16.; Left node gets 32+3=35 sub-nodes, and the right node gets 32 sub-nodes. The division process continues until all the nodes contain not more than a predefined number; of points. 3c. The order of nodes in boundary-related arrays. Some kd-tree based algorithms need to know the boundaries of each node. This information can; be computed by calling the TKDTree::MakeBoundaries() function. It fills the following arrays:. fRange : array containing the boundaries of the domain:; | 1st dimension (min + max) | 2nd dimension (min + max) | ...; fBoundaries : nodes boundaries; | 1st node {1st dim * 2 elements | 2nd dim * 2 elements | ...} | 2nd n",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:21865,Performance,perform,performed,21865," the node #inode, one can do, for example:; Index *indices = kdtree->GetPointsIndexes();; Int_t first1, last1, first2, last2;; kdtree->GetPointsIndexes(inode, first1, last1, first2, last2);; for (Int_t ipoint=first1; ipoint<=last1; ipoint++){; point = indices[ipoint];; //do something with point;; }; for (Int_t ipoint=first2; ipoint<=last2; ipoint++){; point = indices[ipoint];; //do something with point;; }. Index TKDTree<Index, Value> GetNPointsNode(Int_t node) const; Get number of points in this node; for all the terminal nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize, or if fOffset%fBucketSize==0, it's also fBucketSize. void TKDTree<Index, Value> SetData(int npoints, int ndim, UInt_t bsize, double** data); Set the data array. See the constructor function comments for details. Int_t TKDTree<Index, Value> SetData(int idim, double* data); Set the coordinate #ndim of all points (the column #ndim of the data matrix); After setting all the data columns, proceed by calling Build() function; Note, that calling this function after Build() is not possible; Note also, that no checks on the array sizes is performed anywhere. void TKDTree<Index, Value> Spread(int ntotal, double* a, int* index, double& min, double& max) const; Calculate spread of the array a. Value TKDTree<Index, Value> KOrdStat(int ntotal, double* a, int k, int* index) const. copy of the TMath::KOrdStat because I need an Index work array. void TKDTree<Index, Value> MakeBoundaries(double* range = 0x0); Build boundaries for each node. Note, that the boundaries here are built; based on the splitting planes of the kd-tree, and don't necessarily pass; through the points of the original dataset. For the latter functionality; see function MakeBoundariesExact(); Boundaries can be retrieved by calling GetBoundary(inode) function that would; return an array of boundaries for the specified node, or GetBoundaries() function; that would return the complete array. void TKDTree<Index, ",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:7100,Security,access,access,7100,"ing the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the indices, corresponding to; children nodes or the parent node:; Suppose, the parent node is stored under the index inode. Then:; Left child index = inode*2+1; Right child index = (inode+1)*2; Suppose, that the child node is stored under the index inode. Then:; Parent index = inode/2. Number of division nodes and number of terminals :; fNNodes = (fNPoints/fBucketSize). The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; The TKDTree looks the follo",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:13282,Security,Hash,Hash,13282,"etCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; doubleGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; doubleKOrdStat(int ntotal, double* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(double* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static v",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:15768,Testability,Test,TestBit,15768,"voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Int_tSetData(int idim, double* data); voidSetData(int npoints, int ndim, UInt_t bsize, double** data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(Int_t owner); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSpread(int ntotal, double* a, int* index, double& min, double& max) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:15807,Testability,Test,TestBits,15807,"voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Int_tSetData(int idim, double* data); voidSetData(int npoints, int ndim, UInt_t bsize, double** data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(Int_t owner); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSpread(int ntotal, double* a, int* index, double& min, double& max) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:2864,Usability,simpl,simple,2864,"-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tre",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:4118,Usability,simpl,simplify,4118,"r int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npo",MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_double_.html:10630,Usability,Clear,Clear,10630,,MatchSource.WIKI,root/html534/TKDTree_int_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_double_.html
https://root.cern/root/html534/TKDTree_int_float_.html:1957,Availability,down,down,1957,"ng a multidimensional search key (e.g. range searches and; nearest neighbour searches). kd-trees are a special case of BSP trees. A kd-tree uses only splitting planes that are perpendicular to one of the coordinate system axes.; This differs from BSP trees, in which arbitrary splitting planes can be used.; In addition, in the typical definition every node of a kd-tree, from the root to the leaves, stores a point.; This differs from BSP trees, in which leaves are typically the only nodes that contain points; (or other geometric primitives). As a consequence, each splitting plane must go through one of; the points in the kd-tree. kd-trees are a variant that store data only in leaf nodes. 2. Constructing a classical kd-tree ( Pseudo code). Since there are many possible ways to choose axis-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return n",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:11321,Availability,Error,Error,11321,"t** data); virtual~TKDTree<int,float>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const float* point, int ind, Int_t type = 2) const; voidDistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(float* point, float* delta, Int_t& inode); voidFindInRange(float* point, float range, vector<int>& res); voidFindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); intFindNode(const float* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(float* point, int& index, Int_t& iter); float*GetBoundaries(); float*GetBoundariesExact(); float*GetBoundary(const Int_t node); float*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; s",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:11450,Availability,error,error,11450,"tion_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const float* point, int ind, Int_t type = 2) const; voidDistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(float* point, float* delta, Int_t& inode); voidFindInRange(float* point, float range, vector<int>& res); voidFindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); intFindNode(const float* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(float* point, int& index, Int_t& iter); float*GetBoundaries(); float*GetBoundariesExact(); float*GetBoundary(const Int_t node); float*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:11534,Availability,error,error,11534,"TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDistance(const float* point, int ind, Int_t type = 2) const; voidDistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFindBNodeA(float* point, float* delta, Int_t& inode); voidFindInRange(float* point, float range, vector<int>& res); voidFindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); intFindNode(const float* point) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPoint(float* point, int& index, Int_t& iter); float*GetBoundaries(); float*GetBoundariesExact(); float*GetBoundary(const Int_t node); float*GetBoundaryExact(const Int_t node); intGetBucketSize(); Int_tGetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes()",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:18273,Availability,failure,failure,18273," intfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; float*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); float*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const float* point) const; returns the index of t",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:19334,Availability,failure,failure,19334,"nt; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const float* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(float* point, int& index, Int_t& iter). find the index of point; works only if we keep fData pointers. void TKDTree<Index, Value> FindInRange(float* point, float range, vector<int>& res); Find all points in the sphere of a given radius ""range"" around the given point; 1st argument - the point; 2nd argument - radius of the shere; 3rd argument - a vector, in which the results will be returned. void TKDTree<Index, Value> UpdateRange(int inode, float* point, float range, vector<int>& res); Internal recursive function with the implementation of range searches. Index* TKDTree<Index, Value> GetPointsIndexes(Int_t node) const; return the indices of the points in that terminal node; for all the nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize. void TKDTree<Index, Value> GetNodePointsIndexes(Int_t node, Int_t& first1, Int_t",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:18404,Deployability,Update,UpdateNearestNeighbors,18404,"m] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); float*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const float* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(float* point, int& index, Int_t& iter). find the index of point; works only if we keep ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:18493,Deployability,Update,Update,18493,"m] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); float*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index value ind; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric. void TKDTree<Index, Value> DistanceToNode(const float* point, int inode, float& min, float& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const float* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(float* point, int& index, Int_t& iter). find the index of point; works only if we keep ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:19801,Deployability,Update,UpdateRange,19801,"const float* point, int inode, float& min, float& max, Int_t type = 2); Find the minimal and maximal distance from a given point to a given node.; Type argument specifies the metric: type=2 - L2 metric, type=1 - L1 metric; If the point is inside the node, both min and max are set to 0. Index TKDTree<Index, Value> FindNode(const float* point) const; returns the index of the terminal node to which point belongs; (index in the fAxis, fValue, etc arrays); returns -1 in case of failure. void TKDTree<Index, Value> FindPoint(float* point, int& index, Int_t& iter). find the index of point; works only if we keep fData pointers. void TKDTree<Index, Value> FindInRange(float* point, float range, vector<int>& res); Find all points in the sphere of a given radius ""range"" around the given point; 1st argument - the point; 2nd argument - radius of the shere; 3rd argument - a vector, in which the results will be returned. void TKDTree<Index, Value> UpdateRange(int inode, float* point, float range, vector<int>& res); Internal recursive function with the implementation of range searches. Index* TKDTree<Index, Value> GetPointsIndexes(Int_t node) const; return the indices of the points in that terminal node; for all the nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize. void TKDTree<Index, Value> GetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; Return the indices of points in that node; Indices are returned as the first and last value of the part of indices array, that belong to this node; Sometimes points are in 2 intervals, then the first and last value for the second one are returned in; third and fourth parameter, otherwise first2 is set to 0 and last2 is set to -1; To iterate over all the points of the node #inode, one can do, for example:; Index *indices = kdtree->GetPointsIndexes();; Int_t first1, last1, first2, last2;; kdtree->GetPointsIndexes(inode, first1, last1, first2, last2);; for (Int_t ipo",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:6586,Energy Efficiency,consumption,consumption,6586," the kd-tree don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:4035,Integrability,interface,interface,4035,"r int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npo",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:4345,Modifiability,variab,variables,4345,"ave memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npoints; i++){; data0[i]=gRandom->Uniform(xmin, xmax);; data1[i]=gRandom->Uniform(xmin, xmax);; data2[i]=gRandom->Uniform(xmin, xmax);; }; TKDTreeID *kdtree = new TKDTreeID(npoints, ndim, bsize);; kdtree->SetData(0, data0);; kdtree->SetData(1, data1);; kdtree->SetData(2, data2);; kdtree->Build();; }. By default, the kd-tree doesn't own the data and doesn't delete it with itself. If you want the; data to ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:13366,Modifiability,Inherit,InheritsFrom,13366,"t char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; floatGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; floatKOrdStat(int ntotal, float* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(float* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObjec",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:13432,Modifiability,Inherit,InheritsFrom,13432,"eft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; floatGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; floatKOrdStat(int ntotal, float* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(float* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:17703,Modifiability,Inherit,Inheritance,17703,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAxis[fNNodes] nodes cutting axis; float*fBoundaries! nodes boundaries; intfBucketSizesize of the terminal nodes; Int_tfCrossNode! cross node - node that begins the last row (with terminal nodes only); float**fData! data points; Int_tfDataOwner! 0 - not owner, 2 - owner of the pointer array, 1 - owner of the whole 2-d array; int*fIndPoints! array of points indexes; intfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; float*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); float*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index va",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:17716,Modifiability,Inherit,Inherited,17716,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAxis[fNNodes] nodes cutting axis; float*fBoundaries! nodes boundaries; intfBucketSizesize of the terminal nodes; Int_tfCrossNode! cross node - node that begins the last row (with terminal nodes only); float**fData! data points; Int_tfDataOwner! 0 - not owner, 2 - owner of the pointer array, 1 - owner of the whole 2-d array; int*fIndPoints! array of points indexes; intfNDimnumber of dimensions; intfNDimmdummy 2*fNDim; Int_tfNNodessize of node array; intfNPointsnumber of multidimensional points; Int_tfOffset! offset in fIndPoints - if there are 2 rows, that contain terminal nodes; float*fRange[fNDimm] range of data for each dimension; Int_tfRowT0! smallest terminal row - first row that contains terminal nodes; Int_tfTotalNodestotal number of nodes (fNNodes + terminal nodes); float*fValue[fNNodes] nodes cutting value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TKDTree<Index, Value> Build(). Build the kd-tree. 1. calculate number of nodes; 2. calculate first terminal row; 3. initialize index array; 4. non recursive building of the binary tree. The tree is divided recursively. See class description, section 4b for the details; of the division alogrithm. void TKDTree<Index, Value> FindNearestNeighbors(const float* point, Int_t k, int* ind, float* dist); Find kNN nearest neighbors to the point in the first argument; Returns 1 on success, 0 on failure; Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. void TKDTree<Index, Value> UpdateNearestNeighbors(int inode, const float* point, Int_t kNN, int* ind, float* dist); Update the nearest neighbors values by examining the node inode. Double_t TKDTree<Index, Value> Distance(const float* point, int ind, Int_t type = 2) const; Find the distance between point of the first argument and the point at index va",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:24304,Modifiability,variab,variables,24304,"nal node with just one point minimum and maximum for each; dimension are the same.; Boundaries can be retrieved by calling GetBoundaryExact(inode) function that would; return an array of boundaries for the specified node, or GetBoundaries() function; that would return the complete array. void TKDTree<Index, Value> FindBNodeA(float* point, float* delta, Int_t& inode). find the smallest node covering the full range - start. Value* TKDTree<Index, Value> GetBoundaries(); Get the boundaries. Value* TKDTree<Index, Value> GetBoundariesExact(); Get the boundaries. Value* TKDTree<Index, Value> GetBoundary(const Int_t node); Get a boundary. Value* TKDTree<Index, Value> GetBoundaryExact(const Int_t node); Get a boundary. Int_t GetLeft(Int_t inode) const; Get indexes of left and right daughter nodes. {return inode*2+1;}. Int_t GetRight(Int_t inode) const; {return (inode+1)*2;}. Int_t GetParent(Int_t inode) const. Other getters. {return (inode-1)/2;}. UChar_t GetNodeAxis(Int_t id) const; {return (id < 0 || id >= fNNodes) ? 0 : fAxis[id];}. Value GetNodeValue(Int_t id) const; {return (id < 0 || id >= fNNodes) ? 0 : fValue[id];}. Int_t GetNNodes() const; {return fNNodes;}. Int_t GetTotalNodes() const; {return fTotalNodes;}. Index GetNPoints(); { return fNPoints; }. Index GetNDim(); { return fNDim; }. Int_t GetRowT0(); Getters for internal variables. {return fRowT0;}. Int_t GetCrossNode(); {return fCrossNode;}. Int_t GetOffset(); {return fOffset;}. Index* GetIndPoints(); {return fIndPoints;}. Index GetBucketSize(); {return fBucketSize;}. Bool_t IsTerminal(int inode) const; {return (inode>=fNNodes);}. Int_t IsOwner(); { return fDataOwner; }. void SetOwner(Int_t owner); { fDataOwner = owner; }. TKDTree<Index, Value>& operator=(const TKDTree<int,float>& ). » Last changed: Sat Mar 14 16:42:48 2015 » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:3470,Performance,optimiz,optimized,3470,"is method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtre",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:6557,Performance,optimiz,optimized,6557," the kd-tree don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the ",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:8722,Performance,perform,performed,8722,"Right child index = (inode+1)*2; Suppose, that the child node is stored under the index inode. Then:; Parent index = inode/2. Number of division nodes and number of terminals :; fNNodes = (fNPoints/fBucketSize). The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; The TKDTree looks the following way:; Ideal case:; Number of _terminal_ nodes = 2^N, N=3. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 4 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes. Non ideal case:; Number of _terminal_ nodes = 2^N+k, N=3 k=1. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 3 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes; irow 4 15 16 - 2 inodes. 3b. The division algorithm:. As described above, the kd-tree is built by repeatingly dividing the given set of points into; 2 smaller sets. The cut is made on the axis with the biggest spread, and the value on the axis,; on which the cut is performed, is chosen based on the following formula:; Suppose, we want to divide n nodes into 2 groups, left and right. Then the left and right; will have the following number of nodes:. n=2^k+rest. Left = 2^k-1 + ((rest>2^k-2) ? 2^k-2 : rest); Right = 2^k-1 + ((rest>2^k-2) ? rest-2^k-2 : 0). For example, let n_nodes=67. Then, the closest 2^k=64, 2^k-1=32, 2^k-2=16.; Left node gets 32+3=35 sub-nodes, and the right node gets 32 sub-nodes. The division process continues until all the nodes contain not more than a predefined number; of points. 3c. The order of nodes in boundary-related arrays. Some kd-tree based algorithms need to know the boundaries of each node. This information can; be computed by calling the TKDTree::MakeBoundaries() function. It fills the following arrays:. fRange : array containing the boundaries of the domain:; | 1st dimension (min + max) | 2nd dimension (min + max) | ...; fBoundaries : nodes boundaries; | 1st node {1st dim * 2 elements | 2nd dim * 2 elements | ...} | 2nd n",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:21803,Performance,perform,performed,21803,"of the node #inode, one can do, for example:; Index *indices = kdtree->GetPointsIndexes();; Int_t first1, last1, first2, last2;; kdtree->GetPointsIndexes(inode, first1, last1, first2, last2);; for (Int_t ipoint=first1; ipoint<=last1; ipoint++){; point = indices[ipoint];; //do something with point;; }; for (Int_t ipoint=first2; ipoint<=last2; ipoint++){; point = indices[ipoint];; //do something with point;; }. Index TKDTree<Index, Value> GetNPointsNode(Int_t node) const; Get number of points in this node; for all the terminal nodes except last, the size is fBucketSize; for the last node it's fOffset%fBucketSize, or if fOffset%fBucketSize==0, it's also fBucketSize. void TKDTree<Index, Value> SetData(int npoints, int ndim, UInt_t bsize, float** data); Set the data array. See the constructor function comments for details. Int_t TKDTree<Index, Value> SetData(int idim, float* data); Set the coordinate #ndim of all points (the column #ndim of the data matrix); After setting all the data columns, proceed by calling Build() function; Note, that calling this function after Build() is not possible; Note also, that no checks on the array sizes is performed anywhere. void TKDTree<Index, Value> Spread(int ntotal, float* a, int* index, float& min, float& max) const; Calculate spread of the array a. Value TKDTree<Index, Value> KOrdStat(int ntotal, float* a, int k, int* index) const. copy of the TMath::KOrdStat because I need an Index work array. void TKDTree<Index, Value> MakeBoundaries(float* range = 0x0); Build boundaries for each node. Note, that the boundaries here are built; based on the splitting planes of the kd-tree, and don't necessarily pass; through the points of the original dataset. For the latter functionality; see function MakeBoundariesExact(); Boundaries can be retrieved by calling GetBoundary(inode) function that would; return an array of boundaries for the specified node, or GetBoundaries() function; that would return the complete array. void TKDTree<Index, Value>",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:7097,Security,access,access,7097,"ing the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; fAxix[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value. Given the index of a node in those arrays, it's easy to find the indices, corresponding to; children nodes or the parent node:; Suppose, the parent node is stored under the index inode. Then:; Left child index = inode*2+1; Right child index = (inode+1)*2; Suppose, that the child node is stored under the index inode. Then:; Parent index = inode/2. Number of division nodes and number of terminals :; fNNodes = (fNPoints/fBucketSize). The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; The TKDTree looks the follo",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:13256,Security,Hash,Hash,13256,"GetCrossNode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; int*GetIndPoints(); Int_tGetLeft(Int_t inode) const; virtual const char*TObject::GetName() const; intGetNDim(); Int_tGetNNodes() const; UChar_tGetNodeAxis(Int_t id) const; voidGetNodePointsIndexes(Int_t node, Int_t& first1, Int_t& last1, Int_t& first2, Int_t& last2) const; floatGetNodeValue(Int_t id) const; intGetNPoints(); intGetNPointsNode(Int_t node) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset(); virtual Option_t*TObject::GetOption() const; Int_tGetParent(Int_t inode) const; int*GetPointsIndexes(Int_t node) const; Int_tGetRight(Int_t inode) const; Int_tGetRowT0(); virtual const char*TObject::GetTitle() const; Int_tGetTotalNodes() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Int_tIsOwner(); virtual Bool_tTObject::IsSortable() const; Bool_tIsTerminal(int inode) const; Bool_tTObject::IsZombie() const; floatKOrdStat(int ntotal, float* a, int k, int* index) const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBoundaries(float* range = 0x0); voidMakeBoundariesExact(); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static void",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:15734,Testability,Test,TestBit,15734,"y(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Int_tSetData(int idim, float* data); voidSetData(int npoints, int ndim, UInt_t bsize, float** data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(Int_t owner); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSpread(int ntotal, float* a, int* index, float& min, float& max) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:15773,Testability,Test,TestBits,15773,"y(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Int_tSetData(int idim, float* data); voidSetData(int npoints, int ndim, UInt_t bsize, float** data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOwner(Int_t owner); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); voidSpread(int ntotal, float* a, int* index, float& min, float& max) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:2861,Usability,simpl,simple,2861,"-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tre",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:4115,Usability,simpl,simplify,4115,"r int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npo",MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKDTree_int_float_.html:10621,Usability,Clear,Clear,10621,,MatchSource.WIKI,root/html534/TKDTree_int_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKDTree_int_float_.html
https://root.cern/root/html534/TKey.html:897,Availability,redundant,redundant,897,". TKey. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TKey. class TKey: public TNamed. The TKey class includes functions to book space in a file,; to create I/O buffers, to fill these buffers,; to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must; be created. The key structure contains all the information to; uniquely identify a persistent object in a file.; fNbytes = Number of bytes for the compressed object+key; fObjlen = Length of uncompressed object; fDatime = Date/Time when the object was written; fKeylen = Number of bytes for the key structure; fCycle = Cycle number of the object; fSeekKey = Address of the object on file (points to fNbytes); This is a redundant information used to cross-check; the data base integrity.; fSeekPdir = Pointer to the directory supporting this object; fClassName = Object class name; fName = Name of the object; fTitle = Title of the object. In the 16 highest bits of fSeekPdir is encoded a pid offset. This; offset is to be added to the pid index stored in the TRef object; and the referenced TObject. The TKey class is used by ROOT to:; - to write an object in the current directory; - to write a new ntuple buffer. The structure of a file is shown in TFile::TFile.; The structure of a directory is shown in TDirectoryFile ctor.; The TKey class is used by the TBasket class.; See also TTree. Function Members (Methods); public:. TKey(); TKey(TDirectory* motherDir); TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TString& name, const TStrin",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:2978,Availability,Error,Error,2978,"& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); virtual~TKey(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*GetBufferRef() const; virtual const char*GetClassName() const; Short_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*T",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:3107,Availability,error,error,3107," const char* name, Int_t bufsize, TDirectory* motherDir = 0); virtual~TKey(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*GetBufferRef() const; virtual const char*GetClassName() const; Short_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetObjlen() const; virtual Option_t*",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:3191,Availability,error,error,3191,"bject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*GetBufferRef() const; virtual const char*GetClassName() const; Short_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetS",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:17191,Availability,error,error,17191," The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. void ReadBuffer(char*& buffer); Decode input buffer.; In some situation will add key to gDirectory ???. void ReadKeyBuffer(char*& buffer); Decode input buffer. Bool_t ReadFile(); Read the key structure from the file. void SetParent(const TObject* parent); Set parent in key buffer. void Reset(); Reset the key as it had not been 'filled' yet. Int_t Sizeof() const; Return the size in bytes of the key header structure.; Int_t nbytes = sizeof fNbytes; 4; += sizeof(Version_t); 2; += sizeof fObjlen; 4; += sizeof fKeylen; 2; += sizeof fCycle; 2; += sizeof fSeekKey; 4 or 8; += sizeof fSeekPdir; 4 or 8; = 22. void Streamer(TBuffer& ); Stream a class object. Int_t WriteFile(Int_t cycle = 1, TFile* f = 0); Write the encoded object supported by this key.; The function returns the number of bytes committed to the file.; If a write error occurs, the number of bytes returned is -1. Int_t WriteFileKeepBuffer(TFile* f = 0); Write the encoded object supported by this key.; The function returns the number of bytes committed to the file.; If a write error occurs, the number of bytes returned is -1. const char * GetIconName() const; Title can keep 32x32 xpm thumbnail/icon of the parent object. const char * GetTitle() const; Returns title (title can contain 32x32 xpm thumbnail/icon). TKey(const TKey& ). TKey& operator=(const TKey& ). Int_t Read(const char* name); { return TObject::Read(name); }. const char * GetClassName() const; {return fClassName.Data();}. char * GetBuffer() const; {return fBuffer+fKeylen;}. TBuffer * GetBufferRef() const; {return fBufferRef;}. const TDatime & GetDatime() const; {return fDatime;}. Int_t GetKeylen() const; {return fKeylen;}. TDirectory* GetMotherDir() const; { return fMotherDir; }. Int_t GetNbytes() const; {return fNbytes;}. Int_t GetObjlen() const; {return fObjlen;}. Int_t GetVersion() const; {return fV",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:17407,Availability,error,error,17407,"ituation will add key to gDirectory ???. void ReadKeyBuffer(char*& buffer); Decode input buffer. Bool_t ReadFile(); Read the key structure from the file. void SetParent(const TObject* parent); Set parent in key buffer. void Reset(); Reset the key as it had not been 'filled' yet. Int_t Sizeof() const; Return the size in bytes of the key header structure.; Int_t nbytes = sizeof fNbytes; 4; += sizeof(Version_t); 2; += sizeof fObjlen; 4; += sizeof fKeylen; 2; += sizeof fCycle; 2; += sizeof fSeekKey; 4 or 8; += sizeof fSeekPdir; 4 or 8; = 22. void Streamer(TBuffer& ); Stream a class object. Int_t WriteFile(Int_t cycle = 1, TFile* f = 0); Write the encoded object supported by this key.; The function returns the number of bytes committed to the file.; If a write error occurs, the number of bytes returned is -1. Int_t WriteFileKeepBuffer(TFile* f = 0); Write the encoded object supported by this key.; The function returns the number of bytes committed to the file.; If a write error occurs, the number of bytes returned is -1. const char * GetIconName() const; Title can keep 32x32 xpm thumbnail/icon of the parent object. const char * GetTitle() const; Returns title (title can contain 32x32 xpm thumbnail/icon). TKey(const TKey& ). TKey& operator=(const TKey& ). Int_t Read(const char* name); { return TObject::Read(name); }. const char * GetClassName() const; {return fClassName.Data();}. char * GetBuffer() const; {return fBuffer+fKeylen;}. TBuffer * GetBufferRef() const; {return fBufferRef;}. const TDatime & GetDatime() const; {return fDatime;}. Int_t GetKeylen() const; {return fKeylen;}. TDirectory* GetMotherDir() const; { return fMotherDir; }. Int_t GetNbytes() const; {return fNbytes;}. Int_t GetObjlen() const; {return fObjlen;}. Int_t GetVersion() const; {return fVersion;}. Long64_t GetSeekKey() const; {return fSeekKey;}. Long64_t GetSeekPdir() const; {return fSeekPdir;}. void SetBuffer(); { fBuffer = new char[fNbytes];}. void SetMotherDir(TDirectory* dir); { fMotherDir = dir;",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:11411,Energy Efficiency,allocate,allocated,11411,"ion parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, TFile* f = 0); Create a TKey object of specified size; if externFile!=0, key will be allocated in specified file,; otherwise file of mother directory will be used. ~TKey(); TKey default destructor. void Delete(Option_t* option = """"); Delete an object from the file.; Note: the key is not deleted. You still have to call ""delete key"".; This is different from the behaviour of TObject::Delete()!. void DeleteBuffer(); Delete key buffer(s). Short_t GetCycle() const; Return cycle number associated to this key. TFile * GetFile() const; Returns file to which key belong. Short_t GetKeep() const; Returns the ""KEEP"" status. void FillBuffer(char*& buffer); Encode key header into output buffer. ULong_t Hash() const; This Hash function should redefine the default from TNamed. void IncrementPidOffset(UShort_t offset); Increment fPidOffset by 'offset'.; This offset is used when a key (or basket) is transfered from one file to; the other. In this case the TRef and TObject might have stored a pid; index (to retrieve TProcessIDs) which refered to their order on the; origin",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:4542,Modifiability,Inherit,InheritsFrom,4542,"GetBufferRef() const; virtual const char*GetClassName() const; Short_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidIncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TO",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:4608,Modifiability,Inherit,InheritsFrom,4608,"rt_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidIncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::P",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:9025,Modifiability,Inherit,Inheritance,9025,"sUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. char*fBufferObject buffer; TBuffer*fBufferRefPointer to the TBuffer object; TStringfClassNameObject Class name; Short_tfCycleCycle number; TDatimefDatimeDate/Time of insertion in file; Short_tfKeylenNumber of bytes for the key itself; Int_tfLeftNumber of bytes left in current segment; TDirectory*fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tfNbytesNumber of bytes for the object on file; Int_tfObjlenLength of uncompressed object in bytes; UShort_tfPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tfSeekKeyLocation of object on file; Long64_tfSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tfVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); Copy a TKey from its original directory to the new 'motherDir'. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoi",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:9038,Modifiability,Inherit,Inherited,9038,"sUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. char*fBufferObject buffer; TBuffer*fBufferRefPointer to the TBuffer object; TStringfClassNameObject Class name; Short_tfCycleCycle number; TDatimefDatimeDate/Time of insertion in file; Short_tfKeylenNumber of bytes for the key itself; Int_tfLeftNumber of bytes left in current segment; TDirectory*fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tfNbytesNumber of bytes for the object on file; Int_tfObjlenLength of uncompressed object in bytes; UShort_tfPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tfSeekKeyLocation of object on file; Long64_tfSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tfVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); Copy a TKey from its original directory to the new 'motherDir'. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoi",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:13604,Modifiability,inherit,inheritance,13604,"o for new key/basket. Bool_t IsFolder() const; Check if object referenced by the key is a folder. void Keep(); Set the ""KEEP"" status.; When the KEEP flag is set to 1 the object cannot be purged. void ls(Option_t* option = """") const; List Key contents. void Print(Option_t* option = """") const; Print key contents. TObject * ReadObj(); To read a TObject* from the file. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass ",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:13981,Modifiability,inherit,inheritance,13981," The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. v",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:15411,Modifiability,inherit,inherits,15411,"object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. void * ReadObjectAny(const TClass* expectedClass); To read an object (non deriving from TObject) from the file. If expectedClass is not null, we checked that that actual class of; the object stored is suitable to be stored in a pointer pointing; to an object of class 'expectedClass'. We also adjust the value; of the returned address so that it is suitable to be cast (C-Style); a a pointer pointing to an object of class 'expectedClass'. So for example if the class Bottom inherits from Top and the object; stored is of type Bottom you can safely do:. TClass *TopClass = TClass::GetClass(""Top"");; Top *ptr = (Top*) key->ReadObjectAny( TopClass );; if (ptr==0) printError(""the object stored in the key is not of the expected type\n"");. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Int_t Read(TObject* obj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. void ReadBuffer(char*& buffer); Decode input buffer.; In some situatio",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:13863,Performance,perform,performance,13863," The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. v",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:897,Safety,redund,redundant,897,". TKey. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TKey. class TKey: public TNamed. The TKey class includes functions to book space in a file,; to create I/O buffers, to fill these buffers,; to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must; be created. The key structure contains all the information to; uniquely identify a persistent object in a file.; fNbytes = Number of bytes for the compressed object+key; fObjlen = Length of uncompressed object; fDatime = Date/Time when the object was written; fKeylen = Number of bytes for the key structure; fCycle = Cycle number of the object; fSeekKey = Address of the object on file (points to fNbytes); This is a redundant information used to cross-check; the data base integrity.; fSeekPdir = Pointer to the directory supporting this object; fClassName = Object class name; fName = Name of the object; fTitle = Title of the object. In the 16 highest bits of fSeekPdir is encoded a pid offset. This; offset is to be added to the pid index stored in the TRef object; and the referenced TObject. The TKey class is used by ROOT to:; - to write an object in the current directory; - to write a new ntuple buffer. The structure of a file is shown in TFile::TFile.; The structure of a directory is shown in TDirectoryFile ctor.; The TKey class is used by the TBasket class.; See also TTree. Function Members (Methods); public:. TKey(); TKey(TDirectory* motherDir); TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TString& name, const TStrin",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:9744,Safety,avoid,avoid,9744," pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tfSeekKeyLocation of object on file; Long64_tfSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tfVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); Copy a TKey from its original directory to the new 'motherDir'. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir,",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:10047,Safety,avoid,avoid,10047,"ncludes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); Copy a TKey from its original directory to the new 'motherDir'. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If obj",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:10315,Safety,avoid,avoid,10315,"(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, ",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:10617,Safety,avoid,avoid,10617,"irectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, TFile* f = 0); Create a TKey object of specified size; if externFile!=0, key will be allocated in specified file,; otherwise file of mother directory will be used. ~TKey(); TKey default destructor. void Delete(Option_t* option = """"); Delete an object from the file.; Note: the key is not deleted. You s",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:15478,Safety,safe,safely,15478,"object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. void * ReadObjectAny(const TClass* expectedClass); To read an object (non deriving from TObject) from the file. If expectedClass is not null, we checked that that actual class of; the object stored is suitable to be stored in a pointer pointing; to an object of class 'expectedClass'. We also adjust the value; of the returned address so that it is suitable to be cast (C-Style); a a pointer pointing to an object of class 'expectedClass'. So for example if the class Bottom inherits from Top and the object; stored is of type Bottom you can safely do:. TClass *TopClass = TClass::GetClass(""Top"");; Top *ptr = (Top*) key->ReadObjectAny( TopClass );; if (ptr==0) printError(""the object stored in the key is not of the expected type\n"");. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Int_t Read(TObject* obj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. void ReadBuffer(char*& buffer); Decode input buffer.; In some situatio",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:954,Security,integrity,integrity,954,". TKey. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TKey. class TKey: public TNamed. The TKey class includes functions to book space in a file,; to create I/O buffers, to fill these buffers,; to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must; be created. The key structure contains all the information to; uniquely identify a persistent object in a file.; fNbytes = Number of bytes for the compressed object+key; fObjlen = Length of uncompressed object; fDatime = Date/Time when the object was written; fKeylen = Number of bytes for the key structure; fCycle = Cycle number of the object; fSeekKey = Address of the object on file (points to fNbytes); This is a redundant information used to cross-check; the data base integrity.; fSeekPdir = Pointer to the directory supporting this object; fClassName = Object class name; fName = Name of the object; fTitle = Title of the object. In the 16 highest bits of fSeekPdir is encoded a pid offset. This; offset is to be added to the pid index stored in the TRef object; and the referenced TObject. The TKey class is used by ROOT to:; - to write an object in the current directory; - to write a new ntuple buffer. The structure of a file is shown in TFile::TFile.; The structure of a directory is shown in TDirectoryFile ctor.; The TKey class is used by the TBasket class.; See also TTree. Function Members (Methods); public:. TKey(); TKey(TDirectory* motherDir); TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TString& name, const TStrin",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:12023,Security,Hash,Hash,12023,"object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, TFile* f = 0); Create a TKey object of specified size; if externFile!=0, key will be allocated in specified file,; otherwise file of mother directory will be used. ~TKey(); TKey default destructor. void Delete(Option_t* option = """"); Delete an object from the file.; Note: the key is not deleted. You still have to call ""delete key"".; This is different from the behaviour of TObject::Delete()!. void DeleteBuffer(); Delete key buffer(s). Short_t GetCycle() const; Return cycle number associated to this key. TFile * GetFile() const; Returns file to which key belong. Short_t GetKeep() const; Returns the ""KEEP"" status. void FillBuffer(char*& buffer); Encode key header into output buffer. ULong_t Hash() const; This Hash function should redefine the default from TNamed. void IncrementPidOffset(UShort_t offset); Increment fPidOffset by 'offset'.; This offset is used when a key (or basket) is transfered from one file to; the other. In this case the TRef and TObject might have stored a pid; index (to retrieve TProcessIDs) which refered to their order on the; original file, the fPidOffset is to be added to those values to correctly; find the TProcessID. This fPidOffset needs to be increment if the; key/basket is copied and need to be zero for new key/basket. Bool_t IsFolder() const; Check if object referenced by the key is a folder. void Keep(); Set the ""KEEP"" status.; When the KEEP flag is set to 1 the object cannot be purged. void ls(Option_t* option = """") const; List Key contents. void Print(Option_t* option = """") const; Print key contents. TObject * ReadObj(); To read a TObject* from the file. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:12042,Security,Hash,Hash,12042,"object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, TFile* f = 0); Create a TKey object of specified size; if externFile!=0, key will be allocated in specified file,; otherwise file of mother directory will be used. ~TKey(); TKey default destructor. void Delete(Option_t* option = """"); Delete an object from the file.; Note: the key is not deleted. You still have to call ""delete key"".; This is different from the behaviour of TObject::Delete()!. void DeleteBuffer(); Delete key buffer(s). Short_t GetCycle() const; Return cycle number associated to this key. TFile * GetFile() const; Returns file to which key belong. Short_t GetKeep() const; Returns the ""KEEP"" status. void FillBuffer(char*& buffer); Encode key header into output buffer. ULong_t Hash() const; This Hash function should redefine the default from TNamed. void IncrementPidOffset(UShort_t offset); Increment fPidOffset by 'offset'.; This offset is used when a key (or basket) is transfered from one file to; the other. In this case the TRef and TObject might have stored a pid; index (to retrieve TProcessIDs) which refered to their order on the; original file, the fPidOffset is to be added to those values to correctly; find the TProcessID. This fPidOffset needs to be increment if the; key/basket is copied and need to be zero for new key/basket. Bool_t IsFolder() const; Check if object referenced by the key is a folder. void Keep(); Set the ""KEEP"" status.; When the KEEP flag is set to 1 the object cannot be purged. void ls(Option_t* option = """") const; List Key contents. void Print(Option_t* option = """") const; Print key contents. TObject * ReadObj(); To read a TObject* from the file. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:7058,Testability,Test,TestBit,7058," new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tRead(TObject* obj); virtual voidReadBuffer(char*& buffer); virtual Bool_tReadFile(); voidReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(const TObject* parent); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t cycle = 1, TFile* f = 0).",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:7097,Testability,Test,TestBits,7097," new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tRead(TObject* obj); virtual voidReadBuffer(char*& buffer); virtual Bool_tReadFile(); voidReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(const TObject* parent); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t cycle = 1, TFile* f = 0).",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:2421,Usability,Clear,Clear,2421," TKey(); TKey(TDirectory* motherDir); TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); TKey(const TString& name, const TStrin",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKey.html:13667,Usability,simpl,simplified,13667," object cannot be purged. void ls(Option_t* option = """") const; List Key contents. void Print(Option_t* option = """") const; Print key contents. TObject * ReadObj(); To read a TObject* from the file. The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only i",MatchSource.WIKI,root/html534/TKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKey.html
https://root.cern/root/html534/TKeyMapFile.html:1566,Availability,Error,Error,1566," TKeyMapFile(); TKeyMapFile(const char* name, const char* classname, TMapFile* mapfile); virtual~TKeyMapFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObje",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:1695,Availability,error,error,1695,"MapFile(const char* name, const char* classname, TMapFile* mapfile); virtual~TKeyMapFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:1779,Availability,error,error,1779,"File(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:2703,Modifiability,Inherit,InheritsFrom,2703,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:2769,Modifiability,Inherit,InheritsFrom,2769,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Pain",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:5913,Modifiability,Inherit,Inheritance,5913,"ENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKeyMapFile(const TKeyMapFile&); TKeyMapFile&operator=(const TKeyMapFile&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMapFile*fMapFilepointer to map file. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyMapFile(); Default constructor. TKeyMapFile(const char* name, const char* classname, TMapFile* mapfile); Constructor. void Browse(TBrowser* b); Browse the contained objects. TKeyMapFile(const TKeyMapFile& ). TKeyMapFile& operator=(const TKeyMapFile& ). virtual ~TKeyMapFile(); {;}. » Author: Rene Brun 23/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:5926,Modifiability,Inherit,Inherited,5926,"ENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKeyMapFile(const TKeyMapFile&); TKeyMapFile&operator=(const TKeyMapFile&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMapFile*fMapFilepointer to map file. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyMapFile(); Default constructor. TKeyMapFile(const char* name, const char* classname, TMapFile* mapfile); Constructor. void Browse(TBrowser* b); Browse the contained objects. TKeyMapFile(const TKeyMapFile& ). TKeyMapFile& operator=(const TKeyMapFile& ). virtual ~TKeyMapFile(); {;}. » Author: Rene Brun 23/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:2593,Security,Hash,Hash,2593,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:4903,Testability,Test,TestBit,4903,"ct::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:4942,Testability,Test,TestBits,4942,"ct::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeyMapFile.html:1023,Usability,Clear,Clear,1023," TKeyMapFile(); TKeyMapFile(const char* name, const char* classname, TMapFile* mapfile); virtual~TKeyMapFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObje",MatchSource.WIKI,root/html534/TKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyMapFile.html
https://root.cern/root/html534/TKeySQL.html:1648,Availability,Error,Error,1648,"onst char* title = 0); TKeySQL(TDirectory* mother, Long64_t keyid, Long64_t objid, const char* name, const char* title, const char* keydatetime, Int_t cycle, const char* classname); virtual~TKeySQL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Long64_tGetDBDirId() const; Long64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:1777,Availability,error,error,1777,"r* keydatetime, Int_t cycle, const char* classname); virtual~TKeySQL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Long64_tGetDBDirId() const; Long64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtua",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:1861,Availability,error,error,1861,":AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Long64_tGetDBDirId() const; Long64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetOb",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:9928,Availability,error,error,9928,"st char* classname); Create TKeySQL object, which correponds to single entry in keys table. ~TKeySQL(); TKeySQL destructor. Bool_t IsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Compares keydata with provided and return kTRUE if key was modified; Used in TFile::StreamKeysForDirectory() method to verify data for that keys; should be updated. void Delete(Option_t* option = """"); Removes key from current directory; Note: TKeySQL object is not deleted. You still have to call ""delete key"". Long64_t GetDBDirId() const; return sql id of parent directory. void StoreKeyObject(const void* obj, const TClass* cl); Stores object, associated with key, into data tables. Int_t Read(TObject* obj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); Read object derived from TObject class; If it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); Read object derived from TObject class; If it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type from SQL database. void* ReadKeyObject(void* obj, const TClass* expectedClass); Read object, associated with key, from database. TKeySQL(const TKeySQL& ). TKeySQL& operator=(const TKeySQL& ). Int_t Read(const char* name); { return TKey::Read(name); }. Long64_t GetDBKeyId() const; { return fKeyId; }. Long64_t GetDBObjId() const; { return fObjId; }. void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return GetDBObjId() > 0 ? GetDBObjId() : 0; }. Long64_t GetSeekPdir() const; { return GetDBDirId() > 0 ? GetDBDirId() : 0; }. void Keep(); {}. void ReadBuffer(char*& ); {}. Bool_t ReadFile(); { return kTRUE; }. void SetBuffer(); { fBuffer = 0; }. Int_t W",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:10066,Availability,error,error,10066,"ool_t IsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Compares keydata with provided and return kTRUE if key was modified; Used in TFile::StreamKeysForDirectory() method to verify data for that keys; should be updated. void Delete(Option_t* option = """"); Removes key from current directory; Note: TKeySQL object is not deleted. You still have to call ""delete key"". Long64_t GetDBDirId() const; return sql id of parent directory. void StoreKeyObject(const void* obj, const TClass* cl); Stores object, associated with key, into data tables. Int_t Read(TObject* obj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); Read object derived from TObject class; If it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); Read object derived from TObject class; If it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type from SQL database. void* ReadKeyObject(void* obj, const TClass* expectedClass); Read object, associated with key, from database. TKeySQL(const TKeySQL& ). TKeySQL& operator=(const TKeySQL& ). Int_t Read(const char* name); { return TKey::Read(name); }. Long64_t GetDBKeyId() const; { return fKeyId; }. Long64_t GetDBObjId() const; { return fObjId; }. void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return GetDBObjId() > 0 ? GetDBObjId() : 0; }. Long64_t GetSeekPdir() const; { return GetDBDirId() > 0 ? GetDBDirId() : 0; }. void Keep(); {}. void ReadBuffer(char*& ); {}. Bool_t ReadFile(); { return kTRUE; }. void SetBuffer(); { fBuffer = 0; }. Int_t WriteFile(Int_t = 1, TFile* = 0); { return 0; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fo",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:9292,Deployability,update,updated,9292,"64_tTKey::fSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeySQL(); default constructor. TKeySQL(TDirectory* mother, const TObject* obj, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, Long64_t keyid, Long64_t objid, const char* name, const char* title, const char* keydatetime, Int_t cycle, const char* classname); Create TKeySQL object, which correponds to single entry in keys table. ~TKeySQL(); TKeySQL destructor. Bool_t IsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Compares keydata with provided and return kTRUE if key was modified; Used in TFile::StreamKeysForDirectory() method to verify data for that keys; should be updated. void Delete(Option_t* option = """"); Removes key from current directory; Note: TKeySQL object is not deleted. You still have to call ""delete key"". Long64_t GetDBDirId() const; return sql id of parent directory. void StoreKeyObject(const void* obj, const TClass* cl); Stores object, associated with key, into data tables. Int_t Read(TObject* obj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); Read object derived from TObject class; If it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); Read object derived from TObject class; If it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:3379,Modifiability,Inherit,InheritsFrom,3379,"ong64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tIsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); v",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:3445,Modifiability,Inherit,InheritsFrom,3445,"ion_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tIsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(s",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:8304,Modifiability,Inherit,Inheritance,8304,"ected:. char*TKey::fBufferObject buffer; TBuffer*TKey::fBufferRefPointer to the TBuffer object; TStringTKey::fClassNameObject Class name; Short_tTKey::fCycleCycle number; TDatimeTKey::fDatimeDate/Time of insertion in file; Long64_tfKeyId! key identifier in KeysTables; Short_tTKey::fKeylenNumber of bytes for the key itself; Int_tTKey::fLeftNumber of bytes left in current segment; TDirectory*TKey::fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tTKey::fNbytesNumber of bytes for the object on file; Long64_tfObjId! stored object identifer; Int_tTKey::fObjlenLength of uncompressed object in bytes; UShort_tTKey::fPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tTKey::fSeekKeyLocation of object on file; Long64_tTKey::fSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeySQL(); default constructor. TKeySQL(TDirectory* mother, const TObject* obj, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, Long64_t keyid, Long64_t objid, const char* name, const char* title, const char* keydatetime, Int_t cycle, const char* classname); Create TKeySQL object, which correponds to single entry in keys table. ~TKeySQL(); TKeySQL destructor. Bool_t IsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Compares keydata with provided and return kTRUE if key was modified; Used in TFile::StreamKeysForDirectory() method to verify data for that keys; should be updated. void Delete(Option_t* option ",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:8317,Modifiability,Inherit,Inherited,8317,"ected:. char*TKey::fBufferObject buffer; TBuffer*TKey::fBufferRefPointer to the TBuffer object; TStringTKey::fClassNameObject Class name; Short_tTKey::fCycleCycle number; TDatimeTKey::fDatimeDate/Time of insertion in file; Long64_tfKeyId! key identifier in KeysTables; Short_tTKey::fKeylenNumber of bytes for the key itself; Int_tTKey::fLeftNumber of bytes left in current segment; TDirectory*TKey::fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tTKey::fNbytesNumber of bytes for the object on file; Long64_tfObjId! stored object identifer; Int_tTKey::fObjlenLength of uncompressed object in bytes; UShort_tTKey::fPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tTKey::fSeekKeyLocation of object on file; Long64_tTKey::fSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeySQL(); default constructor. TKeySQL(TDirectory* mother, const TObject* obj, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. TKeySQL(TDirectory* mother, Long64_t keyid, Long64_t objid, const char* name, const char* title, const char* keydatetime, Int_t cycle, const char* classname); Create TKeySQL object, which correponds to single entry in keys table. ~TKeySQL(); TKeySQL destructor. Bool_t IsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Compares keydata with provided and return kTRUE if key was modified; Used in TFile::StreamKeysForDirectory() method to verify data for that keys; should be updated. void Delete(Option_t* option ",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:3214,Security,Hash,Hash,3214,":GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Long64_tGetDBDirId() const; Long64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tIsKeyModified(const char* keyname, const char* keytitle, const char* keydatime, Int_t cycle, const char* classname); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); ",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:6053,Testability,Test,TestBit,6053," void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTKey::Print(Option_t* option = """") const; virtual Int_tRead(TObject* obj); virtual voidReadBuffer(char*&); virtual Bool_tReadFile(); voidTKey::ReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTKey::SetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTKey::SetParent(const TObject* parent); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTKey::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t = 1, TFile* = 0).",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:6092,Testability,Test,TestBits,6092," void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTKey::Print(Option_t* option = """") const; virtual Int_tRead(TObject* obj); virtual voidReadBuffer(char*&); virtual Bool_tReadFile(); voidTKey::ReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTKey::SetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTKey::SetParent(const TObject* parent); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTKey::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t = 1, TFile* = 0).",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeySQL.html:1091,Usability,Clear,Clear,1091," TKeySQL(TDirectory* mother, const TObject* obj, const char* name, const char* title = 0); TKeySQL(TDirectory* mother, const void* obj, const TClass* cl, const char* name, const char* title = 0); TKeySQL(TDirectory* mother, Long64_t keyid, Long64_t objid, const char* name, const char* title, const char* keydatetime, Int_t cycle, const char* classname); virtual~TKeySQL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* m",MatchSource.WIKI,root/html534/TKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeySQL.html
https://root.cern/root/html534/TKeyXML.html:1578,Availability,Error,Error,1578," TObject* obj, const char* name = 0, const char* title = 0); TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); virtual~TKeyXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual c",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:1707,Availability,error,error,1707,"Class* cl, const char* name, const char* title = 0); virtual~TKeyXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; s",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:1791,Availability,error,error,1791,":AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9755,Availability,error,error,9755,"es TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return fKeyNode ? 1024 : 0;}. Long64_t GetSeekPdir() const; virtual ULong_t Hash() const { return 0; }. { return fKeyNode ? 1024 : 0;}. void Keep(); virtual void ls(Option_t* ="""") const;; virtual void Print(Option_t* ="""") const {}. {}. Int_t Read(TObject* tobj). void ReadBuffer(char*& ); {}. Bool_t ReadFile(); { return kTRUE; }. ",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9903,Availability,error,error,9903,"ML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return fKeyNode ? 1024 : 0;}. Long64_t GetSeekPdir() const; virtual ULong_t Hash() const { return 0; }. { return fKeyNode ? 1024 : 0;}. void Keep(); virtual void ls(Option_t* ="""") const;; virtual void Print(Option_t* ="""") const {}. {}. Int_t Read(TObject* tobj). void ReadBuffer(char*& ); {}. Bool_t ReadFile(); { return kTRUE; }. void SetBuffer(); { fBuffer = 0; }. Int_t WriteFile(Int_t = 1, TFile* = 0); { return 0; }. XMLNodePointer_t KeyNode() const; TKeyXML sp",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9280,Deployability,Update,UpdateAttributes,9280,"rts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9300,Deployability,update,update,9300,"rts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9340,Deployability,Update,UpdateObject,9340," TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9368,Deployability,update,updates,9368," TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:9429,Deployability,update,update,9429," TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:3251,Modifiability,Inherit,InheritsFrom,3251,"ime&TKey::GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsSubdir() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); XMLNodePointer_tKeyNode() const; virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(s",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:3317,Modifiability,Inherit,InheritsFrom,3317,"on() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsSubdir() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); XMLNodePointer_tKeyNode() const; virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:8309,Modifiability,Inherit,Inheritance,8309,"uffer object; TStringTKey::fClassNameObject Class name; Short_tTKey::fCycleCycle number; TDatimeTKey::fDatimeDate/Time of insertion in file; Long64_tfKeyId! unique identifier of key for search methods; XMLNodePointer_tfKeyNode! node with stored object; Short_tTKey::fKeylenNumber of bytes for the key itself; Int_tTKey::fLeftNumber of bytes left in current segment; TDirectory*TKey::fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tTKey::fNbytesNumber of bytes for the object on file; Int_tTKey::fObjlenLength of uncompressed object in bytes; UShort_tTKey::fPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tTKey::fSeekKeyLocation of object on file; Long64_tTKey::fSeekPdirLocation of parent directory on file; Bool_tfSubdir! indicates that key contains subdirectory; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. ",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:8322,Modifiability,Inherit,Inherited,8322,"uffer object; TStringTKey::fClassNameObject Class name; Short_tTKey::fCycleCycle number; TDatimeTKey::fDatimeDate/Time of insertion in file; Long64_tfKeyId! unique identifier of key for search methods; XMLNodePointer_tfKeyNode! node with stored object; Short_tTKey::fKeylenNumber of bytes for the key itself; Int_tTKey::fLeftNumber of bytes left in current segment; TDirectory*TKey::fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tTKey::fNbytesNumber of bytes for the object on file; Int_tTKey::fObjlenLength of uncompressed object in bytes; UShort_tTKey::fPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tTKey::fSeekKeyLocation of object on file; Long64_tTKey::fSeekPdirLocation of parent directory on file; Bool_tfSubdir! indicates that key contains subdirectory; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKeyXML(); default constructor. TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); Creates TKeyXML and convert obj data to xml structures. TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); Creates TKeyXML and takes ownership over xml node, from which object can be restored. ~TKeyXML(); TKeyXML destructor. void Delete(Option_t* option = """"); Delete key from current directory; Note: TKeyXML object is not deleted. You still have to call ""delete key"". void StoreKeyAttributes(); Stores keys attributes in key node. void StoreObject(const void* obj, const TClass* cl); convert object to xml structure and keep this structure in key. void UpdateAttributes(); update key attributes in key node. ",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:3086,Security,Hash,Hash,3086," obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Long64_tGetKeyId() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTKey::GetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetSeekPdir() const; virtual const char*TKey::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTKey::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTKey::Hash() const; virtual voidTKey::IncrementPidOffset(UShort_t offset); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTKey::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsSubdir() const; Bool_tTObject::IsZombie() const; virtual voidKeep(); XMLNodePointer_tKeyNode() const; virtual voidTKey::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static v",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:10455,Security,Hash,Hash,10455,"de. void UpdateObject(TObject* obj); updates object, stored in the node; Used for TDirectory data update. Int_t Read(TObject* tobj); To read an object from the file.; The object associated to this key is read from the file into memory.; Before invoking this function, obj has been created via the; default constructor. TObject* ReadObj(); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. TObject* ReadObjWithBuffer(char* bufferRead); read object derived from TObject class, from key; if it is not TObject or in case of error, return 0. void* ReadObjectAny(const TClass* expectedClass); read object of any type. void* XmlReadAny(void* obj, const TClass* expectedClass); read object from key and cast to expected class. TXMLEngine* XMLEngine(); return pointer on TXMLEngine object, used for xml conversion. TKeyXML(const TKeyXML& ). TKeyXML& operator=(const TKeyXML& ). void DeleteBuffer(); {}. void FillBuffer(char*& ); {}. char * GetBuffer() const; { return 0; }. Long64_t GetSeekKey() const; { return fKeyNode ? 1024 : 0;}. Long64_t GetSeekPdir() const; virtual ULong_t Hash() const { return 0; }. { return fKeyNode ? 1024 : 0;}. void Keep(); virtual void ls(Option_t* ="""") const;; virtual void Print(Option_t* ="""") const {}. {}. Int_t Read(TObject* tobj). void ReadBuffer(char*& ); {}. Bool_t ReadFile(); { return kTRUE; }. void SetBuffer(); { fBuffer = 0; }. Int_t WriteFile(Int_t = 1, TFile* = 0); { return 0; }. XMLNodePointer_t KeyNode() const; TKeyXML specific methods. { return fKeyNode; }. Long64_t GetKeyId() const; { return fKeyId; }. Bool_t IsSubdir() const; { return fSubdir; }. void SetSubir(); { fSubdir = kTRUE; }. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:5876,Testability,Test,TestBit,5876,"or new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTKey::Print(Option_t* option = """") const; virtual Int_tRead(TObject* tobj); virtual voidReadBuffer(char*&); virtual Bool_tReadFile(); voidTKey::ReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTKey::SetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTKey::SetParent(const TObject* parent); voidSetSubir(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTKey::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdateAttributes(); voidUpdateObject(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t = 1, TFile* = 0).",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:5915,Testability,Test,TestBits,5915,"or new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTKey::Print(Option_t* option = """") const; virtual Int_tRead(TObject* tobj); virtual voidReadBuffer(char*&); virtual Bool_tReadFile(); voidTKey::ReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTKey::SetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTKey::SetParent(const TObject* parent); voidSetSubir(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTKey::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdateAttributes(); voidUpdateObject(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t = 1, TFile* = 0).",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKeyXML.html:1021,Usability,Clear,Clear,1021," TKeyXML(TDirectory* mother, Long64_t keyid, XMLNodePointer_t keynode); TKeyXML(TDirectory* mother, Long64_t keyid, const TObject* obj, const char* name = 0, const char* title = 0); TKeyXML(TDirectory* mother, Long64_t keyid, const void* obj, const TClass* cl, const char* name, const char* title = 0); virtual~TKeyXML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject:",MatchSource.WIKI,root/html534/TKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKeyXML.html
https://root.cern/root/html534/TKSocket.html:1338,Availability,Error,Error,1338,"KSocket&); virtual~TKSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBlockRead(char*& buf, TKSocket::EEncoding& type); Int_tBlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TKSocket*Connect(const char* server, Int_t port); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtua",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:1467,Availability,error,error,1467,"tion = """"); Int_tBlockRead(char*& buf, TKSocket::EEncoding& type); Int_tBlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TKSocket*Connect(const char* server, Int_t port); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:1551,Availability,error,error,1551,"onst char* buf, Int_t len, TKSocket::EEncoding type); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TKSocket*Connect(const char* server, Int_t port); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:6008,Availability,error,error,6008,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:2431,Modifiability,Inherit,InheritsFrom,2431,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:2497,Modifiability,Inherit,InheritsFrom,2497,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TKSocket&operator=(cons",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:5595,Modifiability,Inherit,Inheritance,5595,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:5608,Modifiability,Inherit,Inherited,5608,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:5490,Performance,cache,cache,5490,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:2321,Security,Hash,Hash,2321,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:5357,Security,authenticat,authentication,5357,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:4452,Testability,Test,TestBit,4452,"; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TKSocket&operator=(const TKSocket&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:4491,Testability,Test,TestBits,4491,"; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TKSocket&operator=(const TKSocket&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TKSocket.html:741,Usability,Clear,Clear,741," TKSocket(const TKSocket&); virtual~TKSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBlockRead(char*& buf, TKSocket::EEncoding& type); Int_tBlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TKSocket*Connect(const char* server, Int_t port); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName()",MatchSource.WIKI,root/html534/TKSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TKSocket.html
https://root.cern/root/html534/TLatex.html:4177,Availability,down,downarrow,4177,"q"") ; Tl.DrawText(x2, y, ""#leq"");; y -= step ; Tl.DrawLatex(x1, y, ""#approx"") ; Tl.DrawText(x2, y, ""#approx"");; y -= step ; Tl.DrawLatex(x1, y, ""#in"") ; Tl.DrawText(x2, y, ""#in"");; y -= step ; Tl.DrawLatex(x1, y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");. // Draw Second Column; y = 0.96; x1 = 0.22; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:4212,Availability,down,downarrow,4212,"tep ; Tl.DrawLatex(x1, y, ""#approx"") ; Tl.DrawText(x2, y, ""#approx"");; y -= step ; Tl.DrawLatex(x1, y, ""#in"") ; Tl.DrawText(x2, y, ""#in"");; y -= step ; Tl.DrawLatex(x1, y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");. // Draw Second Column; y = 0.96; x1 = 0.22; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#cup"") ; Tl.DrawText(x2, y, ""#cup"");; y -= ",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:4353,Availability,Down,Downarrow,4353,""");; y -= step ; Tl.DrawLatex(x1, y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");. // Draw Second Column; y = 0.96; x1 = 0.22; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#cup"") ; Tl.DrawText(x2, y, ""#cup"");; y -= step ; Tl.DrawLatex(x1, y, ""#copyright"") ; Tl.DrawText(x2, y, ""#copyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#void3"") ; Tl.DrawText(",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:4388,Availability,Down,Downarrow,4388," y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");. // Draw Second Column; y = 0.96; x1 = 0.22; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#cup"") ; Tl.DrawText(x2, y, ""#cup"");; y -= step ; Tl.DrawLatex(x1, y, ""#copyright"") ; Tl.DrawText(x2, y, ""#copyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#void3"") ; Tl.DrawText(x2, y, ""#void3"");; y -= step ; Tl.",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:7381,Availability,down,downleftarrow,7381,"DrawText(x2, y, ""#heart"");; y -= step ; Tl.DrawLatex(x1, y, ""#Jgothic"") ; Tl.DrawText(x2, y, ""#Jgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#LT"") ; Tl.DrawText(x2, y, ""#LT"");; y -= step ; Tl.DrawLatex(x1, y, ""#equiv"") ; Tl.DrawText(x2, y, ""#equiv"");; y -= step ; Tl.DrawLatex(x1, y, ""#subset"") ; Tl.DrawText(x2, y, ""#subset"");; y -= step ; Tl.DrawLatex(x1, y, ""#supseteq"") ; Tl.DrawText(x2, y, ""#supseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#wedge"") ; Tl.DrawText(x2, y, ""#wedge"");; y -= step ; Tl.DrawLatex(x1, y, ""#oright"") ; Tl.DrawText(x2, y, ""#oright"");; y -= step ; Tl.DrawLatex(x1, y, ""#AA"") ; Tl.DrawText(x2, y, ""#AA"");; y -= step ; Tl.DrawLatex(x1, y, ""#pm"") ; Tl.DrawText(x2, y, ""#pm"");; y -= step ; Tl.DrawLatex(x1, y, ""#mp"") ; Tl.DrawText(x2, y, ""#mp"");; y -= step ; Tl.DrawLatex(x1, y, ""#3dots"") ; Tl.DrawText(x2, y, ""#3dots"");. // Draw Fourth Column; y = 0.96; x1 = 0.62; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#nabla"") ; Tl.DrawText(x2, y, ""#nabla"");; y -= step ; Tl.DrawLatex(x1, y, ""#downleftarrow"") ; Tl.DrawText(x2, y, ""#downleftarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#topbar"") ; Tl.DrawText(x2, y, ""#topbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbar"") ; Tl.DrawText(x2, y, ""#arcbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#uparrow"") ; Tl.DrawText(x2, y, ""#uparrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#oplus"") ; Tl.DrawText(x2, y, ""#oplus"");; y -= step ; Tl.DrawLatex(x1, y, ""#Uparrow"") ; Tl.DrawText(x2, y, ""#Uparrow"");; y -= step ; Tl.DrawLatex(x1, y-0.01, ""#sum"") ; Tl.DrawText(x2, y, ""#sum"");; y -= step ; Tl.DrawLatex(x1, y, ""#perp"") ; Tl.DrawText(x2, y, ""#perp"");; y -= step ; Tl.DrawLatex(x1, y, ""#forall"") ; Tl.DrawText(x2, y, ""#forall"");; y -= step ; Tl.DrawLatex(x1, y, ""#spade"") ; Tl.DrawText(x2, y, ""#spade"");; y -= step ; Tl.DrawLatex(x1, y, ""#Rgothic"") ; Tl.DrawText(x2, y, ""#Rgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#GT"") ; Tl.DrawText(x2, y, ""#GT"");; y -= step ; Tl.DrawLatex(x1, y, ""#propto"") ; Tl.DrawText(x2, y, ""#propto"");; y -= step ; Tl.DrawLatex(x1, y,",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:7420,Availability,down,downleftarrow,7420,"awLatex(x1, y, ""#Jgothic"") ; Tl.DrawText(x2, y, ""#Jgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#LT"") ; Tl.DrawText(x2, y, ""#LT"");; y -= step ; Tl.DrawLatex(x1, y, ""#equiv"") ; Tl.DrawText(x2, y, ""#equiv"");; y -= step ; Tl.DrawLatex(x1, y, ""#subset"") ; Tl.DrawText(x2, y, ""#subset"");; y -= step ; Tl.DrawLatex(x1, y, ""#supseteq"") ; Tl.DrawText(x2, y, ""#supseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#wedge"") ; Tl.DrawText(x2, y, ""#wedge"");; y -= step ; Tl.DrawLatex(x1, y, ""#oright"") ; Tl.DrawText(x2, y, ""#oright"");; y -= step ; Tl.DrawLatex(x1, y, ""#AA"") ; Tl.DrawText(x2, y, ""#AA"");; y -= step ; Tl.DrawLatex(x1, y, ""#pm"") ; Tl.DrawText(x2, y, ""#pm"");; y -= step ; Tl.DrawLatex(x1, y, ""#mp"") ; Tl.DrawText(x2, y, ""#mp"");; y -= step ; Tl.DrawLatex(x1, y, ""#3dots"") ; Tl.DrawText(x2, y, ""#3dots"");. // Draw Fourth Column; y = 0.96; x1 = 0.62; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#nabla"") ; Tl.DrawText(x2, y, ""#nabla"");; y -= step ; Tl.DrawLatex(x1, y, ""#downleftarrow"") ; Tl.DrawText(x2, y, ""#downleftarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#topbar"") ; Tl.DrawText(x2, y, ""#topbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbar"") ; Tl.DrawText(x2, y, ""#arcbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#uparrow"") ; Tl.DrawText(x2, y, ""#uparrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#oplus"") ; Tl.DrawText(x2, y, ""#oplus"");; y -= step ; Tl.DrawLatex(x1, y, ""#Uparrow"") ; Tl.DrawText(x2, y, ""#Uparrow"");; y -= step ; Tl.DrawLatex(x1, y-0.01, ""#sum"") ; Tl.DrawText(x2, y, ""#sum"");; y -= step ; Tl.DrawLatex(x1, y, ""#perp"") ; Tl.DrawText(x2, y, ""#perp"");; y -= step ; Tl.DrawLatex(x1, y, ""#forall"") ; Tl.DrawText(x2, y, ""#forall"");; y -= step ; Tl.DrawLatex(x1, y, ""#spade"") ; Tl.DrawText(x2, y, ""#spade"");; y -= step ; Tl.DrawLatex(x1, y, ""#Rgothic"") ; Tl.DrawText(x2, y, ""#Rgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#GT"") ; Tl.DrawText(x2, y, ""#GT"");; y -= step ; Tl.DrawLatex(x1, y, ""#propto"") ; Tl.DrawText(x2, y, ""#propto"");; y -= step ; Tl.DrawLatex(x1, y, ""#notsubset"") ; Tl.DrawText(x2, y, ""#notsubse",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:15404,Availability,avail,available,15404,"au"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Upsilon : "") ; Tl.DrawLatex(x2, y, ""#Upsilon"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Phi : "") ; Tl.DrawLatex(x2, y, ""#Phi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Chi : "") ; Tl.DrawLatex(x2, y, ""#Chi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Psi : "") ; Tl.DrawLatex(x2, y, ""#Psi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Omega : "") ; Tl.DrawLatex(x2, y, ""#Omega"");. // Draw the variations; x1 = 0.73; x2 = x1+0.2;; y = 0.7500 ; Tl.DrawLatex(x1, y, ""varepsilon : "") ; Tl.DrawLatex(x2, y, ""#varepsilon"");; y = 0.6375 ; Tl.DrawLatex(x1, y, ""vartheta : "") ; Tl.DrawLatex(x2, y, ""#vartheta"");; y = 0.2625 ; Tl.DrawLatex(x1, y, ""varsigma : "") ; Tl.DrawLatex(x2, y, ""#varsigma"");; y = 0.1875 ; Tl.DrawLatex(x1, y, ""varUpsilon : "") ; Tl.DrawLatex(x2, y, ""#varUpsilon"");; y = 0.1500 ; Tl.DrawLatex(x1, y, ""varphi : "") ; Tl.DrawLatex(x2, y, ""#varphi"");; y = 0.0375 ; Tl.DrawLatex(x1, y, ""varomega : "") ; Tl.DrawLatex(x2, y, ""#varomega"");. return Gl;; }. Accents; Several kind of accents are available:. #hat = ; #check = ; #acute = ; #grave = ; #dot = ; #ddot = ; #tilde = . The special sign: #slash draws a slash on top of the text between brackets:. #slash{E}_{T} : . Bar and vectors sign are done the following way:. #bar{a}: ; #vec{a}: . Changing Style; One can change the font, the text color, or the text size at any time using :; #font[font-number]{...}, #color[color-number]{...}; and #scale[scale-factor]{...}; Examples:. #font[12]{Times Italic} and #font[22]{Times bold} : ; #color[2]{Red} and #color[4]{Blue} : ; #scale[1.2]{Bigger} and #scale[0.8]{Smaller} : . Alignment Rules; The TText alignment rules apply to the TLatex objects with one exception; concerning the vertical alignment:. if the vertical alignment = 1 , subscripts are not taken into account ; if the vertical alignment = 0 , the text is aligned to the box surrounding; the full text with sub and superscripts. This is illustrated by the following example:. Picture; Source. {; TCanvas Tlva(""Tlva"",""T",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:17752,Availability,down,down,17752,"awLatex(.2,.9,""K_{S}"");; latex.DrawLatex(.3,.9,""K^{*0}"");; latex.DrawLatex(.2,.8,longstring);. latex.SetTextAlign(12); //centered; latex.DrawLatex(.2,.6,""K_{S}"");; latex.DrawLatex(.3,.6,""K^{*0}"");; latex.DrawLatex(.2,.5,longstring);. latex.SetTextAlign(11); //default bottom alignment; latex.DrawLatex(.2,.4,""K_{S}"");; latex.DrawLatex(.3,.4,""K^{*0}"");; latex.DrawLatex(.2,.3,longstring);. latex.SetTextAlign(10); //special bottom alignment; latex.DrawLatex(.2,.2,""K_{S}"");; latex.DrawLatex(.3,.2,""K^{*0}"");; latex.DrawLatex(.2,.1,longstring);. latex.SetTextAlign(12);; latex.SetTextFont(72);; latex.DrawLatex(.1,.80,""13"");; latex.DrawLatex(.1,.55,""12"");; latex.DrawLatex(.1,.35,""11"");; latex.DrawLatex(.1,.18,""10"");; return Tlva;; }. Character Adjustement; The two commands #kern and #lower enable a better control; over character placement. The command #kern[(Float_t)dx]{text} moves; the output string horizontally by the fraction dx of its length.; Similarly, #lower[(Float_t)dy]{text} shifts the text up or down by; the fraction dy of its height.; Examples:. Positive k#kern[0.3]{e}#kern[0.3]{r}#kern[0.3]{n}#kern[0.3]{i}#kern[0.3]{n}#kern[0.3]{g}:. Negative k#kern[-0.3]{e}#kern[-0.3]{r}#kern[-0.3]{n}#kern[-0.3]{i}#kern[-0.3]{n}#kern[-0.3]{g}:. Vertical a#lower[0.2]{d}#lower[0.4]{j}#lower[0.1]{u}#lower[-0.1]{s}#lower[-0.3]{t}#lower[-0.4]{m}#lower[-0.2]{e}#lower[0.1]{n}t:. Italic and Boldface; Text can be turned italic or boldface using the commands; #it and #bf.; Examples:. #bf{bold}, #it{italic}, #bf{#it{bold italic}}, #bf{#bf{unbold}}}:. abc#alpha#beta#gamma, #it{abc#alpha#beta#gamma}:. Examples. Picture; Source. {; TCanvas ex1(""ex1"",""Latex"",500,600);; TLatex Tl;; Tl.SetTextAlign(12);; Tl.SetTextSize(0.04);; Tl.DrawLatex(0.1,0.8,""1) C(x) = d #sqrt{#frac{2}{#lambdaD}} #int^{x}_{0}cos(#frac{#pi}{2}t^{2})dt"");; Tl.DrawLatex(0.1,0.6,""2) C(x) = d #sqrt{#frac{2}{#lambdaD}} #int^{x}cos(#frac{#pi}{2}t^{2})dt"");; Tl.DrawLatex(0.1,0.4,""3) R = |A|^{2} = #frac{1}{2}(#[]{#frac{1}{2}+C(V)}^{",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:21756,Availability,Error,Error,21756,"r* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& text) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTText::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; TLatex*DrawLatex(Double_t x, Double_t y, const char* text); TLatex*DrawLatexNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTText::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTText::GetBBox(); virtual TPointTText::GetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidTText::GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetHeight() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:21885,Availability,error,error,21885,"idTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTText::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; TLatex*DrawLatex(Double_t x, Double_t y, const char* text); TLatex*DrawLatexNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTText::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTText::GetBBox(); virtual TPointTText::GetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidTText::GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetHeight() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtu",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:21969,Availability,error,error,21969,"x, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTText::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; TLatex*DrawLatex(Double_t x, Double_t y, const char* text); TLatex*DrawLatexNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTText::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTText::GetBBox(); virtual TPointTText::GetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidTText::GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetHeight() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetO",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:30323,Availability,error,error,30323,"tex1(Double_t x, Double_t y, Double_t angle, Double_t size, const char* text); TLatexFormSizeReadfs(); voidSavefs(TLatexFormSize* fs). Data Members; public:. enum { kTextNDC; };; enum TText::[unnamed] { kTextNDC; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. const Char_t*fError!error code; Double_tfFactorPos!Relative position of subscripts and superscripts; Double_tfFactorSize!Relative size of subscripts and superscripts; Bool_tfItalic!Currently inside #it operator; Int_tfLimitFactorSizelower bound for subscripts/superscripts size; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Double_tfOriginSizeFont size of the starting font; Int_tfPos!Current position in array fTabSize;; Bool_tfShow!is true during the second pass (Painting); Int_tfTabMax!Maximum allocation for array fTabSize;; FormSize_t*fTabSize!array of values for the different zones; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; void*TText::fWcsTitle!Used by TMathText; Double_tTText::fXX position of text (left,center,etc..); Double_tTText::fYY position of text (left,center,etc..). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLatex(); Default constructor. TLatex(Double_t x, Double_t y, const char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpe",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:32460,Availability,down,down,32460,"nst char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char_t* t, Int_t length); Analyse function. TLatexFormSize Analyse(Double_t x, Double_t y, TextSpec_t spec, const Char_t* t, Int_t length); Analyse and paint the TLatex formula. It is called twice : first for calculating the size of; each portion of the formula, then to paint the formula.; When analyse finds an operator or separator, it calls; itself recursively to analyse the arguments of the operator.; when the argument is an atom (normal text), it calculates; the size of it and return it as the result.; for example : if the operator #frac{arg1}{arg2} is found :; Analyse(arg1) return the size of arg1 (width, up, down); Analyse(arg2) return the size of arg2; now, we know the size of #frac{arg1}{arg2} :; width = max(width_arg1, width_arg2); up = up_arg1 + down_arg1; down = up_arg2 + down_arg2; so, when the user wants to paint a fraction at position (x,y),; the rect used for the formula is : (x,y-up,x+width,y+down). return size of zone occupied by the text/formula; t : chain to be analyzed; length : number of chars in t. TLatex * DrawLatex(Double_t x, Double_t y, const char* text); Make a copy of this object with the new parameters; And copy object attributes. TLatex * DrawLatexNDC(Double_t x, Double_t y, const char* text); Draw this TLatex with new coordinates in NDC. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TextSpec_t spec); Draw a line in a Latex formula. void DrawCircle(Double_t x1, Double_t y1, Double_t r, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (right or left parenthesis). void DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (rig",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:32615,Availability,down,down,32615,"nst char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char_t* t, Int_t length); Analyse function. TLatexFormSize Analyse(Double_t x, Double_t y, TextSpec_t spec, const Char_t* t, Int_t length); Analyse and paint the TLatex formula. It is called twice : first for calculating the size of; each portion of the formula, then to paint the formula.; When analyse finds an operator or separator, it calls; itself recursively to analyse the arguments of the operator.; when the argument is an atom (normal text), it calculates; the size of it and return it as the result.; for example : if the operator #frac{arg1}{arg2} is found :; Analyse(arg1) return the size of arg1 (width, up, down); Analyse(arg2) return the size of arg2; now, we know the size of #frac{arg1}{arg2} :; width = max(width_arg1, width_arg2); up = up_arg1 + down_arg1; down = up_arg2 + down_arg2; so, when the user wants to paint a fraction at position (x,y),; the rect used for the formula is : (x,y-up,x+width,y+down). return size of zone occupied by the text/formula; t : chain to be analyzed; length : number of chars in t. TLatex * DrawLatex(Double_t x, Double_t y, const char* text); Make a copy of this object with the new parameters; And copy object attributes. TLatex * DrawLatexNDC(Double_t x, Double_t y, const char* text); Draw this TLatex with new coordinates in NDC. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TextSpec_t spec); Draw a line in a Latex formula. void DrawCircle(Double_t x1, Double_t y1, Double_t r, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (right or left parenthesis). void DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (rig",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:32760,Availability,down,down,32760,"nst char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char_t* t, Int_t length); Analyse function. TLatexFormSize Analyse(Double_t x, Double_t y, TextSpec_t spec, const Char_t* t, Int_t length); Analyse and paint the TLatex formula. It is called twice : first for calculating the size of; each portion of the formula, then to paint the formula.; When analyse finds an operator or separator, it calls; itself recursively to analyse the arguments of the operator.; when the argument is an atom (normal text), it calculates; the size of it and return it as the result.; for example : if the operator #frac{arg1}{arg2} is found :; Analyse(arg1) return the size of arg1 (width, up, down); Analyse(arg2) return the size of arg2; now, we know the size of #frac{arg1}{arg2} :; width = max(width_arg1, width_arg2); up = up_arg1 + down_arg1; down = up_arg2 + down_arg2; so, when the user wants to paint a fraction at position (x,y),; the rect used for the formula is : (x,y-up,x+width,y+down). return size of zone occupied by the text/formula; t : chain to be analyzed; length : number of chars in t. TLatex * DrawLatex(Double_t x, Double_t y, const char* text); Make a copy of this object with the new parameters; And copy object attributes. TLatex * DrawLatexNDC(Double_t x, Double_t y, const char* text); Draw this TLatex with new coordinates in NDC. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TextSpec_t spec); Draw a line in a Latex formula. void DrawCircle(Double_t x1, Double_t y1, Double_t r, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (right or left parenthesis). void DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, TextSpec_t spec); Draw an arc of ellipse in a Latex formula (rig",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:676,Integrability,Interface,Interface,676,". TLatex. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TLatex. class TLatex: public TText, public TAttLine. TLatex : to draw Mathematical Formula; TLatex's purpose is to write mathematical equations.; The syntax is very similar to Latex's.; It provides several functionalities:. Subscripts and Superscripts; Fractions; Splitting Lines; Roots; Mathematical Symbols; Delimiters; Greek Letters; Accents; Changing Style; Alignment Rules; Character Adjustement; Italic and Boldface; Examples; Interface to TMathText. When the font precision (see TAttText) is low (0 or 1), TLatex is; painted as a normal TText, the control characters are not interpreted.; Subscripts and Superscripts; Subscripts and superscripts are made with the _ and ^; commands. These commands can be combined to make complicated subscript and; superscript expressions. You may adjust the display of subscripts and; superscripts by using the two functions SetIndiceSize(Double_t),; which set relative size of subscripts and superscripts, and; SetLimitIndiceSize(Int_t), which set limits for text resizing of; subscipts and superscripts.; Examples:. x^{2y} : x_{2y} : ; x^{y^{2}} : x^{y_{1}} : ; x^{y}_{1} : x_{1}^{y} : . The best way to put the subscipts and superscripts before the character and not; after, is to use an empty character:. {}^{40}_{20}Ca : . The subscripts and superscripts operators apply not only on one character but; on all the ""normal text"" preceding them. In the following example the second; E is lower than the first one because the operator _ is; applied on /f which has a descending part, and not only on f; which as no descending part. f_{E}/f_{E} : . To make sure the second operator _ applies only on f; a dummy operator ^{} should be introduced to separate the f; from the /. f_{E}/^{}f_{E} : . Fractions; Fractions ",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:19928,Integrability,Interface,Interface,19928,"; Tl.SetTextSize(0.08);; Tl.DrawLatex(0.5,0.95,""e^{+}e^{-}#rightarrowZ^{0}#rightarrowI#bar{I}, q#bar{q}"");; Tl.DrawLatex(0.5,0.75,""|#vec{a}#bullet#vec{b}|=#Sigmaa^{i}_{jk}+b^{bj}_{i}"");; Tl.DrawLatex(0.5,0.5,""i(#partial_{#mu}#bar{#psi}#gamma^{#mu}+m#bar{#psi}=0#Leftrightarrow(#Box+m^{2})#psi=0"");; Tl.DrawLatex(0.5,0.3,""L_{em}=eJ^{#mu}_{em}A_{#mu} , J^{#mu}_{em}=#bar{I}#gamma_{#mu}I , M^{j}_{i}=#SigmaA_{#alpha}#tau^{#alphaj}_{i}"");; return ex2;; }. Picture; Source. {; TCanvas ex3(""ex3"",""Latex"",500,300);; TPaveText pt(.1,.1,.9,.9);; pt.AddText(""#frac{2s}{#pi#alpha^{2}} #frac{d#sigma}{dcos#theta} (e^{+}e^{-} #rightarrow f#bar{f} ) = "");; pt.AddText(""#left| #frac{1}{1 - #Delta#alpha} #right|^{2} (1+cos^{2}#theta"");; pt.AddText(""+ 4 Re #left{ #frac{2}{1 - #Delta#alpha} #chi(s) #[]{#hat{g}_{#nu}^{e}#hat{g}_{#nu}^{f} (1 + cos^{2}#theta) + 2 #hat{g}_{a}^{e}#hat{g}_{a}^{f} cos#theta) } #right}"");; pt.SetLabel(""Born equation"");; pt.Draw();; return ex3;; }. Interface to TMathText; The class TMathText is a TeX math formulae interpreter. It uses plain; TeX syntax and uses ""\"" as control instead of ""#"". If a piece of text containing; ""\"" is given to TLatex then TMathText is automatically invoked.; Therefore, as histograms' titles, axis titles, labels etc ... are drawn using; TLatex, the TMathText syntax can be used for them also. Function Members (Methods); public:. TLatex(); TLatex(const TLatex& text); TLatex(Double_t x, Double_t y, const char* text); virtual~TLatex(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& text) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(In",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:24109,Modifiability,Inherit,InheritsFrom,24109,"RUE) const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const char* text) const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const wchar_t* text) const; virtual Color_tTAttText::GetTextColor() const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const char* text) const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const wchar_t* text) const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const void*TText::GetWcsTitle() const; Double_tTText::GetX() const; Double_tGetXsize(); Double_tTText::GetY() const; Double_tGetYsize(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTText::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operat",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:24175,Modifiability,Inherit,InheritsFrom,24175," Float_tTAttText::GetTextAngle() const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const char* text) const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const wchar_t* text) const; virtual Color_tTAttText::GetTextColor() const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const char* text) const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const wchar_t* text) const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const void*TText::GetWcsTitle() const; Double_tTText::GetX() const; Double_tGetXsize(); Double_tTText::GetY() const; Double_tGetYsize(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTText::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void*",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:31416,Modifiability,Inherit,Inheritance,31416,"subscripts and superscripts; Bool_tfItalic!Currently inside #it operator; Int_tfLimitFactorSizelower bound for subscripts/superscripts size; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Double_tfOriginSizeFont size of the starting font; Int_tfPos!Current position in array fTabSize;; Bool_tfShow!is true during the second pass (Painting); Int_tfTabMax!Maximum allocation for array fTabSize;; FormSize_t*fTabSize!array of values for the different zones; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; void*TText::fWcsTitle!Used by TMathText; Double_tTText::fXX position of text (left,center,etc..); Double_tTText::fYY position of text (left,center,etc..). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLatex(); Default constructor. TLatex(Double_t x, Double_t y, const char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char_t* t, Int_t length); Analyse function. TLatexFormSize Analyse(Double_t x, Double_t y, TextSpec_t spec, const Char_t* t, Int_t length); Analyse and paint the TLatex formula. It is called twice : first for calculating the size of; each portion of the formula, then to paint the formula.; When analyse finds an operator or separator, it calls; itself recursively to analyse the arguments of the operator.; when the argument is an atom (normal text), it calculates; the size of it and return it as the result.; for example : if the operator #frac{arg1}{arg2} is found :; Analyse(arg1) return the size of",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:31429,Modifiability,Inherit,Inherited,31429,"subscripts and superscripts; Bool_tfItalic!Currently inside #it operator; Int_tfLimitFactorSizelower bound for subscripts/superscripts size; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Double_tfOriginSizeFont size of the starting font; Int_tfPos!Current position in array fTabSize;; Bool_tfShow!is true during the second pass (Painting); Int_tfTabMax!Maximum allocation for array fTabSize;; FormSize_t*fTabSize!array of values for the different zones; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; void*TText::fWcsTitle!Used by TMathText; Double_tTText::fXX position of text (left,center,etc..); Double_tTText::fYY position of text (left,center,etc..). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLatex(); Default constructor. TLatex(Double_t x, Double_t y, const char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char_t* t, Int_t length); Analyse function. TLatexFormSize Analyse(Double_t x, Double_t y, TextSpec_t spec, const Char_t* t, Int_t length); Analyse and paint the TLatex formula. It is called twice : first for calculating the size of; each portion of the formula, then to paint the formula.; When analyse finds an operator or separator, it calls; itself recursively to analyse the arguments of the operator.; when the argument is an atom (normal text), it calculates; the size of it and return it as the result.; for example : if the operator #frac{arg1}{arg2} is found :; Analyse(arg1) return the size of",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:23999,Security,Hash,Hash,23999,"*TObject::GetOption() const; virtual voidTText::GetTextAdvance(UInt_t& a, const char* text, const Bool_t kern = kTRUE) const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const char* text) const; virtual voidTText::GetTextAscentDescent(UInt_t& a, UInt_t& d, const wchar_t* text) const; virtual Color_tTAttText::GetTextColor() const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const char* text) const; virtual voidTText::GetTextExtent(UInt_t& w, UInt_t& h, const wchar_t* text) const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const void*TText::GetWcsTitle() const; Double_tTText::GetX() const; Double_tGetXsize(); Double_tTText::GetY() const; Double_tGetYsize(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTText::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void*",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:28719,Testability,Test,TestBit,28719,"limitFactorSize); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTText::SetMbTitle(const wchar_t* title = L"""")MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTText::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTText::SetText(Double_t x, Double_t y, const char* text)MENU ; virtual voidTText::SetText(Double_t x, Double_t y, const wchar_t* text); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTText::SetX(Double_t x)MENU ; virtual voidTText::SetY(Double_t y)MENU ; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:28758,Testability,Test,TestBits,28758,"limitFactorSize); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTText::SetMbTitle(const wchar_t* title = L"""")MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTText::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTText::SetText(Double_t x, Double_t y, const char* text)MENU ; virtual voidTText::SetText(Double_t x, Double_t y, const wchar_t* text); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTText::SetX(Double_t x)MENU ; virtual voidTText::SetY(Double_t y)MENU ; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLatex.html:20690,Usability,Clear,Clear,20690,,MatchSource.WIKI,root/html534/TLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLatex.html
https://root.cern/root/html534/TLeaf.html:1258,Availability,Error,Error,1258," TLeaf(); TLeaf(TBranch* parent, const char* name, const char* type); virtual~TLeaf(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const ",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:1387,Availability,error,error,1387," TLeaf(); TLeaf(TBranch* parent, const char* name, const char* type); virtual~TLeaf(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const ",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:1471,Availability,error,error,1471,"Leaf(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*GetLeafCount() const; virtual TLeaf*GetLeafCounter(Int_t& countval) const; virtual Int_tGetLen() const; virtual Int_tGetLenStatic() const; virtual Int_tGetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual I",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:8763,Integrability,rout,routine,8763,"ent of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the pointer to; the leaf named nelem, otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non-negative integer, then; return countval = nelem and a null pointer.; If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]; where nelem and nelem2 are non-negative integers) then; return countval = product of all dimension sizes and a null pointer.; If leaf name has the form var[... (and does not match the previous 2; cases) return countval = -1 and null pointer;; Otherwise return countval = 1 and a null pointer. Int_t GetLen() const; -- Return the number of effective elements of this leaf. Int_t ResetAddress(void* add, Bool_t destructor = kFALSE); -- Helper routine for TLeafX::SetAddress. The return value is non-zero if we owned the old; value buffer and must delete it now. The size; of the value buffer is recalculated and stored,; and a decision is made whether or not we own the; new value buffer. void SetLeafCount(TLeaf* leaf); -- Set the leaf count of this leaf. void Streamer(TBuffer& ); -- Stream a class object. Double_t GetValue(Int_t i = 0) const; { return 0.0; }. void PrintValue(Int_t i = 0) const; {}. void SetAddress(void* add = 0); {}. void Export(TClonesArray* , Int_t ); {}. TBranch * GetBranch() const; { return fBranch; }. TLeaf * GetLeafCount() const; { return fLeafCount; }. Int_t GetLenStatic() const; { return fLen; }. Int_t GetLenType() const; { return fLenType; }. Int_t GetMaximum() const; { return 0; }. Int_t GetMinimum() const; { return 0; }. Int_t GetNdata() const; { return fNdata; }. Int_t GetOffset() const; { return fOffset; }. void * GetValuePointer() const; { return 0; }. const char * GetTypeName()",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:3090,Modifiability,Inherit,InheritsFrom,3090,"nter(Int_t& countval) const; virtual Int_tGetLen() const; virtual Int_tGetLenStatic() const; virtual Int_tGetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tGetValueLong64(Int_t i = 0) const; virtual LongDouble_tGetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray*, Int_t); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnTerminalBranch() const; virtual Bool_tIsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:3156,Modifiability,Inherit,InheritsFrom,3156,"Int_tGetLenStatic() const; virtual Int_tGetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tGetValueLong64(Int_t i = 0) const; virtual LongDouble_tGetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray*, Int_t); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnTerminalBranch() const; virtual Bool_tIsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObje",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:7020,Modifiability,variab,variable,7020,"onst char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TLeaf(const TLeaf&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TLeaf&operator=(const TLeaf&). Data Members; public:. enum { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*fBranch! Pointer to supporting branch (we do not own the branch); Bool_tfIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tfIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tfLenNumber of fixed length elements; Int_tfLenTypeNumber of bytes for this data type; TStringTNamed::fNameobject identifier; Int_tfNdata! Number of elements in fAddress data buffer; Int_tfOffsetOffset in ClonesArray object (if one); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeaf(). TLeaf(TBranch* parent, const char* name, const char* type); Create a Leaf. See the TTree and TBranch constructors for explanation of parameters. TLeaf(const TLeaf& ); copy constructor. TLeaf& operator=(const TLeaf& ); assignment operator. ~TLeaf(); -- Destructor. void Browse(TBrowser* b); Browse the content of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the poi",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:7352,Modifiability,Inherit,Inheritance,7352,"mt, va_list va) const; voidTObject::MakeZombie(); TLeaf&operator=(const TLeaf&). Data Members; public:. enum { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*fBranch! Pointer to supporting branch (we do not own the branch); Bool_tfIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tfIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tfLenNumber of fixed length elements; Int_tfLenTypeNumber of bytes for this data type; TStringTNamed::fNameobject identifier; Int_tfNdata! Number of elements in fAddress data buffer; Int_tfOffsetOffset in ClonesArray object (if one); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeaf(). TLeaf(TBranch* parent, const char* name, const char* type); Create a Leaf. See the TTree and TBranch constructors for explanation of parameters. TLeaf(const TLeaf& ); copy constructor. TLeaf& operator=(const TLeaf& ); assignment operator. ~TLeaf(); -- Destructor. void Browse(TBrowser* b); Browse the content of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the pointer to; the leaf named nelem, otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non-negative integer, then; return countval = nelem and a null pointer.; If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]; where nelem and nelem2 are non-negative integers) then; ",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:7365,Modifiability,Inherit,Inherited,7365,"mt, va_list va) const; voidTObject::MakeZombie(); TLeaf&operator=(const TLeaf&). Data Members; public:. enum { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*fBranch! Pointer to supporting branch (we do not own the branch); Bool_tfIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tfIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tfLenNumber of fixed length elements; Int_tfLenTypeNumber of bytes for this data type; TStringTNamed::fNameobject identifier; Int_tfNdata! Number of elements in fAddress data buffer; Int_tfOffsetOffset in ClonesArray object (if one); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeaf(). TLeaf(TBranch* parent, const char* name, const char* type); Create a Leaf. See the TTree and TBranch constructors for explanation of parameters. TLeaf(const TLeaf& ); copy constructor. TLeaf& operator=(const TLeaf& ); assignment operator. ~TLeaf(); -- Destructor. void Browse(TBrowser* b); Browse the content of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the pointer to; the leaf named nelem, otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non-negative integer, then; return countval = nelem and a null pointer.; If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]; where nelem and nelem2 are non-negative integers) then; ",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:2938,Security,Hash,Hash,2938,"() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*GetLeafCount() const; virtual TLeaf*GetLeafCounter(Int_t& countval) const; virtual Int_tGetLen() const; virtual Int_tGetLenStatic() const; virtual Int_tGetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tGetValueLong64(Int_t i = 0) const; virtual LongDouble_tGetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray*, Int_t); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnTerminalBranch() const; virtual Bool_tIsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* pt",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:5906,Testability,Test,TestBit,5906,"aint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer&); virtual voidReadBasketExport(TBuffer&, TClonesArray*, Int_t); virtual voidReadValue(istream&, Char_t = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLeafCount(TLeaf* leaf); virtual voidSetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset = 0); virtual voidSetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:5945,Testability,Test,TestBits,5945,"aint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer&); virtual voidReadBasketExport(TBuffer&, TClonesArray*, Int_t); virtual voidReadValue(istream&, Char_t = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLeafCount(TLeaf* leaf); virtual voidSetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset = 0); virtual voidSetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeaf.html:715,Usability,Clear,Clear,715," TLeaf(); TLeaf(TBranch* parent, const char* name, const char* type); virtual~TLeaf(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const ",MatchSource.WIKI,root/html534/TLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeaf.html
https://root.cern/root/html534/TLeafB.html:1249,Availability,Error,Error,1249," TLeafB(); TLeafB(const TLeafB&); TLeafB(TBranch* parent, const char* name, const char* type); virtual~TLeafB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual c",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:1378,Availability,error,error,1378,"fB&); TLeafB(TBranch* parent, const char* name, const char* type); virtual~TLeafB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual I",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:1462,Availability,error,error,1462," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:3165,Modifiability,Inherit,InheritsFrom,3165,") const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObjec",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:3231,Modifiability,Inherit,InheritsFrom,3231,"eaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, ",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:7284,Modifiability,variab,variable,7284,"t::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TLeaf&TLeaf::operator=(const TLeaf&). Data Members; public:. enum TLeaf::[unnamed] { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Char_tfMaximumMaximum value if leaf range is specified; Char_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of a pointer to data buffer!; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafB(); -- Default constructor. TLeafB(TBranch* parent, const char* name, const char* type); -- Create a LeafB. ~TLeafB(); -- Destructor. void Export(TClonesArray* list, Int_t n); -- Export element from local leaf buffer to a ClonesArray. void FillBasket(TBuffer& b); -- Pack leaf elements into Basket output buffer. const char * GetTypeName() const; -- Returns name of leaf type. void Import(TClonesArray* list, Int_t n); -- Import element from ClonesArray into local leaf buffer. void PrintValue(In",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:7849,Modifiability,Inherit,Inheritance,7849,"enu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Char_tfMaximumMaximum value if leaf range is specified; Char_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of a pointer to data buffer!; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafB(); -- Default constructor. TLeafB(TBranch* parent, const char* name, const char* type); -- Create a LeafB. ~TLeafB(); -- Destructor. void Export(TClonesArray* list, Int_t n); -- Export element from local leaf buffer to a ClonesArray. void FillBasket(TBuffer& b); -- Pack leaf elements into Basket output buffer. const char * GetTypeName() const; -- Returns name of leaf type. void Import(TClonesArray* list, Int_t n); -- Import element from ClonesArray into local leaf buffer. void PrintValue(Int_t i = 0) const; -- Prints leaf value. void ReadBasket(TBuffer& ); -- Read leaf elements from Basket input buffer. void ReadBasketExport(TBuffer& , TClonesArray* list, Int_t n); -- Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); -- Read a 8 bit integer from istream s and store it into the branch buffer. void SetAddress(void* addr = 0); -- Set value buffer a",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:7862,Modifiability,Inherit,Inherited,7862,"enu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Char_tfMaximumMaximum value if leaf range is specified; Char_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of a pointer to data buffer!; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafB(); -- Default constructor. TLeafB(TBranch* parent, const char* name, const char* type); -- Create a LeafB. ~TLeafB(); -- Destructor. void Export(TClonesArray* list, Int_t n); -- Export element from local leaf buffer to a ClonesArray. void FillBasket(TBuffer& b); -- Pack leaf elements into Basket output buffer. const char * GetTypeName() const; -- Returns name of leaf type. void Import(TClonesArray* list, Int_t n); -- Import element from ClonesArray into local leaf buffer. void PrintValue(Int_t i = 0) const; -- Prints leaf value. void ReadBasket(TBuffer& ); -- Read leaf elements from Basket input buffer. void ReadBasketExport(TBuffer& , TClonesArray* list, Int_t n); -- Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); -- Read a 8 bit integer from istream s and store it into the branch buffer. void SetAddress(void* addr = 0); -- Set value buffer a",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:3006,Security,Hash,Hash,3006,"ar*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObje",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:6139,Testability,Test,TestBit,6139,"nt_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer&); virtual voidReadBasketExport(TBuffer&, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* addr = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Char_t max); virtual voidSetMinimum(Char_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:6178,Testability,Test,TestBits,6178,"nt_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer&); virtual voidReadBasketExport(TBuffer&, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* addr = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Char_t max); virtual voidSetMinimum(Char_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafB.html:706,Usability,Clear,Clear,706," TLeafB(); TLeafB(const TLeafB&); TLeafB(TBranch* parent, const char* name, const char* type); virtual~TLeafB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual c",MatchSource.WIKI,root/html534/TLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafB.html
https://root.cern/root/html534/TLeafC.html:1247,Availability,Error,Error,1247," TLeafC(); TLeafC(const TLeafC&); TLeafC(TBranch* parent, const char* name, const char* type); virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual con",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:1376,Availability,error,error,1376,"fC&); TLeafC(TBranch* parent, const char* name, const char* type); virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual I",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:1460,Availability,error,error,1460," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:291,Modifiability,variab,variable,291,". TLeafC. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TLeafC. class TLeafC: public TLeaf. A TLeaf for a variable length string. Function Members (Methods); public:. TLeafC(); TLeafC(const TLeafC&); TLeafC(TBranch* parent, const char* name, const char* type); virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual con",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:3192,Modifiability,Inherit,InheritsFrom,3192,"GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; char*GetValueString() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObjec",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:3258,Modifiability,Inherit,InheritsFrom,3258,"ual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; char*GetValueString() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, ",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:7312,Modifiability,variab,variable,7312,"ect::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TLeaf&TLeaf::operator=(const TLeaf&). Data Members; public:. enum TLeaf::[unnamed] { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Int_tfMaximumMaximum value if leaf range is specified; Int_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafC(); Default constructor for LeafC*-*-*-*-*-*-*-*-; *-* ============================. TLeafC(TBranch* parent, const char* name, const char* type); Create a LeafC*-*-; *-* ==============; -. ~TLeafC(); Default destructor for a LeafC*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Ba",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:7872,Modifiability,Inherit,Inheritance,7872,"textMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Int_tfMaximumMaximum value if leaf range is specified; Int_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafC(); Default constructor for LeafC*-*-*-*-*-*-*-*-; *-* ============================. TLeafC(TBranch* parent, const char* name, const char* type); Create a LeafC*-*-; *-* ==============; -. ~TLeafC(); Default destructor for a LeafC*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); Read leaf elements from Basket in",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:7885,Modifiability,Inherit,Inherited,7885,"textMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Int_tfMaximumMaximum value if leaf range is specified; Int_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Char_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Char_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafC(); Default constructor for LeafC*-*-*-*-*-*-*-*-; *-* ============================. TLeafC(TBranch* parent, const char* name, const char* type); Create a LeafC*-*-; *-* ==============; -. ~TLeafC(); Default destructor for a LeafC*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); Read leaf elements from Basket in",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:3033,Security,Hash,Hash,3033,"st; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; virtual Int_tGetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; char*GetValueString() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObje",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:6167,Testability,Test,TestBit,6167,"t_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Int_t max); virtual voidSetMinimum(Int_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:6206,Testability,Test,TestBits,6206,"t_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Int_t max); virtual voidSetMinimum(Int_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafC.html:704,Usability,Clear,Clear,704," TLeafC(); TLeafC(const TLeafC&); TLeafC(TBranch* parent, const char* name, const char* type); virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual con",MatchSource.WIKI,root/html534/TLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafC.html
https://root.cern/root/html534/TLeafD.html:1256,Availability,Error,Error,1256," TLeafD(); TLeafD(const TLeafD&); TLeafD(TBranch* parent, const char* name, const char* type); virtual~TLeafD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vi",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:1385,Availability,error,error,1385,"fD&); TLeafD(TBranch* parent, const char* name, const char* type); virtual~TLeafD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tTLeaf::GetMaximum() const; virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() co",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:1469,Availability,error,error,1469," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tTLeaf::GetMaximum() const; virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:3186,Modifiability,Inherit,InheritsFrom,3186,"al Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tTLeaf::GetMaximum() const; virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObjec",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:3252,Modifiability,Inherit,InheritsFrom,3252,"e() const; virtual Int_tTLeaf::GetMaximum() const; virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, ",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:7236,Modifiability,variab,variable,7236,"Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TLeaf&TLeaf::operator=(const TLeaf&). Data Members; public:. enum TLeaf::[unnamed] { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Double_tfMaximumMaximum value if leaf range is specified; Double_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Double_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Double_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements ",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:7806,Modifiability,Inherit,Inheritance,7806,"kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Double_tfMaximumMaximum value if leaf range is specified; Double_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Double_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Double_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:7819,Modifiability,Inherit,Inherited,7819,"kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; Double_tfMaximumMaximum value if leaf range is specified; Double_tfMinimumMinimum value if leaf range is specified; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); Double_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Double_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:3027,Security,Hash,Hash,3027,"tIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tTLeaf::GetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tTLeaf::GetMaximum() const; virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tTLeaf::GetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tTLeaf::GetValueLong64(Int_t i = 0) const; virtual LongDouble_tTLeaf::GetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidImport(TClonesArray* list, Int_t n); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTLeaf::IsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObje",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:6091,Testability,Test,TestBit,6091,"dTNamed::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:6130,Testability,Test,TestBits,6130,"dTNamed::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s, Char_t delim = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:713,Usability,Clear,Clear,713," TLeafD(); TLeafD(const TLeafD&); TLeafD(TBranch* parent, const char* name, const char* type); virtual~TLeafD(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vi",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafD.html:9236,Usability,simpl,simple,9236,"fer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a double from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafD(). const char * GetTypeName() const; {return ""Double_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafD.html
https://root.cern/root/html534/TLeafElement.html:1372,Availability,Error,Error,1372," TLeafElement(); TLeafElement(const TLeafElement&); TLeafElement(TBranch* parent, const char* name, Int_t id, Int_t type); virtual~TLeafElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTLeaf::Export(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTLeaf::FillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const;",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:1501,Availability,error,error,1501,"nt(TBranch* parent, const char* name, Int_t id, Int_t type); virtual~TLeafElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTLeaf::Export(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTLeaf::FillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tGetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; TMethodCall*GetMethodCall(const char* name); virtual Int_tTLeaf::GetMinimum() const; v",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:1585,Availability,error,error,1585," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTLeaf::Export(TClonesArray*, Int_t); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTLeaf::FillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf*TLeaf::GetLeafCounter(Int_t& countval) const; virtual Int_tGetLen() const; virtual Int_tTLeaf::GetLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; TMethodCall*GetMethodCall(const char* name); virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual ch",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:3319,Modifiability,Inherit,InheritsFrom,3319,"tLenStatic() const; virtual Int_tTLeaf::GetLenType() const; virtual Int_tGetMaximum() const; TMethodCall*GetMethodCall(const char* name); virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tGetValueLong64(Int_t i = 0) const; virtual LongDouble_tGetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTLeaf::Import(TClonesArray*, Int_t); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::oper",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:3385,Modifiability,Inherit,InheritsFrom,3385,"l Int_tGetMaximum() const; TMethodCall*GetMethodCall(const char* name); virtual Int_tTLeaf::GetMinimum() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNdata() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTLeaf::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetValue(Int_t i = 0) const; virtual Long64_tGetValueLong64(Int_t i = 0) const; virtual LongDouble_tGetValueLongDouble(Int_t i = 0) const; virtual void*GetValuePointer() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTLeaf::Import(TClonesArray*, Int_t); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnTerminalBranch() const; virtual Bool_tTLeaf::IsRange() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTLeaf::IsUnsigned() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* v",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:7445,Modifiability,variab,variable,7445,"option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TLeaf&TLeaf::operator=(const TLeaf&). Data Members; public:. enum TLeaf::[unnamed] { kIndirectAddress; kNewValue; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. char*fAbsAddress! Absolute leaf Address; TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Int_tfIDelement serial number in fInfo; Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); TStringTNamed::fTitleobject title; Int_tfTypeleaf type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafElement(); Default constructor for LeafObject. TLeafElement(TBranch* parent, const char* name, Int_t id, Int_t type); Create a LeafObject. ~TLeafElement(); Default destructor for a LeafObject. TMethodCall * GetMethodCall(const char* name); Returns pointer to method corresponding to name name is a string; with the general form ""method(list of params)"" If list of params is; omitted, () is assumed;. Bool_t IsOnTerminalBranch() const; Return true if this leaf is does not have any sub-branch/leaf. TLeafElement(). Int_t GetLen() const; {return ((TB",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
https://root.cern/root/html534/TLeafElement.html:7826,Modifiability,Inherit,Inheritance,7826,"EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. char*fAbsAddress! Absolute leaf Address; TBranch*TLeaf::fBranch! Pointer to supporting branch (we do not own the branch); Int_tfIDelement serial number in fInfo; Bool_tTLeaf::fIsRange(=kTRUE if leaf has a range, kFALSE otherwise); Bool_tTLeaf::fIsUnsigned(=kTRUE if unsigned, kFALSE otherwise); TLeaf*TLeaf::fLeafCountPointer to Leaf count if variable length (we do not own the counter); Int_tTLeaf::fLenNumber of fixed length elements; Int_tTLeaf::fLenTypeNumber of bytes for this data type; TStringTNamed::fNameobject identifier; Int_tTLeaf::fNdata! Number of elements in fAddress data buffer; Int_tTLeaf::fOffsetOffset in ClonesArray object (if one); TStringTNamed::fTitleobject title; Int_tfTypeleaf type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafElement(); Default constructor for LeafObject. TLeafElement(TBranch* parent, const char* name, Int_t id, Int_t type); Create a LeafObject. ~TLeafElement(); Default destructor for a LeafObject. TMethodCall * GetMethodCall(const char* name); Returns pointer to method corresponding to name name is a string; with the general form ""method(list of params)"" If list of params is; omitted, () is assumed;. Bool_t IsOnTerminalBranch() const; Return true if this leaf is does not have any sub-branch/leaf. TLeafElement(). Int_t GetLen() const; {return ((TBranchElement*)fBranch)->GetNdata()*fLen;}. Int_t GetMaximum() const; {return ((TBranchElement*)fBranch)->GetMaximum();}. Int_t GetNdata() const; {return ((TBranchElement*)fBranch)->GetNdata()*fLen;}. const char * GetTypeName() const; {return ((TBranchElement*)fBranch)->GetTypeName();}. Double_t GetValue(Int_t i = 0) const; { return ((TBranchElement*)fBranch)->GetValue(i, fLen, kFALSE);}. Long6",MatchSource.WIKI,root/html534/TLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TLeafElement.html
