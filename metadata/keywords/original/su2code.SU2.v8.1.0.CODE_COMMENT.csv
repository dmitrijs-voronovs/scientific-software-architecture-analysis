id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/su2code/SU2/tree/v8.1.0/meson.py:55,Modifiability,extend,extended,55,"#!/usr/bin/env python3; ## \file meson.py; # \brief An extended meson script for setting up the environment and running meson; # \author T. Albring and F. Poli; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,meson.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson.py
https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py:64,Availability,down,download,64,"# If we are on windows, we don't need to compile ninja, we just download the executable",MatchSource.CODE_COMMENT,preconfigure.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py
https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py:37,Availability,down,download,37,"# Try to execute ninja, if it fails, download .exe from github",MatchSource.CODE_COMMENT,preconfigure.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py
https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py:46,Availability,down,download,46,"# Set up the build environment, i.e. clone or download submodules",MatchSource.CODE_COMMENT,preconfigure.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/preconfigure.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/extract_file.py:37,Availability,error,error,37,"# keep this, tarfile gives confusing error",MatchSource.CODE_COMMENT,meson_scripts/extract_file.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/extract_file.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:73,Integrability,depend,dependencies,73,"#!/usr/bin/env python3; ## \file init.py; # \brief Initializes necessary dependencies for SU2 either using git or it; # fetches zip files.; # \author T. Albring and F. Poli; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:12,Availability,down,download,12,"# Otherwise download the zip file from git",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:5,Deployability,update,update,5,"# to update CoolProp external libraries",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:2,Deployability,update,update,2,"# update coolprop",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:11,Availability,down,download,11,"# Where to download the module into",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:32,Availability,down,downloaded,32,"# File tag used to mark modules downloaded by this method.",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py:46,Availability,down,download,46,"# Set up the build environment, i.e. clone or download all submodules",MatchSource.CODE_COMMENT,meson_scripts/init.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/meson_scripts/init.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/change_version_number.py:1056,Availability,avail,available,1056,"#!/usr/bin/env python; ## \file change_version_number.py; # \brief Python script for updating the version number of the SU2 suite.; # \author A. Aranake; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/change_version_number.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/change_version_number.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/change_version_number.py:276,Modifiability,portab,portable,276,"# Grep flag cheatsheet:; # -I : Ignore binary files; # -F : Match exact pattern (instead of regular expressions); # -w : Match whole word; # -r : search directory recursively; # -v : Omit search string (.svn omitted, line containing ISC is CGNS related); # TODO: replace with portable instructions. This works only on unix systems",MatchSource.CODE_COMMENT,SU2_PY/change_version_number.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/change_version_number.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:1627,Availability,avail,available,1627,"#!/usr/bin/env python; ## \file Compute_polar.py; # \brief Python script for performing polar sweep.; # \author E Arad (based on T. Lukaczyk and F. Palacios script); # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; #; #; # Several combinations of angles are possible:; # ------------------------------------------------; # 1. Polar-sweep in alpha per given phi ...... polarVar = aoa; # 2. Polar-sweep in alpha per given beta (side slip angle) ...... polarVar = aoa; # 3. Polar-sweep in phi per given alpha ...... polarVar = phi; # 4. Mach ramp (single values for alpha, phi or both permitted) ... polarVar = MachRampNumbers; #; # Note: Seting a list of both phi and beta is impossible; # For mach ramp you can specify alpha, phi (or both), but not a list of either of them; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:77,Performance,perform,performing,77,"#!/usr/bin/env python; ## \file Compute_polar.py; # \brief Python script for performing polar sweep.; # \author E Arad (based on T. Lukaczyk and F. Palacios script); # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; #; #; # Several combinations of angles are possible:; # ------------------------------------------------; # 1. Polar-sweep in alpha per given phi ...... polarVar = aoa; # 2. Polar-sweep in alpha per given beta (side slip angle) ...... polarVar = aoa; # 3. Polar-sweep in phi per given alpha ...... polarVar = phi; # 4. Mach ramp (single values for alpha, phi or both permitted) ... polarVar = MachRampNumbers; #; # Note: Seting a list of both phi and beta is impossible; # For mach ramp you can specify alpha, phi (or both), but not a list of either of them; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:7,Modifiability,config,config,7,"# load config, start state",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:2,Performance,load,load,2,"# load config, start state",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:10,Modifiability,config,config,10,"# prepare config",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:8,Modifiability,config,config,8,"# local config and state",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:77,Modifiability,variab,variables,77,"#; # The eval functions below requires definition of various optimization; # variables, though we are handling here only a direct solution.; # So, if they are missing in the cfg file (and only then), some dummy values are; # introduced here",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:61,Performance,optimiz,optimization,61,"#; # The eval functions below requires definition of various optimization; # variables, though we are handling here only a direct solution.; # So, if they are missing in the cfg file (and only then), some dummy values are; # introduced here",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:41,Modifiability,variab,variables,41,"#; # --------- end of dummy optimization variables definition section ---------; #; # set angle of attack and side-slip angle",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:28,Performance,optimiz,optimization,28,"#; # --------- end of dummy optimization variables definition section ---------; #; # set angle of attack and side-slip angle",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py:99,Security,attack,attack,99,"#; # --------- end of dummy optimization variables definition section ---------; #; # set angle of attack and side-slip angle",MatchSource.CODE_COMMENT,SU2_PY/compute_polar.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_polar.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:83,Performance,perform,performing,83,"#!/usr/bin/env python; ## \file compute_uncertainty.py; # \brief Python script for performing model-form UQ for SST turbulence model; # \author J. Mukhopadhaya; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # imports",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:7,Modifiability,config,config,7,"# load config, start state",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:2,Performance,load,load,2,"# load config, start state",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:10,Modifiability,config,config,10,"# prepare config",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:2,Performance,perform,perform,2,"# perform eigenvalue perturbations",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:2,Modifiability,config,config,2,"# config.BREAKDOWN_FILENAME = folderName + config.BREAKDOWN_FILENAME",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py:43,Modifiability,config,config,43,"# config.BREAKDOWN_FILENAME = folderName + config.BREAKDOWN_FILENAME",MatchSource.CODE_COMMENT,SU2_PY/compute_uncertainty.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/compute_uncertainty.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/continuous_adjoint.py:82,Deployability,continuous,continuous,82,"#!/usr/bin/env python; ## \file continuous_adjoint.py; # \brief Python script for continuous adjoint computation using the SU2 suite.; # \author F. Palacios, T. Economon, T. Lukaczyk; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,SU2_PY/continuous_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/continuous_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/continuous_adjoint.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/continuous_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/continuous_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py:20,Deployability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/direct_differentiation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py:20,Integrability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/direct_differentiation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py:202,Security,access,accessed,202,"#: finite_differences(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/direct_differentiation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/direct_differentiation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:48,Modifiability,config,config,48,"# if validation:; # state_directdiff.find_files(config); # konfig = copy.deepcopy(config); # konfig['DIRECT_DIFF'] = ""DESIGN_VARIABLES""; # grad_directdiff = SU2.eval.gradients.directdiff(konfig,state_directdiff); # state['FILES']['DIRECT'] = 'DIRECTDIFF/' + state_directdiff['FILES']['DIRECT']; # state['FUNCTIONS'] = state_directdiff['FUNCTIONS']; # check for existing files",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:82,Modifiability,config,config,82,"# if validation:; # state_directdiff.find_files(config); # konfig = copy.deepcopy(config); # konfig['DIRECT_DIFF'] = ""DESIGN_VARIABLES""; # grad_directdiff = SU2.eval.gradients.directdiff(konfig,state_directdiff); # state['FILES']['DIRECT'] = 'DIRECTDIFF/' + state_directdiff['FILES']['DIRECT']; # state['FUNCTIONS'] = state_directdiff['FUNCTIONS']; # check for existing files",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:5,Security,validat,validation,5,"# if validation:; # state_directdiff.find_files(config); # konfig = copy.deepcopy(config); # konfig['DIRECT_DIFF'] = ""DESIGN_VARIABLES""; # grad_directdiff = SU2.eval.gradients.directdiff(konfig,state_directdiff); # state['FILES']['DIRECT'] = 'DIRECTDIFF/' + state_directdiff['FILES']['DIRECT']; # state['FUNCTIONS'] = state_directdiff['FUNCTIONS']; # check for existing files",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:36,Modifiability,config,config,36,"# if validation:; # Definition_DV = config['DEFINITION_DV']; # n_dv = len(Definition_DV['KIND']); # grads_dd = grad_directdiff[ADJ_NAME]; # print(""Validation Summary""); # print(""--------------------------""); # print(""VARIABLE "" + ""DISCRETE ADJOINT"" + "" DIRECT DIFFERENTIATION"" + "" ERROR (%)""); # for idv in range(n_dv):; # if abs(grads[idv]) > abs(grads_dd[idv]):; # this_err = abs(grads[idv]/grads_dd[idv]); # else:; # this_err = abs(grads_dd[idv]/grads[idv]); # print(str(idv) + "" "" + str(grads[idv]) + "" "" + str(grads_dd[idv]) + "" "" + str((this_err-1)*100) + ' %')",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:5,Security,validat,validation,5,"# if validation:; # Definition_DV = config['DEFINITION_DV']; # n_dv = len(Definition_DV['KIND']); # grads_dd = grad_directdiff[ADJ_NAME]; # print(""Validation Summary""); # print(""--------------------------""); # print(""VARIABLE "" + ""DISCRETE ADJOINT"" + "" DIRECT DIFFERENTIATION"" + "" ERROR (%)""); # for idv in range(n_dv):; # if abs(grads[idv]) > abs(grads_dd[idv]):; # this_err = abs(grads[idv]/grads_dd[idv]); # else:; # this_err = abs(grads_dd[idv]/grads[idv]); # print(str(idv) + "" "" + str(grads[idv]) + "" "" + str(grads_dd[idv]) + "" "" + str((this_err-1)*100) + ' %')",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/discrete_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/discrete_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py:20,Deployability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/finite_differences.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py:20,Integrability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/finite_differences.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py:202,Security,access,accessed,202,"#: finite_differences(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/finite_differences.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/finite_differences.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:68,Integrability,wrap,wrapper,68,"#!/usr/bin/env python; ## \file fsi_computation.py; # \brief Python wrapper code for FSI computation by coupling a third-party structural solver to SU2.; # \authors Nicola Fonzi, Vittorio Cavalieri based on the work of David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:104,Modifiability,coupling,coupling,104,"#!/usr/bin/env python; ## \file fsi_computation.py; # \brief Python wrapper code for FSI computation by coupling a third-party structural solver to SU2.; # \authors Nicola Fonzi, Vittorio Cavalieri based on the work of David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration; # imports the CFD (SU2) module for FSI computation",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:19,Modifiability,config,configuration,19,"# use a parser for configuration; # imports the CFD (SU2) module for FSI computation",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Deployability,configurat,configuration,6,"# FSI configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Modifiability,config,configuration,6,"# FSI configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Deployability,configurat,configuration,6,"# CFD configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Modifiability,config,configuration,6,"# CFD configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Deployability,configurat,configuration,6,"# CSD configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:6,Modifiability,config,configuration,6,"# CSD configuration file",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:33,Integrability,interface,interface,33,"# --- Initialize and set the FSI interface (coupling environement) --- #",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:44,Modifiability,coupling,coupling,44,"# --- Initialize and set the FSI interface (coupling environement) --- #",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py:181,Security,access,accessed,181,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # --- This is only accessed if running from command prompt --- #",MatchSource.CODE_COMMENT,SU2_PY/fsi_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/fsi_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/mesh_deformation.py:200,Security,access,accessed,200,"#: mesh_deformation(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/mesh_deformation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/mesh_deformation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:1400,Performance,load,load,1400,"## \file OptimalPropeller.py; # \brief Python script for generating the ActuatorDisk.dat file.; # \author E. Saetta, L. Russo, R. Tognaccini; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ==============================================================================================; # Name : OptimalPropeller; # Author : Ettore Saetta, Lorenzo Russo, Renato Tognaccini; # Theoretical and Applied Aerodynamic Research Group (TAARG),; # University of Naples Federico II.; # Version : 1.0.0 - Python; # Date : 01/09/2020; # Copyright :; # Description : Compute the optimal load distribution along the propeller radius using; # the inviscid theory of the optimal propeller.; # Reference : Glauert H., Airplane Propellers, in Aerodynamic Theory, Ed. Durand W. F.,; # Vol. IV, pp. 169 - 360, Springer, 1935.; # Input : Interactive.; # Output : ActuatorDisk.cfg, containing part of SU2 .cfg file.; # ActuatorDisk.dat, containing propeller load distribution to be read by SU2_CFD.; # Note : Python 3 or higher needed.; # ==============================================================================================",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:1762,Performance,load,load,1762,"## \file OptimalPropeller.py; # \brief Python script for generating the ActuatorDisk.dat file.; # \author E. Saetta, L. Russo, R. Tognaccini; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ==============================================================================================; # Name : OptimalPropeller; # Author : Ettore Saetta, Lorenzo Russo, Renato Tognaccini; # Theoretical and Applied Aerodynamic Research Group (TAARG),; # University of Naples Federico II.; # Version : 1.0.0 - Python; # Date : 01/09/2020; # Copyright :; # Description : Compute the optimal load distribution along the propeller radius using; # the inviscid theory of the optimal propeller.; # Reference : Glauert H., Airplane Propellers, in Aerodynamic Theory, Ed. Durand W. F.,; # Vol. IV, pp. 169 - 360, Springer, 1935.; # Input : Interactive.; # Output : ActuatorDisk.cfg, containing part of SU2 .cfg file.; # ActuatorDisk.dat, containing propeller load distribution to be read by SU2_CFD.; # Note : Python 3 or higher needed.; # ==============================================================================================",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:27,Deployability,configurat,configuration,27,"""""""Write the actuator disk configuration file""""""",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:27,Modifiability,config,configuration,27,"""""""Write the actuator disk configuration file""""""",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:14,Availability,error,error,14,"# Compute the error with respect to the thrust coefficient given in input.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:14,Availability,error,error,14,"# Compute the error with respect to the thrust coefficient given in input.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:136,Availability,error,error,136,"##########################; ### Iterations ###; ##########################; # Iterate using the false position methods.; # Based on the error from the thrust coefficient given in input.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:46,Availability,error,error,46,"# Computation of the total thrust coefficient error with respect to the input value.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:29,Energy Efficiency,power,power,29,"# Computation of the correct power coefficient distribution.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:106,Energy Efficiency,power,power,106,"##########################; ### Check Results ###; ##########################; # Computation of the total power coefficient.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:108,Deployability,configurat,configuration,108,"##########################; ### File Writing ###; ##########################; # Write the corresponding SU2 configuration file",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:108,Modifiability,config,configuration,108,"##########################; ### File Writing ###; ##########################; # Write the corresponding SU2 configuration file",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py:115,Performance,perform,performance,115,"##########################; ### Plots ###; ##########################; # Automatically plot the computed propeller performance.",MatchSource.CODE_COMMENT,SU2_PY/OptimalPropeller.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/OptimalPropeller.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation.py:94,Deployability,continuous,continuous,94,"#!/usr/bin/env python; ## \file parallel_computation.py; # \brief Python script for doing the continuous adjoint computation using the SU2 suite.; # \author T. Economon, T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,SU2_PY/parallel_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation.py:204,Security,access,accessed,204,"#: parallel_computation(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/parallel_computation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation_fsi.py:204,Security,access,accessed,204,"#: parallel_computation(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/parallel_computation_fsi.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parallel_computation_fsi.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py:1038,Availability,avail,available,1038,"#!/usr/bin/env python; ## \file parse_config.py; # \brief Builds a worksheet of all SU2.cpp options; # \author A. Aranake, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/parse_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py:38,Deployability,configurat,configuration,38,"# These variables should point to the configuration files",MatchSource.CODE_COMMENT,SU2_PY/parse_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py:8,Modifiability,variab,variables,8,"# These variables should point to the configuration files",MatchSource.CODE_COMMENT,SU2_PY/parse_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py:38,Modifiability,config,configuration,38,"# These variables should point to the configuration files",MatchSource.CODE_COMMENT,SU2_PY/parse_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/parse_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/set_ffd_design_var.py:1071,Availability,avail,available,1071,"#!/usr/bin/env python; ## \file set_ffd_design_var.py; # \brief Python script for automatically generating a list of FFD variables.; # \author T. Economon, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/set_ffd_design_var.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/set_ffd_design_var.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/set_ffd_design_var.py:121,Modifiability,variab,variables,121,"#!/usr/bin/env python; ## \file set_ffd_design_var.py; # \brief Python script for automatically generating a list of FFD variables.; # \author T. Economon, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/set_ffd_design_var.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/set_ffd_design_var.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:82,Performance,perform,performing,82,"#!/usr/bin/env python; ## \file shape_optimization.py; # \brief Python script for performing the shape optimization.; # \author T. Economon, T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:103,Performance,optimiz,optimization,103,"#!/usr/bin/env python; ## \file shape_optimization.py; # \brief Python script for performing the shape optimization.; # \author T. Economon, T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:2,Modifiability,variab,variable,2,"# variable bound to be scaled by the line search",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:2,Modifiability,variab,variable,2,"# variable bound to be scaled by the line search",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:36,Modifiability,variab,variable,36,"# complete definition of the desing variable",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:19,Modifiability,variab,variables,19,"# number of design variables",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:2,Performance,optimiz,optimizer,2,"# optimizer accuracy",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:20,Deployability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:20,Integrability,integrat,integration,20,"# use only, if time integration is second order",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py:202,Security,access,accessed,202,"#: shape_optimization(); # -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/shape_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/shape_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,SU2_PY/SU2_CFD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py:19,Modifiability,config,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,SU2_PY/SU2_CFD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py:18,Integrability,wrap,wrapped,18,"# imports the SU2 wrapped module; # -------------------------------------------------------------------; # Main; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2_CFD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,SU2_PY/SU2_CFD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_CFD.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:106,Performance,optimiz,optimization,106,"#!/usr/bin/env python; ## \file topology_optimization.py; # \brief Python script to drive SU2 in topology optimization.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; #; #########################################################################################; # #; # This script is provided to show how the feature can be used. #; # It is not meant to be generic, topology optimization calls for some parameters to be #; # ramped and the strategy to do so is hard coded. #; # A bit of hacking will be required if you want to deviate from what is done here. #; # The hard coded bits are explained as they appear. #; # #; #########################################################################################",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:1201,Performance,optimiz,optimization,1201,"#!/usr/bin/env python; ## \file topology_optimization.py; # \brief Python script to drive SU2 in topology optimization.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; #; #########################################################################################; # #; # This script is provided to show how the feature can be used. #; # It is not meant to be generic, topology optimization calls for some parameters to be #; # ramped and the strategy to do so is hard coded. #; # A bit of hacking will be required if you want to deviate from what is done here. #; # The hard coded bits are explained as they appear. #; # #; #########################################################################################",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:2,Modifiability,variab,variable,2,"# variable scale; # maximum number of iterations",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:20,Deployability,update,updates,20,"# num iters between updates of the filter settings and constraint penalty factor",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:2,Availability,toler,tolerances,2,"# tolerances",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:9,Deployability,update,updates,9,"# during updates",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:2,Usability,clear,clear,2,"# clear previous output and run direct solver",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:43,Testability,test,test,43,"# the return code of mpirun is useless, we test the value of the function",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:38,Usability,clear,clear,38,"# inputs written in obj_val_driver; # clear previous output and run direct solver",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:38,Usability,clear,clear,38,"# inputs written in obj_val_driver; # clear previous output and run solver",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:34,Deployability,update,updates,34,"# end; ####### Helpers #######; # updates the parameters in the config files",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:64,Modifiability,config,config,64,"# end; ####### Helpers #######; # updates the parameters in the config files",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:33,Integrability,wrap,wrapper,33,"# end; # Exterior penalty method wrapper",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:2,Testability,log,log,2,"# log current values of f and h",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py:96,Availability,toler,tolerance,96,"## 1st Phase: Run with ""gray"" filter settings ##; # get the constraint and function within some tolerance",MatchSource.CODE_COMMENT,SU2_PY/topology_optimization.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/topology_optimization.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/updateHistoryMap.py:32,Deployability,update,updateHistoryMap,32,"#!/usr/bin/env python; ## \file updateHistoryMap.py; # \brief Python script for updating the historyMap.py file.; # \author T. Albring; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,SU2_PY/updateHistoryMap.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/updateHistoryMap.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:62,Integrability,interface,interface,62,"#!/usr/bin/env python; ## \file FSIInterface.py; # \brief FSI interface class that handles fluid/solid solvers synchronisation and communication.; # \authors Nicola Fonzi, Vittorio Cavalieri based on the work of David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:9,Integrability,interface,interface,9,"""""""; FSI interface class that handles fluid/solid solvers synchronisation and communication; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:37,Modifiability,variab,variables,37,"""""""; Class constructor. Declare some variables and do some screen outputs.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:51,Integrability,interface,interface,51,"# True if the current rank owns at least one fluid interface node",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:51,Integrability,interface,interface,51,"# True if the current rank owns at least one solid interface node",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:43,Integrability,interface,interface,43,"# list of partitions where there are fluid interface nodes",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:43,Integrability,interface,interface,43,"# list of partitions where there are solid interface nodes",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:35,Integrability,interface,interface,35,"# object that can identify the f/s interface within the fluid solver",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:35,Integrability,interface,interface,35,"# object that can identify the f/s interface within the solid solver",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:49,Integrability,interface,interface,49,"# contains the global FSI indexing of each fluid interface node for all partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:49,Integrability,interface,interface,49,"# contains the global FSI indexing of each solid interface node for all partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:71,Integrability,interface,interface,71,"# links between the fluid solver indexing and the FSI indexing for the interface nodes",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:71,Integrability,interface,interface,71,"# links between the solid solver indexing and the FSI indexing for the interface nodes",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:53,Integrability,interface,interface,53,"# number of nodes (halo nodes included) on the fluid interface, on each partition",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:53,Integrability,interface,interface,53,"# number of physical (= non halo) nodes on the fluid interface, on each partition",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:31,Integrability,interface,interface,31,"# number of nodes on the fluid interface, sum over all the partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:40,Integrability,interface,interface,40,"# number of physical nodes on the fluid interface, sum over all partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:40,Integrability,interface,interface,40,"# number of physical nodes on the solid interface, on each partition",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:53,Integrability,interface,interface,53,"# number of physical (= non halo) nodes on the solid interface, on each partition",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:31,Integrability,interface,interface,31,"# number of nodes on the solid interface, sum over all partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:40,Integrability,interface,interface,40,"# number of physical nodes on the solid interface, sum over all partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:16,Integrability,interface,interface,16,"# initial fluid interface position on each partition (used for the meshes mapping)",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:16,Integrability,interface,interface,16,"# initial solid interface position on each partition (used for mesh mapping)",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:8,Integrability,interface,interface,8,"# solid interface displacement",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:8,Integrability,interface,interface,8,"# solid interface position residual",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:8,Integrability,interface,interface,8,"# solid interface position residual at the previous BGS iteration",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:8,Integrability,interface,interface,8,"# fluid interface displacement",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:37,Integrability,interface,interface,37,"# loads on the fluid side of the f/s interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:2,Performance,load,loads,2,"# loads on the fluid side of the f/s interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:37,Integrability,interface,interface,37,"# loads on the solid side of the f/s interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:2,Performance,load,loads,2,"# loads on the solid side of the f/s interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:13,Integrability,message,message,13,"""""""; Print a message on screen only from the master process.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:15,Integrability,synchroniz,synchronization,15,"""""""; Perform a synchronization barrier in case of parallel run with MPI.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:121,Integrability,interface,interfaces,121,"""""""; Connection between solvers.; Creates the communication support between the two solvers.; Gets information about f/s interfaces from the two solvers.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:35,Integrability,interface,interfaces,35,"# --- Identify the fluid and solid interfaces and store the number of nodes on both sides (and for each partition) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:91,Integrability,interface,interface,91,"# --- Exchange information about processors on which the solvers are defined and where the interface nodes are lying ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:55,Integrability,interface,interface,55,"# --- Calculate the total number of nodes at the fluid interface (sum over all the partitions) ---; # Calculate the number of halo nodes on each partition",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:79,Integrability,interface,interface,79,"# --- Calculate the total number of nodes (with and without halo) at the fluid interface (sum over all the partitions) and broadcast the number accross all processors ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:35,Integrability,interface,interface,35,"# --- Store the number of physical interface nodes on each processor and allgather the information ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:49,Integrability,interface,interface,49,"# --- Calculate and store the global indexing of interface physical nodes on each processor and allgather the information ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:44,Integrability,interface,interfaces,44,"""""""; Creates the one-to-one mapping between interfaces in case of matching meshes.; Creates the interpolation rules between interfaces in case of non-matching meshes.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:124,Integrability,interface,interfaces,124,"""""""; Creates the one-to-one mapping between interfaces in case of matching meshes.; Creates the interpolation rules between interfaces in case of non-matching meshes.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Integrability,interface,interface,20,"# --- Get the fluid interface from fluid solver on each partition ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:149,Integrability,interface,interface,149,"# Note that the fluid solver is separated in more processors outside the python script; # thus when, from a core, we request for the vertices on the interface, we only obtain; # those in that core",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Integrability,interface,interface,20,"# --- Get the solid interface from solid solver on each partition ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:67,Integrability,interface,interface,67,"""""""; Fill the mapping matrix in case of matching meshes at the f/s interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:21,Integrability,interface,interface,21,"# --- For each fluid interface node, find the nearest solid interface node and fill the boolean mapping matrix ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:60,Integrability,interface,interface,60,"# --- For each fluid interface node, find the nearest solid interface node and fill the boolean mapping matrix ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:21,Integrability,interface,interface,21,"# --- For each fluid interface node, find the nearest solid interface node and fill the boolean mapping matrix ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:60,Integrability,interface,interface,60,"# --- For each fluid interface node, find the nearest solid interface node and fill the boolean mapping matrix ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:128,Performance,load,loadings,128,"""""""; First part of the RBF mapping. This method provides the matrix required to; obtain, from the structural displacements, the loadings of the kernel; functions.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:115,Performance,load,loadings,115,"""""""; Second part of the RBF mapping. This method provides the matrix required to; obtain, from the kernel function loadings, the fluid nodes displacements.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:128,Performance,load,loadings,128,"""""""; First part of the RBF mapping. This method provides the matrix required to; obtain, from the structural displacements, the loadings of the kernel; functions.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:115,Performance,load,loadings,115,"""""""; Second part of the TPS mapping. This method provides the matrix required to; obtain, from the kernel function loadings, the fluid nodes displacements.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:49,Integrability,interface,interface,49,"# --- Interpolate (or map) in parallel the solid interface displacement on the fluid interface ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:85,Integrability,interface,interface,85,"# --- Interpolate (or map) in parallel the solid interface displacement on the fluid interface ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:42,Integrability,interface,interface,42,"# --- Redistribute the interpolated fluid interface according to the partitions that own the fluid interface ---; # Gather the fluid interface on the master process; # This is required because PETSc redistributes evenly in the cores, and does not use the same division; # of SU2, thus we need to redistribute",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:99,Integrability,interface,interface,99,"# --- Redistribute the interpolated fluid interface according to the partitions that own the fluid interface ---; # Gather the fluid interface on the master process; # This is required because PETSc redistributes evenly in the cores, and does not use the same division; # of SU2, thus we need to redistribute",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:133,Integrability,interface,interface,133,"# --- Redistribute the interpolated fluid interface according to the partitions that own the fluid interface ---; # Gather the fluid interface on the master process; # This is required because PETSc redistributes evenly in the cores, and does not use the same division; # of SU2, thus we need to redistribute",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:23,Integrability,interface,interface,23,"# Send the partitioned interface to the right fluid partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:52,Integrability,interface,interface,52,"# Special treatment for the halo nodes on the fluid interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:41,Integrability,interface,interface,41,"# The keys are the SU2 global IDs of the interface nodes",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:16,Integrability,interface,interface,16,"# These are the interface global IDs, not the SU2 global IDs",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:49,Integrability,interface,interface,49,"# --- Interpolate (or map) in parallel the fluid interface loads on the solid interface ---; # self.MappingMatrix.transpose()",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:78,Integrability,interface,interface,78,"# --- Interpolate (or map) in parallel the fluid interface loads on the solid interface ---; # self.MappingMatrix.transpose()",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:59,Performance,load,loads,59,"# --- Interpolate (or map) in parallel the fluid interface loads on the solid interface ---; # self.MappingMatrix.transpose()",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:95,Integrability,interface,interface,95,"# --- Redistribute the interpolated solid loads according to the partitions that own the solid interface ---; # Gather the solid loads on the master process",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:42,Performance,load,loads,42,"# --- Redistribute the interpolated solid loads according to the partitions that own the solid interface ---; # Gather the solid loads on the master process",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:129,Performance,load,loads,129,"# --- Redistribute the interpolated solid loads according to the partitions that own the solid interface ---; # Gather the solid loads on the master process",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:23,Performance,load,loads,23,"# Send the partitioned loads to the right solid partitions",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:52,Integrability,interface,interface,52,"# Special treatment for the halo nodes on the solid interface",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:28,Integrability,interface,interface,28,"""""""; Gets the current solid interface position from the solid solver.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Integrability,interface,interface,20,"# --- Get the solid interface position from the solid solver and directly fill the corresponding PETSc vector ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Integrability,interface,interface,20,"""""""; Gets the fluid interface loads from the fluid solver.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:30,Performance,load,loads,30,"""""""; Gets the fluid interface loads from the fluid solver.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Integrability,interface,interface,20,"# --- Get the fluid interface loads from the fluid solver and directly fill the corresponding PETSc vector ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:30,Performance,load,loads,30,"# --- Get the fluid interface loads from the fluid solver and directly fill the corresponding PETSc vector ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:56,Integrability,interface,interface,56,"""""""; Communicate the change of coordinates of the fluid interface to the fluid solver.; Prepare the fluid solver for mesh deformation.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:25,Integrability,interface,interface,25,"# --- Send the new fluid interface position to the fluid solver (on each partition, halo nodes included) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:32,Integrability,interface,interface,32,"""""""; Communicates the new solid interface loads to the solid solver.; Calculates the new resultant forces (lift, drag, ...).; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:42,Performance,load,loads,42,"""""""; Communicates the new solid interface loads to the solid solver.; Calculates the new resultant forces (lift, drag, ...).; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:25,Integrability,interface,interface,25,"# --- Send the new solid interface loads to the solid solver (on each partition, halo nodes included) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:35,Performance,load,loads,35,"# --- Send the new solid interface loads to the solid solver (on each partition, halo nodes included) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:87,Performance,load,loads,87,"# TODO here, when the solid solver will run in parallel, we will need to pass the halo loads",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:24,Integrability,interface,interface,24,"""""""; Computes the solid interface FSI displacement residual.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:63,Integrability,interface,interface,63,"# --- Create and fill the PETSc vector for the predicted solid interface position (predicted by the solid computation) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:47,Safety,predict,predicted,47,"# --- Create and fill the PETSc vector for the predicted solid interface position (predicted by the solid computation) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:83,Safety,predict,predicted,83,"# --- Create and fill the PETSc vector for the predicted solid interface position (predicted by the solid computation) ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:22,Integrability,interface,interface,22,"# --- Relax the solid interface position ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:43,Integrability,interface,interface,43,"""""""; Calculates a prediciton for the solid interface position for the next time step.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:50,Integrability,interface,interface,50,"# --- Create the PETSc vectors to store the solid interface velocity ---",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:38,Integrability,interface,interface,38,"""""""; Calculate the global indexing of interface nodes accross all the partitions. This does not include halo nodes.; This is needed because the global index of the fluid solver takes into account all the nodes, thus also those; in the volume mesh, not only on the interface. Here, we compute the global index of all the nodes on the; interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:264,Integrability,interface,interface,264,"""""""; Calculate the global indexing of interface nodes accross all the partitions. This does not include halo nodes.; This is needed because the global index of the fluid solver takes into account all the nodes, thus also those; in the volume mesh, not only on the interface. Here, we compute the global index of all the nodes on the; interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:334,Integrability,interface,interface,334,"""""""; Calculate the global indexing of interface nodes accross all the partitions. This does not include halo nodes.; This is needed because the global index of the fluid solver takes into account all the nodes, thus also those; in the volume mesh, not only on the interface. Here, we compute the global index of all the nodes on the; interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:41,Integrability,synchroniz,synchronizing,41,"""""""; Run the unsteady FSI computation by synchronizing the fluid and solid solvers.; F/s interface data are exchanged through interface mapping and interpolation (if non mathcing meshes).; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:89,Integrability,interface,interface,89,"""""""; Run the unsteady FSI computation by synchronizing the fluid and solid solvers.; F/s interface data are exchanged through interface mapping and interpolation (if non mathcing meshes).; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:126,Integrability,interface,interface,126,"""""""; Run the unsteady FSI computation by synchronizing the fluid and solid solvers.; F/s interface data are exchanged through interface mapping and interpolation (if non mathcing meshes).; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:23,Modifiability,variab,variables,23,"# --- Set some general variables for the unsteady computation --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:16,Availability,toler,tolerance,16,"# f/s interface tolerance",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:6,Integrability,interface,interface,6,"# f/s interface tolerance",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:71,Deployability,update,update,71,"# set some parameters before temporal fluid iteration and dynamic mesh update",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Performance,load,loads,20,"# --- Surface fluid loads interpolation and communication --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:18,Energy Efficiency,monitor,monitor,18,"# --- Compute and monitor the FSI residual --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:14,Energy Efficiency,monitor,monitor,14,"# --- Update, monitor and output the fluid solution before the next time step ---#",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:56,Deployability,update,update,56,"# --- Displacement predictor for the next time step and update of the solid solution --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:19,Safety,predict,predictor,19,"# --- Displacement predictor for the next time step and update of the solid solution --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:40,Integrability,synchroniz,synchronizing,40,"""""""; Runs the steady FSI computation by synchronizing the fluid and solid solver with data exchange at the f/s interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:111,Integrability,interface,interface,111,"""""""; Runs the steady FSI computation by synchronizing the fluid and solid solver with data exchange at the f/s interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:23,Modifiability,variab,variables,23,"# --- Set some general variables for the steady computation --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:16,Availability,toler,tolerance,16,"# f/s interface tolerance",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:6,Integrability,interface,interface,6,"# f/s interface tolerance",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:137,Safety,avoid,avoid,137,"# The mesh will be deformed in the context of the preprocessor, there is no need to set the initial; # mesh pushing back the solution to avoid spurious velocities, as the velocity is not computed at all",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:115,Safety,avoid,avoid,115,"# This will attempt to always set the initial condition, but there is a flag on the unsteady computation that will avoid it",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:20,Performance,load,loads,20,"# --- Surface fluid loads interpolation and communication ---#",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:18,Energy Efficiency,monitor,monitor,18,"# --- Compute and monitor the FSI residual --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py:40,Deployability,update,update,40,"# --- Relaxe the solid displacement and update the solid solution --- #",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSIInterface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSIInterface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:82,Deployability,configurat,configuration,82,"#!/usr/bin/env python; ## \file FSI_config.py; # \brief Python class for handling configuration file for FSI computation.; # \authors Nicola Fonzi, Vittorio Cavalieri based on the work of David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:82,Modifiability,config,configuration,82,"#!/usr/bin/env python; ## \file FSI_config.py; # \brief Python class for handling configuration file for FSI computation.; # \authors Nicola Fonzi, Vittorio Cavalieri based on the work of David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:64,Deployability,configurat,configuration,64,"""""""; Class that contains all the parameters coming from the FSI configuration file.; Read the file and store all the options into a dictionary.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:64,Modifiability,config,configuration,64,"""""""; Class that contains all the parameters coming from the FSI configuration file.; Read the file and store all the options into a dictionary.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:31,Availability,error,error,31,"""""""; Print a message, or raise error, on screen only from the master process.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py:13,Integrability,message,message,13,"""""""; Print a message, or raise error, on screen only from the master process.; """"""",MatchSource.CODE_COMMENT,SU2_PY/FSI_tools/FSI_config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/FSI_tools/FSI_config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/__init__.py:170,Security,access,accessible,170,"# Please do not remove next imports; # this is in place to save the need for additional import lines in user scripts; # It's important for the whole python package to be accessible with one import SU2; # See issue #246",MatchSource.CODE_COMMENT,SU2_PY/SU2/__init__.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/__init__.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:228,Integrability,wrap,wrappers,228,"""""""SU2.eval.Design(config,state=None,folder='DESIGNS/DSN_*'). Starts a design class, which manages a config and state.; Will run design in folder, and with self indexing name if '*' is; included in the folder name.; Methods are wrappers for SU2.eval.func() and SU2.eval.grad(). Attributes:; state - design state; config - design config; files - design files; folder - design folder; funcs - design function value bunch; grads - design gradient values bunch. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name) - function of specified name; grad(func_name,method='CONTINUOUS_ADJOINT') - gradient of specified name; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:19,Modifiability,config,config,19,"""""""SU2.eval.Design(config,state=None,folder='DESIGNS/DSN_*'). Starts a design class, which manages a config and state.; Will run design in folder, and with self indexing name if '*' is; included in the folder name.; Methods are wrappers for SU2.eval.func() and SU2.eval.grad(). Attributes:; state - design state; config - design config; files - design files; folder - design folder; funcs - design function value bunch; grads - design gradient values bunch. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name) - function of specified name; grad(func_name,method='CONTINUOUS_ADJOINT') - gradient of specified name; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:101,Modifiability,config,config,101,"""""""SU2.eval.Design(config,state=None,folder='DESIGNS/DSN_*'). Starts a design class, which manages a config and state.; Will run design in folder, and with self indexing name if '*' is; included in the folder name.; Methods are wrappers for SU2.eval.func() and SU2.eval.grad(). Attributes:; state - design state; config - design config; files - design files; folder - design folder; funcs - design function value bunch; grads - design gradient values bunch. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name) - function of specified name; grad(func_name,method='CONTINUOUS_ADJOINT') - gradient of specified name; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:313,Modifiability,config,config,313,"""""""SU2.eval.Design(config,state=None,folder='DESIGNS/DSN_*'). Starts a design class, which manages a config and state.; Will run design in folder, and with self indexing name if '*' is; included in the folder name.; Methods are wrappers for SU2.eval.func() and SU2.eval.grad(). Attributes:; state - design state; config - design config; files - design files; folder - design folder; funcs - design function value bunch; grads - design gradient values bunch. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name) - function of specified name; grad(func_name,method='CONTINUOUS_ADJOINT') - gradient of specified name; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:329,Modifiability,config,config,329,"""""""SU2.eval.Design(config,state=None,folder='DESIGNS/DSN_*'). Starts a design class, which manages a config and state.; Will run design in folder, and with self indexing name if '*' is; included in the folder name.; Methods are wrappers for SU2.eval.func() and SU2.eval.grad(). Attributes:; state - design state; config - design config; files - design files; folder - design folder; funcs - design function value bunch; grads - design gradient values bunch. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name) - function of specified name; grad(func_name,method='CONTINUOUS_ADJOINT') - gradient of specified name; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:15,Modifiability,config,config,15,"# save design, config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:40,Modifiability,config,config,40,"""""""Evaluates an SU2 Design; always adds config and state to the inputs list; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:27,Deployability,update,update,27,"#: with redirect folder; # update files",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:28,Modifiability,config,config,28,"""""""val = SU2.eval.obj_f(dvs,config,state=None). Evaluates SU2 Objectives; Wraps SU2.eval.func(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Outputs a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:192,Modifiability,config,config,192,"""""""val = SU2.eval.obj_f(dvs,config,state=None). Evaluates SU2 Objectives; Wraps SU2.eval.func(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Outputs a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:9,Modifiability,config,config,9,"# unpack config and state",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:73,Deployability,update,update,73,"#: for each objective; # If evaluating the combined function is desired, update it here.; # This is only used when OPT_COMBINE_OBJECTIVE = YES",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:30,Modifiability,config,config,30,"""""""vals = SU2.eval.obj_df(dvs,config,state=None). Evaluates SU2 Objective Gradients; Wraps SU2.eval.grad(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Outputs a list of gradients.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:203,Modifiability,config,config,203,"""""""vals = SU2.eval.obj_df(dvs,config,state=None). Evaluates SU2 Objective Gradients; Wraps SU2.eval.grad(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Outputs a list of gradients.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:9,Modifiability,config,config,9,"# unpack config and state",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:103,Deployability,update,updated,103,"# For multiple objectives are evaluated one-by-one rather than combined; # MARKER_MONITORING should be updated to only include the marker for i_obj; # For single objectives, multiple markers can be used",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:31,Modifiability,config,config,31,"""""""vals = SU2.eval.con_ceq(dvs,config,state=None). Evaluates SU2 Equality Constraints; Wraps SU2.eval.func(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns: a list of constraint values, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:205,Modifiability,config,config,205,"""""""vals = SU2.eval.con_ceq(dvs,config,state=None). Evaluates SU2 Equality Constraints; Wraps SU2.eval.func(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns: a list of constraint values, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:306,Modifiability,config,config,306,"""""""vals = SU2.eval.con_ceq(dvs,config,state=None). Evaluates SU2 Equality Constraints; Wraps SU2.eval.func(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns: a list of constraint values, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:19,Modifiability,config,config,19,"# unpack state and config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:32,Modifiability,config,config,32,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Equality Constraint Gradients; Wraps SU2.eval.grad(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:215,Modifiability,config,config,215,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Equality Constraint Gradients; Wraps SU2.eval.grad(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:327,Modifiability,config,config,327,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Equality Constraint Gradients; Wraps SU2.eval.grad(). Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:19,Modifiability,config,config,19,"# unpack state and config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:32,Modifiability,config,config,32,"""""""vals = SU2.eval.con_cieq(dvs,config,state=None). Evaluates SU2 Inequality Constraints; Wraps SU2.eval.func(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of constraint gradients, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:233,Modifiability,config,config,233,"""""""vals = SU2.eval.con_cieq(dvs,config,state=None). Evaluates SU2 Inequality Constraints; Wraps SU2.eval.func(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of constraint gradients, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:336,Modifiability,config,config,336,"""""""vals = SU2.eval.con_cieq(dvs,config,state=None). Evaluates SU2 Inequality Constraints; Wraps SU2.eval.func(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of constraint gradients, ordered; by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:19,Modifiability,config,config,19,"# unpack state and config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:32,Modifiability,config,config,32,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Inequality Constraint Gradients; Wraps SU2.eval.grad(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:242,Modifiability,config,config,242,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Inequality Constraint Gradients; Wraps SU2.eval.grad(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:354,Modifiability,config,config,354,"""""""vals = SU2.eval.con_dceq(dvs,config,state=None). Evaluates SU2 Inequality Constraint Gradients; Wraps SU2.eval.grad(); Convention is con(x)<=0. Takes a design vector for input as a list (shape n); or numpy array (shape n or nx1 or 1xn), a config; and optionally a state. Returns a list of lists of constraint gradients,; ordered by the OPT_CONSTRAINT config parameter.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:19,Modifiability,config,config,19,"# unpack state and config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:18,Modifiability,config,config,18,"""""""SU2.eval.touch(config,state); resets state timestamp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py:17,Modifiability,config,config,17,"""""""SU2.eval.skip(config,state); does nothing; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/design.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/design.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:33,Modifiability,config,config,33,"""""""val = SU2.eval.func(func_name,config,state=None). Evaluates the aerodynamics and geometry functions. Wraps:; SU2.eval.aerodynamics(); SU2.eval.geometry(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT or ./GEOMETRY. Inputs:; func_name - SU2 objective function name or 'ALL'; config - an SU2 config; state - optional, an SU2 state. Outputs:; If func_name is 'ALL', returns a Bunch() of; functions with keys of objective function names; and values of objective function floats.; Otherwise returns a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:250,Modifiability,config,config,250,"""""""val = SU2.eval.func(func_name,config,state=None). Evaluates the aerodynamics and geometry functions. Wraps:; SU2.eval.aerodynamics(); SU2.eval.geometry(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT or ./GEOMETRY. Inputs:; func_name - SU2 objective function name or 'ALL'; config - an SU2 config; state - optional, an SU2 state. Outputs:; If func_name is 'ALL', returns a Bunch() of; functions with keys of objective function names; and values of objective function floats.; Otherwise returns a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:423,Modifiability,config,config,423,"""""""val = SU2.eval.func(func_name,config,state=None). Evaluates the aerodynamics and geometry functions. Wraps:; SU2.eval.aerodynamics(); SU2.eval.geometry(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT or ./GEOMETRY. Inputs:; func_name - SU2 objective function name or 'ALL'; config - an SU2 config; state - optional, an SU2 state. Outputs:; If func_name is 'ALL', returns a Bunch() of; functions with keys of objective function names; and values of objective function floats.; Otherwise returns a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:439,Modifiability,config,config,439,"""""""val = SU2.eval.func(func_name,config,state=None). Evaluates the aerodynamics and geometry functions. Wraps:; SU2.eval.aerodynamics(); SU2.eval.geometry(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT or ./GEOMETRY. Inputs:; func_name - SU2 objective function name or 'ALL'; config - an SU2 config; state - optional, an SU2 state. Outputs:; If func_name is 'ALL', returns a Bunch() of; functions with keys of objective function names; and values of objective function floats.; Otherwise returns a float.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:2,Safety,redund,redundancy,2,"# redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Availability,redundant,redundant,10,"#: if not redundant; # prepare output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Safety,redund,redundant,10,"#: if not redundant; # prepare output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:32,Modifiability,config,config,32,"""""""vals = SU2.eval.aerodynamics(config,state=None). Evaluates aerodynamics with the following:; SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:230,Modifiability,config,config,230,"""""""vals = SU2.eval.aerodynamics(config,state=None). Evaluates aerodynamics with the following:; SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:339,Modifiability,config,config,339,"""""""vals = SU2.eval.aerodynamics(config,state=None). Evaluates aerodynamics with the following:; SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:355,Modifiability,config,config,355,"""""""vals = SU2.eval.aerodynamics(config,state=None). Evaluates aerodynamics with the following:; SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS is not empty. Executes in:; ./DIRECT. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:196,Energy Efficiency,adapt,adaptation,196,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_FUNC']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Direct Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:180,Modifiability,config,config,180,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_FUNC']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Direct Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:196,Modifiability,adapt,adaptation,196,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_FUNC']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Direct Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:207,Modifiability,config,config,207,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_FUNC']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Direct Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:2,Safety,redund,redundancy,2,"# redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:6,Availability,redundant,redundant,6,"#: if redundant; # files to pull",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:6,Safety,redund,redundant,6,"#: if redundant; # files to pull",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:2,Modifiability,config,config,2,"##config['RESTART_SOL'] = 'YES' # don't override config file",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:49,Modifiability,config,config,49,"##config['RESTART_SOL'] = 'YES' # don't override config file",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:25,Performance,optimiz,optimization,25,"# rules out steady state optimization special cases.",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:12,Performance,optimiz,optimization,12,"# for shape optimization with restart files.",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:2,Modifiability,config,config,2,"##config['RESTART_SOL'] = 'YES' # don't override config file",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:49,Modifiability,config,config,49,"##config['RESTART_SOL'] = 'YES' # don't override config file",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:42,Availability,avail,available,42,"# If solution file for the first point is available, use it",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:43,Availability,avail,available,43,"# If flow.meta file for the first point is available, rename it before using it",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:9,Modifiability,config,config,9,"# Update config values",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:27,Modifiability,config,config,27,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:223,Modifiability,config,config,223,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:345,Modifiability,config,config,345,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:361,Modifiability,config,config,361,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:205,Modifiability,config,config,205,"# ----------------------------------------------------; # Update Mesh (check with Trent); # ----------------------------------------------------; # does decomposition and deformation; # info = update_mesh(config,state); # ----------------------------------------------------; # Geometry Solution; # ----------------------------------------------------; # redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:355,Safety,redund,redundancy,355,"# ----------------------------------------------------; # Update Mesh (check with Trent); # ----------------------------------------------------; # does decomposition and deformation; # info = update_mesh(config,state); # ----------------------------------------------------; # Geometry Solution; # ----------------------------------------------------; # redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:2,Deployability,update,update,2,"# update function name; ## TODO; # output redirection",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:8,Modifiability,config,config,8,"# setup config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Availability,redundant,redundant,10,"#: if not redundant; # return output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Safety,redund,redundant,10,"#: if not redundant; # return output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:44,Deployability,update,updates,44,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:24,Modifiability,config,config,24,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:194,Modifiability,config,config,194,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:271,Modifiability,config,config,271,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:287,Modifiability,config,config,287,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:357,Modifiability,config,config,357,"""""""SU2.eval.update_mesh(config,state=None). updates mesh with the following:; SU2.run.deform(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference. Executes in:; ./DECOMP and ./DEFORM. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; nothing. Modifies:; config and state by reference; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:129,Safety,redund,redundancy,129,"# ----------------------------------------------------; # Deformation; # ----------------------------------------------------; # redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Availability,redundant,redundant,10,"#: if not redundant",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py:10,Safety,redund,redundant,10,"#: if not redundant",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/functions.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/functions.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:40,Modifiability,config,config,40,"""""""val = SU2.eval.grad(func_name,method,config,state=None). Evaluates the aerodynamic gradients. Wraps:; SU2.eval.adjoint(); SU2.eval.findiff(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.GRADIENTS has the key func_name. Executes in:; ./ADJOINT_* or ./FINDIFF. Inputs:; func_name - SU2 objective function name; method - 'CONTINUOUS_ADJOINT' or 'FINDIFF' or 'DISCRETE_ADJOINT'; config - an SU2 config; state - optional, an SU2 state. Outputs:; A list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:237,Modifiability,config,config,237,"""""""val = SU2.eval.grad(func_name,method,config,state=None). Evaluates the aerodynamic gradients. Wraps:; SU2.eval.adjoint(); SU2.eval.findiff(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.GRADIENTS has the key func_name. Executes in:; ./ADJOINT_* or ./FINDIFF. Inputs:; func_name - SU2 objective function name; method - 'CONTINUOUS_ADJOINT' or 'FINDIFF' or 'DISCRETE_ADJOINT'; config - an SU2 config; state - optional, an SU2 state. Outputs:; A list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:478,Modifiability,config,config,478,"""""""val = SU2.eval.grad(func_name,method,config,state=None). Evaluates the aerodynamic gradients. Wraps:; SU2.eval.adjoint(); SU2.eval.findiff(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.GRADIENTS has the key func_name. Executes in:; ./ADJOINT_* or ./FINDIFF. Inputs:; func_name - SU2 objective function name; method - 'CONTINUOUS_ADJOINT' or 'FINDIFF' or 'DISCRETE_ADJOINT'; config - an SU2 config; state - optional, an SU2 state. Outputs:; A list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:494,Modifiability,config,config,494,"""""""val = SU2.eval.grad(func_name,method,config,state=None). Evaluates the aerodynamic gradients. Wraps:; SU2.eval.adjoint(); SU2.eval.findiff(). Assumptions:; Config is already setup for deformation.; Mesh need not be deformed.; Updates config and state by reference.; Redundancy if state.GRADIENTS has the key func_name. Executes in:; ./ADJOINT_* or ./FINDIFF. Inputs:; func_name - SU2 objective function name; method - 'CONTINUOUS_ADJOINT' or 'FINDIFF' or 'DISCRETE_ADJOINT'; config - an SU2 config; state - optional, an SU2 state. Outputs:; A list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:2,Safety,redund,redundancy,2,"# redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:9,Availability,redundant,redundant,9,"# if not redundant; # prepare output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:9,Safety,redund,redundant,9,"# if not redundant; # prepare output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:37,Modifiability,config,config,37,"""""""vals = SU2.eval.adjoint(func_name,config,state=None). Evaluates the aerodynamics gradients using the; adjoint methodology with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(); SU2.run.adjoint(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Adjoint Redundancy if state.GRADIENTS has key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./ADJOINT_<func_name>. Inputs:; func_name - SU2 objective function name; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:302,Modifiability,config,config,302,"""""""vals = SU2.eval.adjoint(func_name,config,state=None). Evaluates the aerodynamics gradients using the; adjoint methodology with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(); SU2.run.adjoint(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Adjoint Redundancy if state.GRADIENTS has key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./ADJOINT_<func_name>. Inputs:; func_name - SU2 objective function name; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:535,Modifiability,config,config,535,"""""""vals = SU2.eval.adjoint(func_name,config,state=None). Evaluates the aerodynamics gradients using the; adjoint methodology with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(); SU2.run.adjoint(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Adjoint Redundancy if state.GRADIENTS has key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./ADJOINT_<func_name>. Inputs:; func_name - SU2 objective function name; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:551,Modifiability,config,config,551,"""""""vals = SU2.eval.adjoint(func_name,config,state=None). Evaluates the aerodynamics gradients using the; adjoint methodology with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(); SU2.run.adjoint(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Adjoint Redundancy if state.GRADIENTS has key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./ADJOINT_<func_name>. Inputs:; func_name - SU2 objective function name; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:141,Safety,redund,redundancy,141,"# ----------------------------------------------------; # Redundancy Check; # ----------------------------------------------------; # master redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:147,Safety,redund,redundancy,147,"# ----------------------------------------------------; # Direct Solution; # ----------------------------------------------------; # run (includes redundancy checks)",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:199,Energy Efficiency,adapt,adaptation,199,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_ADJOINT']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Adjoint Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:183,Modifiability,config,config,183,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_ADJOINT']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Adjoint Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:199,Modifiability,adapt,adaptation,199,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_ADJOINT']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Adjoint Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:210,Modifiability,config,config,210,"# ----------------------------------------------------; # Adaptation (not implemented); # ----------------------------------------------------; # if not state.['ADAPTED_ADJOINT']:; # config = su2run.adaptation(config); # state['ADAPTED_FUNC'] = True; # ----------------------------------------------------; # Adjoint Solution; # ----------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:25,Performance,optimiz,optimization,25,"# rules out steady state optimization special cases.",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:12,Performance,optimiz,optimization,12,"# for shape optimization with restart files.",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:71,Performance,optimiz,optimization,71,"# Restart solution gets handled just before solver starts for unsteady optimization",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:27,Modifiability,config,config,27,"# Format objective list in config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:197,Modifiability,config,config,197,"# # ----------------------------------------------------; # # Update Mesh; # # ----------------------------------------------------; #; # # does decomposition and deformation; # info = update_mesh(config,state); # ----------------------------------------------------; # FIRST POINT; # ----------------------------------------------------; # will run in ADJOINT/",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:43,Availability,avail,available,43,"# If flow.meta file for the first point is available, rename it before using it",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:14,Modifiability,config,config,14,"# Set correct config option names",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:27,Modifiability,config,config,27,"""""""vals = SU2.eval.findiff(config,state=None). Evaluates the aerodynamics gradients using; finite differencing with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./FINDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:269,Modifiability,config,config,269,"""""""vals = SU2.eval.findiff(config,state=None). Evaluates the aerodynamics gradients using; finite differencing with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./FINDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:454,Modifiability,config,config,454,"""""""vals = SU2.eval.findiff(config,state=None). Evaluates the aerodynamics gradients using; finite differencing with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./FINDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:470,Modifiability,config,config,470,"""""""vals = SU2.eval.findiff(config,state=None). Evaluates the aerodynamics gradients using; finite differencing with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./FINDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:141,Safety,redund,redundancy,141,"# ----------------------------------------------------; # Redundancy Check; # ----------------------------------------------------; # master redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:147,Modifiability,config,config,147,"# ----------------------------------------------------; # Finite Difference Steps; # ----------------------------------------------------; # local config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:27,Modifiability,config,config,27,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:223,Modifiability,config,config,223,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:345,Modifiability,config,config,345,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:361,Modifiability,config,config,361,"""""""val = SU2.eval.geometry(config,state=None). Evaluates geometry with the following:; SU2.run.deform(); SU2.run.geometry(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Redundancy if state.FUNCTIONS does not have func_name. Executes in:; ./GEOMETRY. Inputs:; config - an SU2 config; state - optional, an SU2 state. Outputs:; Bunch() of functions with keys of objective function names; and values of objective function floats.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:205,Modifiability,config,config,205,"# ----------------------------------------------------; # Update Mesh (check with Trent); # ----------------------------------------------------; # does decomposition and deformation; # info = update_mesh(config,state); # ----------------------------------------------------; # Geometry Solution; # ----------------------------------------------------; # redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:355,Safety,redund,redundancy,355,"# ----------------------------------------------------; # Update Mesh (check with Trent); # ----------------------------------------------------; # does decomposition and deformation; # info = update_mesh(config,state); # ----------------------------------------------------; # Geometry Solution; # ----------------------------------------------------; # redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:2,Deployability,update,update,2,"# update function name; ## TODO; # output redirection",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:8,Modifiability,config,config,8,"# setup config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:10,Availability,redundant,redundant,10,"#: if not redundant; # return output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:10,Safety,redund,redundant,10,"#: if not redundant; # return output",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:30,Modifiability,config,config,30,"""""""vals = SU2.eval.directdiff(config,state=None). Evaluates the aerodynamics gradients using; direct differentiation with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./DIRECTDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state; step - finite difference step size, as a float or; list of floats of length n_DV. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:275,Modifiability,config,config,275,"""""""vals = SU2.eval.directdiff(config,state=None). Evaluates the aerodynamics gradients using; direct differentiation with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./DIRECTDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state; step - finite difference step size, as a float or; list of floats of length n_DV. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:463,Modifiability,config,config,463,"""""""vals = SU2.eval.directdiff(config,state=None). Evaluates the aerodynamics gradients using; direct differentiation with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./DIRECTDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state; step - finite difference step size, as a float or; list of floats of length n_DV. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:479,Modifiability,config,config,479,"""""""vals = SU2.eval.directdiff(config,state=None). Evaluates the aerodynamics gradients using; direct differentiation with:; SU2.eval.func(); SU2.run.deform(); SU2.run.direct(). Assumptions:; Config is already setup for deformation.; Mesh may or may not be deformed.; Updates config and state by reference.; Gradient Redundancy if state.GRADIENTS has the key func_name.; Direct Redundancy if state.FUNCTIONS has key func_name. Executes in:; ./DIRECTDIFF. Inputs:; config - an SU2 config; state - optional, an SU2 state; step - finite difference step size, as a float or; list of floats of length n_DV. Outputs:; A Bunch() with keys of objective function names; and values of list of floats of gradient values; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:141,Safety,redund,redundancy,141,"# ----------------------------------------------------; # Redundancy Check; # ----------------------------------------------------; # master redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py:157,Modifiability,config,config,157,"# ----------------------------------------------------; # Direct Differentiation Evaluation; # ----------------------------------------------------; # local config",MatchSource.CODE_COMMENT,SU2_PY/SU2/eval/gradients.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/eval/gradients.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:32,Modifiability,config,config,32,"#!/usr/bin/env python; ## \file config.py; # \brief python package for config; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:71,Modifiability,config,config,71,"#!/usr/bin/env python; ## \file config.py; # \brief python package for config; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:3,Modifiability,config,config,3,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:49,Modifiability,config,config,49,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:126,Modifiability,config,config,126,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:139,Modifiability,config,config,139,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:219,Modifiability,config,config,219,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:280,Modifiability,config,config,280,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:359,Modifiability,config,config,359,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:386,Modifiability,config,config,386,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:439,Modifiability,config,config,439,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:473,Modifiability,config,config,473,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:531,Modifiability,config,config,531,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:628,Modifiability,config,config,628,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:680,Modifiability,config,config,680,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:324,Security,access,accessed,324,"""""""config = SU2.io.Config(filename=""""). Starts a config class, an extension of; ordered_bunch(). use 1: initialize by reading config file; config = SU2.io.Config('filename'); use 2: initialize from dictionary or bunch; config = SU2.io.Config(param_dict); use 3: initialize empty; config = SU2.io.Config(). Parameters can be accessed by item or attribute; ie: config['MESH_FILENAME'] or config.MESH_FILENAME. Methods:; read() - read from a config file; write() - write to a config file (requires existing file); dump() - dump a raw config file; unpack_dvs() - unpack a design vector; diff() - returns the difference from another config; dist() - computes the distance from another config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:7,Modifiability,config,config,7,"# read config if it exists",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:16,Modifiability,config,config,16,"""""""reads from a config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:3,Deployability,update,updates,3,"""""""updates an existing config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:23,Modifiability,config,config,23,"""""""updates an existing config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:26,Modifiability,config,config,26,"""""""dumps all items in the config bunch, without comments""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:3,Deployability,update,updates,3,"""""""updates config with design variable vectors; will scale according to each DEFINITION_DV scale parameter. Modifies:; DV_KIND; DV_MARKER; DV_PARAM; DV_VALUE_OLD; DV_VALUE_NEW. Inputs:; dv_new - list or array of new dv values; dv_old - optional, list or array of old dv values, defaults to zeros. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:11,Modifiability,config,config,11,"""""""updates config with design variable vectors; will scale according to each DEFINITION_DV scale parameter. Modifies:; DV_KIND; DV_MARKER; DV_PARAM; DV_VALUE_OLD; DV_VALUE_NEW. Inputs:; dv_new - list or array of new dv values; dv_old - optional, list or array of old dv values, defaults to zeros. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:30,Modifiability,variab,variable,30,"""""""updates config with design variable vectors; will scale according to each DEFINITION_DV scale parameter. Modifies:; DV_KIND; DV_MARKER; DV_PARAM; DV_VALUE_OLD; DV_VALUE_NEW. Inputs:; dv_new - list or array of new dv values; dv_old - optional, list or array of old dv values, defaults to zeros. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:38,Modifiability,variab,variables,38,"# Change the parameters of the design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:28,Modifiability,config,config,28,"""""""compares self to another config. Inputs:; konfig - a second config. Outputs:; config_diff - a config containing only the differing; keys, each with values of a list of the different; config values.; for example:; config_diff.MATH_PROBLEM = ['DIRECT','CONTINUOUS_ADJOINT']. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:63,Modifiability,config,config,63,"""""""compares self to another config. Inputs:; konfig - a second config. Outputs:; config_diff - a config containing only the differing; keys, each with values of a list of the different; config values.; for example:; config_diff.MATH_PROBLEM = ['DIRECT','CONTINUOUS_ADJOINT']. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:97,Modifiability,config,config,97,"""""""compares self to another config. Inputs:; konfig - a second config. Outputs:; config_diff - a config containing only the differing; keys, each with values of a list of the different; config values.; for example:; config_diff.MATH_PROBLEM = ['DIRECT','CONTINUOUS_ADJOINT']. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:186,Modifiability,config,config,186,"""""""compares self to another config. Inputs:; konfig - a second config. Outputs:; config_diff - a config containing only the differing; keys, each with values of a list of the different; config values.; for example:; config_diff.MATH_PROBLEM = ['DIRECT','CONTINUOUS_ADJOINT']. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:36,Modifiability,config,config,36,"""""""calculates a distance to another config. Inputs:; konfig - a second config; keys_check - optional, a list of keys to check. Outputs:; distance - a float. Currently only works for DV_VALUE_NEW and DV_VALUE_OLD; Returns a large value otherwise. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:71,Modifiability,config,config,71,"""""""calculates a distance to another config. Inputs:; konfig - a second config; keys_check - optional, a list of keys to check. Outputs:; distance - a float. Currently only works for DV_VALUE_NEW and DV_VALUE_OLD; Returns a large value otherwise. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:11,Modifiability,config,config,11,"""""""reads a config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:266,Availability,error,error,266,"# --- Check if there is a line continuation character at the; # end of the current line or somewhere in between (the rest is ignored then).; # If yes, read until there is a line without one or an empty line.; # If there is a statement after a cont. char; # throw an error. ---*/",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:17,Modifiability,variab,variable,17,"# unitary design variable definition",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:11,Availability,error,error,11,"# Print an error and exit if the same key appears twice",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:24,Performance,optimiz,optimization,24,"#; # Default values for optimization parameters (needed for some eval functions; # that can be called outside of an opt. context.; #",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:3,Deployability,update,updates,3,"""""""updates an existing config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:23,Modifiability,config,config,23,"""""""updates an existing config file""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:15,Modifiability,config,config,15,"""""""dumps a raw config file with all options in config; and no comments; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py:47,Modifiability,config,config,47,"""""""dumps a raw config file with all options in config; and no comments; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:55,Modifiability,config,config,55,"# \file config_options.py; # \brief python package for config; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:10,Modifiability,config,config,10,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:49,Modifiability,variab,variables,49,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:67,Modifiability,variab,variables,67,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:117,Modifiability,variab,variables,117,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:490,Modifiability,variab,variables,490,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:1194,Modifiability,variab,variables,1194,"""""""SU2.io.config.DEFINITION_DV(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:10,Modifiability,config,config,10,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:43,Modifiability,variab,variables,43,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:61,Modifiability,variab,variables,61,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:111,Modifiability,variab,variables,111,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:484,Modifiability,variab,variables,484,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py:1188,Modifiability,variab,variables,1188,"""""""SU2.io.config.DV_KIND(). List of design variables (Design variables are separated by semicolons); 2D Design variables; -FFD_CONTROL_POINT_2D ( 19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov ); -FFD_CAMBER_2D 	 ( 20, Scale | Mark. List | FFD_BoxTag, i_Ind ); -FFD_THICKNESS_2D 	 ( 21, Scale | Mark. List | FFD_BoxTag, i_Ind ); -HICKS_HENNE 	 ( 30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc ); -ANGLE_OF_ATTACK	 ( 101, Scale | Mark. List | 1.0 ). 3D Design variables; -FFD_CONTROL_POINT ( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov ); -FFD_NACELLE ( 12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov ); -FFD_GULL ( 13, Scale | Mark. List | FFD_BoxTag, j_Ind ); -FFD_CAMBER 	 ( 14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_TWIST 	 ( 15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ); -FFD_THICKNESS 	 ( 16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind ); -FFD_ROTATION	 ( 18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ); -FFD_ANGLE_OF_ATTACK ( 24, Scale | Mark. List | FFD_BoxTag, 1.0 ). Global design variables; -TRANSLATION ( 1, Scale | Mark. List | x_Disp, y_Disp, z_Disp ); -ROTATION	 ( 2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn ). """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/config_options.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/config_options.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:215,Modifiability,variab,variable,215,"""""""data = load_data( file_name, var_names=None ,; file_format = 'infer' ,; core_name = 'python_data' ). loads dictionary of data from python pickle or matlab struct. Inputs:; file_name - data file name; var_names - variable names to read; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. default looks for variable 'python_data' in file_name; file_format = pickle, will return any python object; file_format = matlab, will return strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:365,Modifiability,variab,variable,365,"""""""data = load_data( file_name, var_names=None ,; file_format = 'infer' ,; core_name = 'python_data' ). loads dictionary of data from python pickle or matlab struct. Inputs:; file_name - data file name; var_names - variable names to read; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. default looks for variable 'python_data' in file_name; file_format = pickle, will return any python object; file_format = matlab, will return strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:104,Performance,load,loads,104,"""""""data = load_data( file_name, var_names=None ,; file_format = 'infer' ,; core_name = 'python_data' ). loads dictionary of data from python pickle or matlab struct. Inputs:; file_name - data file name; var_names - variable names to read; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. default looks for variable 'python_data' in file_name; file_format = pickle, will return any python object; file_format = matlab, will return strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:535,Performance,load,loadmat,535,"""""""data = load_data( file_name, var_names=None ,; file_format = 'infer' ,; core_name = 'python_data' ). loads dictionary of data from python pickle or matlab struct. Inputs:; file_name - data file name; var_names - variable names to read; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. default looks for variable 'python_data' in file_name; file_format = pickle, will return any python object; file_format = matlab, will return strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:12,Modifiability,variab,variable,12,"# pull core variable",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:12,Modifiability,variab,variable,12,"# pull core variable",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:20,Performance,load,load,20,"#: with filelock; # load specified varname into dictionary",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:7,Performance,load,load,7,"#: def load(); # -------------------------------------------------------------------; # Save a Dictionary of Data; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:479,Performance,load,loadmat,479,"""""""save_data( file_name, data_dict, append=False ,; file_format = 'infer' ,; core_name='python_data' ):. Inputs:; file_name - data file name; data_dict - a dictionary or bunch to write; append - True/False to append existing data; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. file_format = pickle, will save any pickleable python object; file_format = matlab, will save strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'). matlab format saves data file from matlab 5 and later; will save nested dictionaries into nested matlab structures; cannot save classes and modules; uses scipy.io.loadmat; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:733,Performance,load,loadmat,733,"""""""save_data( file_name, data_dict, append=False ,; file_format = 'infer' ,; core_name='python_data' ):. Inputs:; file_name - data file name; data_dict - a dictionary or bunch to write; append - True/False to append existing data; file_format - 'infer', 'pickle', or 'matlab'; core_name - data is stored under a dictionary with this name. file_format = pickle, will save any pickleable python object; file_format = matlab, will save strings or float lists and; requires scipy.io.loadmat; file_format = infer (default), will infer format from extention; ('.mat','.pkl'). matlab format saves data file from matlab 5 and later; will save nested dictionaries into nested matlab structures; cannot save classes and modules; uses scipy.io.loadmat; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:2,Performance,load,load,2,"# load old data",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:34,Performance,load,loads,34,"""""""data = load_pickle(file_name); loads a pickle with core_data dictionaries; assumes first entry is a list of all following data names; returns dictionary of data; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:24,Performance,load,loadf,24,"# names = safe_unpickle.loadf(pkl_file)",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:33,Performance,load,loadf,33,"# data_dict[key] = safe_unpickle.loadf(pkl_file)",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:676,Modifiability,config,config,676,"# -------------------------------------------------------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1571,Modifiability,extend,extend,1571,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:279,Performance,load,loaded,279,"# -------------------------------------------------------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1582,Performance,load,load,1582,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1593,Performance,load,loads,1593,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1632,Performance,load,loadf,1632,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1660,Performance,load,loads,1660,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1685,Performance,load,load,1685,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1720,Performance,load,load,1720,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1750,Performance,load,loads,1750,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1779,Performance,load,loads,1779,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1806,Performance,load,loads,1806,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1863,Performance,load,load,1863,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:216,Safety,safe,safety,216,"# -------------------------------------------------------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:403,Safety,safe,safe,403,"# -------------------------------------------------------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1306,Safety,unsafe,unsafe,1306,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:1492,Safety,unsafe,unsafe,1492,"-------------------; # Safe UnPickle; # -------------------------------------------------------------------; # class safe_unpickle(pickle.Unpickler):; #''' adds some safety to unpickling; # checks that only supported classes are loaded; # original source from http://nadiana.com/python-pickle-insecure#comment-144; #'''; ## modules : classes considered safe; # PICKLE_SAFE = {; #'copy_reg' : ['_reconstructor'] ,; #'__builtin__' : ['object'] ,; #'numpy' : ['dtype','ndarray'] ,; #'numpy.core.multiarray' : ['scalar','_reconstruct'] ,; #'collections' : ['OrderedDict'] ,; #'SU2.io.state' : ['State'] , # SU2 Specific; #'SU2.io.config' : ['Config'] ,; #'SU2.eval.design' : ['Design'] ,; #'SU2.opt.project' : ['Project'] ,; #'SU2.util.ordered_bunch' : ['OrderedBunch'] ,; #'SU2.util.bunch' : ['Bunch'] ,; #'tasks_general' : ['General_Task'] ,; #'tasks_project' : ['Project','Job'] ,; #'tasks_su2' : ['Decomp','Deform','Direct','Cont_Adjoint',; #'Multiple_Cont_Adjoint','Finite_Diff','Adapt'] ,; # }; ## make sets; # for key in PICKLE_SAFE.keys():; # PICKLE_SAFE[key] = set(PICKLE_SAFE[key]); ## check for save module/class; # def find_class(self, module, name):; # if not module in self.PICKLE_SAFE:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe module %s' % module; # ); # __import__(module); # mod = sys.modules[module]; # if not name in self.PICKLE_SAFE[module]:; # raise pickle.UnpicklingError(; #'Attempting to unpickle unsafe class %s' % name; # ); # klass = getattr(mod, name); # return klass; ## extend the load() and loads() methods; # @classmethod; # def loadf(self, pickle_file): # loads a file like pickle.load(); # return self(pickle_file).load(); # @classmethod; # def loads(self, pickle_string): #loads a string like pickle.loads(); # return self(StringIO.StringIO(pickle_string)).load(); # -------------------------------------------------------------------; # Convert Record Array to Dictionary; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:66,Performance,load,loading,66,"""""""converts numpy record array to dictionary of lists; needed for loading matlab data; assumes array comes from scipy.io.loadmat, with; squeeze_me = False and struct_as_record = True; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:121,Performance,load,loadmat,121,"""""""converts numpy record array to dictionary of lists; needed for loading matlab data; assumes array comes from scipy.io.loadmat, with; squeeze_me = False and struct_as_record = True; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:122,Deployability,update,update,122,"""""""append_nestdict(base_dict,add_dict); appends base_dict with add_dict, allowing for; updating nested dictionaries; will update base_dict in place; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py:42,Deployability,update,updated,42,"#: for add_dict[key]; # base_dict will be updated through its pointer",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/data.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/data.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:137,Safety,timeout,timeout,137,"""""""A file locking mechanism that has context-manager support so; you can use it in a with statement. Example:; with filelock(""test.txt"", timeout=2, delay=0.5):; print(""Lock acquired.""); # Do something with the locked file. Inputs:; file_name - filename to lock; timeout - default 10sec, maximum timeout to wait for lock; delay - default 0.05sec, delay between each attempt to lock; number incremented with a random perturbation. original source: Evan Fosmark, BSD license; http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:262,Safety,timeout,timeout,262,"""""""A file locking mechanism that has context-manager support so; you can use it in a with statement. Example:; with filelock(""test.txt"", timeout=2, delay=0.5):; print(""Lock acquired.""); # Do something with the locked file. Inputs:; file_name - filename to lock; timeout - default 10sec, maximum timeout to wait for lock; delay - default 0.05sec, delay between each attempt to lock; number incremented with a random perturbation. original source: Evan Fosmark, BSD license; http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:295,Safety,timeout,timeout,295,"""""""A file locking mechanism that has context-manager support so; you can use it in a with statement. Example:; with filelock(""test.txt"", timeout=2, delay=0.5):; print(""Lock acquired.""); # Do something with the locked file. Inputs:; file_name - filename to lock; timeout - default 10sec, maximum timeout to wait for lock; delay - default 0.05sec, delay between each attempt to lock; number incremented with a random perturbation. original source: Evan Fosmark, BSD license; http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:126,Testability,test,test,126,"""""""A file locking mechanism that has context-manager support so; you can use it in a with statement. Example:; with filelock(""test.txt"", timeout=2, delay=0.5):; print(""Lock acquired.""); # Do something with the locked file. Inputs:; file_name - filename to lock; timeout - default 10sec, maximum timeout to wait for lock; delay - default 0.05sec, delay between each attempt to lock; number incremented with a random perturbation. original source: Evan Fosmark, BSD license; http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:81,Safety,timeout,timeout,81,"""""""Prepare the file locker. Specify the file to lock and optionally; the maximum timeout and the delay between each attempt to lock.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:151,Safety,timeout,timeout,151,"""""""Acquire the lock, if possible. If the lock is in use, it check again; every `wait` seconds. It does this until it either gets the lock or; exceeds `timeout` number of seconds, in which case it throws; an exception.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py:65,Deployability,release,releases,65,"""""""Activated at the end of the with statement.; It automatically releases the lock if it isn't locked.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/filelock.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/filelock.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py:262,Availability,error,error,262,"""""""with SU2.io.redirect_output(stdout,stderr). Temporarily redirects sys.stdout and sys.stderr when used in; a 'with' contextmanager. Example:; with SU2.io.redirect_output('stdout.txt','stderr.txt'):; sys.stdout.write(""standard out""); sys.stderr.write(""stanrard error""); # code; #: with output redirection. Inputs:; stdout - None, a filename, or a file stream; stderr - None, a filename, or a file stream; None will not redirect outptu. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/redirect.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py:834,Modifiability,extend,extended,834,"""""""with SU2.io.redirect_folder(folder,pull,link,force) as push. Temporarily redirects to a working folder, pulling; and pushing needed files. Example:. folder = 'temp'; pull = ['file1.txt','file2.txt']; link = ['file3.big']; force = True. # original path; import os; print(os.getcwd()). # enter folder; with SU2.io.redirect_folder(folder,pull,link,force) as push:; print(os.getcwd()); # code; push.append('file4.txt'); #: with folder redirection. # returned to original path; print(os.getcwd()). Inputs:; folder - working folder, relative or absolute; pull - list of files to pull (copy to working folder); link - list of files to link (symbolic link in working folder); force - True/False overwrite existing files in working folder. Targets:; push - list of files to push (copy to originating path). Notes:; push must be appended or extended, not overwritten; links in Windows not supported, will simply copy; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/redirect.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py:898,Usability,simpl,simply,898,"""""""with SU2.io.redirect_folder(folder,pull,link,force) as push. Temporarily redirects to a working folder, pulling; and pushing needed files. Example:. folder = 'temp'; pull = ['file1.txt','file2.txt']; link = ['file3.big']; force = True. # original path; import os; print(os.getcwd()). # enter folder; with SU2.io.redirect_folder(folder,pull,link,force) as push:; print(os.getcwd()); # code; push.append('file4.txt'); #: with folder redirection. # returned to original path; print(os.getcwd()). Inputs:; folder - working folder, relative or absolute; pull - list of files to pull (copy to working folder); link - list of files to link (symbolic link in working folder); force - True/False overwrite existing files in working folder. Targets:; push - list of files to push (copy to originating path). Notes:; push must be appended or extended, not overwritten; links in Windows not supported, will simply copy; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/redirect.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/redirect.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:477,Deployability,update,update,477,"""""""state = SU2.io.State(). Starts a state class, an extension of ordered_bunch().; Stores data generated while traversing SU2 tool chain. Fields:; FUNCTIONS - ordered bunch of objective function values; GRADIENTS - ordered bunch of gradient value lists; VARIABLES - ordered bunch of variables; FILES - ordered bunch of file types; HISTORY - ordered bunch of history information. Fields can be accessed by item or attribute; ie: state['FUNCTIONS'] or state.FUNCTIONS. Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. Example of a filled state:; FUNCTIONS:; LIFT: 0.2353065809; DRAG: 0.042149736; SIDEFORCE: 0.0; MOMENT_X: 0.0; MOMENT_Y: 0.0; MOMENT_Z: 0.046370243; FORCE_X: 0.0370065195; FORCE_Y: 0.2361700759; FORCE_Z: 0.0; EFFICIENCY: 5.5826347517; GRADIENTS:; DRAG: [0.133697, 0.41473, 0.698497, (...); VARIABLES:; DV_VALUE_NEW: [0.002, 0.002, 0.002, (...); FILES:; MESH: mesh.su2; DIRECT: solution_flow.dat; ADJOINT_DRAG: solution_adj_cd.dat; FLOW_META: flow.meta; MULTIPOINT_DIRECT: [solution_flow_point0.dat solution_flow_point1.dat, ...]; MULTIPOINT_ADJOINT_DRAG: [solution_adj_point0_cd.dat solution_adj_point1_cd.dat, ...]; MULTIPOINT_MESH_FILENAME: [mesh_0.su2, mesh_1.su2, ... ]; MULTIPOINT_FLOW_META: [flow_point0.meta, flow_point1.meta, ...]; HISTORY:; DIRECT: {ITERATION=[1.0, 2.0, 3.0, (...); ADJOINT_DRAG: {ITERATION=[1.0, 2.0, 3.0, (...); WND_CAUCHY_DATA:; TIME_ITER; UNST_ADJOINT_ITER; ITER_AVERAGE_OBJ. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:488,Deployability,update,updates,488,"""""""state = SU2.io.State(). Starts a state class, an extension of ordered_bunch().; Stores data generated while traversing SU2 tool chain. Fields:; FUNCTIONS - ordered bunch of objective function values; GRADIENTS - ordered bunch of gradient value lists; VARIABLES - ordered bunch of variables; FILES - ordered bunch of file types; HISTORY - ordered bunch of history information. Fields can be accessed by item or attribute; ie: state['FUNCTIONS'] or state.FUNCTIONS. Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. Example of a filled state:; FUNCTIONS:; LIFT: 0.2353065809; DRAG: 0.042149736; SIDEFORCE: 0.0; MOMENT_X: 0.0; MOMENT_Y: 0.0; MOMENT_Z: 0.046370243; FORCE_X: 0.0370065195; FORCE_Y: 0.2361700759; FORCE_Z: 0.0; EFFICIENCY: 5.5826347517; GRADIENTS:; DRAG: [0.133697, 0.41473, 0.698497, (...); VARIABLES:; DV_VALUE_NEW: [0.002, 0.002, 0.002, (...); FILES:; MESH: mesh.su2; DIRECT: solution_flow.dat; ADJOINT_DRAG: solution_adj_cd.dat; FLOW_META: flow.meta; MULTIPOINT_DIRECT: [solution_flow_point0.dat solution_flow_point1.dat, ...]; MULTIPOINT_ADJOINT_DRAG: [solution_adj_point0_cd.dat solution_adj_point1_cd.dat, ...]; MULTIPOINT_MESH_FILENAME: [mesh_0.su2, mesh_1.su2, ... ]; MULTIPOINT_FLOW_META: [flow_point0.meta, flow_point1.meta, ...]; HISTORY:; DIRECT: {ITERATION=[1.0, 2.0, 3.0, (...); ADJOINT_DRAG: {ITERATION=[1.0, 2.0, 3.0, (...); WND_CAUCHY_DATA:; TIME_ITER; UNST_ADJOINT_ITER; ITER_AVERAGE_OBJ. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:283,Modifiability,variab,variables,283,"""""""state = SU2.io.State(). Starts a state class, an extension of ordered_bunch().; Stores data generated while traversing SU2 tool chain. Fields:; FUNCTIONS - ordered bunch of objective function values; GRADIENTS - ordered bunch of gradient value lists; VARIABLES - ordered bunch of variables; FILES - ordered bunch of file types; HISTORY - ordered bunch of history information. Fields can be accessed by item or attribute; ie: state['FUNCTIONS'] or state.FUNCTIONS. Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. Example of a filled state:; FUNCTIONS:; LIFT: 0.2353065809; DRAG: 0.042149736; SIDEFORCE: 0.0; MOMENT_X: 0.0; MOMENT_Y: 0.0; MOMENT_Z: 0.046370243; FORCE_X: 0.0370065195; FORCE_Y: 0.2361700759; FORCE_Z: 0.0; EFFICIENCY: 5.5826347517; GRADIENTS:; DRAG: [0.133697, 0.41473, 0.698497, (...); VARIABLES:; DV_VALUE_NEW: [0.002, 0.002, 0.002, (...); FILES:; MESH: mesh.su2; DIRECT: solution_flow.dat; ADJOINT_DRAG: solution_adj_cd.dat; FLOW_META: flow.meta; MULTIPOINT_DIRECT: [solution_flow_point0.dat solution_flow_point1.dat, ...]; MULTIPOINT_ADJOINT_DRAG: [solution_adj_point0_cd.dat solution_adj_point1_cd.dat, ...]; MULTIPOINT_MESH_FILENAME: [mesh_0.su2, mesh_1.su2, ... ]; MULTIPOINT_FLOW_META: [flow_point0.meta, flow_point1.meta, ...]; HISTORY:; DIRECT: {ITERATION=[1.0, 2.0, 3.0, (...); ADJOINT_DRAG: {ITERATION=[1.0, 2.0, 3.0, (...); WND_CAUCHY_DATA:; TIME_ITER; UNST_ADJOINT_ITER; ITER_AVERAGE_OBJ. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:603,Modifiability,variab,variables,603,"""""""state = SU2.io.State(). Starts a state class, an extension of ordered_bunch().; Stores data generated while traversing SU2 tool chain. Fields:; FUNCTIONS - ordered bunch of objective function values; GRADIENTS - ordered bunch of gradient value lists; VARIABLES - ordered bunch of variables; FILES - ordered bunch of file types; HISTORY - ordered bunch of history information. Fields can be accessed by item or attribute; ie: state['FUNCTIONS'] or state.FUNCTIONS. Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. Example of a filled state:; FUNCTIONS:; LIFT: 0.2353065809; DRAG: 0.042149736; SIDEFORCE: 0.0; MOMENT_X: 0.0; MOMENT_Y: 0.0; MOMENT_Z: 0.046370243; FORCE_X: 0.0370065195; FORCE_Y: 0.2361700759; FORCE_Z: 0.0; EFFICIENCY: 5.5826347517; GRADIENTS:; DRAG: [0.133697, 0.41473, 0.698497, (...); VARIABLES:; DV_VALUE_NEW: [0.002, 0.002, 0.002, (...); FILES:; MESH: mesh.su2; DIRECT: solution_flow.dat; ADJOINT_DRAG: solution_adj_cd.dat; FLOW_META: flow.meta; MULTIPOINT_DIRECT: [solution_flow_point0.dat solution_flow_point1.dat, ...]; MULTIPOINT_ADJOINT_DRAG: [solution_adj_point0_cd.dat solution_adj_point1_cd.dat, ...]; MULTIPOINT_MESH_FILENAME: [mesh_0.su2, mesh_1.su2, ... ]; MULTIPOINT_FLOW_META: [flow_point0.meta, flow_point1.meta, ...]; HISTORY:; DIRECT: {ITERATION=[1.0, 2.0, 3.0, (...); ADJOINT_DRAG: {ITERATION=[1.0, 2.0, 3.0, (...); WND_CAUCHY_DATA:; TIME_ITER; UNST_ADJOINT_ITER; ITER_AVERAGE_OBJ. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:393,Security,access,accessed,393,"""""""state = SU2.io.State(). Starts a state class, an extension of ordered_bunch().; Stores data generated while traversing SU2 tool chain. Fields:; FUNCTIONS - ordered bunch of objective function values; GRADIENTS - ordered bunch of gradient value lists; VARIABLES - ordered bunch of variables; FILES - ordered bunch of file types; HISTORY - ordered bunch of history information. Fields can be accessed by item or attribute; ie: state['FUNCTIONS'] or state.FUNCTIONS. Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. Example of a filled state:; FUNCTIONS:; LIFT: 0.2353065809; DRAG: 0.042149736; SIDEFORCE: 0.0; MOMENT_X: 0.0; MOMENT_Y: 0.0; MOMENT_Z: 0.046370243; FORCE_X: 0.0370065195; FORCE_Y: 0.2361700759; FORCE_Z: 0.0; EFFICIENCY: 5.5826347517; GRADIENTS:; DRAG: [0.133697, 0.41473, 0.698497, (...); VARIABLES:; DV_VALUE_NEW: [0.002, 0.002, 0.002, (...); FILES:; MESH: mesh.su2; DIRECT: solution_flow.dat; ADJOINT_DRAG: solution_adj_cd.dat; FLOW_META: flow.meta; MULTIPOINT_DIRECT: [solution_flow_point0.dat solution_flow_point1.dat, ...]; MULTIPOINT_ADJOINT_DRAG: [solution_adj_point0_cd.dat solution_adj_point1_cd.dat, ...]; MULTIPOINT_MESH_FILENAME: [mesh_0.su2, mesh_1.su2, ... ]; MULTIPOINT_FLOW_META: [flow_point0.meta, flow_point1.meta, ...]; HISTORY:; DIRECT: {ITERATION=[1.0, 2.0, 3.0, (...); ADJOINT_DRAG: {ITERATION=[1.0, 2.0, 3.0, (...); WND_CAUCHY_DATA:; TIME_ITER; UNST_ADJOINT_ITER; ITER_AVERAGE_OBJ. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:207,Deployability,update,update,207,"""""""state = SU2.io.state.State(). This is the State class that should be generated with the; Factory Function SU2.io.state.State_Factory(). Parameters:; none, should be loaded with State_Factory(). Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:218,Deployability,update,updates,218,"""""""state = SU2.io.state.State(). This is the State class that should be generated with the; Factory Function SU2.io.state.State_Factory(). Parameters:; none, should be loaded with State_Factory(). Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:333,Modifiability,variab,variables,333,"""""""state = SU2.io.state.State(). This is the State class that should be generated with the; Factory Function SU2.io.state.State_Factory(). Parameters:; none, should be loaded with State_Factory(). Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:168,Performance,load,loaded,168,"""""""state = SU2.io.state.State(). This is the State class that should be generated with the; Factory Function SU2.io.state.State_Factory(). Parameters:; none, should be loaded with State_Factory(). Methods:; update() - updates self with another state; pullnlink() - returns files to pull and link; design_vector() - vectorizes design variables; find_files() - finds existing mesh and solutions. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:38,Modifiability,config,config,38,"""""""pull,link = SU2.io.State.pullnlink(config); returns lists pull and link of files for folder; redirection, based on a given config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:126,Modifiability,config,config,126,"""""""pull,link = SU2.io.State.pullnlink(config); returns lists pull and link of files for folder; redirection, based on a given config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:87,Deployability,update,updates,87,"""""""SU2.io.State.find_files(config); finds mesh and solution files for a given config.; updates state.FILES with filenames.; files already logged in state are not overridden.; will ignore solutions if config.RESTART_SOL == 'NO'.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:27,Modifiability,config,config,27,"""""""SU2.io.State.find_files(config); finds mesh and solution files for a given config.; updates state.FILES with filenames.; files already logged in state are not overridden.; will ignore solutions if config.RESTART_SOL == 'NO'.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:78,Modifiability,config,config,78,"""""""SU2.io.State.find_files(config); finds mesh and solution files for a given config.; updates state.FILES with filenames.; files already logged in state are not overridden.; will ignore solutions if config.RESTART_SOL == 'NO'.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:200,Modifiability,config,config,200,"""""""SU2.io.State.find_files(config); finds mesh and solution files for a given config.; updates state.FILES with filenames.; files already logged in state are not overridden.; will ignore solutions if config.RESTART_SOL == 'NO'.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:138,Testability,log,logged,138,"""""""SU2.io.State.find_files(config); finds mesh and solution files for a given config.; updates state.FILES with filenames.; files already logged in state are not overridden.; will ignore solutions if config.RESTART_SOL == 'NO'.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py:3,Deployability,update,updated,3,"""""""updated = State.toc(timestamp); returns True if state was modified since last timestamp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/state.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/state.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:29,Safety,avoid,avoid,29,"# must default each value to avoid pointer problems",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:154,Performance,optimiz,optimization,154,"""""""reads a history file; returns an ordered bunch with the history file headers for keys; and a list of each header's floats for values.; if header is an optimization objective, its name is mapped to; the optimization name.; Iter and Time(min) headers are mapped to ITERATION and TIME; respectively.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:205,Performance,optimiz,optimization,205,"""""""reads a history file; returns an ordered bunch with the history file headers for keys; and a list of each header's floats for values.; if header is an optimization objective, its name is mapped to; the optimization name.; Iter and Time(min) headers are mapped to ITERATION and TIME; respectively.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:35,Modifiability,variab,variable,35,"""""""get dictionary that maps design variable; kind id number to name""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:14,Modifiability,variab,variable,14,"""""""get design variable kind name from id number""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:14,Modifiability,variab,variable,14,"""""""get design variable kind id number from name""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:8,Deployability,continuous,continuous,8,"# Case: continuous adjoint",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:9,Modifiability,variab,variable,9,"# design variable parameters",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:75,Modifiability,config,config,75,"""""""returns a list of special physical problems that were; specified in the config file, and set to 'yes'; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:75,Modifiability,config,config,75,"""""""returns a list of special physical problems that were; specified in the config file, and set to 'yes'; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:87,Deployability,update,updates,87,"""""""restart2solution(config,state={}); moves restart file to solution file,; optionally updates state; direct or adjoint is read from config; adjoint objective is read from config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:20,Modifiability,config,config,20,"""""""restart2solution(config,state={}); moves restart file to solution file,; optionally updates state; direct or adjoint is read from config; adjoint objective is read from config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:133,Modifiability,config,config,133,"""""""restart2solution(config,state={}); moves restart file to solution file,; optionally updates state; direct or adjoint is read from config; adjoint objective is read from config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:172,Modifiability,config,config,172,"""""""restart2solution(config,state={}); moves restart file to solution file,; optionally updates state; direct or adjoint is read from config; adjoint objective is read from config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py:2,Deployability,update,update,2,"# update state",MatchSource.CODE_COMMENT,SU2_PY/SU2/io/tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/io/tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:1026,Availability,avail,available,1026,"#!/usr/bin/env python; ## \file project.py; # \brief package for optimization projects; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:65,Performance,optimiz,optimization,65,"#!/usr/bin/env python; ## \file project.py; # \brief package for optimization projects; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:2,Usability,simpl,simplefilter,2,"# simplefilter(Warning,'ignore')",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:34,Modifiability,config,config,34,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:308,Modifiability,config,config,308,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:322,Modifiability,config,config,322,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:1123,Modifiability,config,config,1123,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:1183,Modifiability,config,config,1183,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:1279,Modifiability,config,config,1279,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:1306,Modifiability,config,config,1306,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:159,Safety,avoid,avoiding,159,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:168,Safety,redund,redundancy,168,"""""""project = SU2.opt.Project(self,config,state=None,; designs=[],folder='.'). Starts a project class to manage multiple designs. Runs multiple design classes, avoiding redundancy; Looks for closest design on restart; Currently only based on DV_VALUE_NEW; Exposes all methods of SU2.eval.design. Attributes:; config - base config; state - base state; files - base files; designs - list of designs; folder - project working folder; results - project design results. Methods:; Optimizer Interface; The following methods take a design vector for input; as a list (shape n) or numpy array (shape n or nx1 or 1xn).; Values are returned as floats or lists or lists of lists.; See SU2.eval.obj_f, etc for more detail. obj_f(dvs) - objective function : float; obj_df(dvs) - objective function derivatives : list; con_ceq(dvs) - equality constraints : list; con_dceq(dvs) - equality constraint derivatives : list[list]; con_cieq(dvs) - inequality constraints : list; con_dcieq(dvs) - inequality constraint gradients : list[list]. Functional Interface; The following methods take an objective function name for input.; func(func_name,config) - function of specified name; grad(func_name,method,config) - gradient of specified name,; where method is 'CONTINUOUS_ADJOINT' or 'FINDIFF'; setup config for given dvs with; config = project.unpack_dvs(dvs); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:8,Modifiability,config,config,8,"# setup config",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:59,Modifiability,config,config,59,"# data_dict creation does not preserve the ordering of the config file.; # This section ensures that the order of markers and objectives match; # It is only needed when more than one objective is used.",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:7,Modifiability,config,config,7,"# base config",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:15,Modifiability,config,config,15,"""""""evalautes a config, checking for existing designs""""""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:9,Modifiability,config,config,9,"# design config",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:10,Modifiability,config,config,10,"# project config",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:29,Modifiability,config,config,29,"# set right option in design config.",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:12,Deployability,update,update,12,"# check for update",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:6,Deployability,update,updated,6,"#: if updated",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:20,Modifiability,config,config,20,"# return self._eval(config, user_func,*args)",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:38,Modifiability,config,config,38,"""""""finds an existing design for given config; or starts a new design with a closest design; used for restart data; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:52,Modifiability,config,config,52,"""""""looks for an existing or closest design; given a config; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:2,Deployability,update,update,2,"# update pull files",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py:2,Deployability,update,update,2,"# update local state filenames ( ??? why not in Design() )",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/project.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/project.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:213,Modifiability,variab,variable,213,"""""""result = scipy_slsqp(project,x0=[],xb=[],its=100,accu=1e-10). Runs the Scipy implementation of SLSQP with; an SU2 project. Inputs:; project - an SU2 project; x0 - optional, initial guess; xb - optional, design variable bounds; its - max outer iterations, default 100; accu - accuracy, default 1e-10. Outputs:; result - the outputs from scipy.fmin_slsqp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:15,Performance,optimiz,optimizer,15,"# import scipy optimizer",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:19,Modifiability,variab,variables,19,"# number of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:2,Performance,optimiz,optimizer,2,"# optimizer summary",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:207,Modifiability,variab,variable,207,"""""""result = scipy_cg(project,x0=[],xb=[],its=100,accu=1e-10). Runs the Scipy implementation of CG with; an SU2 project. Inputs:; project - an SU2 project; x0 - optional, initial guess; xb - optional, design variable bounds; its - max outer iterations, default 100; accu - accuracy, default 1e-10. Outputs:; result - the outputs from scipy.fmin_slsqp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:15,Performance,optimiz,optimizer,15,"# import scipy optimizer",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:19,Modifiability,variab,variables,19,"# number of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:2,Performance,optimiz,optimizer,2,"# optimizer summary",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:211,Modifiability,variab,variable,211,"""""""result = scipy_bfgs(project,x0=[],xb=[],its=100,accu=1e-10). Runs the Scipy implementation of BFGS with; an SU2 project. Inputs:; project - an SU2 project; x0 - optional, initial guess; xb - optional, design variable bounds; its - max outer iterations, default 100; accu - accuracy, default 1e-10. Outputs:; result - the outputs from scipy.fmin_slsqp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:15,Performance,optimiz,optimizer,15,"# import scipy optimizer",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:19,Modifiability,variab,variables,19,"# number of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:2,Performance,optimiz,optimizer,2,"# optimizer summary",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:224,Modifiability,variab,variable,224,"""""""result = scipy_powell(project,x0=[],xb=[],its=100,accu=1e-10). Runs the Scipy implementation of Powell's method with; an SU2 project. Inputs:; project - an SU2 project; x0 - optional, initial guess; xb - optional, design variable bounds; its - max outer iterations, default 100; accu - accuracy, default 1e-10. Outputs:; result - the outputs from scipy.fmin_slsqp; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:15,Performance,optimiz,optimizer,15,"# import scipy optimizer",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:19,Modifiability,variab,variables,19,"# number of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:2,Performance,optimiz,optimizer,2,"# optimizer summary",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:59,Integrability,interface,interface,59,"""""""obj = obj_f(x,project). Objective Function; SU2 Project interface to scipy.fmin_slsqp. su2: minimize f(x), list[nobj]; scipy_slsqp: minimize f(x), float; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:71,Integrability,interface,interface,71,"""""""dobj = obj_df(x,project). Objective Function Gradients; SU2 Project interface to scipy.fmin_slsqp. su2: df(x), list[nobj x dim]; scipy_slsqp: df(x), ndarray[dim]; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:73,Integrability,interface,interface,73,"""""""cons = con_ceq(x,project). Equality Constraint Functions; SU2 Project interface to scipy.fmin_slsqp. su2: ceq(x) = 0.0, list[nceq]; scipy_slsqp: ceq(x) = 0.0, ndarray[nceq]; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:75,Integrability,interface,interface,75,"""""""dcons = con_dceq(x,project). Equality Constraint Gradients; SU2 Project interface to scipy.fmin_slsqp. su2: dceq(x), list[nceq x dim]; scipy_slsqp: dceq(x), ndarray[nceq x dim]; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:67,Integrability,interface,interface,67,"""""""cons = con_cieq(x,project). Inequality Constraints; SU2 Project interface to scipy.fmin_slsqp. su2: cieq(x) < 0.0, list[ncieq]; scipy_slsqp: cieq(x) > 0.0, ndarray[ncieq]; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py:78,Integrability,interface,interface,78,"""""""dcons = con_dcieq(x,project). Inequality Constraint Gradients; SU2 Project interface to scipy.fmin_slsqp. su2: dcieq(x), list[ncieq x dim]; scipy_slsqp: dcieq(x), ndarray[ncieq x dim]; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/opt/scipy_tools.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/opt/scipy_tools.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py:26,Modifiability,config,config,26,"""""""info = SU2.run.adjoint(config). Runs an adjoint analysis with:; SU2.run.decomp(); SU2.run.CFD(); SU2.run.merge(). Assumptions:; Does not run Gradient Projection; Does not rename restart filename to solution filename; Adds 'adjoint' suffix to convergence filename. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py:358,Modifiability,config,config,358,"""""""info = SU2.run.adjoint(config). Runs an adjoint analysis with:; SU2.run.decomp(); SU2.run.CFD(); SU2.run.merge(). Assumptions:; Does not run Gradient Projection; Does not rename restart filename to solution filename; Adds 'adjoint' suffix to convergence filename. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py:2,Deployability,update,update,2,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py:15,Modifiability,config,config,15,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:25,Modifiability,config,config,25,"""""""info = SU2.run.deform(config,dv_new=[],dv_old=[]). Deforms mesh with:; SU2.run.decomp(); SU2.run.DEF(). Assumptions:; If optional dv_new ommitted, config is setup for deformation; If using dv_old, must provide dv_new; Adds 'deform' suffix to mesh output name. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MESH_FILENAME; config.DV_VALUE_OLD = config.DV_VALUE_NEW. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:150,Modifiability,config,config,150,"""""""info = SU2.run.deform(config,dv_new=[],dv_old=[]). Deforms mesh with:; SU2.run.decomp(); SU2.run.DEF(). Assumptions:; If optional dv_new ommitted, config is setup for deformation; If using dv_old, must provide dv_new; Adds 'deform' suffix to mesh output name. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MESH_FILENAME; config.DV_VALUE_OLD = config.DV_VALUE_NEW. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:354,Modifiability,config,config,354,"""""""info = SU2.run.deform(config,dv_new=[],dv_old=[]). Deforms mesh with:; SU2.run.decomp(); SU2.run.DEF(). Assumptions:; If optional dv_new ommitted, config is setup for deformation; If using dv_old, must provide dv_new; Adds 'deform' suffix to mesh output name. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MESH_FILENAME; config.DV_VALUE_OLD = config.DV_VALUE_NEW. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:376,Modifiability,config,config,376,"""""""info = SU2.run.deform(config,dv_new=[],dv_old=[]). Deforms mesh with:; SU2.run.decomp(); SU2.run.DEF(). Assumptions:; If optional dv_new ommitted, config is setup for deformation; If using dv_old, must provide dv_new; Adds 'deform' suffix to mesh output name. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MESH_FILENAME; config.DV_VALUE_OLD = config.DV_VALUE_NEW. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:398,Modifiability,config,config,398,"""""""info = SU2.run.deform(config,dv_new=[],dv_old=[]). Deforms mesh with:; SU2.run.decomp(); SU2.run.DEF(). Assumptions:; If optional dv_new ommitted, config is setup for deformation; If using dv_old, must provide dv_new; Adds 'deform' suffix to mesh output name. Outputs:; info - SU2 State with keys:; HISTORY.ADJOINT_NAME; FILES.ADJOINT_NAME. Updates:; config.MESH_FILENAME; config.DV_VALUE_OLD = config.DV_VALUE_NEW. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:2,Availability,error,error,2,"# error check",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:16,Modifiability,variab,variables,16,"# unpack design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:2,Safety,redund,redundancy,2,"# redundancy check",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:2,Deployability,update,update,2,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:15,Modifiability,config,config,15,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py:16,Modifiability,config,config,16,"# not modified: config['MESH_OUT_FILENAME']; # info out",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/deform.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/deform.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:25,Modifiability,config,config,25,"""""""info = SU2.run.direct(config). Runs an adjoint analysis with:; SU2.run.decomp(); SU2.run.CFD(); SU2.run.merge(). Assumptions:; Does not rename restart filename to solution filename; Adds 'direct' suffix to convergence filename. Outputs:; info - SU2 State with keys:; FUNCTIONS; HISTORY.DIRECT; FILES.DIRECT. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:321,Modifiability,config,config,321,"""""""info = SU2.run.direct(config). Runs an adjoint analysis with:; SU2.run.decomp(); SU2.run.CFD(); SU2.run.merge(). Assumptions:; Does not rename restart filename to solution filename; Adds 'direct' suffix to convergence filename. Outputs:; info - SU2 State with keys:; FUNCTIONS; HISTORY.DIRECT; FILES.DIRECT. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:2,Energy Efficiency,adapt,adapt,2,"# adapt the history_filename, if a restart solution is chosen; # check for 'RESTART_ITER' is to avoid forced restart situation in ""compute_polar.py""...",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:2,Modifiability,adapt,adapt,2,"# adapt the history_filename, if a restart solution is chosen; # check for 'RESTART_ITER' is to avoid forced restart situation in ""compute_polar.py""...",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:96,Safety,avoid,avoid,96,"# adapt the history_filename, if a restart solution is chosen; # check for 'RESTART_ITER' is to avoid forced restart situation in ""compute_polar.py""...",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:2,Deployability,update,update,2,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:15,Modifiability,config,config,15,"# update super config",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py:2,Deployability,update,update,2,"# update the last iteration",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/direct.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/direct.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:187,Deployability,configurat,configuration,187,"""""""info = SU2.run.geometry(config). Runs an geometry analysis with:; SU2.run.decomp(); SU2.run.GEO(). Assumptions:; Performs both function and gradient analysis. Inputs:; config - an SU2 configuration; step - gradient finite difference step if config.GEO_MODE=GRADIENT. Outputs:; info - SU2 State with keys:; FUNCTIONS; GRADIENTS. Updates:. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:27,Modifiability,config,config,27,"""""""info = SU2.run.geometry(config). Runs an geometry analysis with:; SU2.run.decomp(); SU2.run.GEO(). Assumptions:; Performs both function and gradient analysis. Inputs:; config - an SU2 configuration; step - gradient finite difference step if config.GEO_MODE=GRADIENT. Outputs:; info - SU2 State with keys:; FUNCTIONS; GRADIENTS. Updates:. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:171,Modifiability,config,config,171,"""""""info = SU2.run.geometry(config). Runs an geometry analysis with:; SU2.run.decomp(); SU2.run.GEO(). Assumptions:; Performs both function and gradient analysis. Inputs:; config - an SU2 configuration; step - gradient finite difference step if config.GEO_MODE=GRADIENT. Outputs:; info - SU2 State with keys:; FUNCTIONS; GRADIENTS. Updates:. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:187,Modifiability,config,configuration,187,"""""""info = SU2.run.geometry(config). Runs an geometry analysis with:; SU2.run.decomp(); SU2.run.GEO(). Assumptions:; Performs both function and gradient analysis. Inputs:; config - an SU2 configuration; step - gradient finite difference step if config.GEO_MODE=GRADIENT. Outputs:; info - SU2 State with keys:; FUNCTIONS; GRADIENTS. Updates:. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:244,Modifiability,config,config,244,"""""""info = SU2.run.geometry(config). Runs an geometry analysis with:; SU2.run.decomp(); SU2.run.GEO(). Assumptions:; Performs both function and gradient analysis. Inputs:; config - an SU2 configuration; step - gradient finite difference step if config.GEO_MODE=GRADIENT. Outputs:; info - SU2 State with keys:; FUNCTIONS; GRADIENTS. Updates:. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py:68,Modifiability,variab,variables,68,"# SU2_DOT input requirement, assumes linear superposition of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/geometry.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/geometry.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:32,Integrability,interface,interface,32,"#!/usr/bin/env python; ## \file interface.py; # \brief python package interfacing with the SU2 suite; # \author T. Lukaczyk, F. Palacios; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:34,Modifiability,config,config,34,"""""""run SU2_CFD; partitions set by config.NUMBER_PART; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:34,Modifiability,config,config,34,"""""""run SU2_DEF; partitions set by config.NUMBER_PART; forced to run in serial, expects merged mesh input; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:34,Modifiability,config,config,34,"""""""run SU2_DOT; partitions set by config.NUMBER_PART; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:34,Modifiability,config,config,34,"""""""run SU2_GEO; partitions set by config.NUMBER_PART; forced to run in serial; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:34,Modifiability,config,config,34,"""""""run SU2_SOL; partitions set by config.NUMBER_PART; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:51,Modifiability,config,config,51,"""""""run SU2_SOL for FSI problems; partitions set by config.NUMBER_PART; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py:47,Availability,error,errors,47,"""""""runs os command with subprocess; checks for errors from command; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/interface.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/interface.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:24,Modifiability,config,config,24,"""""""info = SU2.run.merge(config). Merges mesh with:; SU2.run.SOL() (volume merging); internal scripts (surface merging). Assumptions:; config.NUMBER_PART is set; Skip if config.NUMBER_PART > 1. Inputs:; config - an SU2 config. Ouputs:; info - an empty SU2 State. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:134,Modifiability,config,config,134,"""""""info = SU2.run.merge(config). Merges mesh with:; SU2.run.SOL() (volume merging); internal scripts (surface merging). Assumptions:; config.NUMBER_PART is set; Skip if config.NUMBER_PART > 1. Inputs:; config - an SU2 config. Ouputs:; info - an empty SU2 State. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:169,Modifiability,config,config,169,"""""""info = SU2.run.merge(config). Merges mesh with:; SU2.run.SOL() (volume merging); internal scripts (surface merging). Assumptions:; config.NUMBER_PART is set; Skip if config.NUMBER_PART > 1. Inputs:; config - an SU2 config. Ouputs:; info - an empty SU2 State. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:202,Modifiability,config,config,202,"""""""info = SU2.run.merge(config). Merges mesh with:; SU2.run.SOL() (volume merging); internal scripts (surface merging). Assumptions:; config.NUMBER_PART is set; Skip if config.NUMBER_PART > 1. Inputs:; config - an SU2 config. Ouputs:; info - an empty SU2 State. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:218,Modifiability,config,config,218,"""""""info = SU2.run.merge(config). Merges mesh with:; SU2.run.SOL() (volume merging); internal scripts (surface merging). Assumptions:; config.NUMBER_PART is set; Skip if config.NUMBER_PART > 1. Inputs:; config - an SU2 config. Ouputs:; info - an empty SU2 State. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:31,Modifiability,config,config,31,"""""""SU2.io.merge.merge_solution(config); general volume surface merging with SU2_SOL; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:19,Modifiability,config,config,19,"#: merge_solution( config )",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py:19,Modifiability,config,config,19,"#: merge_solution( config )",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/merge.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/merge.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:29,Modifiability,config,config,29,"""""""info = SU2.run.projection(config,state,step=1e-3). Runs an gradient projection with:; SU2.run.decomp(); SU2.run.DOT(). Assumptions:; Writes tecplot file of gradients; Adds objective suffix to gradient plot filename. Inputs:; config - an SU2 config; state - only required when using external custom DV; step - a float or list of floats for geometry sensitivity; finite difference step. Outputs:; info - SU2 State with keys:; GRADIENTS.<config.OBJECTIVE_FUNCTION>. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:228,Modifiability,config,config,228,"""""""info = SU2.run.projection(config,state,step=1e-3). Runs an gradient projection with:; SU2.run.decomp(); SU2.run.DOT(). Assumptions:; Writes tecplot file of gradients; Adds objective suffix to gradient plot filename. Inputs:; config - an SU2 config; state - only required when using external custom DV; step - a float or list of floats for geometry sensitivity; finite difference step. Outputs:; info - SU2 State with keys:; GRADIENTS.<config.OBJECTIVE_FUNCTION>. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:244,Modifiability,config,config,244,"""""""info = SU2.run.projection(config,state,step=1e-3). Runs an gradient projection with:; SU2.run.decomp(); SU2.run.DOT(). Assumptions:; Writes tecplot file of gradients; Adds objective suffix to gradient plot filename. Inputs:; config - an SU2 config; state - only required when using external custom DV; step - a float or list of floats for geometry sensitivity; finite difference step. Outputs:; info - SU2 State with keys:; GRADIENTS.<config.OBJECTIVE_FUNCTION>. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:438,Modifiability,config,config,438,"""""""info = SU2.run.projection(config,state,step=1e-3). Runs an gradient projection with:; SU2.run.decomp(); SU2.run.DOT(). Assumptions:; Writes tecplot file of gradients; Adds objective suffix to gradient plot filename. Inputs:; config - an SU2 config; state - only required when using external custom DV; step - a float or list of floats for geometry sensitivity; finite difference step. Outputs:; info - SU2 State with keys:; GRADIENTS.<config.OBJECTIVE_FUNCTION>. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:476,Modifiability,config,config,476,"""""""info = SU2.run.projection(config,state,step=1e-3). Runs an gradient projection with:; SU2.run.decomp(); SU2.run.DOT(). Assumptions:; Writes tecplot file of gradients; Adds objective suffix to gradient plot filename. Inputs:; config - an SU2 config; state - only required when using external custom DV; step - a float or list of floats for geometry sensitivity; finite difference step. Outputs:; info - SU2 State with keys:; GRADIENTS.<config.OBJECTIVE_FUNCTION>. Updates:; config.MATH_PROBLEM. Executes in:; ./; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py:68,Modifiability,variab,variables,68,"# SU2_DOT input requirement, assumes linear superposition of design variables",MatchSource.CODE_COMMENT,SU2_PY/SU2/run/projection.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/run/projection.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:254,Safety,safe,safe,254,""""""" Bunch is a subclass of dict with attribute-style access. >>> b = Bunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = Bunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. It is safe to import * from this module:. __all__ = ('Bunch', 'bunchify','unbunchify'). un/bunchify provide dictionary conversion; Bunches can also be; converted via Bunch.to/fromDict(). original source:; https://pypi.python.org/pypi/bunch; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:53,Security,access,access,53,""""""" Bunch is a subclass of dict with attribute-style access. >>> b = Bunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = Bunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. It is safe to import * from this module:. __all__ = ('Bunch', 'bunchify','unbunchify'). un/bunchify provide dictionary conversion; Bunches can also be; converted via Bunch.to/fromDict(). original source:; https://pypi.python.org/pypi/bunch; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:357,Deployability,update,update,357,"""""""A dictionary that provides attribute-style access. >>> b = Bunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = Bunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A Bunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**Bunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See unbunchify/Bunch.toDict, bunchify/Bunch.fromDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:375,Deployability,update,update,375,"""""""A dictionary that provides attribute-style access. >>> b = Bunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = Bunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A Bunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**Bunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See unbunchify/Bunch.toDict, bunchify/Bunch.fromDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:46,Security,access,access,46,"""""""A dictionary that provides attribute-style access. >>> b = Bunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = Bunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A Bunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**Bunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See unbunchify/Bunch.toDict, bunchify/Bunch.fromDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:469,Security,hash,hashable,469,"""""""Recursively transforms a dictionary into a Bunch via copy. >>> b = bunchify({'urmom': {'sez': {'what': 'what'}}}); >>> b.urmom.sez.what; 'what'. bunchify can handle intermediary dicts, lists and tuples (as well as; their subclasses), but ymmv on custom datatypes. >>> b = bunchify({ 'lol': ('cats', {'hah':'i win again'}),; ... 'hello': [{'french':'salut', 'german':'hallo'}] }); >>> b.hello[0].french; 'salut'; >>> b.lol[1].hah; 'i win again'. nb. As dicts are not hashable, they cannot be nested in sets/frozensets.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:606,Security,hash,hashable,606,"""""""Recursively converts a Bunch into a dictionary. >>> b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!'); >>> unbunchify(b); {'ponies': 'are pretty!', 'foo': {'lol': True}, 'hello': 42}. unbunchify will handle intermediary dicts, lists and tuples (as well as; their subclasses), but ymmv on custom datatypes. >>> b = Bunch(foo=['bar', Bunch(lol=True)], hello=42,; ... ponies=('are pretty!', Bunch(lies='are trouble!'))); >>> unbunchify(b) #doctest: +NORMALIZE_WHITESPACE; {'ponies': ('are pretty!', {'lies': 'are trouble!'}),; 'foo': ['bar', {'lol': True}], 'hello': 42}. nb. As dicts are not hashable, they cannot be nested in sets/frozensets.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:99,Performance,load,load,99,"""""""PyYAML support for Bunches using the tag `!bunch` and `!bunch.Bunch`. >>> import yaml; >>> yaml.load('''; ... Flow style: !bunch.Bunch { Clark: Evans, Brian: Ingerson, Oren: Ben-Kiki }; ... Block style: !bunch; ... Clark : Evans; ... Brian : Ingerson; ... Oren : Ben-Kiki; ... ''') #doctest: +NORMALIZE_WHITESPACE; {'Flow style': Bunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki'),; 'Block style': Bunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki')}. This module registers itself automatically to cover both Bunch and any; subclasses. Should you want to customize the representation of a subclass,; simply register it with PyYAML yourself.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py:612,Usability,simpl,simply,612,"""""""PyYAML support for Bunches using the tag `!bunch` and `!bunch.Bunch`. >>> import yaml; >>> yaml.load('''; ... Flow style: !bunch.Bunch { Clark: Evans, Brian: Ingerson, Oren: Ben-Kiki }; ... Block style: !bunch; ... Clark : Evans; ... Brian : Ingerson; ... Oren : Ben-Kiki; ... ''') #doctest: +NORMALIZE_WHITESPACE; {'Flow style': Bunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki'),; 'Block style': Bunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki')}. This module registers itself automatically to cover both Bunch and any; subclasses. Should you want to customize the representation of a subclass,; simply register it with PyYAML yourself.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:38,Modifiability,config,config,38,"# laplace smoothing parameter; # read config file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:36,Deployability,update,updates,36,"# write filtered surface file (only updates Sensitivity)",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:2,Performance,perform,perform,2,"# perform fourier transform",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:7,Energy Efficiency,power,power,7,"# next power of 2",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:7,Energy Efficiency,power,power,7,"# clip power within notch frequencies",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py:13,Energy Efficiency,power,power,13,"# change the power spectrum",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/filter_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/filter_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/lhc_unif.py:2,Deployability,update,update,2,"# update",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/lhc_unif.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/lhc_unif.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/mp_eval.py:9,Availability,alive,alive,9,"#: while alive",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/mp_eval.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/mp_eval.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/mp_eval.py:191,Performance,load,loads,191,"# pickling; # def __getstate__(self):; # dict = self.__dict__.copy(); # data_dict = cloudpickle.dumps(dict); # return data_dict; # def __setstate__(self,data_dict):; # self.__dict__ = pickle.loads(data_dict); # return",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/mp_eval.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/mp_eval.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:282,Safety,safe,safe,282,""""""" OrderedBunch is a subclass of OrderedDict with attribute-style access. >>> b = OrderedBunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = OrderedBunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. It is safe to import * from this module:. __all__ = ('OrderedBunch', 'ordered_bunchify','ordered_unbunchify'). ordered_un/bunchify provide dictionary conversion; Bunches can also be; converted via OrderedBunch.to/fromOrderedDict(). original source:; https://pypi.python.org/pypi/bunch; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:67,Security,access,access,67,""""""" OrderedBunch is a subclass of OrderedDict with attribute-style access. >>> b = OrderedBunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = OrderedBunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. It is safe to import * from this module:. __all__ = ('OrderedBunch', 'ordered_bunchify','ordered_unbunchify'). ordered_un/bunchify provide dictionary conversion; Bunches can also be; converted via OrderedBunch.to/fromOrderedDict(). original source:; https://pypi.python.org/pypi/bunch; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:378,Deployability,update,update,378,"""""""A dictionary that provides attribute-style access. >>> b = OrderedBunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = OrderedBunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A OrderedBunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); OrderedBunch(foo=OrderedBunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', OrderedBunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**OrderedBunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See ordered_unbunchify/OrderedBunch.toOrderedDict, ordered_bunchify/OrderedBunch.fromOrderedDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:396,Deployability,update,update,396,"""""""A dictionary that provides attribute-style access. >>> b = OrderedBunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = OrderedBunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A OrderedBunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); OrderedBunch(foo=OrderedBunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', OrderedBunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**OrderedBunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See ordered_unbunchify/OrderedBunch.toOrderedDict, ordered_bunchify/OrderedBunch.fromOrderedDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:46,Security,access,access,46,"""""""A dictionary that provides attribute-style access. >>> b = OrderedBunch(); >>> b.hello = 'world'; >>> b.hello; 'world'; >>> b['hello'] += ""!""; >>> b.hello; 'world!'; >>> b.foo = OrderedBunch(lol=True); >>> b.foo.lol; True; >>> b.foo is b['foo']; True. A OrderedBunch is a subclass of dict; it supports all the methods a dict does... >>> b.keys(); ['foo', 'hello']. Including update()... >>> b.update({ 'ponies': 'are pretty!' }, hello=42); >>> print(repr(b)); OrderedBunch(foo=OrderedBunch(lol=True), hello=42, ponies='are pretty!'). As well as iteration... >>> [ (k,b[k]) for k in b ]; [('ponies', 'are pretty!'), ('foo', OrderedBunch(lol=True)), ('hello', 42)]. And ""splats"". >>> ""The {knights} who say {ni}!"".format(**OrderedBunch(knights='lolcats', ni='can haz')); 'The lolcats who say can haz!'. See ordered_unbunchify/OrderedBunch.toOrderedDict, ordered_bunchify/OrderedBunch.fromOrderedDict for notes about conversion.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:500,Security,hash,hashable,500,"""""""Recursively transforms a dictionary into a OrderedBunch via copy. >>> b = ordered_bunchify({'urmom': {'sez': {'what': 'what'}}}); >>> b.urmom.sez.what; 'what'. ordered_bunchify can handle intermediary dicts, lists and tuples (as well as; their subclasses), but ymmv on custom datatypes. >>> b = ordered_bunchify({ 'lol': ('cats', {'hah':'i win again'}),; ... 'hello': [{'french':'salut', 'german':'hallo'}] }); >>> b.hello[0].french; 'salut'; >>> b.lol[1].hah; 'i win again'. nb. As dicts are not hashable, they cannot be nested in sets/frozensets.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:672,Security,hash,hashable,672,"""""""Recursively converts a OrderedBunch into a dictionary. >>> b = OrderedBunch(foo=OrderedBunch(lol=True), hello=42, ponies='are pretty!'); >>> ordered_unbunchify(b); {'ponies': 'are pretty!', 'foo': {'lol': True}, 'hello': 42}. ordered_unbunchify will handle intermediary dicts, lists and tuples (as well as; their subclasses), but ymmv on custom datatypes. >>> b = OrderedBunch(foo=['bar', OrderedBunch(lol=True)], hello=42,; ... ponies=('are pretty!', OrderedBunch(lies='are trouble!'))); >>> ordered_unbunchify(b) #doctest: +NORMALIZE_WHITESPACE; {'ponies': ('are pretty!', {'lies': 'are trouble!'}),; 'foo': ['bar', {'lol': True}], 'hello': 42}. nb. As dicts are not hashable, they cannot be nested in sets/frozensets.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:106,Performance,load,load,106,"""""""PyYAML support for Bunches using the tag `!bunch` and `!bunch.OrderedBunch`. >>> import yaml; >>> yaml.load('''; ... Flow style: !bunch.OrderedBunch { Clark: Evans, Brian: Ingerson, Oren: Ben-Kiki }; ... Block style: !bunch; ... Clark : Evans; ... Brian : Ingerson; ... Oren : Ben-Kiki; ... ''') #doctest: +NORMALIZE_WHITESPACE; {'Flow style': OrderedBunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki'),; 'Block style': OrderedBunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki')}. This module registers itself automatically to cover both OrderedBunch and any; subclasses. Should you want to customize the representation of a subclass,; simply register it with PyYAML yourself.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py:647,Usability,simpl,simply,647,"""""""PyYAML support for Bunches using the tag `!bunch` and `!bunch.OrderedBunch`. >>> import yaml; >>> yaml.load('''; ... Flow style: !bunch.OrderedBunch { Clark: Evans, Brian: Ingerson, Oren: Ben-Kiki }; ... Block style: !bunch; ... Clark : Evans; ... Brian : Ingerson; ... Oren : Ben-Kiki; ... ''') #doctest: +NORMALIZE_WHITESPACE; {'Flow style': OrderedBunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki'),; 'Block style': OrderedBunch(Brian='Ingerson', Clark='Evans', Oren='Ben-Kiki')}. This module registers itself automatically to cover both OrderedBunch and any; subclasses. Should you want to customize the representation of a subclass,; simply register it with PyYAML yourself.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_bunch.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_bunch.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:148,Deployability,update,updates,148,""""""" Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.; Passes Python2.7's test suite and incorporates all the latest updates.; {{{ http://code.activestate.com/recipes/576693/ (r9); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:105,Testability,test,test,105,""""""" Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.; Passes Python2.7's test suite and incorporates all the latest updates.; {{{ http://code.activestate.com/recipes/576693/ (r9); """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:5,Modifiability,inherit,inherited,5,"# An inherited dict maps keys to values.; # The inherited dict provides __getitem__, __len__, __contains__, and get.; # The remaining methods are order-aware.; # Big-O running times for all methods are the same as for regular dictionaries.; # The internal self.__map dictionary maps keys to links in a doubly linked list.; # The circular doubly linked list starts and ends with a sentinel element.; # The sentinel element never gets deleted (this simplifies the algorithm).; # Each link is stored as a list of length three: [PREV, NEXT, KEY].",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:48,Modifiability,inherit,inherited,48,"# An inherited dict maps keys to values.; # The inherited dict provides __getitem__, __len__, __contains__, and get.; # The remaining methods are order-aware.; # Big-O running times for all methods are the same as for regular dictionaries.; # The internal self.__map dictionary maps keys to links in a doubly linked list.; # The circular doubly linked list starts and ends with a sentinel element.; # The sentinel element never gets deleted (this simplifies the algorithm).; # Each link is stored as a list of length three: [PREV, NEXT, KEY].",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:447,Usability,simpl,simplifies,447,"# An inherited dict maps keys to values.; # The inherited dict provides __getitem__, __len__, __contains__, and get.; # The remaining methods are order-aware.; # Big-O running times for all methods are the same as for regular dictionaries.; # The internal self.__map dictionary maps keys to links in a doubly linked list.; # The circular doubly linked list starts and ends with a sentinel element.; # The sentinel element never gets deleted (this simplifies the algorithm).; # Each link is stored as a list of length three: [PREV, NEXT, KEY].",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:117,Deployability,update,updated,117,"# Setting a new item creates a new link which goes at the end of the linked; # list, and the inherited dictionary is updated with the new key/value pair.",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:93,Modifiability,inherit,inherited,93,"# Setting a new item creates a new link which goes at the end of the linked; # list, and the inherited dictionary is updated with the new key/value pair.",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:34,Integrability,depend,depend,34,"# -- the following methods do not depend on the internal structure --",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:6,Deployability,update,update,6,"""""""od.update(E, **F) -> None. Update od from dict/iterable E and F. If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py:26,Deployability,update,update,26,"# let subclasses override update without breaking __init__",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/ordered_dict.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/ordered_dict.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:47,Security,attack,attack,47,"#; # angles definitions:; # alpha ... angle of attack; # beta ... side-slip angle; # phi ... roll angle; #; # Note: Actually alpha here is the angle of rotation about the above-defined pitch axis; # Thus, by replacing the pitch-axis, all that is said here about alpha is actually for beta; #; # Several combinations of angles are possible:; # ------------------------------------------------; # 1. Polar-sweep in alpha per given phi ...... polarVar = aoa; # 2. Polar-sweep in alpha per given beta (side slip angle) ...... polarVar = aoa; # 3. Polar-sweep in phi per given alpha ...... polarVar = phi; # 4. Mach ramp (single values for alpha, phi or both permitted) ... polarVar = MachRampNumbers; #; # Note: Seting a list of both phi and beta is impossible; # For mach ramp you can specify alpha, phi (or both), but not a list of either of them; #; # Now let us find out which angles are specified in the control file, to figure out polarSweepType and polarVar; #",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:29,Deployability,update,updated,29,"#; # -- get a proper list of updated parameter-angle",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:15,Availability,down,down,15,"#; # --- Write down the updated file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:24,Deployability,update,updated,24,"#; # --- Write down the updated file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:21,Safety,avoid,avoid,21,"# look for Mach, but avoid Mach for coefficients",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:112,Deployability,update,updated,112,"#; # the next set of parameters might, or might not appear in base input file; # If they appear, they should be updated in a Mach ramp. All 3 of them are needed.; #",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:29,Modifiability,variab,variables,29,"# --------------Retreive the variables names in the Tecplot file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:7,Modifiability,variab,variables,7,"# last variables line",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:8,Availability,down,down,8,"# write down to a simple 2-columns file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:18,Usability,simpl,simple,18,"# write down to a simple 2-columns file",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:5,Performance,load,load,5,"#; # load a polar-sweep file as an array; #",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:33,Modifiability,variab,variable,33,"# now check correct som for each variable",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:174,Performance,load,loadData,174,"# read a 2D data from a file, separated by delim; # (may be , (comma) or ' ' (space ); #; # do array(dout) (in calling) to obtain result as an array (numpy imported); # dout=loadData(filename,delim); # v=array(dout)",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:14,Availability,error,error,14,"# -avoid NULL error",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py:3,Safety,avoid,avoid,3,"# -avoid NULL error",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/polarSweepLib.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/polarSweepLib.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/which.py:131,Testability,test,test,131,"""""""which(program_name); finds the location of the program_name if it is on PATH; returns None if program cannot be found; does not test for .exe extension on windows. original source:; http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/which.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/which.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/which.py:227,Testability,test,test-if-executable-exists-in-python,227,"""""""which(program_name); finds the location of the program_name if it is on PATH; returns None if program cannot be found; does not test for .exe extension on windows. original source:; http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2/util/which.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2/util/which.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:81,Modifiability,coupling,coupling,81,"""""""; Structural solver main class.; It contains all the required methods for the coupling with SU2.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:30,Deployability,configurat,configuration,30,"""""""; This methods obtains the configuration options from the structural solver input; file.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:30,Modifiability,config,configuration,30,"""""""; This methods obtains the configuration options from the structural solver input; file.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:55,Deployability,integrat,integration,55,"""""""; This method uses the time step size to define the integration parameters.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:55,Integrability,integrat,integration,55,"""""""; This method uses the time step size to define the integration parameters.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:110,Integrability,interface,interface,110,"""""""; This method uses the mode shapes to compute, based on the modal velocities, the; nodal velocities at the interface.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:30,Modifiability,variab,variables,30,"""""""; This method sets all the variables needed for the correct restart.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:130,Modifiability,coupling,coupling,130,"# The old time_0 for imposed motion can either be the first line of the StructHistoryModal, if TimeIterTreshold was -1 (immediate coupling), or the second line. In the former case, time_0 is 0.0, so it is easy to recognize it",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:17,Deployability,integrat,integrates,17,"""""""; This method integrates in time the solution.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:17,Integrability,integrat,integrates,17,"""""""; This method integrates in time the solution.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:43,Deployability,integrat,integration,43,"""""""; This method computes the residual for integration.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:43,Integrability,integrat,integration,43,"""""""; This method computes the residual for integration.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:33,Security,access,access,33,"""""""; This method provides public access to the method __computeInterfacePosVel and; sets velocities for previous time steps.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:17,Deployability,update,updates,17,"""""""; This method updates the solution.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:24,Security,access,accessed,24,"""""""; This method can be accessed from outside to set the nodal forces.; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py:40,Integrability,interface,interface,40,"""""""; This method provides the ID of the interface marker; """"""",MatchSource.CODE_COMMENT,SU2_PY/SU2_Nastran/pysu2_nastran.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/SU2_PY/SU2_Nastran/pysu2_nastran.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:1099,Availability,avail,available,1099,"#!/usr/bin/env python; ## \file hybrid_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:102,Testability,test,testing,102,"#!/usr/bin/env python; ## \file hybrid_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:138,Testability,test,test,138,"######################################; ### Harmonic Balance ###; ######################################; # Description of the regression test",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:48,Testability,test,test,48,"# X-coarse laminar bend as a mixed element CGNS test",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:26,Integrability,interface,interface,26,"# Multiple turbomachinery interface restart",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:39,Integrability,wrap,wrapper,39,"##########################; ### Python wrapper ###; ##########################; # NACA0012",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py:16,Deployability,update,updated,16,"# NACA0012 with updated moving frame",MatchSource.CODE_COMMENT,TestCases/hybrid_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression_AD.py:1102,Availability,avail,available,1102,"#!/usr/bin/env python; ## \file hybrid_regression_AD.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/hybrid_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression_AD.py:105,Testability,test,testing,105,"#!/usr/bin/env python; ## \file hybrid_regression_AD.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/hybrid_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/hybrid_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:1101,Availability,avail,available,1101,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:104,Testability,test,testing,104,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:8,Testability,test,test,8,"# flaky test on arm64",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:48,Testability,test,test,48,"# X-coarse laminar bend as a mixed element CGNS test",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:18,Testability,test,tests,18,"# Inviscid WEDGE: tests averaged outflow total pressure adjoint",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:138,Testability,test,test,138,"######################################; ### Harmonic Balance ###; ######################################; # Description of the regression test",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:26,Integrability,interface,interface,26,"# Multiple turbomachinery interface restart",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:201,Modifiability,config,config,201,"# Sliding mesh with incompressible flows (unsteady); # slinc_unsteady = TestCase('slinc_unsteady'); # slinc_unsteady.cfg_dir = ""sliding_interface/incompressible_unsteady""; # slinc_unsteady.cfg_file = ""config.cfg""; # slinc_unsteady.test_iter = 19; # slinc_unsteady.test_vals = [-3.513701,1.931626,0.000000,0.000000] #last 4 columns; # slinc_unsteady.command = TestCase.Command(exec = ""SU2_CFD""); # slinc_unsteady.timeout = 100; # slinc_unsteady.unsteady = True; # test_list.append(slinc_unsteady); ##########################; ### FEA - FSI ###; ##########################; # Static beam, 3d",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:412,Safety,timeout,timeout,412,"# Sliding mesh with incompressible flows (unsteady); # slinc_unsteady = TestCase('slinc_unsteady'); # slinc_unsteady.cfg_dir = ""sliding_interface/incompressible_unsteady""; # slinc_unsteady.cfg_file = ""config.cfg""; # slinc_unsteady.test_iter = 19; # slinc_unsteady.test_vals = [-3.513701,1.931626,0.000000,0.000000] #last 4 columns; # slinc_unsteady.command = TestCase.Command(exec = ""SU2_CFD""); # slinc_unsteady.timeout = 100; # slinc_unsteady.unsteady = True; # test_list.append(slinc_unsteady); ##########################; ### FEA - FSI ###; ##########################; # Static beam, 3d",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:43,Testability,test,test,43,"# 2D CHT case streamwise periodicity. Also test Multizone PerSurface screen output.",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:2,Usability,simpl,simple,2,"# simple small 3D pin case massflow periodic with heatflux BC",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:39,Integrability,wrap,wrapper,39,"##########################; ### Python wrapper ###; ##########################; # NACA0012",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:13,Performance,load,load,13,"# Custom FEA load",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:27,Performance,load,load,27,"# Unsteady FSI with custom load",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:30,Security,validat,validation,30,"# rectangle passive transport validation",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:201,Safety,timeout,timeout,201,"######################################; ### RUN TESTS ###; ######################################; # set suitable defaults unless something else has been specified; # command: ""mpirun -n 2 SU2_CFD""; # timeout: 1600; # tol: 0.00001",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:18,Testability,test,test,18,"# Cylindrical FFD test",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:16,Testability,test,test,16,"# Spherical FFD test",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py:16,Testability,test,test,16,"# Spherical FFD test using BSplines",MatchSource.CODE_COMMENT,TestCases/parallel_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:1101,Availability,avail,available,1101,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:104,Testability,test,testing,104,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:204,Safety,timeout,timeout,204,"######################################; ### RUN TESTS ###; ######################################; # set suitable defaults unless something else has been specified; # command: ""mpirun -n 2 SU2_CFD_AD""; # timeout: 1600; # tol: 0.00001",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:224,Testability,test,test,224,"################################################; ### Gradient check (dot) for flamelet solver ###; ################################################; # 2D planar laminar premixed flame on isothermal burner (restart); # This test restarts on the output of test discadj_flamelet_ch4_hx and; # will only pass if test discadj_flamelet_ch4_hx passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:255,Testability,test,test,255,"################################################; ### Gradient check (dot) for flamelet solver ###; ################################################; # 2D planar laminar premixed flame on isothermal burner (restart); # This test restarts on the output of test discadj_flamelet_ch4_hx and; # will only pass if test discadj_flamelet_ch4_hx passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:309,Testability,test,test,309,"################################################; ### Gradient check (dot) for flamelet solver ###; ################################################; # 2D planar laminar premixed flame on isothermal burner (restart); # This test restarts on the output of test discadj_flamelet_ch4_hx and; # will only pass if test discadj_flamelet_ch4_hx passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:103,Testability,test,test,103,"# 2D planar laminar premixed flame on isothermal burner with conjugate heat transfer (restart); # This test restarts on the output of test discadj_flamelet_ch4_cht and; # will only pass if test discadj_flamelet_ch4_cht passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:134,Testability,test,test,134,"# 2D planar laminar premixed flame on isothermal burner with conjugate heat transfer (restart); # This test restarts on the output of test discadj_flamelet_ch4_cht and; # will only pass if test discadj_flamelet_ch4_cht passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:189,Testability,test,test,189,"# 2D planar laminar premixed flame on isothermal burner with conjugate heat transfer (restart); # This test restarts on the output of test discadj_flamelet_ch4_cht and; # will only pass if test discadj_flamelet_ch4_cht passes.",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:158,Testability,test,test,158,"##################################################; ### Structural Adjoint - Topology Optimization ###; ##################################################; # test discrete_adjoint.py",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:277,Integrability,depend,depends,277,"####################################################################################; ### Unsteady Disc. adj. compressible RANS Windowed Average only adjoint 		 ###; ####################################################################################; # NACA0012 Airfoil (Test depends on results of ""unsteady_NACA0012_restart_adjoint"")",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:120,Performance,optimiz,optimization,120,"####################################################################; ### Unsteady Disc. adj. compressible RANS restart optimization ###; ####################################################################; # test shape_optimization.py",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py:210,Testability,test,test,210,"####################################################################; ### Unsteady Disc. adj. compressible RANS restart optimization ###; ####################################################################; # test shape_optimization.py",MatchSource.CODE_COMMENT,TestCases/parallel_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/parallel_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:102,Testability,test,testing,102,"#!/usr/bin/env python; ## \file serial_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:91,Testability,test,test,91,"#########################; ## Compressible Euler ###; #########################; # Dry run test Euler",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:8,Testability,test,test,8,"# flaky test on arm64",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:92,Testability,test,test,92,"##########################; ### Compressible N-S ###; ##########################; # Dry run test NS",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:48,Testability,test,test,48,"# X-coarse laminar bend as a mixed element CGNS test",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:18,Testability,test,tests,18,"# Inviscid WEDGE: tests averaged outflow total pressure adjoint",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:138,Testability,test,test,138,"######################################; ### Harmonic Balance ###; ######################################; # Description of the regression test",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:26,Integrability,interface,interface,26,"# Multiple turbomachinery interface restart",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:201,Modifiability,config,config,201,"# Sliding mesh with incompressible flows (unsteady); # slinc_unsteady = TestCase('slinc_unsteady'); # slinc_unsteady.cfg_dir = ""sliding_interface/incompressible_unsteady""; # slinc_unsteady.cfg_file = ""config.cfg""; # slinc_unsteady.test_iter = 19; # slinc_unsteady.test_vals = [-3.515218,1.930028,0.000000,0.000000] #last 4 columns; # slinc_unsteady.timeout = 100; # slinc_unsteady.unsteady = True; # test_list.append(slinc_unsteady); ##########################; ### FEA - FSI ###; ##########################; # Dry run FEA",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:349,Safety,timeout,timeout,349,"# Sliding mesh with incompressible flows (unsteady); # slinc_unsteady = TestCase('slinc_unsteady'); # slinc_unsteady.cfg_dir = ""sliding_interface/incompressible_unsteady""; # slinc_unsteady.cfg_file = ""config.cfg""; # slinc_unsteady.test_iter = 19; # slinc_unsteady.test_vals = [-3.515218,1.930028,0.000000,0.000000] #last 4 columns; # slinc_unsteady.timeout = 100; # slinc_unsteady.unsteady = True; # test_list.append(slinc_unsteady); ##########################; ### FEA - FSI ###; ##########################; # Dry run FEA",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:189,Safety,timeout,timeout,189,"######################################; ### RUN TESTS ###; ######################################; # set suitable defaults unless something else has been specified; # command: ""SU2_CFD""; # timeout: 1600; # tol: 0.00001",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:18,Testability,test,test,18,"# Cylindrical FFD test",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:16,Testability,test,test,16,"# Spherical FFD test",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:16,Testability,test,test,16,"# Spherical FFD test using BSplines",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:108,Testability,test,test,108,"######################################; ### RUN PYTHON TESTS ###; ######################################; # test continuous_adjoint.py",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:2,Testability,test,test,2,"# test shape_optimization.py",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:32,Deployability,continuous,continuous,32,"# Multiple functionals with the continuous adjoint",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:795,Performance,optimiz,optimization,795,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:1496,Performance,optimiz,optimization,1496,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:650,Safety,timeout,timeout,650,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:1341,Safety,timeout,timeout,1341,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:790,Testability,test,test,790,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:1491,Testability,test,test,1491,"# Optimization with multiple objectives, with gradients evaluated individually; # the difference in gradient value relative to combined case; # is due to lack of solution file for the adjoint and small number of iterations; # opt_multiobj_py = TestCase('opt_multiobj_py'); # opt_multiobj_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobj_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # opt_multiobj_py.test_iter = 1; # opt_multiobj_py.test_vals = [1, 1, 1.084701E+02, 3.799222E+00] #last 4 columns; # opt_multiobj_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobj_py.timeout = 1600; # opt_multiobj_py.tol = 0.00001; # pass_list.append(opt_multiobj_py.run_opt()); # test_list.append(opt_multiobj_py); #; # # test optimization, with multiple objectives and gradient evaluated as 'combo'; # opt_multiobjcombo_py = TestCase('opt_multiobjcombo_py'); # opt_multiobjcombo_py.cfg_dir = ""optimization_euler/multiobjective_wedge""; # opt_multiobjcombo_py.cfg_file = ""inv_wedge_ROE_multiobj_combo.cfg""; # opt_multiobjcombo_py.test_iter = 1; # opt_multiobjcombo_py.test_vals = [1, 1, 1.084701E+02, 3.789322E+00] #last 4 columns; # opt_multiobjcombo_py.command = TestCase.Command(exec = ""shape_optimization.py"", param = ""-g CONTINUOUS_ADJOINT -f""); # opt_multiobjcombo_py.timeout = 1600; # opt_multiobjcombo_py.tol = 0.00001; # pass_list.append(opt_multiobjcombo_py.run_opt()); # test_list.append(opt_multiobjcombo_py); # test optimization, with multiple objectives evaluated on a single surface",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:7,Performance,optimiz,optimization,7,"# test optimization, with a single objective evaluated on multiple surfaces",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:2,Testability,test,test,2,"# test optimization, with a single objective evaluated on multiple surfaces",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py:39,Integrability,wrap,wrapper,39,"##########################; ### Python wrapper ###; ##########################; # NACA0012",MatchSource.CODE_COMMENT,TestCases/serial_regression.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:1099,Availability,avail,available,1099,"#!/usr/bin/env python; ## \file serial_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:102,Testability,test,testing,102,"#!/usr/bin/env python; ## \file serial_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:192,Safety,timeout,timeout,192,"######################################; ### RUN TESTS ###; ######################################; # set suitable defaults unless something else has been specified; # command: ""SU2_CFD_AD""; # timeout: 1600; # tol: 0.00001",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:108,Testability,test,test,108,"######################################; ### RUN PYTHON TESTS ###; ######################################; # test discrete_adjoint.py",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:2,Testability,test,test,2,"# test discrete_adjoint with multiple ffd boxes",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:2,Testability,test,test,2,"# test direct_differentiation.py",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:2,Testability,test,test,2,"# test direct_differentiation.py with multiple ffd boxes",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:351,Safety,timeout,timeout,351,"# test continuous_adjoint.py, with multiple objectives; # discadj_multi_py = TestCase('discadj_multi_py'); # discadj_multi_py.cfg_dir = ""cont_adj_euler/wedge""; # discadj_multi_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # discadj_multi_py.test_iter = 10; # discadj_multi_py.command = TestCase.Command(exec = ""discrete_adjoint.py""); # discadj_multi_py.timeout = 1600; # discadj_multi_py.reference_file = ""of_grad_combo.dat.refdiscrete""; # discadj_multi_py.test_file = ""of_grad_combo.dat""; # pass_list.append(discadj_multi_py.run_filediff()); # test_list.append(discadj_multi_py); # FEA AD Flow Load Sensitivity",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py:2,Testability,test,test,2,"# test continuous_adjoint.py, with multiple objectives; # discadj_multi_py = TestCase('discadj_multi_py'); # discadj_multi_py.cfg_dir = ""cont_adj_euler/wedge""; # discadj_multi_py.cfg_file = ""inv_wedge_ROE_multiobj.cfg""; # discadj_multi_py.test_iter = 10; # discadj_multi_py.command = TestCase.Command(exec = ""discrete_adjoint.py""); # discadj_multi_py.timeout = 1600; # discadj_multi_py.reference_file = ""of_grad_combo.dat.refdiscrete""; # discadj_multi_py.test_file = ""of_grad_combo.dat""; # pass_list.append(discadj_multi_py.run_filediff()); # test_list.append(discadj_multi_py); # FEA AD Flow Load Sensitivity",MatchSource.CODE_COMMENT,TestCases/serial_regression_AD.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/serial_regression_AD.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:92,Testability,test,testing,92,"#!/usr/bin/env python; ## \file TestCase.py; # \brief Python class for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:18,Testability,test,test,18,"# Indicate if the test is unsteady",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:18,Testability,test,test,18,"# Indicate if the test is a polar run",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:6,Testability,test,test,6,"# The test condition. These must be set after initialization",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:30,Testability,test,tests,30,"# Options for file-comparison tests",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:41,Modifiability,config,config,41,"# Adjust the number of iterations in the config file",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:38,Safety,timeout,timeout,38,"# This line launches SU2; # check for timeout",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:2,Security,sanitiz,sanitizer,2,"# sanitizer findings result in non-zero return code, no need to examine the output; # Examine the output",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Testability,test,test,12,"# Write the test results; #for j in output:; # print(j)",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:41,Modifiability,config,config,41,"# Adjust the number of iterations in the config file",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:38,Safety,timeout,timeout,38,"# This line launches SU2; # check for timeout",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Availability,error,error,12,"# Check for error output from that process",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:2,Security,sanitiz,sanitizer,2,"# sanitizer tests only check the return code, no need to compare outputs",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Testability,test,tests,12,"# sanitizer tests only check the return code, no need to compare outputs",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:10,Availability,toler,tolerance,10,"# If file tolerance is set to 0, make regular diff",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:36,Availability,toler,tolerance,36,"# Else test word by word with given tolerance",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:7,Testability,test,test,7,"# Else test word by word with given tolerance",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:41,Modifiability,config,config,41,"# Adjust the number of iterations in the config file",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:38,Safety,timeout,timeout,38,"# This line launches SU2; # check for timeout",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:39,Performance,optimiz,optimizer,39,"# Don't bother parsing anything before optimizer starts",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Testability,test,test,12,"# Write the test results; #for j in output:; # print(j)",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:38,Safety,timeout,timeout,38,"# This line launches SU2; # check for timeout",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:2,Security,sanitiz,sanitizer,2,"# sanitizer findings result in non-zero return code, no need to examine the output; # Examine the output",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Testability,test,test,12,"# Write the test results; #for j in output:; # print(j)",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:38,Safety,timeout,timeout,38,"# This line launches SU2; # check for timeout",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:2,Security,sanitiz,sanitizer,2,"# sanitizer findings result in non-zero return code, no need to examine the output; # Examine the output",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:12,Testability,test,test,12,"# Write the test results; #for j in output:; # print(j)",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py:2,Safety,detect,detect,2,"# detect restart",MatchSource.CODE_COMMENT,TestCases/TestCase.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/TestCase.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py:1101,Availability,avail,available,1101,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/tutorials.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py:104,Testability,test,testing,104,"#!/usr/bin/env python; ## \file parallel_regression.py; # \brief Python script for automated regression testing of SU2 examples; # \author A. Aranake, A. Campos, T. Economon, T. Lukaczyk, S. Padron; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # make print(*args) function available in PY2.6+, does'nt work on PY < 2.6",MatchSource.CODE_COMMENT,TestCases/tutorials.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py:55,Integrability,depend,dependent,55,"# 2 species (1 eq) kenics static mixer for composition-dependent model",MatchSource.CODE_COMMENT,TestCases/tutorials.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py:201,Safety,timeout,timeout,201,"######################################; ### RUN TESTS ###; ######################################; # set suitable defaults unless something else has been specified; # command: ""mpirun -n 2 SU2_CFD""; # timeout: 1600; # tol: 0.00001",MatchSource.CODE_COMMENT,TestCases/tutorials.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/tutorials.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py:166,Modifiability,config,configs,166,"#!/usr/bin/env python; ## \file vandv.py; # \brief Regression tests for the V&V repository.; # \note Rules for adding cases here:; # - Use the SU2 --dry_run mode for configs of large tests.; # - Restart from converged results for medium problems.; # - Run small cases (<20s) to convergence.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/vandv.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py:62,Testability,test,tests,62,"#!/usr/bin/env python; ## \file vandv.py; # \brief Regression tests for the V&V repository.; # \note Rules for adding cases here:; # - Use the SU2 --dry_run mode for configs of large tests.; # - Restart from converged results for medium problems.; # - Run small cases (<20s) to convergence.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/vandv.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py:183,Testability,test,tests,183,"#!/usr/bin/env python; ## \file vandv.py; # \brief Regression tests for the V&V repository.; # \note Rules for adding cases here:; # - Use the SU2 --dry_run mode for configs of large tests.; # - Restart from converged results for medium problems.; # - Run small cases (<20s) to convergence.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/vandv.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/vandv.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:9,Modifiability,variab,variables,9,"# Design variables ----------------------------------------------------- #",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:89,Modifiability,config,config,89,"# Parameters ----------------------------------------------------------- #; # The master config `chtMaster.cfg` serves as an SU2 adjoint regression test.; # For a correct gradient validation we need to exchange some options",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:180,Security,validat,validation,180,"# Parameters ----------------------------------------------------------- #; # The master config `chtMaster.cfg` serves as an SU2 adjoint regression test.; # For a correct gradient validation we need to exchange some options",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:148,Testability,test,test,148,"# Parameters ----------------------------------------------------------- #; # The master config `chtMaster.cfg` serves as an SU2 adjoint regression test.; # For a correct gradient validation we need to exchange some options",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:115,Availability,toler,tolerance,115,"# Driver --------------------------------------------------------------- #; # The input variable is the constraint tolerance which is not used for our purpose of finite differences",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py:88,Modifiability,variab,variable,88,"# Driver --------------------------------------------------------------- #; # The input variable is the constraint tolerance which is not used for our purpose of finite differences",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/gradient_validation.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/postprocess.py:2,Performance,load,load,2,"# load files",MatchSource.CODE_COMMENT,TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/postprocess.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/coupled_cht/disc_adj_unsteadyCHT_cylinder/postprocess.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py:70,Performance,load,load,70,"#!/usr/bin/env python; ## \file run.py; # \brief FEA case with custom load.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py:10,Performance,load,load,10,"# Apply a load based on the coordinates.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py:7,Performance,load,load,7,"# Half load due to half dx on first and last node.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:87,Performance,load,load,87,"#!/usr/bin/env python; ## \file run.py; # \brief Unsteady adjoint FEA case with custom load.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:13,Performance,load,load,13,"""""""; Apply a load based on the coordinates and return the derivatives; of the nodal forces with respect to the peak load.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:116,Performance,load,load,116,"""""""; Apply a load based on the coordinates and return the derivatives; of the nodal forces with respect to the peak load.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:7,Performance,load,load,7,"# Half load due to half dx on first and last node.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:54,Performance,load,load,54,"""""""; Runs the primal solver for a given density, peak load, and beam height.; Returns the time average objective function.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:37,Performance,load,load,37,"# Get the ID of the marker where the load is applied.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:10,Performance,load,load,10,"# Apply a load based on the coordinates.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:96,Performance,load,load,96,"""""""; Runs the adjoint solver and returns the sensitivity of the objective function to the peak; load, to the material density, and to the beam height.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:37,Performance,load,load,37,"# Get the ID of the marker where the load is applied.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:17,Performance,load,load,17,"# Apply the same load that was used in the primal problem.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:13,Performance,load,load,13,"# Accumulate load sensitivies (the solver doesn't accumulate; # these for when they are used for FSI adjoints).",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py:24,Performance,load,loads,24,"# Run the primal with 2 loads to compute the sensitivity via finite differences.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/custom_load_fea/run_ad.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/custom_load_fea/run_ad.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/deforming_bump_in_channel/run.py:74,Testability,test,test,74,"# Check the value of an output to cover the functionality in a regression test.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/deforming_bump_in_channel/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/deforming_bump_in_channel/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:155,Performance,load,loads,155,"#!/usr/bin/env python; ## \file run_adjoint.py; # \brief Python script to launch SU2_CFD_AD and compute the sensitivity of the FEA problem respect to flow loads.; # \author Ruben Sanchez; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:19,Modifiability,config,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:26,Integrability,wrap,wrapped,26,"# imports the SU2 adjoint-wrapped module; # -------------------------------------------------------------------; # Main; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:101,Testability,test,test,101,"# Only print on the rank to which the marker belongs.; # WARNING: We only do this for the regression test, there is no guarantee that a marker will only belong to one rank.; # Time loop is defined in Python so that we have acces to SU2 functionalities at each time step",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:13,Performance,load,load,13,"# Define the load at the target vertex",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_fea/flow_load_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py:19,Modifiability,config,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py:26,Integrability,wrap,wrapped,26,"# imports the SU2 adjoint-wrapped module; # -------------------------------------------------------------------; # Main; # -------------------------------------------------------------------",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/disc_adj_flow/mesh_disp_sens/run_adjoint.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py:79,Performance,load,load,79,"#!/usr/bin/env python; ## \file run.py; # \brief Unsteady FSI case with custom load.; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/dyn_fsi/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py:105,Integrability,interface,interface,105,"# Get the ID of the marker where we will apply a force.; # This marker cannot be used by the fluid-solid interface otherwise the imposed; # load will be cleared when interpolating forces.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/dyn_fsi/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py:140,Performance,load,load,140,"# Get the ID of the marker where we will apply a force.; # This marker cannot be used by the fluid-solid interface otherwise the imposed; # load will be cleared when interpolating forces.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/dyn_fsi/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py:153,Usability,clear,cleared,153,"# Get the ID of the marker where we will apply a force.; # This marker cannot be used by the fluid-solid interface otherwise the imposed; # load will be cleared when interpolating forces.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/dyn_fsi/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py:17,Performance,load,load,17,"# Apply a custom load and then solve the time step.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/dyn_fsi/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/dyn_fsi/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py:161,Integrability,wrap,wrapper,161,"#!/usr/bin/env python; ## \file flatPlate_rigidMotion.py; # \brief Python script to launch SU2_CFD with customized unsteady boundary conditions using the Python wrapper.; # \author David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py:19,Modifiability,config,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py:18,Integrability,wrap,wrapped,18,"# imports the SU2 wrapped module",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_rigidMotion/launch_flatPlate_rigidMotion.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:169,Integrability,wrap,wrapper,169,"#!/usr/bin/env python; ## \file launch_unsteady_CHT_FlatPlate.py; # \brief Python script to launch SU2_CFD with customized unsteady boundary conditions using the Python wrapper.; # \author David Thomas; # \version 8.1.0 ""Harrier""; #; # SU2 Project Website: https://su2code.github.io; #; # The SU2 Project is maintained by the SU2 Foundation; # (http://su2foundation.org); #; # Copyright 2012-2024, SU2 Contributors (cf. AUTHORS.md); #; # SU2 is free software; you can redistribute it and/or; # modify it under the terms of the GNU Lesser General Public; # License as published by the Free Software Foundation; either; # version 2.1 of the License, or (at your option) any later version.; #; # SU2 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>.; # ----------------------------------------------------------------------; # Imports; # ----------------------------------------------------------------------",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:19,Deployability,configurat,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:19,Modifiability,config,configuration,19,"# use a parser for configuration",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:18,Integrability,wrap,wrapped,18,"# imports the SU2 wrapped module",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:24,Deployability,update,update,24,"# Tell the SU2 drive to update the boundary conditions",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py:177,Security,access,accessed,177,"# -------------------------------------------------------------------; # Run Main Program; # -------------------------------------------------------------------; # this is only accessed if running from command prompt",MatchSource.CODE_COMMENT,TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/flatPlate_unsteady_CHT/launch_unsteady_CHT_FlatPlate.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/rotating_cylinder/run.py:18,Integrability,wrap,wrapped,18,"# imports the SU2 wrapped module",MatchSource.CODE_COMMENT,TestCases/py_wrapper/rotating_cylinder/run.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/rotating_cylinder/run.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py:20,Deployability,update,updates,20,"""""""; This test case updates the translation and rotation rates given in the config file via the python wrapper; using the python functions SetTranslationRate() and SetRotationRate(). ; Expected results:; | Inner_Iter| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| CFx| CFy| CFz| CMx| CMy| CMz|; A0A=0.0 deg: no lift and moments for the symmetrical airfoil (for reference); | 51| -9.205443| -9.406638| -9.542742| -8.868505| 0.008431| -0.000001| 0.000000| 0.000000| 0.000000| -0.000037|; AoA=0.5 deg: increase in lift (CFy), small pitching moment (CMz) because origin at the leading edge; | 65| -9.016705| -9.182525| -9.424299| -8.656815| 0.009455| 0.133624| 0.000000| 0.000000| 0.000000| 0.045316|; AoA=0.5 deg and rot_z=-30 deg/s: small increase in pitching moment (CMz) and with the origin at the leading edge, the pitch rate adds a little lift (CFy); | 50| -9.031666| -9.303253| -9.288828| -8.652367| 0.009733| 0.153685| 0.000000| 0.000000| 0.000000| 0.053223|; Thus, a check of the final surface forces is an indicator that the update of the moving frame worked properly.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py:1028,Deployability,update,update,1028,"""""""; This test case updates the translation and rotation rates given in the config file via the python wrapper; using the python functions SetTranslationRate() and SetRotationRate(). ; Expected results:; | Inner_Iter| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| CFx| CFy| CFz| CMx| CMy| CMz|; A0A=0.0 deg: no lift and moments for the symmetrical airfoil (for reference); | 51| -9.205443| -9.406638| -9.542742| -8.868505| 0.008431| -0.000001| 0.000000| 0.000000| 0.000000| -0.000037|; AoA=0.5 deg: increase in lift (CFy), small pitching moment (CMz) because origin at the leading edge; | 65| -9.016705| -9.182525| -9.424299| -8.656815| 0.009455| 0.133624| 0.000000| 0.000000| 0.000000| 0.045316|; AoA=0.5 deg and rot_z=-30 deg/s: small increase in pitching moment (CMz) and with the origin at the leading edge, the pitch rate adds a little lift (CFy); | 50| -9.031666| -9.303253| -9.288828| -8.652367| 0.009733| 0.153685| 0.000000| 0.000000| 0.000000| 0.053223|; Thus, a check of the final surface forces is an indicator that the update of the moving frame worked properly.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py:103,Integrability,wrap,wrapper,103,"""""""; This test case updates the translation and rotation rates given in the config file via the python wrapper; using the python functions SetTranslationRate() and SetRotationRate(). ; Expected results:; | Inner_Iter| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| CFx| CFy| CFz| CMx| CMy| CMz|; A0A=0.0 deg: no lift and moments for the symmetrical airfoil (for reference); | 51| -9.205443| -9.406638| -9.542742| -8.868505| 0.008431| -0.000001| 0.000000| 0.000000| 0.000000| -0.000037|; AoA=0.5 deg: increase in lift (CFy), small pitching moment (CMz) because origin at the leading edge; | 65| -9.016705| -9.182525| -9.424299| -8.656815| 0.009455| 0.133624| 0.000000| 0.000000| 0.000000| 0.045316|; AoA=0.5 deg and rot_z=-30 deg/s: small increase in pitching moment (CMz) and with the origin at the leading edge, the pitch rate adds a little lift (CFy); | 50| -9.031666| -9.303253| -9.288828| -8.652367| 0.009733| 0.153685| 0.000000| 0.000000| 0.000000| 0.053223|; Thus, a check of the final surface forces is an indicator that the update of the moving frame worked properly.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py:76,Modifiability,config,config,76,"""""""; This test case updates the translation and rotation rates given in the config file via the python wrapper; using the python functions SetTranslationRate() and SetRotationRate(). ; Expected results:; | Inner_Iter| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| CFx| CFy| CFz| CMx| CMy| CMz|; A0A=0.0 deg: no lift and moments for the symmetrical airfoil (for reference); | 51| -9.205443| -9.406638| -9.542742| -8.868505| 0.008431| -0.000001| 0.000000| 0.000000| 0.000000| -0.000037|; AoA=0.5 deg: increase in lift (CFy), small pitching moment (CMz) because origin at the leading edge; | 65| -9.016705| -9.182525| -9.424299| -8.656815| 0.009455| 0.133624| 0.000000| 0.000000| 0.000000| 0.045316|; AoA=0.5 deg and rot_z=-30 deg/s: small increase in pitching moment (CMz) and with the origin at the leading edge, the pitch rate adds a little lift (CFy); | 50| -9.031666| -9.303253| -9.288828| -8.652367| 0.009733| 0.153685| 0.000000| 0.000000| 0.000000| 0.053223|; Thus, a check of the final surface forces is an indicator that the update of the moving frame worked properly.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py:10,Testability,test,test,10,"""""""; This test case updates the translation and rotation rates given in the config file via the python wrapper; using the python functions SetTranslationRate() and SetRotationRate(). ; Expected results:; | Inner_Iter| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| CFx| CFy| CFz| CMx| CMy| CMz|; A0A=0.0 deg: no lift and moments for the symmetrical airfoil (for reference); | 51| -9.205443| -9.406638| -9.542742| -8.868505| 0.008431| -0.000001| 0.000000| 0.000000| 0.000000| -0.000037|; AoA=0.5 deg: increase in lift (CFy), small pitching moment (CMz) because origin at the leading edge; | 65| -9.016705| -9.182525| -9.424299| -8.656815| 0.009455| 0.133624| 0.000000| 0.000000| 0.000000| 0.045316|; AoA=0.5 deg and rot_z=-30 deg/s: small increase in pitching moment (CMz) and with the origin at the leading edge, the pitch rate adds a little lift (CFy); | 50| -9.031666| -9.303253| -9.288828| -8.652367| 0.009733| 0.153685| 0.000000| 0.000000| 0.000000| 0.053223|; Thus, a check of the final surface forces is an indicator that the update of the moving frame worked properly.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/updated_moving_frame_NACA12/run_su2.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py:24,Performance,load,load,24,"# Preprocess adjoint to load the primal solution.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/wavy_wall/run_steady.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py:53,Performance,load,loading,53,"# Check the surface deformation is the expected from loading the primal results.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/wavy_wall/run_steady.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py:14,Availability,down,downward,14,"# Top deforms downward with a phase shift.",MatchSource.CODE_COMMENT,TestCases/py_wrapper/wavy_wall/run_steady.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py
https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py:89,Performance,load,loaded,89,"""""""; Applies the deformation to the marker or checks that the current mesh; coordinates (loaded by the adjoint solver) match the expected for the time.; """"""",MatchSource.CODE_COMMENT,TestCases/py_wrapper/wavy_wall/run_steady.py,su2code,SU2,v8.1.0,https://su2code.github.io,https://github.com/su2code/SU2/tree/v8.1.0/TestCases/py_wrapper/wavy_wall/run_steady.py
